// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"app.js":[function(require,module,exports) {
var define;
var process = require("process");
var global = arguments[3];
function _typeof3(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;

        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        } // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.


        if (previousRequire) {
          return previousRequire(name, true);
        } // Try the node require function if it exists.


        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};
      var module = cache[name] = new newRequire.Module(name);
      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;

  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;

  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]); // CommonJS

    if ((typeof exports === "undefined" ? "undefined" : _typeof3(exports)) === "object" && typeof module !== "undefined") {
      module.exports = mainExports; // RequireJS
    } else if (typeof define === "function" && define.amd) {
      define(function () {
        return mainExports;
      }); // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  } // Override the current require with this new one


  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
}({
  "../node_modules/object-assign/index.js": [function (require, module, exports) {
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    'use strict';
    /* eslint-disable no-unused-vars */

    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
      if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined');
      }

      return Object(val);
    }

    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        } // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118


        var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

        test1[5] = 'de';

        if (Object.getOwnPropertyNames(test1)[0] === '5') {
          return false;
        } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


        var test2 = {};

        for (var i = 0; i < 10; i++) {
          test2['_' + String.fromCharCode(i)] = i;
        }

        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
          return test2[n];
        });

        if (order2.join('') !== '0123456789') {
          return false;
        } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
          test3[letter] = letter;
        });

        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
          return false;
        }

        return true;
      } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
      }
    }

    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
      var from;
      var to = toObject(target);
      var symbols;

      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);

        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }

        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);

          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }

      return to;
    };
  }, {}],
  "../node_modules/prop-types/lib/ReactPropTypesSecret.js": [function (require, module, exports) {
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    'use strict';

    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    module.exports = ReactPropTypesSecret;
  }, {}],
  "../node_modules/prop-types/checkPropTypes.js": [function (require, module, exports) {
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    'use strict';

    var printWarning = function printWarning() {};

    if ("development" !== 'production') {
      var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

      var loggedTypeFailures = {};
      var has = Function.call.bind(Object.prototype.hasOwnProperty);

      printWarning = function printWarning(text) {
        var message = 'Warning: ' + text;

        if (typeof console !== 'undefined') {
          console.error(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }
    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */


    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if ("development" !== 'production') {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.

            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof3(typeSpecs[typeSpecName]) + '`.');
                err.name = 'Invariant Violation';
                throw err;
              }

              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }

            if (error && !(error instanceof Error)) {
              printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + _typeof3(error) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
            }

            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : '';
              printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
            }
          }
        }
      }
    }
    /**
     * Resets warning cache when testing.
     *
     * @private
     */


    checkPropTypes.resetWarningCache = function () {
      if ("development" !== 'production') {
        loggedTypeFailures = {};
      }
    };

    module.exports = checkPropTypes;
  }, {
    "./lib/ReactPropTypesSecret": "../node_modules/prop-types/lib/ReactPropTypesSecret.js"
  }],
  "../node_modules/react/cjs/react.development.js": [function (require, module, exports) {
    /** @license React v16.14.0
     * react.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    'use strict';

    if ("development" !== "production") {
      (function () {
        'use strict';

        var _assign = require('object-assign');

        var checkPropTypes = require('prop-types/checkPropTypes');

        var ReactVersion = '16.14.0'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.

        var hasSymbol = typeof Symbol === 'function' && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary

        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';

        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || _typeof3(maybeIterable) !== 'object') {
            return null;
          }

          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

          if (typeof maybeIterator === 'function') {
            return maybeIterator;
          }

          return null;
        }
        /**
         * Keeps track of the current dispatcher.
         */


        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        /**
         * Keeps track of the current batch's configuration such as how long an update
         * should suspend for if it needs to.
         */

        var ReactCurrentBatchConfig = {
          suspense: null
        };
        /**
         * Keeps track of the current owner.
         *
         * The current owner is the component who should own any components that are
         * currently being constructed.
         */

        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

        function describeComponentFrame(name, source, ownerName) {
          var sourceInfo = '';

          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, '');
            {
              // In DEV, include code for a common special case:
              // prefer "folder/index.js" instead of just "index.js".
              if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);

                if (match) {
                  var pathBeforeSlash = match[1];

                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                    fileName = folderName + '/' + fileName;
                  }
                }
              }
            }
            sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
          } else if (ownerName) {
            sourceInfo = ' (created by ' + ownerName + ')';
          }

          return '\n    in ' + (name || 'Unknown') + sourceInfo;
        }

        var Resolved = 1;

        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }

        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || '';
          return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
        }

        function getComponentName(type) {
          if (type == null) {
            // Host root, text node or just invalid type.
            return null;
          }

          {
            if (typeof type.tag === 'number') {
              error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
            }
          }

          if (typeof type === 'function') {
            return type.displayName || type.name || null;
          }

          if (typeof type === 'string') {
            return type;
          }

          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return 'Fragment';

            case REACT_PORTAL_TYPE:
              return 'Portal';

            case REACT_PROFILER_TYPE:
              return "Profiler";

            case REACT_STRICT_MODE_TYPE:
              return 'StrictMode';

            case REACT_SUSPENSE_TYPE:
              return 'Suspense';

            case REACT_SUSPENSE_LIST_TYPE:
              return 'SuspenseList';
          }

          if (_typeof3(type) === 'object') {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return 'Context.Consumer';

              case REACT_PROVIDER_TYPE:
                return 'Context.Provider';

              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');

              case REACT_MEMO_TYPE:
                return getComponentName(type.type);

              case REACT_BLOCK_TYPE:
                return getComponentName(type.render);

              case REACT_LAZY_TYPE:
                {
                  var thenable = type;
                  var resolvedThenable = refineResolvedLazyComponent(thenable);

                  if (resolvedThenable) {
                    return getComponentName(resolvedThenable);
                  }

                  break;
                }
            }
          }

          return null;
        }

        var ReactDebugCurrentFrame = {};
        var currentlyValidatingElement = null;

        function setCurrentlyValidatingElement(element) {
          {
            currentlyValidatingElement = element;
          }
        }

        {
          // Stack implementation injected by the current renderer.
          ReactDebugCurrentFrame.getCurrentStack = null;

          ReactDebugCurrentFrame.getStackAddendum = function () {
            var stack = ''; // Add an extra top frame while an element is being validated

            if (currentlyValidatingElement) {
              var name = getComponentName(currentlyValidatingElement.type);
              var owner = currentlyValidatingElement._owner;
              stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
            } // Delegate to the injected renderer-specific implementation


            var impl = ReactDebugCurrentFrame.getCurrentStack;

            if (impl) {
              stack += impl() || '';
            }

            return stack;
          };
        }
        /**
         * Used by act() to track whether you're inside an act() scope.
         */

        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher: ReactCurrentDispatcher,
          ReactCurrentBatchConfig: ReactCurrentBatchConfig,
          ReactCurrentOwner: ReactCurrentOwner,
          IsSomeRendererActing: IsSomeRendererActing,
          // Used by renderers to avoid bundling object-assign twice in UMD bundles:
          assign: _assign
        };
        {
          _assign(ReactSharedInternals, {
            // These should not be included in production.
            ReactDebugCurrentFrame: ReactDebugCurrentFrame,
            // Shim for React DOM 16.0.0 which still destructured (but not used) this.
            // TODO: remove in React 17.0.
            ReactComponentTreeHook: {}
          });
        } // by calls to these methods by a Babel plugin.
        //
        // In PROD (or in packages without access to React internals),
        // they are left as they are instead.

        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            printWarning('warn', format, args);
          }
        }

        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }

            printWarning('error', format, args);
          }
        }

        function printWarning(level, format, args) {
          // When changing this logic, you might want to also
          // update consoleWithStackDev.www.js as well.
          {
            var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

            if (!hasExistingStack) {
              var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame.getStackAddendum();

              if (stack !== '') {
                format += '%s';
                args = args.concat([stack]);
              }
            }

            var argsWithFormat = args.map(function (item) {
              return '' + item;
            }); // Careful: RN currently depends on this prefix

            argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
            // breaks IE9: https://github.com/facebook/react/issues/13610
            // eslint-disable-next-line react-internal/no-production-logging

            Function.prototype.apply.call(console[level], console, argsWithFormat);

            try {
              // --- Welcome to debugging React ---
              // This error was thrown as a convenience so that you can use this stack
              // to find the callsite that caused this warning to fire.
              var argIndex = 0;
              var message = 'Warning: ' + format.replace(/%s/g, function () {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x) {}
          }
        }

        var didWarnStateUpdateForUnmountedComponent = {};

        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
            var warningKey = componentName + "." + callerName;

            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }

            error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        /**
         * This is the abstract API for an update queue.
         */


        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function isMounted(publicInstance) {
            return false;
          },

          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
          },

          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
          },

          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        /**
         * Base class helpers for the updating state of a component.
         */

        function Component(props, context, updater) {
          this.props = props;
          this.context = context; // If a component has string refs, we will assign a different object later.

          this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
          // renderer.

          this.updater = updater || ReactNoopUpdateQueue;
        }

        Component.prototype.isReactComponent = {};
        /**
         * Sets a subset of the state. Always use this to mutate
         * state. You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * There is no guarantee that calls to `setState` will run synchronously,
         * as they may eventually be batched together.  You can provide an optional
         * callback that will be executed when the call to setState is actually
         * completed.
         *
         * When a function is provided to setState, it will be called at some point in
         * the future (not synchronously). It will be called with the up to date
         * component arguments (state, props, context). These values can be different
         * from this.* because your function may be called after receiveProps but before
         * shouldComponentUpdate, and this new state, props, and context will not yet be
         * assigned to this.
         *
         * @param {object|function} partialState Next partial state or function to
         *        produce next partial state to be merged with current state.
         * @param {?function} callback Called after state is updated.
         * @final
         * @protected
         */

        Component.prototype.setState = function (partialState, callback) {
          if (!(_typeof3(partialState) === 'object' || typeof partialState === 'function' || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }

          this.updater.enqueueSetState(this, partialState, callback, 'setState');
        };
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {?function} callback Called after update is complete.
         * @final
         * @protected
         */


        Component.prototype.forceUpdate = function (callback) {
          this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
        };
        /**
         * Deprecated APIs. These APIs used to exist on classic React classes but since
         * we would like to deprecate them, we're not going to move them over to this
         * modern base class. Instead, we define a getter that warns if it's accessed.
         */


        {
          var deprecatedAPIs = {
            isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
            replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
          };

          var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function get() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
              }
            });
          };

          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }

        function ComponentDummy() {}

        ComponentDummy.prototype = Component.prototype;
        /**
         * Convenience component with default shallow equality check for sCU.
         */

        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context; // If a component has string refs, we will assign a different object later.

          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }

        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

        _assign(pureComponentPrototype, Component.prototype);

        pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value

        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }

        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }

        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, 'ref')) {
              var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== undefined;
        }

        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, 'key')) {
              var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== undefined;
        }

        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function warnAboutAccessingKey() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
              }
            }
          };

          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }

        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function warnAboutAccessingRef() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
              }
            }
          };

          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }

        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);

              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        /**
         * Factory method to create a new React element. This no longer adheres to
         * the class pattern, so do not use new to call it. Also, instanceof check
         * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
         * if something is a React Element.
         *
         * @param {*} type
         * @param {*} props
         * @param {*} key
         * @param {string|object} ref
         * @param {*} owner
         * @param {*} self A *temporary* helper to detect places where `this` is
         * different from the `owner` when React.createElement is called, so that we
         * can warn. We want to get rid of owner and replace string `ref`s with arrow
         * functions, and as long as `this` and owner are the same, there will be no
         * change in behavior.
         * @param {*} source An annotation object (added by a transpiler or otherwise)
         * indicating filename, line number, and/or other information.
         * @internal
         */


        var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            // The validation flag is currently mutative. We put it on
            // an external backing store so that we can freeze the whole object.
            // This can be replaced with a WeakMap once they are implemented in
            // commonly used development environments.
            element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
            // the validation flag non-enumerable (where possible, which should
            // include every environment we run tests in), so the test framework
            // ignores it.

            Object.defineProperty(element._store, 'validated', {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            }); // self and source are DEV only properties.

            Object.defineProperty(element, '_self', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            }); // Two elements created in two different places should be considered
            // equal for testing purposes and therefore we hide it from enumeration.

            Object.defineProperty(element, '_source', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });

            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        /**
         * Create and return a new ReactElement of the given type.
         * See https://reactjs.org/docs/react-api.html#createelement
         */


        function createElement(type, config, children) {
          var propName; // Reserved names are extracted

          var props = {};
          var key = null;
          var ref = null;
          var self = null;
          var source = null;

          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }

            if (hasValidKey(config)) {
              key = '' + config.key;
            }

            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          } // Children can be more than one argument, and those are transferred onto
          // the newly allocated props object.


          var childrenLength = arguments.length - 2;

          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);

            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }

            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          } // Resolve default props


          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;

            for (propName in defaultProps) {
              if (props[propName] === undefined) {
                props[propName] = defaultProps[propName];
              }
            }
          }

          {
            if (key || ref) {
              var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }

              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }

        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        /**
         * Clone and return a new ReactElement using element as the starting point.
         * See https://reactjs.org/docs/react-api.html#cloneelement
         */


        function cloneElement(element, config, children) {
          if (!!(element === null || element === undefined)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }

          var propName; // Original props are copied

          var props = _assign({}, element.props); // Reserved names are extracted


          var key = element.key;
          var ref = element.ref; // Self is preserved since the owner is preserved.

          var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
          // transpiler, and the original source is probably a better indicator of the
          // true owner.

          var source = element._source; // Owner will be preserved, unless ref is overridden

          var owner = element._owner;

          if (config != null) {
            if (hasValidRef(config)) {
              // Silently steal the ref from the parent.
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }

            if (hasValidKey(config)) {
              key = '' + config.key;
            } // Remaining properties override existing props


            var defaultProps;

            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }

            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) {
                  // Resolve default props
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          } // Children can be more than one argument, and those are transferred onto
          // the newly allocated props object.


          var childrenLength = arguments.length - 2;

          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);

            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }

            props.children = childArray;
          }

          return ReactElement(element.type, key, ref, self, source, owner, props);
        }
        /**
         * Verifies the object is a ReactElement.
         * See https://reactjs.org/docs/react-api.html#isvalidelement
         * @param {?object} object
         * @return {boolean} True if `object` is a ReactElement.
         * @final
         */


        function isValidElement(object) {
          return _typeof3(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }

        var SEPARATOR = '.';
        var SUBSEPARATOR = ':';
        /**
         * Escape and wrap key so it is safe to use as a reactid
         *
         * @param {string} key to be escaped.
         * @return {string} the escaped key.
         */

        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            '=': '=0',
            ':': '=2'
          };
          var escapedString = ('' + key).replace(escapeRegex, function (match) {
            return escaperLookup[match];
          });
          return '$' + escapedString;
        }
        /**
         * TODO: Test that a single child and an array with one item have the same key
         * pattern.
         */


        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;

        function escapeUserProvidedKey(text) {
          return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
        }

        var POOL_SIZE = 10;
        var traverseContextPool = [];

        function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
          if (traverseContextPool.length) {
            var traverseContext = traverseContextPool.pop();
            traverseContext.result = mapResult;
            traverseContext.keyPrefix = keyPrefix;
            traverseContext.func = mapFunction;
            traverseContext.context = mapContext;
            traverseContext.count = 0;
            return traverseContext;
          } else {
            return {
              result: mapResult,
              keyPrefix: keyPrefix,
              func: mapFunction,
              context: mapContext,
              count: 0
            };
          }
        }

        function releaseTraverseContext(traverseContext) {
          traverseContext.result = null;
          traverseContext.keyPrefix = null;
          traverseContext.func = null;
          traverseContext.context = null;
          traverseContext.count = 0;

          if (traverseContextPool.length < POOL_SIZE) {
            traverseContextPool.push(traverseContext);
          }
        }
        /**
         * @param {?*} children Children tree container.
         * @param {!string} nameSoFar Name of the key path so far.
         * @param {!function} callback Callback to invoke with each child found.
         * @param {?*} traverseContext Used to pass information throughout the traversal
         * process.
         * @return {!number} The number of children in this subtree.
         */


        function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
          var type = _typeof3(children);

          if (type === 'undefined' || type === 'boolean') {
            // All of the above are perceived as null.
            children = null;
          }

          var invokeCallback = false;

          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case 'string':
              case 'number':
                invokeCallback = true;
                break;

              case 'object':
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }

            }
          }

          if (invokeCallback) {
            callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows.
            nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
            return 1;
          }

          var child;
          var nextName;
          var subtreeCount = 0; // Count of children found in the current subtree.

          var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getComponentKey(child, i);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else {
            var iteratorFn = getIteratorFn(children);

            if (typeof iteratorFn === 'function') {
              {
                // Warn about using Maps as children
                if (iteratorFn === children.entries) {
                  if (!didWarnAboutMaps) {
                    warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
                  }

                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(children);
              var step;
              var ii = 0;

              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getComponentKey(child, ii++);
                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
              }
            } else if (type === 'object') {
              var addendum = '';
              {
                addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
              }
              var childrenString = '' + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum);
                }
              }
            }
          }

          return subtreeCount;
        }
        /**
         * Traverses children that are typically specified as `props.children`, but
         * might also be specified through attributes:
         *
         * - `traverseAllChildren(this.props.children, ...)`
         * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
         *
         * The `traverseContext` is an optional argument that is passed through the
         * entire traversal. It can be used to store accumulations or anything else that
         * the callback might find relevant.
         *
         * @param {?*} children Children tree object.
         * @param {!function} callback To invoke upon traversing each child.
         * @param {?*} traverseContext Context for traversal.
         * @return {!number} The number of children in this subtree.
         */


        function traverseAllChildren(children, callback, traverseContext) {
          if (children == null) {
            return 0;
          }

          return traverseAllChildrenImpl(children, '', callback, traverseContext);
        }
        /**
         * Generate a key string that identifies a component within a set.
         *
         * @param {*} component A component that could contain a manual key.
         * @param {number} index Index that is used if a manual key is not provided.
         * @return {string}
         */


        function getComponentKey(component, index) {
          // Do some typechecking here since we call this blindly. We want to ensure
          // that we don't block potential future ES APIs.
          if (_typeof3(component) === 'object' && component !== null && component.key != null) {
            // Explicit key
            return escape(component.key);
          } // Implicit key determined by the index in the set


          return index.toString(36);
        }

        function forEachSingleChild(bookKeeping, child, name) {
          var func = bookKeeping.func,
              context = bookKeeping.context;
          func.call(context, child, bookKeeping.count++);
        }
        /**
         * Iterates through children that are typically specified as `props.children`.
         *
         * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
         *
         * The provided forEachFunc(child, index) will be called for each
         * leaf child.
         *
         * @param {?*} children Children tree container.
         * @param {function(*, int)} forEachFunc
         * @param {*} forEachContext Context for forEachContext.
         */


        function forEachChildren(children, forEachFunc, forEachContext) {
          if (children == null) {
            return children;
          }

          var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
          traverseAllChildren(children, forEachSingleChild, traverseContext);
          releaseTraverseContext(traverseContext);
        }

        function mapSingleChildIntoContext(bookKeeping, child, childKey) {
          var result = bookKeeping.result,
              keyPrefix = bookKeeping.keyPrefix,
              func = bookKeeping.func,
              context = bookKeeping.context;
          var mappedChild = func.call(context, child, bookKeeping.count++);

          if (Array.isArray(mappedChild)) {
            mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
              // traverseAllChildren used to do for objects as children
              keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
            }

            result.push(mappedChild);
          }
        }

        function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
          var escapedPrefix = '';

          if (prefix != null) {
            escapedPrefix = escapeUserProvidedKey(prefix) + '/';
          }

          var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
          traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
          releaseTraverseContext(traverseContext);
        }
        /**
         * Maps children that are typically specified as `props.children`.
         *
         * See https://reactjs.org/docs/react-api.html#reactchildrenmap
         *
         * The provided mapFunction(child, key, index) will be called for each
         * leaf child.
         *
         * @param {?*} children Children tree container.
         * @param {function(*, int)} func The map function.
         * @param {*} context Context for mapFunction.
         * @return {object} Object containing the ordered map of results.
         */


        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }

          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, func, context);
          return result;
        }
        /**
         * Count the number of children that are typically specified as
         * `props.children`.
         *
         * See https://reactjs.org/docs/react-api.html#reactchildrencount
         *
         * @param {?*} children Children tree container.
         * @return {number} The number of children.
         */


        function countChildren(children) {
          return traverseAllChildren(children, function () {
            return null;
          }, null);
        }
        /**
         * Flatten a children object (typically specified as `props.children`) and
         * return an array with appropriately re-keyed children.
         *
         * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
         */


        function toArray(children) {
          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
            return child;
          });
          return result;
        }
        /**
         * Returns the first child in a collection of children and verifies that there
         * is only one child in the collection.
         *
         * See https://reactjs.org/docs/react-api.html#reactchildrenonly
         *
         * The current implementation of this function assumes that a single child gets
         * passed without a wrapper, but the purpose of this helper function is to
         * abstract away the particular structure of children.
         *
         * @param {?object} children Child collection structure.
         * @return {ReactElement} The first and only `ReactElement` contained in the
         * structure.
         */


        function onlyChild(children) {
          if (!isValidElement(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }

          return children;
        }

        function createContext(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === undefined) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
                error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
              }
            }
          }

          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          {
            // A separate object, but proxies back to the original context object for
            // backwards compatibility. It has a different $$typeof, so we can properly
            // warn for the incorrect usage of Context as a Consumer.
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits
            }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

            Object.defineProperties(Consumer, {
              Provider: {
                get: function get() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
                  }

                  return context.Provider;
                },
                set: function set(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function get() {
                  return context._currentValue;
                },
                set: function set(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function get() {
                  return context._currentValue2;
                },
                set: function set(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function get() {
                  return context._threadCount;
                },
                set: function set(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function get() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                  }

                  return context.Consumer;
                }
              }
            }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }

        function lazy(ctor) {
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _ctor: ctor,
            // React uses these fields to store the result.
            _status: -1,
            _result: null
          };
          {
            // In production, this would just set it on the object.
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function get() {
                  return defaultProps;
                },
                set: function set(newDefaultProps) {
                  error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                  defaultProps = newDefaultProps; // Match production behavior more closely:

                  Object.defineProperty(lazyType, 'defaultProps', {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function get() {
                  return propTypes;
                },
                set: function set(newPropTypes) {
                  error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                  propTypes = newPropTypes; // Match production behavior more closely:

                  Object.defineProperty(lazyType, 'propTypes', {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }

        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
            } else if (typeof render !== 'function') {
              error('forwardRef requires a render function but was given %s.', render === null ? 'null' : _typeof3(render));
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
              }
            }

            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
              }
            }
          }
          return {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
          };
        }

        function isValidElementType(type) {
          return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || _typeof3(type) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }

        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : _typeof3(type));
            }
          }
          return {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
          };
        }

        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;

          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }

          return dispatcher;
        }

        function useContext(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== undefined) {
              error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
            } // TODO: add a more generic warning for invalid values.


            if (Context._context !== undefined) {
              var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
              // and nobody should be using this in existing code.

              if (realContext.Consumer === Context) {
                error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
              } else if (realContext.Provider === Context) {
                error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }

        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }

        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }

        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }

        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }

        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }

        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }

        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }

        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }

        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }

        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }

        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);

            if (name) {
              return '\n\nCheck the render method of `' + name + '`.';
            }
          }

          return '';
        }

        function getSourceInfoErrorAddendum(source) {
          if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
          }

          return '';
        }

        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== undefined) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }

          return '';
        }
        /**
         * Warn if there's no key explicitly set on dynamic arrays of children or
         * object keys are not valid. This allows us to keep track of children between
         * updates.
         */


        var ownerHasKeyUseWarning = {};

        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();

          if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }

          return info;
        }
        /**
         * Warn if the element doesn't have an explicit key assigned to it.
         * This element is in an array. The array could grow and shrink or be
         * reordered. All children that haven't already been validated are required to
         * have a "key" property assigned to it. Error statuses are cached so a warning
         * will only be shown once.
         *
         * @internal
         * @param {ReactElement} element Element that requires a key.
         * @param {*} parentType element's parent's type.
         */


        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }

          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }

          ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
          // property, it may be the creator of the child that's responsible for
          // assigning it a key.

          var childOwner = '';

          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            // Give the component that originally created this child.
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }

          setCurrentlyValidatingElement(element);
          {
            error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
          }
          setCurrentlyValidatingElement(null);
        }
        /**
         * Ensure that every element either is passed in a static location, in an
         * array with an explicit keys property defined, or in an object literal
         * with valid key property.
         *
         * @internal
         * @param {ReactNode} node Statically passed child of any type.
         * @param {*} parentType node's parent's type.
         */


        function validateChildKeys(node, parentType) {
          if (_typeof3(node) !== 'object') {
            return;
          }

          if (Array.isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];

              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            // This element was passed in a valid location.
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);

            if (typeof iteratorFn === 'function') {
              // Entry iterators used to provide implicit keys,
              // but now we print a separate warning for them later.
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;

                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        /**
         * Given an element, validate that its props follow the propTypes definition,
         * provided by the type.
         *
         * @param {ReactElement} element
         */


        function validatePropTypes(element) {
          {
            var type = element.type;

            if (type === null || type === undefined || typeof type === 'string') {
              return;
            }

            var name = getComponentName(type);
            var propTypes;

            if (typeof type === 'function') {
              propTypes = type.propTypes;
            } else if (_typeof3(type) === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }

            if (propTypes) {
              setCurrentlyValidatingElement(element);
              checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
              setCurrentlyValidatingElement(null);
            } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
            }

            if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
              error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
            }
          }
        }
        /**
         * Given a fragment, validate that it can only be provided with fragment props
         * @param {ReactElement} fragment
         */


        function validateFragmentProps(fragment) {
          {
            setCurrentlyValidatingElement(fragment);
            var keys = Object.keys(fragment.props);

            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];

              if (key !== 'children' && key !== 'key') {
                error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
                break;
              }
            }

            if (fragment.ref !== null) {
              error('Invalid attribute `ref` supplied to `React.Fragment`.');
            }

            setCurrentlyValidatingElement(null);
          }
        }

        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
          // succeed and there will likely be errors in render.

          if (!validType) {
            var info = '';

            if (type === undefined || _typeof3(type) === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
            }

            var sourceInfo = getSourceInfoErrorAddendumForProps(props);

            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }

            var typeString;

            if (type === null) {
              typeString = 'null';
            } else if (Array.isArray(type)) {
              typeString = 'array';
            } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
              info = ' Did you accidentally export a JSX literal instead of a component?';
            } else {
              typeString = _typeof3(type);
            }

            {
              error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
            }
          }

          var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
          // TODO: Drop this when these are no longer allowed as the type argument.

          if (element == null) {
            return element;
          } // Skip key warning if the type isn't valid since our key validation logic
          // doesn't expect a non-string/function type and can throw confusing errors.
          // We don't want exception behavior to differ between dev and prod.
          // (Rendering will throw with a helpful message and as soon as the type is
          // fixed, the key warnings will appear.)


          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }

          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }

          return element;
        }

        var didWarnAboutDeprecatedCreateFactory = false;

        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
            } // Legacy hook: remove it


            Object.defineProperty(validatedFactory, 'type', {
              enumerable: false,
              get: function get() {
                warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
                Object.defineProperty(this, 'type', {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }

        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);

          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }

          validatePropTypes(newElement);
          return newElement;
        }

        {
          try {
            var frozenObject = Object.freeze({});
            var testMap = new Map([[frozenObject, null]]);
            var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
            // https://github.com/rollup/rollup/issues/1771
            // TODO: we can remove these if Rollup fixes the bug.

            testMap.set(0, 0);
            testSet.add(0);
          } catch (e) {}
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.useCallback = useCallback;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useEffect = useEffect;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef;
        exports.useState = useState;
        exports.version = ReactVersion;
      })();
    }
  }, {
    "object-assign": "../node_modules/object-assign/index.js",
    "prop-types/checkPropTypes": "../node_modules/prop-types/checkPropTypes.js"
  }],
  "../node_modules/react/index.js": [function (require, module, exports) {
    'use strict';

    if ("development" === 'production') {
      module.exports = require('./cjs/react.production.min.js');
    } else {
      module.exports = require('./cjs/react.development.js');
    }
  }, {
    "./cjs/react.development.js": "../node_modules/react/cjs/react.development.js"
  }],
  "../node_modules/scheduler/cjs/scheduler.development.js": [function (require, module, exports) {
    /** @license React v0.20.1
     * scheduler.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    'use strict';

    if ("development" !== "production") {
      (function () {
        'use strict';

        var enableSchedulerDebugging = false;
        var enableProfiling = true;

        var _requestHostCallback;

        var requestHostTimeout;
        var cancelHostTimeout;
        var requestPaint;
        var hasPerformanceNow = (typeof performance === "undefined" ? "undefined" : _typeof3(performance)) === 'object' && typeof performance.now === 'function';

        if (hasPerformanceNow) {
          var localPerformance = performance;

          exports.unstable_now = function () {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();

          exports.unstable_now = function () {
            return localDate.now() - initialTime;
          };
        }

        if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
        // implementation using setTimeout.
        typeof window === 'undefined' || // Check if MessageChannel is supported, too.
        typeof MessageChannel !== 'function') {
          // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
          // fallback to a naive implementation.
          var _callback = null;
          var _timeoutID = null;

          var _flushCallback = function _flushCallback() {
            if (_callback !== null) {
              try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;

                _callback(hasRemainingTime, currentTime);

                _callback = null;
              } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
              }
            }
          };

          _requestHostCallback = function requestHostCallback(cb) {
            if (_callback !== null) {
              // Protect against re-entrancy.
              setTimeout(_requestHostCallback, 0, cb);
            } else {
              _callback = cb;
              setTimeout(_flushCallback, 0);
            }
          };

          requestHostTimeout = function requestHostTimeout(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
          };

          cancelHostTimeout = function cancelHostTimeout() {
            clearTimeout(_timeoutID);
          };

          exports.unstable_shouldYield = function () {
            return false;
          };

          requestPaint = exports.unstable_forceFrameRate = function () {};
        } else {
          // Capture local references to native APIs, in case a polyfill overrides them.
          var _setTimeout = window.setTimeout;
          var _clearTimeout = window.clearTimeout;

          if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;

            if (typeof requestAnimationFrame !== 'function') {
              // Using console['error'] to evade Babel and ESLint
              console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
            }

            if (typeof cancelAnimationFrame !== 'function') {
              // Using console['error'] to evade Babel and ESLint
              console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
            }
          }

          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
          // thread, like user events. By default, it yields multiple times per frame.
          // It does not attempt to align with frame boundaries, since most tasks don't
          // need to be frame aligned; for those that do, use requestAnimationFrame.

          var yieldInterval = 5;
          var deadline = 0; // TODO: Make this configurable

          {
            // `isInputPending` is not available. Since we have no way of knowing if
            // there's pending input, always yield at the end of the frame.
            exports.unstable_shouldYield = function () {
              return exports.unstable_now() >= deadline;
            }; // Since we yield every frame regardless, `requestPaint` has no effect.


            requestPaint = function requestPaint() {};
          }

          exports.unstable_forceFrameRate = function (fps) {
            if (fps < 0 || fps > 125) {
              // Using console['error'] to evade Babel and ESLint
              console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
              return;
            }

            if (fps > 0) {
              yieldInterval = Math.floor(1000 / fps);
            } else {
              // reset the framerate
              yieldInterval = 5;
            }
          };

          var performWorkUntilDeadline = function performWorkUntilDeadline() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
              // cycle. This means there's always time remaining at the beginning of
              // the message event.

              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = true;

              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  // If there's more work, schedule the next message event at the end
                  // of the preceding one.
                  port.postMessage(null);
                }
              } catch (error) {
                // If a scheduler task throws, exit the current browser task so the
                // error can be observed.
                port.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            } // Yielding to the browser will give it a chance to paint, so we can

          };

          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;

          _requestHostCallback = function _requestHostCallback(callback) {
            scheduledHostCallback = callback;

            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          };

          requestHostTimeout = function requestHostTimeout(callback, ms) {
            taskTimeoutID = _setTimeout(function () {
              callback(exports.unstable_now());
            }, ms);
          };

          cancelHostTimeout = function cancelHostTimeout() {
            _clearTimeout(taskTimeoutID);

            taskTimeoutID = -1;
          };
        }

        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }

        function peek(heap) {
          var first = heap[0];
          return first === undefined ? null : first;
        }

        function pop(heap) {
          var first = heap[0];

          if (first !== undefined) {
            var last = heap.pop();

            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }

            return first;
          } else {
            return null;
          }
        }

        function siftUp(heap, node, i) {
          var index = i;

          while (true) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];

            if (parent !== undefined && compare(parent, node) > 0) {
              // The parent is larger. Swap positions.
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              // The parent is smaller. Exit.
              return;
            }
          }
        }

        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;

          while (index < length) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

            if (left !== undefined && compare(left, node) < 0) {
              if (right !== undefined && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (right !== undefined && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              // Neither child is smaller. Exit.
              return;
            }
          }
        }

        function compare(a, b) {
          // Compare sort index first, then task id.
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        } // TODO: Use symbols?


        var NoPriority = 0;
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        var runIdCounter = 0;
        var mainThreadIdCounter = 0;
        var profilingStateSize = 4;
        var sharedProfilingBuffer = // $FlowFixMe Flow doesn't know about SharedArrayBuffer
        typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
        typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
        ;
        var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

        var PRIORITY = 0;
        var CURRENT_TASK_ID = 1;
        var CURRENT_RUN_ID = 2;
        var QUEUE_SIZE = 3;
        {
          profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
          // array might include canceled tasks.

          profilingState[QUEUE_SIZE] = 0;
          profilingState[CURRENT_TASK_ID] = 0;
        } // Bytes per element is 4

        var INITIAL_EVENT_LOG_SIZE = 131072;
        var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

        var eventLogSize = 0;
        var eventLogBuffer = null;
        var eventLog = null;
        var eventLogIndex = 0;
        var TaskStartEvent = 1;
        var TaskCompleteEvent = 2;
        var TaskErrorEvent = 3;
        var TaskCancelEvent = 4;
        var TaskRunEvent = 5;
        var TaskYieldEvent = 6;
        var SchedulerSuspendEvent = 7;
        var SchedulerResumeEvent = 8;

        function logEvent(entries) {
          if (eventLog !== null) {
            var offset = eventLogIndex;
            eventLogIndex += entries.length;

            if (eventLogIndex + 1 > eventLogSize) {
              eventLogSize *= 2;

              if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                // Using console['error'] to evade Babel and ESLint
                console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
                stopLoggingProfilingEvents();
                return;
              }

              var newEventLog = new Int32Array(eventLogSize * 4);
              newEventLog.set(eventLog);
              eventLogBuffer = newEventLog.buffer;
              eventLog = newEventLog;
            }

            eventLog.set(entries, offset);
          }
        }

        function startLoggingProfilingEvents() {
          eventLogSize = INITIAL_EVENT_LOG_SIZE;
          eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
          eventLog = new Int32Array(eventLogBuffer);
          eventLogIndex = 0;
        }

        function stopLoggingProfilingEvents() {
          var buffer = eventLogBuffer;
          eventLogSize = 0;
          eventLogBuffer = null;
          eventLog = null;
          eventLogIndex = 0;
          return buffer;
        }

        function markTaskStart(task, ms) {
          {
            profilingState[QUEUE_SIZE]++;

            if (eventLog !== null) {
              // performance.now returns a float, representing milliseconds. When the
              // event is logged, it's coerced to an int. Convert to microseconds to
              // maintain extra degrees of precision.
              logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
            }
          }
        }

        function markTaskCompleted(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;

            if (eventLog !== null) {
              logEvent([TaskCompleteEvent, ms * 1000, task.id]);
            }
          }
        }

        function markTaskCanceled(task, ms) {
          {
            profilingState[QUEUE_SIZE]--;

            if (eventLog !== null) {
              logEvent([TaskCancelEvent, ms * 1000, task.id]);
            }
          }
        }

        function markTaskErrored(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;

            if (eventLog !== null) {
              logEvent([TaskErrorEvent, ms * 1000, task.id]);
            }
          }
        }

        function markTaskRun(task, ms) {
          {
            runIdCounter++;
            profilingState[PRIORITY] = task.priorityLevel;
            profilingState[CURRENT_TASK_ID] = task.id;
            profilingState[CURRENT_RUN_ID] = runIdCounter;

            if (eventLog !== null) {
              logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
            }
          }
        }

        function markTaskYield(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[CURRENT_RUN_ID] = 0;

            if (eventLog !== null) {
              logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
            }
          }
        }

        function markSchedulerSuspended(ms) {
          {
            mainThreadIdCounter++;

            if (eventLog !== null) {
              logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
            }
          }
        }

        function markSchedulerUnsuspended(ms) {
          {
            if (eventLog !== null) {
              logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
            }
          }
        }
        /* eslint-disable no-var */
        // Math.pow(2, 30) - 1
        // 0b111111111111111111111111111111


        var maxSigned31BitInt = 1073741823; // Times out immediately

        var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5000;
        var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

        var taskQueue = [];
        var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

        var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.

        var currentTask = null;
        var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;

        function advanceTimers(currentTime) {
          // Check for tasks that are no longer delayed and add them to the queue.
          var timer = peek(timerQueue);

          while (timer !== null) {
            if (timer.callback === null) {
              // Timer was cancelled.
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              // Timer fired. Transfer to the task queue.
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
              {
                markTaskStart(timer, currentTime);
                timer.isQueued = true;
              }
            } else {
              // Remaining timers are pending.
              return;
            }

            timer = peek(timerQueue);
          }
        }

        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);

          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;

              _requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);

              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }

        function flushWork(hasTimeRemaining, initialTime) {
          {
            markSchedulerUnsuspended(initialTime);
          } // We'll need a host callback the next time work is scheduled.

          isHostCallbackScheduled = false;

          if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }

          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;

          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }

                throw error;
              }
            } else {
              // No catch in prod code path.
              return workLoop(hasTimeRemaining, initialTime);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
            {
              var _currentTime = exports.unstable_now();

              markSchedulerSuspended(_currentTime);
            }
          }
        }

        function workLoop(hasTimeRemaining, initialTime) {
          var currentTime = initialTime;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);

          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
              // This currentTask hasn't expired, and we've reached the deadline.
              break;
            }

            var callback = currentTask.callback;

            if (typeof callback === 'function') {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              markTaskRun(currentTask, currentTime);
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();

              if (typeof continuationCallback === 'function') {
                currentTask.callback = continuationCallback;
                markTaskYield(currentTask, currentTime);
              } else {
                {
                  markTaskCompleted(currentTask, currentTime);
                  currentTask.isQueued = false;
                }

                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }

              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }

            currentTask = peek(taskQueue);
          } // Return whether there's additional work


          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);

            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }

            return false;
          }
        }

        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;

            default:
              priorityLevel = NormalPriority;
          }

          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;

          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }

        function unstable_next(eventHandler) {
          var priorityLevel;

          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              // Shift down to normal priority
              priorityLevel = NormalPriority;
              break;

            default:
              // Anything lower than normal priority should remain at the current level.
              priorityLevel = currentPriorityLevel;
              break;
          }

          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;

          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }

        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function () {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;

            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }

        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime;

          if (_typeof3(options) === 'object' && options !== null) {
            var delay = options.delay;

            if (typeof delay === 'number' && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
          } else {
            startTime = currentTime;
          }

          var timeout;

          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;

            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;

            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;

            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;

            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }

          var expirationTime = startTime + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
          };
          {
            newTask.isQueued = false;
          }

          if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);

            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              // All tasks are delayed, and this is the task with the earliest delay.
              if (isHostTimeoutScheduled) {
                // Cancel an existing timeout.
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              } // Schedule a timeout.


              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            {
              markTaskStart(newTask, currentTime);
              newTask.isQueued = true;
            } // Schedule a host callback, if needed. If we're already performing work,
            // wait until the next time we yield.

            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;

              _requestHostCallback(flushWork);
            }
          }

          return newTask;
        }

        function unstable_pauseExecution() {}

        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;

            _requestHostCallback(flushWork);
          }
        }

        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }

        function unstable_cancelCallback(task) {
          {
            if (task.isQueued) {
              var currentTime = exports.unstable_now();
              markTaskCanceled(task, currentTime);
              task.isQueued = false;
            }
          } // Null out the callback to indicate the task has been canceled. (Can't
          // remove from the queue because you can't remove arbitrary nodes from an
          // array based heap, only the first one.)

          task.callback = null;
        }

        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }

        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = {
          startLoggingProfilingEvents: startLoggingProfilingEvents,
          stopLoggingProfilingEvents: stopLoggingProfilingEvents,
          sharedProfilingBuffer: sharedProfilingBuffer
        };
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_wrapCallback = unstable_wrapCallback;
      })();
    }
  }, {}],
  "../node_modules/scheduler/index.js": [function (require, module, exports) {
    'use strict';

    if ("development" === 'production') {
      module.exports = require('./cjs/scheduler.production.min.js');
    } else {
      module.exports = require('./cjs/scheduler.development.js');
    }
  }, {
    "./cjs/scheduler.development.js": "../node_modules/scheduler/cjs/scheduler.development.js"
  }],
  "../node_modules/scheduler/cjs/scheduler-tracing.development.js": [function (require, module, exports) {
    /** @license React v0.20.1
     * scheduler-tracing.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    'use strict';

    if ("development" !== "production") {
      (function () {
        'use strict';

        var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

        var interactionIDCounter = 0;
        var threadIDCounter = 0; // Set of currently traced interactions.
        // Interactions "stack"–
        // Meaning that newly traced interactions are appended to the previously active set.
        // When an interaction goes out of scope, the previous set (if any) is restored.

        exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

        exports.__subscriberRef = null;
        {
          exports.__interactionsRef = {
            current: new Set()
          };
          exports.__subscriberRef = {
            current: null
          };
        }

        function unstable_clear(callback) {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = new Set();

          try {
            return callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
          }
        }

        function unstable_getCurrent() {
          {
            return exports.__interactionsRef.current;
          }
        }

        function unstable_getThreadID() {
          return ++threadIDCounter;
        }

        function unstable_trace(name, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
          };
          var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
          // To do that, clone the current interactions.
          // The previous set will be restored upon completion.

          var interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports.__interactionsRef.current = interactions;
          var subscriber = exports.__subscriberRef.current;
          var returnValue;

          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;

                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--; // If no async work was scheduled for this interaction,
                  // Notify subscribers that it's completed.

                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }

          return returnValue;
        }

        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
          var wrappedInteractions = exports.__interactionsRef.current;
          var subscriber = exports.__subscriberRef.current;

          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          } // Update the pending async work count for the current interactions.
          // Update after calling subscribers in case of error.


          wrappedInteractions.forEach(function (interaction) {
            interaction.__count++;
          });
          var hasRun = false;

          function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;

            try {
              var returnValue;

              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(undefined, arguments);
                } finally {
                  exports.__interactionsRef.current = prevInteractions;

                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }

              return returnValue;
            } finally {
              if (!hasRun) {
                // We only expect a wrapped function to be executed once,
                // But in the event that it's executed more than once–
                // Only decrement the outstanding interaction counts once.
                hasRun = true; // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.

                wrappedInteractions.forEach(function (interaction) {
                  interaction.__count--;

                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }

          wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;

            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              // Update pending async counts for all wrapped interactions.
              // If this was the last scheduled async work for any of them,
              // Mark them as completed.
              wrappedInteractions.forEach(function (interaction) {
                interaction.__count--;

                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };

          return wrapped;
        }

        var subscribers = null;
        {
          subscribers = new Set();
        }

        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber);

            if (subscribers.size === 1) {
              exports.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                onInteractionTraced: onInteractionTraced,
                onWorkCanceled: onWorkCanceled,
                onWorkScheduled: onWorkScheduled,
                onWorkStarted: onWorkStarted,
                onWorkStopped: onWorkStopped
              };
            }
          }
        }

        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber);

            if (subscribers.size === 0) {
              exports.__subscriberRef.current = null;
            }
          }
        }

        function onInteractionTraced(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        function onWorkStarted(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        function onWorkStopped(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        exports.unstable_clear = unstable_clear;
        exports.unstable_getCurrent = unstable_getCurrent;
        exports.unstable_getThreadID = unstable_getThreadID;
        exports.unstable_subscribe = unstable_subscribe;
        exports.unstable_trace = unstable_trace;
        exports.unstable_unsubscribe = unstable_unsubscribe;
        exports.unstable_wrap = unstable_wrap;
      })();
    }
  }, {}],
  "../node_modules/scheduler/tracing.js": [function (require, module, exports) {
    'use strict';

    if ("development" === 'production') {
      module.exports = require('./cjs/scheduler-tracing.production.min.js');
    } else {
      module.exports = require('./cjs/scheduler-tracing.development.js');
    }
  }, {
    "./cjs/scheduler-tracing.development.js": "../node_modules/scheduler/cjs/scheduler-tracing.development.js"
  }],
  "../node_modules/react-dom/cjs/react-dom.development.js": [function (require, module, exports) {
    /** @license React v17.0.1
     * react-dom.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    'use strict';

    if ("development" !== "production") {
      (function () {
        'use strict';

        var React = require('react');

        var _assign = require('object-assign');

        var Scheduler = require('scheduler');

        var tracing = require('scheduler/tracing');

        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // by calls to these methods by a Babel plugin.
        //
        // In PROD (or in packages without access to React internals),
        // they are left as they are instead.

        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            printWarning('warn', format, args);
          }
        }

        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }

            printWarning('error', format, args);
          }
        }

        function printWarning(level, format, args) {
          // When changing this logic, you might want to also
          // update consoleWithStackDev.www.js as well.
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();

            if (stack !== '') {
              format += '%s';
              args = args.concat([stack]);
            }

            var argsWithFormat = args.map(function (item) {
              return '' + item;
            }); // Careful: RN currently depends on this prefix

            argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
            // breaks IE9: https://github.com/facebook/react/issues/13610
            // eslint-disable-next-line react-internal/no-production-logging

            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }

        if (!React) {
          {
            throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
          }
        }

        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2; // Before we know whether it is function or class

        var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

        var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var OffscreenComponent = 23;
        var LegacyHiddenComponent = 24; // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

        var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

        var enableFundamentalAPI = false; // Experimental Scope support.

        var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)

        var warnAboutStringRefs = false;
        var allNativeEvents = new Set();
        /**
         * Mapping from registration name to event name
         */

        var registrationNameDependencies = {};
        /**
         * Mapping from lowercase registration names to the properly cased version,
         * used to warn in the case of missing event handlers. Available
         * only in true.
         * @type {Object}
         */

        var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + 'Capture', dependencies);
        }

        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;

            if (registrationName === 'onDoubleClick') {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }

          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }

        var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined'); // A reserved attribute.
        // It is handled by React separately and shouldn't be written to the DOM.

        var RESERVED = 0; // A simple string attribute.
        // Attributes that aren't in the filter are presumed to have this type.

        var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
        // "enumerated" attributes with "true" and "false" as possible values.
        // When true, it should be set to a "true" string.
        // When false, it should be set to a "false" string.

        var BOOLEANISH_STRING = 2; // A real boolean attribute.
        // When true, it should be present (set either to an empty string or its name).
        // When false, it should be omitted.

        var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
        // When true, it should be present (set either to an empty string or its name).
        // When false, it should be omitted.
        // For any other value, should be present with that value.

        var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
        // When falsy, it should be removed.

        var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
        // When falsy, it should be removed.

        var POSITIVE_NUMERIC = 6;
        /* eslint-disable max-len */

        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        /* eslint-enable max-len */

        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};

        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }

          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }

          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }

          illegalAttributeNameCache[attributeName] = true;
          {
            error('Invalid attribute name: `%s`', attributeName);
          }
          return false;
        }

        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }

          if (isCustomComponentTag) {
            return false;
          }

          if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
            return true;
          }

          return false;
        }

        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }

          switch (_typeof3(value)) {
            case 'function': // $FlowIssue symbol is perfectly valid here

            case 'symbol':
              // eslint-disable-line
              return true;

            case 'boolean':
              {
                if (isCustomComponentTag) {
                  return false;
                }

                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix = name.toLowerCase().slice(0, 5);
                  return prefix !== 'data-' && prefix !== 'aria-';
                }
              }

            default:
              return false;
          }
        }

        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === 'undefined') {
            return true;
          }

          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }

          if (isCustomComponentTag) {
            return false;
          }

          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;

              case OVERLOADED_BOOLEAN:
                return value === false;

              case NUMERIC:
                return isNaN(value);

              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }

          return false;
        }

        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }

        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL;
          this.removeEmptyString = removeEmptyString;
        } // When adding attributes to this list, be sure to also add them to
        // the `possibleStandardNames` module to ensure casing and incorrect
        // name warnings.


        var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

        var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
        reservedProps.forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
          name, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false);
        }); // A few React string attributes have a different name.
        // This is a mapping from React prop names to the attribute names.

        [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
          var name = _ref[0],
              attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
          attributeName, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false);
        }); // These are "enumerated" HTML attributes that accept "true" and "false".
        // In React, we let users pass `true` and `false` even though technically
        // these aren't boolean attributes (they are coerced to strings).

        ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
          name.toLowerCase(), // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false);
        }); // These are "enumerated" SVG attributes that accept "true" and "false".
        // In React, we let users pass `true` and `false` even though technically
        // these aren't boolean attributes (they are coerced to strings).
        // Since these are SVG attributes, their attribute names are case-sensitive.

        ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
          name, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false);
        }); // These are HTML boolean attributes.

        ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
        'itemScope'].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
          name.toLowerCase(), // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false);
        }); // These are the few React props that we set as DOM properties
        // rather than attributes. These are all booleans.

        ['checked', // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
        ].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
          name, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false);
        }); // These are HTML attributes that are "overloaded booleans": they behave like
        // booleans, but can also accept a string value.

        ['capture', 'download' // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
        ].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
          name, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false);
        }); // These are HTML attributes that must be positive numbers.

        ['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
        ].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
          name, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false);
        }); // These are HTML attributes that must be numbers.

        ['rowSpan', 'start'].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
          name.toLowerCase(), // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;

        var capitalize = function capitalize(token) {
          return token[1].toUpperCase();
        }; // This is a list of all SVG attributes that need special casing, namespacing,
        // or boolean value assignment. Regular attributes that just accept strings
        // and have the same names are omitted, just like in the HTML attribute filter.
        // Some of these attributes can be hard to find. This list was created by
        // scraping the MDN documentation.


        ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
        ].forEach(function (attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
          attributeName, null, // attributeNamespace
          false, // sanitizeURL
          false);
        }); // String SVG attributes with the xlink namespace.

        ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
        ].forEach(function (attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
          attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
          false);
        }); // String SVG attributes with the xml namespace.

        ['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
        ].forEach(function (attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
          attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
          false);
        }); // These attribute exists both in HTML and SVG.
        // The attribute name is case-sensitive in SVG so we can't just use
        // the React name like we do for attributes that exist only in HTML.

        ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
          attributeName.toLowerCase(), // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false);
        }); // These attributes accept URLs. These must not allow javascript: URLS.
        // These will also need to accept Trusted Types object in the future.

        var xlinkHref = 'xlinkHref';
        properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
        'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
        false);
        ['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
          attributeName.toLowerCase(), // attributeName
          null, // attributeNamespace
          true, // sanitizeURL
          true);
        }); // and any newline or tab are filtered out as if they're not part of the URL.
        // https://url.spec.whatwg.org/#url-parsing
        // Tab or newline are defined as \r\n\t:
        // https://infra.spec.whatwg.org/#ascii-tab-or-newline
        // A C0 control is a code point in the range \u0000 NULL to \u001F
        // INFORMATION SEPARATOR ONE, inclusive:
        // https://infra.spec.whatwg.org/#c0-control-or-space

        /* eslint-disable max-len */

        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;

        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
            }
          }
        }
        /**
         * Get the value for a property on a node. Only used in DEV for SSR validation.
         * The "expected" argument is used as a hint of what the expected value is.
         * Some properties have multiple equivalent values.
         */


        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              if (propertyInfo.sanitizeURL) {
                // If we haven't fully disabled javascript: URLs, and if
                // the hydration is successful of a javascript: URL, we
                // still want to warn on the client.
                sanitizeURL('' + expected);
              }

              var attributeName = propertyInfo.attributeName;
              var stringValue = null;

              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);

                  if (value === '') {
                    return true;
                  }

                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }

                  if (value === '' + expected) {
                    return expected;
                  }

                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  // We had an attribute but shouldn't have had one, so read it
                  // for the error message.
                  return node.getAttribute(attributeName);
                }

                if (propertyInfo.type === BOOLEAN) {
                  // If this was a boolean, it doesn't matter what the value is
                  // the fact that we have it is the same as the expected.
                  return expected;
                } // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.


                stringValue = node.getAttribute(attributeName);
              }

              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === '' + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        /**
         * Get the value for a attribute on a node. Only used in DEV for SSR validation.
         * The third argument is used as a hint of what the expected value is. Some
         * attributes have multiple equivalent values.
         */


        function getValueForAttribute(node, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            } // If the object is an opaque reference ID, it's expected that
            // the next prop is different than the server value, so just return
            // expected


            if (isOpaqueHydratingObject(expected)) {
              return expected;
            }

            if (!node.hasAttribute(name)) {
              return expected === undefined ? undefined : null;
            }

            var value = node.getAttribute(name);

            if (value === '' + expected) {
              return expected;
            }

            return value;
          }
        }
        /**
         * Sets the value for a property on a node.
         *
         * @param {DOMElement} node
         * @param {string} name
         * @param {*} value
         */


        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);

          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }

          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          } // If the prop isn't in the special list, treat it as a simple attribute.


          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;

              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                node.setAttribute(_attributeName, '' + value);
              }
            }

            return;
          }

          var mustUseProperty = propertyInfo.mustUseProperty;

          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;

            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : '';
            } else {
              // Contrary to `setAttribute`, object properties are properly
              // `toString`ed by IE8/9.
              node[propertyName] = value;
            }

            return;
          } // The rest are treated as attributes with special cases.


          var attributeName = propertyInfo.attributeName,
              attributeNamespace = propertyInfo.attributeNamespace;

          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;

            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              // If attribute type is boolean, we know for sure it won't be an execution sink
              // and we won't require Trusted Type here.
              attributeValue = '';
            } else {
              // `setAttribute` with objects becomes only `[object]` in IE8/9,
              // ('' + value) makes it output the correct toString()-value.
              {
                attributeValue = '' + value;
              }

              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }

            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        } // ATTENTION
        // When adding new symbols to this file,
        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.


        var REACT_ELEMENT_TYPE = 0xeac7;
        var REACT_PORTAL_TYPE = 0xeaca;
        var REACT_FRAGMENT_TYPE = 0xeacb;
        var REACT_STRICT_MODE_TYPE = 0xeacc;
        var REACT_PROFILER_TYPE = 0xead2;
        var REACT_PROVIDER_TYPE = 0xeacd;
        var REACT_CONTEXT_TYPE = 0xeace;
        var REACT_FORWARD_REF_TYPE = 0xead0;
        var REACT_SUSPENSE_TYPE = 0xead1;
        var REACT_SUSPENSE_LIST_TYPE = 0xead8;
        var REACT_MEMO_TYPE = 0xead3;
        var REACT_LAZY_TYPE = 0xead4;
        var REACT_BLOCK_TYPE = 0xead9;
        var REACT_SERVER_BLOCK_TYPE = 0xeada;
        var REACT_FUNDAMENTAL_TYPE = 0xead5;
        var REACT_SCOPE_TYPE = 0xead7;
        var REACT_OPAQUE_ID_TYPE = 0xeae0;
        var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
        var REACT_OFFSCREEN_TYPE = 0xeae2;
        var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

        if (typeof Symbol === 'function' && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor('react.element');
          REACT_PORTAL_TYPE = symbolFor('react.portal');
          REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
          REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
          REACT_PROFILER_TYPE = symbolFor('react.profiler');
          REACT_PROVIDER_TYPE = symbolFor('react.provider');
          REACT_CONTEXT_TYPE = symbolFor('react.context');
          REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
          REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
          REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
          REACT_MEMO_TYPE = symbolFor('react.memo');
          REACT_LAZY_TYPE = symbolFor('react.lazy');
          REACT_BLOCK_TYPE = symbolFor('react.block');
          REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
          REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
          REACT_SCOPE_TYPE = symbolFor('react.scope');
          REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
          REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
          REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
        }

        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';

        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || _typeof3(maybeIterable) !== 'object') {
            return null;
          }

          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

          if (typeof maybeIterator === 'function') {
            return maybeIterator;
          }

          return null;
        } // Helpers to patch console.logs to avoid logging during side-effect free
        // replaying on render function. This currently only patches the object
        // lazily which won't cover if the log function was extracted eagerly.
        // We could also eagerly patch the method.


        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;

        function disabledLog() {}

        disabledLog.__reactDisabledLog = true;

        function disableLogs() {
          {
            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              }; // $FlowFixMe Flow thinks console is immutable.

              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
              /* eslint-enable react-internal/no-production-logging */
            }

            disabledDepth++;
          }
        }

        function reenableLogs() {
          {
            disabledDepth--;

            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              }; // $FlowFixMe Flow thinks console is immutable.

              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
              /* eslint-enable react-internal/no-production-logging */
            }

            if (disabledDepth < 0) {
              error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
            }
          }
        }

        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;

        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === undefined) {
              // Extract the VM specific prefix used by each line.
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || '';
              }
            } // We use the prefix to ensure our stacks line up with native stack frames.


            return '\n' + prefix + name;
          }
        }

        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }

        function describeNativeComponentFrame(fn, construct) {
          // If something asked for a stack inside a fake render, it should get ignored.
          if (!fn || reentry) {
            return '';
          }

          {
            var frame = componentFrameCache.get(fn);

            if (frame !== undefined) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

          Error.prepareStackTrace = undefined;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
            // for warnings.

            ReactCurrentDispatcher.current = null;
            disableLogs();
          }

          try {
            // This should throw.
            if (construct) {
              // Something should be setting the props in the constructor.
              var Fake = function Fake() {
                throw Error();
              }; // $FlowFixMe


              Object.defineProperty(Fake.prototype, 'props', {
                set: function set() {
                  // We use a throwing setter instead of frozen or non-writable props
                  // because that won't throw in a non-strict mode function.
                  throw Error();
                }
              });

              if ((typeof Reflect === "undefined" ? "undefined" : _typeof3(Reflect)) === 'object' && Reflect.construct) {
                // We construct a different control for this case to include any extra
                // frames added by the construct call.
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }

                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }

                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }

              fn();
            }
          } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
              // This extracts the first frame from the sample that isn't also in the control.
              // Skipping one frame that we assume is the frame that calls the two.
              var sampleLines = sample.stack.split('\n');
              var controlLines = control.stack.split('\n');
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;

              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                // We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
              }

              for (; s >= 1 && c >= 0; s--, c--) {
                // Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                  // In V8, the first line is describing the message but other VMs don't.
                  // If we're about to return the first line, and the control is also on the same
                  // line, that's a pretty good indicator that our sample threw at same line as
                  // the control. I.e. before we entered the sample frame. So we ignore this result.
                  // This can happen if you passed a class to function component, or non-function.
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--; // We may still have similar intermediate frames from the construct call.
                      // The next one that isn't the same should be our match though.

                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                        var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                        {
                          if (typeof fn === 'function') {
                            componentFrameCache.set(fn, _frame);
                          }
                        } // Return the line we found.

                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }

                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          } // Fallback to just using the name if we couldn't make it throw.


          var name = fn ? fn.displayName || fn.name : '';
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
          {
            if (typeof fn === 'function') {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }

        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }

        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }

        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }

        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return '';
          }

          if (typeof type === 'function') {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }

          if (typeof type === 'string') {
            return describeBuiltInComponentFrame(type);
          }

          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame('Suspense');

            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame('SuspenseList');
          }

          if (_typeof3(type) === 'object') {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);

              case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);

              case REACT_LAZY_TYPE:
                {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;

                  try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {}
                }
            }
          }

          return '';
        }

        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;

          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);

            case LazyComponent:
              return describeBuiltInComponentFrame('Lazy');

            case SuspenseComponent:
              return describeBuiltInComponentFrame('Suspense');

            case SuspenseListComponent:
              return describeBuiltInComponentFrame('SuspenseList');

            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);

            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);

            case Block:
              return describeFunctionComponentFrame(fiber.type._render);

            case ClassComponent:
              return describeClassComponentFrame(fiber.type);

            default:
              return '';
          }
        }

        function getStackByFiberInDevAndProd(workInProgress) {
          try {
            var info = '';
            var node = workInProgress;

            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);

            return info;
          } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
          }
        }

        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || '';
          return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
        }

        function getContextName(type) {
          return type.displayName || 'Context';
        }

        function getComponentName(type) {
          if (type == null) {
            // Host root, text node or just invalid type.
            return null;
          }

          {
            if (typeof type.tag === 'number') {
              error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
            }
          }

          if (typeof type === 'function') {
            return type.displayName || type.name || null;
          }

          if (typeof type === 'string') {
            return type;
          }

          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return 'Fragment';

            case REACT_PORTAL_TYPE:
              return 'Portal';

            case REACT_PROFILER_TYPE:
              return 'Profiler';

            case REACT_STRICT_MODE_TYPE:
              return 'StrictMode';

            case REACT_SUSPENSE_TYPE:
              return 'Suspense';

            case REACT_SUSPENSE_LIST_TYPE:
              return 'SuspenseList';
          }

          if (_typeof3(type) === 'object') {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';

              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';

              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');

              case REACT_MEMO_TYPE:
                return getComponentName(type.type);

              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);

              case REACT_LAZY_TYPE:
                {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;

                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
            }
          }

          return null;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;

        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }

            var owner = current._debugOwner;

            if (owner !== null && typeof owner !== 'undefined') {
              return getComponentName(owner.type);
            }
          }
          return null;
        }

        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return '';
            } // Safe because if current fiber exists, we are reconciling,
            // and it is guaranteed to be the work-in-progress version.


            return getStackByFiberInDevAndProd(current);
          }
        }

        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }

        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }

        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }

        function getIsRendering() {
          {
            return isRendering;
          }
        } // Flow does not allow string concatenation of most non-string types. To work
        // around this limitation, we use an opaque type that can only be obtained by
        // passing the value through getToStringValue first.


        function toString(value) {
          return '' + value;
        }

        function getToStringValue(value) {
          switch (_typeof3(value)) {
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
              return value;

            default:
              // function, symbol are assigned as empty strings
              return '';
          }
        }

        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };

        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
            }

            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
            }
          }
        }

        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
        }

        function getTracker(node) {
          return node._valueTracker;
        }

        function detachTracker(node) {
          node._valueTracker = null;
        }

        function getValueFromNode(node) {
          var value = '';

          if (!node) {
            return value;
          }

          if (isCheckable(node)) {
            value = node.checked ? 'true' : 'false';
          } else {
            value = node.value;
          }

          return value;
        }

        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? 'checked' : 'value';
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
          // and don't track value will cause over reporting of changes,
          // but it's better then a hard failure
          // (needed for certain tests that spyOn input values and Safari)

          if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
            return;
          }

          var _get = descriptor.get,
              _set = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function get() {
              return _get.call(this);
            },
            set: function set(value) {
              currentValue = '' + value;

              _set.call(this, value);
            }
          }); // We could've passed this the first time
          // but it triggers a bug in IE11 and Edge 14/15.
          // Calling defineProperty() again should be equivalent.
          // https://github.com/facebook/react/issues/11768

          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function getValue() {
              return currentValue;
            },
            setValue: function setValue(value) {
              currentValue = '' + value;
            },
            stopTracking: function stopTracking() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }

        function track(node) {
          if (getTracker(node)) {
            return;
          } // TODO: Once it's just Fiber we can move this to node._wrapperState


          node._valueTracker = trackValueOnNode(node);
        }

        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }

          var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
          // that trying again will succeed

          if (!tracker) {
            return true;
          }

          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);

          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }

          return false;
        }

        function getActiveElement(doc) {
          doc = doc || (typeof document !== 'undefined' ? document : undefined);

          if (typeof doc === 'undefined') {
            return null;
          }

          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }

        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;

        function isControlled(props) {
          var usesChecked = props.type === 'checkbox' || props.type === 'radio';
          return usesChecked ? props.checked != null : props.value != null;
        }
        /**
         * Implements an <input> host component that allows setting these optional
         * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
         *
         * If `checked` or `value` are not supplied (or null/undefined), user actions
         * that affect the checked state or value will trigger updates to the element.
         *
         * If they are supplied (and not null/undefined), the rendered element will not
         * trigger updates to the element. Instead, the props must change in order for
         * the rendered element to be updated.
         *
         * The rendered element will be initialized as unchecked (or `defaultChecked`)
         * with an empty value (or `defaultValue`).
         *
         * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
         */


        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;

          var hostProps = _assign({}, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });

          return hostProps;
        }

        function initWrapperState(element, props) {
          {
            checkControlledValueProps('input', props);

            if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
              error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
              didWarnCheckedDefaultChecked = true;
            }

            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
              error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }

        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;

          if (checked != null) {
            setValueForProperty(node, 'checked', checked, false);
          }
        }

        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);

            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');
              didWarnUncontrolledToControlled = true;
            }

            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;

          if (value != null) {
            if (type === 'number') {
              if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
              // eslint-disable-next-line
              node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
          }

          {
            // When syncing the value attribute, the value comes from a cascade of
            // properties:
            //  1. The value React property
            //  2. The defaultValue React property
            //  3. Otherwise there should be no change
            if (props.hasOwnProperty('value')) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty('defaultValue')) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            // When syncing the checked attribute, it only changes when it needs
            // to be removed, such as transitioning from a checkbox into a text input
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }

        function postMountWrapper(element, props, isHydrating) {
          var node = element; // Do not assign value if it is already set. This prevents user text input
          // from being lost during SSR hydration.

          if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872

            if (isButton && (props.value === undefined || props.value === null)) {
              return;
            }

            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.

            if (!isHydrating) {
              {
                // When syncing the value attribute, the value property should use
                // the wrapperState._initialValue property. This uses:
                //
                //   1. The value React property when present
                //   2. The defaultValue React property when present
                //   3. An empty string
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }

            {
              // Otherwise, the value attribute is synchronized to the property,
              // so we assign defaultValue to the same thing as the value property
              // assignment step above.
              node.defaultValue = initialValue;
            }
          } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
          // this is needed to work around a chrome bug where setting defaultChecked
          // will sometimes influence the value of checked (even after detachment).
          // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
          // We need to temporarily unset name to avoid disrupting radio button groups.


          var name = node.name;

          if (name !== '') {
            node.name = '';
          }

          {
            // When syncing the checked attribute, both the checked property and
            // attribute are assigned at the same time using defaultChecked. This uses:
            //
            //   1. The checked React property when present
            //   2. The defaultChecked React property when present
            //   3. Otherwise, false
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }

          if (name !== '') {
            node.name = name;
          }
        }

        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }

        function updateNamedCousins(rootNode, props) {
          var name = props.name;

          if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;

            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            } // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.


            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];

              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              } // This will throw if radio buttons rendered by different copies of React
              // and the same name are rendered into the same form (same as #1939).
              // That's probably okay; we don't support it just as we don't support
              // mixing React radio buttons with non-React ones.


              var otherProps = getFiberCurrentPropsFromNode(otherNode);

              if (!otherProps) {
                {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
              } // We need update the tracked value on the named cousin since the value
              // was changed but the input saw no event or value set


              updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
              // was previously checked to update will cause it to be come re-checked
              // as appropriate.

              updateWrapper(otherNode, otherProps);
            }
          }
        } // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253


        function setDefaultValue(node, type, value) {
          if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
          type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }

        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;

        function flattenChildren(children) {
          var content = ''; // Flatten children. We'll warn if they are invalid
          // during validateProps() which runs for hydration too.
          // Note that this would throw on non-element objects.
          // Elements are stringified (which is normally irrelevant
          // but matters for <fbt>).

          React.Children.forEach(children, function (child) {
            if (child == null) {
              return;
            }

            content += child; // Note: we don't warn about invalid children here.
            // Instead, this is done separately below so that
            // it happens during the hydration code path too.
          });
          return content;
        }
        /**
         * Implements an <option> host component that warns when `selected` is set.
         */


        function validateProps(element, props) {
          {
            // This mirrors the code path above, but runs for hydration too.
            // Warn about invalid children here so that client and hydration are consistent.
            // TODO: this seems like it could cause a DEV-only throw for hydration
            // if children contains a non-element object. We should try to avoid that.
            if (_typeof3(props.children) === 'object' && props.children !== null) {
              React.Children.forEach(props.children, function (child) {
                if (child == null) {
                  return;
                }

                if (typeof child === 'string' || typeof child === 'number') {
                  return;
                }

                if (typeof child.type !== 'string') {
                  return;
                }

                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error('Only strings and numbers are supported as <option> children.');
                }
              });
            } // TODO: Remove support for `selected` in <option>.


            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
              didWarnSelectedSetOnOption = true;
            }
          }
        }

        function postMountWrapper$1(element, props) {
          // value="" should make a value attribute (#6219)
          if (props.value != null) {
            element.setAttribute('value', toString(getToStringValue(props.value)));
          }
        }

        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: undefined
          }, props);

          var content = flattenChildren(props.children);

          if (content) {
            hostProps.children = content;
          }

          return hostProps;
        }

        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }

        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();

          if (ownerName) {
            return '\n\nCheck the render method of `' + ownerName + '`.';
          }

          return '';
        }

        var valuePropNames = ['value', 'defaultValue'];
        /**
         * Validation function for `value` and `defaultValue`.
         */

        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps('select', props);

            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];

              if (props[propName] == null) {
                continue;
              }

              var isArray = Array.isArray(props[propName]);

              if (props.multiple && !isArray) {
                error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray) {
                error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
              }
            }
          }
        }

        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options = node.options;

          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};

            for (var i = 0; i < selectedValues.length; i++) {
              // Prefix to avoid chaos with special keys.
              selectedValue['$' + selectedValues[i]] = true;
            }

            for (var _i = 0; _i < options.length; _i++) {
              var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

              if (options[_i].selected !== selected) {
                options[_i].selected = selected;
              }

              if (selected && setDefaultSelected) {
                options[_i].defaultSelected = true;
              }
            }
          } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));

            var defaultSelected = null;

            for (var _i2 = 0; _i2 < options.length; _i2++) {
              if (options[_i2].value === _selectedValue) {
                options[_i2].selected = true;

                if (setDefaultSelected) {
                  options[_i2].defaultSelected = true;
                }

                return;
              }

              if (defaultSelected === null && !options[_i2].disabled) {
                defaultSelected = options[_i2];
              }
            }

            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        /**
         * Implements a <select> host component that allows optionally setting the
         * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
         * stringable. If `multiple` is true, the prop must be an array of stringables.
         *
         * If `value` is not supplied (or null/undefined), user actions that change the
         * selected option will trigger updates to the rendered options.
         *
         * If it is supplied (and not null/undefined), the rendered options will not
         * update in response to user actions. Instead, the `value` prop must change in
         * order for the rendered options to update.
         *
         * If `defaultValue` is provided, any options with the supplied values will be
         * selected.
         */


        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: undefined
          });
        }

        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
              error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');
              didWarnValueDefaultValue$1 = true;
            }
          }
        }

        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;

          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }

        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;

          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              // Revert the select back to its default unselected state.
              updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
            }
          }
        }

        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;

          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }

        var didWarnValDefaultVal = false;
        /**
         * Implements a <textarea> host component that allows setting `value`, and
         * `defaultValue`. This differs from the traditional DOM API because value is
         * usually set as PCDATA children.
         *
         * If `value` is not supplied (or null/undefined), user actions that affect the
         * value will trigger updates to the element.
         *
         * If `value` is supplied (and not null/undefined), the rendered element will
         * not trigger updates to the element. Instead, the `value` prop must change in
         * order for the rendered element to be updated.
         *
         * The rendered element will be initialized with an empty value, the prop
         * `defaultValue` if specified, or the children content (deprecated).
         */

        function getHostProps$3(element, props) {
          var node = element;

          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
          } // Always set children to the same thing. In IE9, the selection range will
          // get reset if `textContent` is mutated.  We could add a check in setTextContent
          // to only set the value if/when the value differs from the node value (which would
          // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
          // solution. The value can be a boolean or object so that's why it's forced
          // to be a string.


          var hostProps = _assign({}, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
          });

          return hostProps;
        }

        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps('textarea', props);

            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
              error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value; // Only bother fetching default value if we're going to use it

          if (initialValue == null) {
            var children = props.children,
                defaultValue = props.defaultValue;

            if (children != null) {
              {
                error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
              }
              {
                if (!(defaultValue == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }

                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }

                  children = children[0];
                }

                defaultValue = children;
              }
            }

            if (defaultValue == null) {
              defaultValue = '';
            }

            initialValue = defaultValue;
          }

          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }

        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);

          if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

            if (newValue !== node.value) {
              node.value = newValue;
            }

            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }

          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }

        function postMountWrapper$3(element, props) {
          var node = element; // This is in postMount because we need access to the DOM node, which is not
          // available until after the component has mounted.

          var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
          // initial value. In IE10/IE11 there is a bug where the placeholder attribute
          // will populate textContent as well.
          // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) {
              node.value = textContent;
            }
          }
        }

        function restoreControlledState$2(element, props) {
          // DOM component is still mounted; update
          updateWrapper$1(element, props);
        }

        var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
        var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
        var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        }; // Assumes there is no parent namespace.

        function getIntrinsicNamespace(type) {
          switch (type) {
            case 'svg':
              return SVG_NAMESPACE;

            case 'math':
              return MATH_NAMESPACE;

            default:
              return HTML_NAMESPACE;
          }
        }

        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            // No (or default) parent namespace: potential entry point.
            return getIntrinsicNamespace(type);
          }

          if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
            // We're leaving SVG.
            return HTML_NAMESPACE;
          } // By default, pass namespace below.


          return parentNamespace;
        }
        /* globals MSApp */

        /**
         * Create a function which has 'unsafe' privileges (required by windows8 apps)
         */


        var createMicrosoftUnsafeLocalFunction = function createMicrosoftUnsafeLocalFunction(func) {
          if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
            return function (arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function () {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };

        var reusableSVGContainer;
        /**
         * Set the innerHTML property of a node
         *
         * @param {DOMElement} node
         * @param {string} html
         * @internal
         */

        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
          if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
              // IE does not have innerHTML for SVG nodes, so instead we inject the
              // new markup in a temp node and then move the child nodes across into
              // the target node
              reusableSVGContainer = reusableSVGContainer || document.createElement('div');
              reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
              var svgNode = reusableSVGContainer.firstChild;

              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }

              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }

              return;
            }
          }

          node.innerHTML = html;
        });
        /**
         * HTML nodeType values that represent the type of the node
         */

        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        /**
         * Set the textContent property of a node. For text updates, it's faster
         * to set the `nodeValue` of the Text node directly instead of using
         * `.textContent` which will remove the existing node and create a new one.
         *
         * @param {DOMElement} node
         * @param {string} text
         * @internal
         */

        var setTextContent = function setTextContent(node, text) {
          if (text) {
            var firstChild = node.firstChild;

            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }

          node.textContent = text;
        }; // List derived from Gecko source code:
        // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js


        var shorthandToLonghand = {
          animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
          background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
          backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
          border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
          borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
          borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
          borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
          borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
          borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
          borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
          borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
          borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
          borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
          borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
          borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
          borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
          borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
          columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
          columns: ['columnCount', 'columnWidth'],
          flex: ['flexBasis', 'flexGrow', 'flexShrink'],
          flexFlow: ['flexDirection', 'flexWrap'],
          font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
          fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
          gap: ['columnGap', 'rowGap'],
          grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
          gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
          gridColumn: ['gridColumnEnd', 'gridColumnStart'],
          gridColumnGap: ['columnGap'],
          gridGap: ['columnGap', 'rowGap'],
          gridRow: ['gridRowEnd', 'gridRowStart'],
          gridRowGap: ['rowGap'],
          gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
          listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
          margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
          marker: ['markerEnd', 'markerMid', 'markerStart'],
          mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
          maskPosition: ['maskPositionX', 'maskPositionY'],
          outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
          overflow: ['overflowX', 'overflowY'],
          padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
          placeContent: ['alignContent', 'justifyContent'],
          placeItems: ['alignItems', 'justifyItems'],
          placeSelf: ['alignSelf', 'justifySelf'],
          textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
          textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
          transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
          wordWrap: ['overflowWrap']
        };
        /**
         * CSS properties which accept numbers but are not in units of "px".
         */

        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        /**
         * @param {string} prefix vendor-specific prefix, eg: Webkit
         * @param {string} key style name, eg: transitionDuration
         * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
         * WebkitTransitionDuration
         */

        function prefixKey(prefix, key) {
          return prefix + key.charAt(0).toUpperCase() + key.substring(1);
        }
        /**
         * Support style names that may come passed in prefixed by adding permutations
         * of vendor prefixes.
         */


        var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
        // infinite loop, because it iterates over the newly added props too.

        Object.keys(isUnitlessNumber).forEach(function (prop) {
          prefixes.forEach(function (prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
          });
        });
        /**
         * Convert a value into the proper css writable value. The style name `name`
         * should be logical (no hyphens), as specified
         * in `CSSProperty.isUnitlessNumber`.
         *
         * @param {string} name CSS property name such as `topMargin`.
         * @param {*} value CSS property value such as `10px`.
         * @return {string} Normalized style value with dimensions applied.
         */

        function dangerousStyleValue(name, value, isCustomProperty) {
          // Note that we've removed escapeTextForBrowser() calls here since the
          // whole string will be escaped when the attribute is injected into
          // the markup. If you provide unsafe user data here they can inject
          // arbitrary CSS which may be problematic (I couldn't repro this):
          // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
          // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
          // This is not an XSS hole but instead a potential CSS injection issue
          // which has lead to a greater discussion about how we're going to
          // trust URLs moving forward. See #2115901
          var isEmpty = value == null || typeof value === 'boolean' || value === '';

          if (isEmpty) {
            return '';
          }

          if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
          }

          return ('' + value).trim();
        }

        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        /**
         * Hyphenates a camelcased CSS property name, for example:
         *
         *   > hyphenateStyleName('backgroundColor')
         *   < "background-color"
         *   > hyphenateStyleName('MozTransition')
         *   < "-moz-transition"
         *   > hyphenateStyleName('msTransition')
         *   < "-ms-transition"
         *
         * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
         * is converted to `-ms-`.
         */

        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
        }

        var warnValidStyle = function warnValidStyle() {};

        {
          // 'msTransform' is correct, but the other prefixes should be capitalized
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;

          var camelize = function camelize(string) {
            return string.replace(hyphenPattern, function (_, character) {
              return character.toUpperCase();
            });
          };

          var warnHyphenatedStyleName = function warnHyphenatedStyleName(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }

            warnedStyleNames[name] = true;
            error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern$1, 'ms-')));
          };

          var warnBadVendoredStyleName = function warnBadVendoredStyleName(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }

            warnedStyleNames[name] = true;
            error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
          };

          var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }

            warnedStyleValues[value] = true;
            error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
          };

          var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value) {
            if (warnedForNaNValue) {
              return;
            }

            warnedForNaNValue = true;
            error('`NaN` is an invalid value for the `%s` css style property.', name);
          };

          var warnStyleValueIsInfinity = function warnStyleValueIsInfinity(name, value) {
            if (warnedForInfinityValue) {
              return;
            }

            warnedForInfinityValue = true;
            error('`Infinity` is an invalid value for the `%s` css style property.', name);
          };

          warnValidStyle = function warnValidStyle(name, value) {
            if (name.indexOf('-') > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }

            if (typeof value === 'number') {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        /**
         * Operations for dealing with CSS properties.
         */

        /**
         * This creates a string that is expected to be equivalent to the style
         * attribute generated by server-side rendering. It by-passes warnings and
         * security checks so it's not safe to use this value for anything other than
         * comparison. It is only used in DEV for SSR validation.
         */

        function createDangerousStringForStyles(styles) {
          {
            var serialized = '';
            var delimiter = '';

            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }

              var styleValue = styles[styleName];

              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
              }
            }

            return serialized || null;
          }
        }
        /**
         * Sets the value for multiple styles on a node.  If a value is specified as
         * '' (empty string), the corresponding style property will be unset.
         *
         * @param {DOMElement} node
         * @param {object} styles
         */


        function setValueForStyles(node, styles) {
          var style = node.style;

          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }

            var isCustomProperty = styleName.indexOf('--') === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

            if (styleName === 'float') {
              styleName = 'cssFloat';
            }

            if (isCustomProperty) {
              style.setProperty(styleName, styleValue);
            } else {
              style[styleName] = styleValue;
            }
          }
        }

        function isValueEmpty(value) {
          return value == null || typeof value === 'boolean' || value === '';
        }
        /**
         * Given {color: 'red', overflow: 'hidden'} returns {
         *   color: 'color',
         *   overflowX: 'overflow',
         *   overflowY: 'overflow',
         * }. This can be read as "the overflowY property was set by the overflow
         * shorthand". That is, the values are the property that each was derived from.
         */


        function expandShorthandMap(styles) {
          var expanded = {};

          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];

            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }

          return expanded;
        }
        /**
         * When mixing shorthand and longhand property names, we warn during updates if
         * we expect an incorrect result to occur. In particular, we warn for:
         *
         * Updating a shorthand property (longhand gets overwritten):
         *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
         *   becomes .style.font = 'baz'
         * Removing a shorthand property (longhand gets lost too):
         *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
         *   becomes .style.font = ''
         * Removing a longhand property (should revert to shorthand; doesn't):
         *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
         *   becomes .style.fontVariant = ''
         */


        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }

            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};

            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];

              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;

                if (warnedAbout[warningKey]) {
                  continue;
                }

                warnedAbout[warningKey] = true;
                error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
              }
            }
          }
        } // For HTML, certain tags should omit their close tag. We keep a list for
        // those special-case tags.


        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

        }; // `omittedCloseTags` except that `menuitem` should still have its closing tag.

        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags);

        var HTML = '__html';

        function assertValidProps(tag, props) {
          if (!props) {
            return;
          } // Note the use of `==` which checks for null or undefined.


          if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
          }

          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
            }

            if (!(_typeof3(props.dangerouslySetInnerHTML) === 'object' && HTML in props.dangerouslySetInnerHTML)) {
              {
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
          }

          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
            }
          }

          if (!(props.style == null || _typeof3(props.style) === 'object')) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
        }

        function isCustomComponent(tagName, props) {
          if (tagName.indexOf('-') === -1) {
            return typeof props.is === 'string';
          }

          switch (tagName) {
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
              return false;

            default:
              return true;
          }
        } // When adding attributes to the HTML or SVG allowed attribute list, be sure to
        // also add them to this module to ensure casing and incorrect name
        // warnings.


        var possibleStandardNames = {
          // HTML
          accept: 'accept',
          acceptcharset: 'acceptCharset',
          'accept-charset': 'acceptCharset',
          accesskey: 'accessKey',
          action: 'action',
          allowfullscreen: 'allowFullScreen',
          alt: 'alt',
          as: 'as',
          async: 'async',
          autocapitalize: 'autoCapitalize',
          autocomplete: 'autoComplete',
          autocorrect: 'autoCorrect',
          autofocus: 'autoFocus',
          autoplay: 'autoPlay',
          autosave: 'autoSave',
          capture: 'capture',
          cellpadding: 'cellPadding',
          cellspacing: 'cellSpacing',
          challenge: 'challenge',
          charset: 'charSet',
          checked: 'checked',
          children: 'children',
          cite: 'cite',
          class: 'className',
          classid: 'classID',
          classname: 'className',
          cols: 'cols',
          colspan: 'colSpan',
          content: 'content',
          contenteditable: 'contentEditable',
          contextmenu: 'contextMenu',
          controls: 'controls',
          controlslist: 'controlsList',
          coords: 'coords',
          crossorigin: 'crossOrigin',
          dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
          data: 'data',
          datetime: 'dateTime',
          default: 'default',
          defaultchecked: 'defaultChecked',
          defaultvalue: 'defaultValue',
          defer: 'defer',
          dir: 'dir',
          disabled: 'disabled',
          disablepictureinpicture: 'disablePictureInPicture',
          disableremoteplayback: 'disableRemotePlayback',
          download: 'download',
          draggable: 'draggable',
          enctype: 'encType',
          enterkeyhint: 'enterKeyHint',
          for: 'htmlFor',
          form: 'form',
          formmethod: 'formMethod',
          formaction: 'formAction',
          formenctype: 'formEncType',
          formnovalidate: 'formNoValidate',
          formtarget: 'formTarget',
          frameborder: 'frameBorder',
          headers: 'headers',
          height: 'height',
          hidden: 'hidden',
          high: 'high',
          href: 'href',
          hreflang: 'hrefLang',
          htmlfor: 'htmlFor',
          httpequiv: 'httpEquiv',
          'http-equiv': 'httpEquiv',
          icon: 'icon',
          id: 'id',
          innerhtml: 'innerHTML',
          inputmode: 'inputMode',
          integrity: 'integrity',
          is: 'is',
          itemid: 'itemID',
          itemprop: 'itemProp',
          itemref: 'itemRef',
          itemscope: 'itemScope',
          itemtype: 'itemType',
          keyparams: 'keyParams',
          keytype: 'keyType',
          kind: 'kind',
          label: 'label',
          lang: 'lang',
          list: 'list',
          loop: 'loop',
          low: 'low',
          manifest: 'manifest',
          marginwidth: 'marginWidth',
          marginheight: 'marginHeight',
          max: 'max',
          maxlength: 'maxLength',
          media: 'media',
          mediagroup: 'mediaGroup',
          method: 'method',
          min: 'min',
          minlength: 'minLength',
          multiple: 'multiple',
          muted: 'muted',
          name: 'name',
          nomodule: 'noModule',
          nonce: 'nonce',
          novalidate: 'noValidate',
          open: 'open',
          optimum: 'optimum',
          pattern: 'pattern',
          placeholder: 'placeholder',
          playsinline: 'playsInline',
          poster: 'poster',
          preload: 'preload',
          profile: 'profile',
          radiogroup: 'radioGroup',
          readonly: 'readOnly',
          referrerpolicy: 'referrerPolicy',
          rel: 'rel',
          required: 'required',
          reversed: 'reversed',
          role: 'role',
          rows: 'rows',
          rowspan: 'rowSpan',
          sandbox: 'sandbox',
          scope: 'scope',
          scoped: 'scoped',
          scrolling: 'scrolling',
          seamless: 'seamless',
          selected: 'selected',
          shape: 'shape',
          size: 'size',
          sizes: 'sizes',
          span: 'span',
          spellcheck: 'spellCheck',
          src: 'src',
          srcdoc: 'srcDoc',
          srclang: 'srcLang',
          srcset: 'srcSet',
          start: 'start',
          step: 'step',
          style: 'style',
          summary: 'summary',
          tabindex: 'tabIndex',
          target: 'target',
          title: 'title',
          type: 'type',
          usemap: 'useMap',
          value: 'value',
          width: 'width',
          wmode: 'wmode',
          wrap: 'wrap',
          // SVG
          about: 'about',
          accentheight: 'accentHeight',
          'accent-height': 'accentHeight',
          accumulate: 'accumulate',
          additive: 'additive',
          alignmentbaseline: 'alignmentBaseline',
          'alignment-baseline': 'alignmentBaseline',
          allowreorder: 'allowReorder',
          alphabetic: 'alphabetic',
          amplitude: 'amplitude',
          arabicform: 'arabicForm',
          'arabic-form': 'arabicForm',
          ascent: 'ascent',
          attributename: 'attributeName',
          attributetype: 'attributeType',
          autoreverse: 'autoReverse',
          azimuth: 'azimuth',
          basefrequency: 'baseFrequency',
          baselineshift: 'baselineShift',
          'baseline-shift': 'baselineShift',
          baseprofile: 'baseProfile',
          bbox: 'bbox',
          begin: 'begin',
          bias: 'bias',
          by: 'by',
          calcmode: 'calcMode',
          capheight: 'capHeight',
          'cap-height': 'capHeight',
          clip: 'clip',
          clippath: 'clipPath',
          'clip-path': 'clipPath',
          clippathunits: 'clipPathUnits',
          cliprule: 'clipRule',
          'clip-rule': 'clipRule',
          color: 'color',
          colorinterpolation: 'colorInterpolation',
          'color-interpolation': 'colorInterpolation',
          colorinterpolationfilters: 'colorInterpolationFilters',
          'color-interpolation-filters': 'colorInterpolationFilters',
          colorprofile: 'colorProfile',
          'color-profile': 'colorProfile',
          colorrendering: 'colorRendering',
          'color-rendering': 'colorRendering',
          contentscripttype: 'contentScriptType',
          contentstyletype: 'contentStyleType',
          cursor: 'cursor',
          cx: 'cx',
          cy: 'cy',
          d: 'd',
          datatype: 'datatype',
          decelerate: 'decelerate',
          descent: 'descent',
          diffuseconstant: 'diffuseConstant',
          direction: 'direction',
          display: 'display',
          divisor: 'divisor',
          dominantbaseline: 'dominantBaseline',
          'dominant-baseline': 'dominantBaseline',
          dur: 'dur',
          dx: 'dx',
          dy: 'dy',
          edgemode: 'edgeMode',
          elevation: 'elevation',
          enablebackground: 'enableBackground',
          'enable-background': 'enableBackground',
          end: 'end',
          exponent: 'exponent',
          externalresourcesrequired: 'externalResourcesRequired',
          fill: 'fill',
          fillopacity: 'fillOpacity',
          'fill-opacity': 'fillOpacity',
          fillrule: 'fillRule',
          'fill-rule': 'fillRule',
          filter: 'filter',
          filterres: 'filterRes',
          filterunits: 'filterUnits',
          floodopacity: 'floodOpacity',
          'flood-opacity': 'floodOpacity',
          floodcolor: 'floodColor',
          'flood-color': 'floodColor',
          focusable: 'focusable',
          fontfamily: 'fontFamily',
          'font-family': 'fontFamily',
          fontsize: 'fontSize',
          'font-size': 'fontSize',
          fontsizeadjust: 'fontSizeAdjust',
          'font-size-adjust': 'fontSizeAdjust',
          fontstretch: 'fontStretch',
          'font-stretch': 'fontStretch',
          fontstyle: 'fontStyle',
          'font-style': 'fontStyle',
          fontvariant: 'fontVariant',
          'font-variant': 'fontVariant',
          fontweight: 'fontWeight',
          'font-weight': 'fontWeight',
          format: 'format',
          from: 'from',
          fx: 'fx',
          fy: 'fy',
          g1: 'g1',
          g2: 'g2',
          glyphname: 'glyphName',
          'glyph-name': 'glyphName',
          glyphorientationhorizontal: 'glyphOrientationHorizontal',
          'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
          glyphorientationvertical: 'glyphOrientationVertical',
          'glyph-orientation-vertical': 'glyphOrientationVertical',
          glyphref: 'glyphRef',
          gradienttransform: 'gradientTransform',
          gradientunits: 'gradientUnits',
          hanging: 'hanging',
          horizadvx: 'horizAdvX',
          'horiz-adv-x': 'horizAdvX',
          horizoriginx: 'horizOriginX',
          'horiz-origin-x': 'horizOriginX',
          ideographic: 'ideographic',
          imagerendering: 'imageRendering',
          'image-rendering': 'imageRendering',
          in2: 'in2',
          in: 'in',
          inlist: 'inlist',
          intercept: 'intercept',
          k1: 'k1',
          k2: 'k2',
          k3: 'k3',
          k4: 'k4',
          k: 'k',
          kernelmatrix: 'kernelMatrix',
          kernelunitlength: 'kernelUnitLength',
          kerning: 'kerning',
          keypoints: 'keyPoints',
          keysplines: 'keySplines',
          keytimes: 'keyTimes',
          lengthadjust: 'lengthAdjust',
          letterspacing: 'letterSpacing',
          'letter-spacing': 'letterSpacing',
          lightingcolor: 'lightingColor',
          'lighting-color': 'lightingColor',
          limitingconeangle: 'limitingConeAngle',
          local: 'local',
          markerend: 'markerEnd',
          'marker-end': 'markerEnd',
          markerheight: 'markerHeight',
          markermid: 'markerMid',
          'marker-mid': 'markerMid',
          markerstart: 'markerStart',
          'marker-start': 'markerStart',
          markerunits: 'markerUnits',
          markerwidth: 'markerWidth',
          mask: 'mask',
          maskcontentunits: 'maskContentUnits',
          maskunits: 'maskUnits',
          mathematical: 'mathematical',
          mode: 'mode',
          numoctaves: 'numOctaves',
          offset: 'offset',
          opacity: 'opacity',
          operator: 'operator',
          order: 'order',
          orient: 'orient',
          orientation: 'orientation',
          origin: 'origin',
          overflow: 'overflow',
          overlineposition: 'overlinePosition',
          'overline-position': 'overlinePosition',
          overlinethickness: 'overlineThickness',
          'overline-thickness': 'overlineThickness',
          paintorder: 'paintOrder',
          'paint-order': 'paintOrder',
          panose1: 'panose1',
          'panose-1': 'panose1',
          pathlength: 'pathLength',
          patterncontentunits: 'patternContentUnits',
          patterntransform: 'patternTransform',
          patternunits: 'patternUnits',
          pointerevents: 'pointerEvents',
          'pointer-events': 'pointerEvents',
          points: 'points',
          pointsatx: 'pointsAtX',
          pointsaty: 'pointsAtY',
          pointsatz: 'pointsAtZ',
          prefix: 'prefix',
          preservealpha: 'preserveAlpha',
          preserveaspectratio: 'preserveAspectRatio',
          primitiveunits: 'primitiveUnits',
          property: 'property',
          r: 'r',
          radius: 'radius',
          refx: 'refX',
          refy: 'refY',
          renderingintent: 'renderingIntent',
          'rendering-intent': 'renderingIntent',
          repeatcount: 'repeatCount',
          repeatdur: 'repeatDur',
          requiredextensions: 'requiredExtensions',
          requiredfeatures: 'requiredFeatures',
          resource: 'resource',
          restart: 'restart',
          result: 'result',
          results: 'results',
          rotate: 'rotate',
          rx: 'rx',
          ry: 'ry',
          scale: 'scale',
          security: 'security',
          seed: 'seed',
          shaperendering: 'shapeRendering',
          'shape-rendering': 'shapeRendering',
          slope: 'slope',
          spacing: 'spacing',
          specularconstant: 'specularConstant',
          specularexponent: 'specularExponent',
          speed: 'speed',
          spreadmethod: 'spreadMethod',
          startoffset: 'startOffset',
          stddeviation: 'stdDeviation',
          stemh: 'stemh',
          stemv: 'stemv',
          stitchtiles: 'stitchTiles',
          stopcolor: 'stopColor',
          'stop-color': 'stopColor',
          stopopacity: 'stopOpacity',
          'stop-opacity': 'stopOpacity',
          strikethroughposition: 'strikethroughPosition',
          'strikethrough-position': 'strikethroughPosition',
          strikethroughthickness: 'strikethroughThickness',
          'strikethrough-thickness': 'strikethroughThickness',
          string: 'string',
          stroke: 'stroke',
          strokedasharray: 'strokeDasharray',
          'stroke-dasharray': 'strokeDasharray',
          strokedashoffset: 'strokeDashoffset',
          'stroke-dashoffset': 'strokeDashoffset',
          strokelinecap: 'strokeLinecap',
          'stroke-linecap': 'strokeLinecap',
          strokelinejoin: 'strokeLinejoin',
          'stroke-linejoin': 'strokeLinejoin',
          strokemiterlimit: 'strokeMiterlimit',
          'stroke-miterlimit': 'strokeMiterlimit',
          strokewidth: 'strokeWidth',
          'stroke-width': 'strokeWidth',
          strokeopacity: 'strokeOpacity',
          'stroke-opacity': 'strokeOpacity',
          suppresscontenteditablewarning: 'suppressContentEditableWarning',
          suppresshydrationwarning: 'suppressHydrationWarning',
          surfacescale: 'surfaceScale',
          systemlanguage: 'systemLanguage',
          tablevalues: 'tableValues',
          targetx: 'targetX',
          targety: 'targetY',
          textanchor: 'textAnchor',
          'text-anchor': 'textAnchor',
          textdecoration: 'textDecoration',
          'text-decoration': 'textDecoration',
          textlength: 'textLength',
          textrendering: 'textRendering',
          'text-rendering': 'textRendering',
          to: 'to',
          transform: 'transform',
          typeof: 'typeof',
          u1: 'u1',
          u2: 'u2',
          underlineposition: 'underlinePosition',
          'underline-position': 'underlinePosition',
          underlinethickness: 'underlineThickness',
          'underline-thickness': 'underlineThickness',
          unicode: 'unicode',
          unicodebidi: 'unicodeBidi',
          'unicode-bidi': 'unicodeBidi',
          unicoderange: 'unicodeRange',
          'unicode-range': 'unicodeRange',
          unitsperem: 'unitsPerEm',
          'units-per-em': 'unitsPerEm',
          unselectable: 'unselectable',
          valphabetic: 'vAlphabetic',
          'v-alphabetic': 'vAlphabetic',
          values: 'values',
          vectoreffect: 'vectorEffect',
          'vector-effect': 'vectorEffect',
          version: 'version',
          vertadvy: 'vertAdvY',
          'vert-adv-y': 'vertAdvY',
          vertoriginx: 'vertOriginX',
          'vert-origin-x': 'vertOriginX',
          vertoriginy: 'vertOriginY',
          'vert-origin-y': 'vertOriginY',
          vhanging: 'vHanging',
          'v-hanging': 'vHanging',
          videographic: 'vIdeographic',
          'v-ideographic': 'vIdeographic',
          viewbox: 'viewBox',
          viewtarget: 'viewTarget',
          visibility: 'visibility',
          vmathematical: 'vMathematical',
          'v-mathematical': 'vMathematical',
          vocab: 'vocab',
          widths: 'widths',
          wordspacing: 'wordSpacing',
          'word-spacing': 'wordSpacing',
          writingmode: 'writingMode',
          'writing-mode': 'writingMode',
          x1: 'x1',
          x2: 'x2',
          x: 'x',
          xchannelselector: 'xChannelSelector',
          xheight: 'xHeight',
          'x-height': 'xHeight',
          xlinkactuate: 'xlinkActuate',
          'xlink:actuate': 'xlinkActuate',
          xlinkarcrole: 'xlinkArcrole',
          'xlink:arcrole': 'xlinkArcrole',
          xlinkhref: 'xlinkHref',
          'xlink:href': 'xlinkHref',
          xlinkrole: 'xlinkRole',
          'xlink:role': 'xlinkRole',
          xlinkshow: 'xlinkShow',
          'xlink:show': 'xlinkShow',
          xlinktitle: 'xlinkTitle',
          'xlink:title': 'xlinkTitle',
          xlinktype: 'xlinkType',
          'xlink:type': 'xlinkType',
          xmlbase: 'xmlBase',
          'xml:base': 'xmlBase',
          xmllang: 'xmlLang',
          'xml:lang': 'xmlLang',
          xmlns: 'xmlns',
          'xml:space': 'xmlSpace',
          xmlnsxlink: 'xmlnsXlink',
          'xmlns:xlink': 'xmlnsXlink',
          xmlspace: 'xmlSpace',
          y1: 'y1',
          y2: 'y2',
          y: 'y',
          ychannelselector: 'yChannelSelector',
          z: 'z',
          zoomandpan: 'zoomAndPan'
        };
        var ariaProperties = {
          'aria-current': 0,
          // state
          'aria-details': 0,
          'aria-disabled': 0,
          // state
          'aria-hidden': 0,
          // state
          'aria-invalid': 0,
          // state
          'aria-keyshortcuts': 0,
          'aria-label': 0,
          'aria-roledescription': 0,
          // Widget Attributes
          'aria-autocomplete': 0,
          'aria-checked': 0,
          'aria-expanded': 0,
          'aria-haspopup': 0,
          'aria-level': 0,
          'aria-modal': 0,
          'aria-multiline': 0,
          'aria-multiselectable': 0,
          'aria-orientation': 0,
          'aria-placeholder': 0,
          'aria-pressed': 0,
          'aria-readonly': 0,
          'aria-required': 0,
          'aria-selected': 0,
          'aria-sort': 0,
          'aria-valuemax': 0,
          'aria-valuemin': 0,
          'aria-valuenow': 0,
          'aria-valuetext': 0,
          // Live Region Attributes
          'aria-atomic': 0,
          'aria-busy': 0,
          'aria-live': 0,
          'aria-relevant': 0,
          // Drag-and-Drop Attributes
          'aria-dropeffect': 0,
          'aria-grabbed': 0,
          // Relationship Attributes
          'aria-activedescendant': 0,
          'aria-colcount': 0,
          'aria-colindex': 0,
          'aria-colspan': 0,
          'aria-controls': 0,
          'aria-describedby': 0,
          'aria-errormessage': 0,
          'aria-flowto': 0,
          'aria-labelledby': 0,
          'aria-owns': 0,
          'aria-posinset': 0,
          'aria-rowcount': 0,
          'aria-rowindex': 0,
          'aria-rowspan': 0,
          'aria-setsize': 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
        var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
        var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }

            if (rARIACamel.test(name)) {
              var ariaName = 'aria-' + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
              // DOM properties, then it is an invalid aria-* attribute.

              if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
              } // aria-* attributes should be lowercase; suggest the lowercase version.


              if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }

            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
              // DOM properties, then it is an invalid aria-* attribute.

              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              } // aria-* attributes should be lowercase; suggest the lowercase version.


              if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }

        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];

            for (var key in props) {
              var isValid = validateProperty(type, key);

              if (!isValid) {
                invalidProps.push(key);
              }
            }

            var unknownPropString = invalidProps.map(function (prop) {
              return '`' + prop + '`';
            }).join(', ');

            if (invalidProps.length === 1) {
              error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
            }
          }
        }

        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }

          warnInvalidARIAProps(type, props);
        }

        var didWarnValueNull = false;

        function validateProperties$1(type, props) {
          {
            if (type !== 'input' && type !== 'textarea' && type !== 'select') {
              return;
            }

            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;

              if (type === 'select' && props.multiple) {
                error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
              } else {
                error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
              }
            }
          }
        }

        var validateProperty$1 = function validateProperty$1() {};

        {
          var warnedProperties$1 = {};
          var _hasOwnProperty = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
          var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

          validateProperty$1 = function validateProperty$1(tagName, name, value, eventRegistry) {
            if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }

            var lowerCasedName = name.toLowerCase();

            if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
              error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
              warnedProperties$1[name] = true;
              return true;
            } // We can't rely on the event system being injected on the server.


            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies,
                  possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }

              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

              if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }

              if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              // If no event plugins have been injected, we are in a server environment.
              // So we can't tell if the event name is correct for sure, but we can filter
              // out known bad ones like `onclick`. We can't suggest a specific replacement though.
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
              }

              warnedProperties$1[name] = true;
              return true;
            } // Let the ARIA attribute hook validate ARIA attributes


            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }

            if (lowerCasedName === 'innerhtml') {
              error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
              warnedProperties$1[name] = true;
              return true;
            }

            if (lowerCasedName === 'aria') {
              error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
              warnedProperties$1[name] = true;
              return true;
            }

            if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
              error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', _typeof3(value));
              warnedProperties$1[name] = true;
              return true;
            }

            if (typeof value === 'number' && isNaN(value)) {
              error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
              warnedProperties$1[name] = true;
              return true;
            }

            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];

              if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              // Unknown attributes should have lowercase casing since that's how they
              // will be cased anyway with server rendering.
              error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }

            if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }

              warnedProperties$1[name] = true;
              return true;
            } // Now that we've validated casing, do not validate
            // data types for reserved props


            if (isReserved) {
              return true;
            } // Warn when a known attribute is a bad type


            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            } // Warn when passing the strings 'false' or 'true' into a boolean prop


            if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }

            return true;
          };
        }

        var warnUnknownProperties = function warnUnknownProperties(type, props, eventRegistry) {
          {
            var unknownProps = [];

            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);

              if (!isValid) {
                unknownProps.push(key);
              }
            }

            var unknownPropString = unknownProps.map(function (prop) {
              return '`' + prop + '`';
            }).join(', ');

            if (unknownProps.length === 1) {
              error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
            }
          }
        };

        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }

          warnUnknownProperties(type, props, eventRegistry);
        }

        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var IS_REPLAYED = 1 << 4; // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
        // we call willDeferLaterForLegacyFBSupport, thus not bailing out
        // will result in endless cycles like an infinite loop.
        // We also don't want to defer during event replaying.

        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        /**
         * Gets the target node from a native browser event by accounting for
         * inconsistencies in browser DOM APIs.
         *
         * @param {object} nativeEvent Native browser event.
         * @return {DOMEventTarget} Target node.
         */

        function getEventTarget(nativeEvent) {
          // Fallback to nativeEvent.srcElement for IE9
          // https://github.com/facebook/react/issues/12506
          var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
          // @see http://www.quirksmode.org/js/events_properties.html


          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }

        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;

        function restoreStateOfTarget(target) {
          // We perform this translation at the end of the event loop so that we
          // always receive the correct fiber here
          var internalInstance = getInstanceFromNode(target);

          if (!internalInstance) {
            // Unmounted
            return;
          }

          if (!(typeof restoreImpl === 'function')) {
            {
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
          }

          var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);

            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }

        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }

        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }

        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }

        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }

          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);

          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        } // the renderer. Such as when we're dispatching events or if third party
        // libraries need to call batchedUpdates. Eventually, this API will go away when
        // everything is batched by default. We'll then have a similar API to opt-out of
        // scheduled work and instead do synchronous work.
        // Defaults


        var batchedUpdatesImpl = function batchedUpdatesImpl(fn, bookkeeping) {
          return fn(bookkeeping);
        };

        var discreteUpdatesImpl = function discreteUpdatesImpl(fn, a, b, c, d) {
          return fn(a, b, c, d);
        };

        var flushDiscreteUpdatesImpl = function flushDiscreteUpdatesImpl() {};

        var batchedEventUpdatesImpl = batchedUpdatesImpl;
        var isInsideEventHandler = false;
        var isBatchingEventUpdates = false;

        function finishEventHandler() {
          // Here we wait until all updates have propagated, which is important
          // when using controlled components within layers:
          // https://github.com/facebook/react/issues/1698
          // Then we restore state of any controlled component.
          var controlledComponentsHavePendingUpdates = needsStateRestore();

          if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }

        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler) {
            // If we are currently inside another batch, we need to wait until it
            // fully completes before restoring state.
            return fn(bookkeeping);
          }

          isInsideEventHandler = true;

          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }

        function batchedEventUpdates(fn, a, b) {
          if (isBatchingEventUpdates) {
            // If we are currently inside another batch, we need to wait until it
            // fully completes before restoring state.
            return fn(a, b);
          }

          isBatchingEventUpdates = true;

          try {
            return batchedEventUpdatesImpl(fn, a, b);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }

        function discreteUpdates(fn, a, b, c, d) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;

          try {
            return discreteUpdatesImpl(fn, a, b, c, d);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;

            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }

        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          {
            if (!isInsideEventHandler) {
              flushDiscreteUpdatesImpl();
            }
          }
        }

        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }

        function isInteractive(tag) {
          return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
        }

        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
              return !!(props.disabled && isInteractive(type));

            default:
              return false;
          }
        }
        /**
         * @param {object} inst The instance, which is the source of events.
         * @param {string} registrationName Name of listener (e.g. `onClick`).
         * @return {?function} The stored callback.
         */


        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;

          if (stateNode === null) {
            // Work in progress (ex: onload events in incremental mode).
            return null;
          }

          var props = getFiberCurrentPropsFromNode(stateNode);

          if (props === null) {
            // Work in progress.
            return null;
          }

          var listener = props[registrationName];

          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }

          if (!(!listener || typeof listener === 'function')) {
            {
              throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + _typeof3(listener) + "` type.");
            }
          }

          return listener;
        }

        var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
        // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

        if (canUseDOM) {
          try {
            var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

            Object.defineProperty(options, 'passive', {
              get: function get() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener('test', options, options);
            window.removeEventListener('test', options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }

        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);

          try {
            func.apply(context, funcArgs);
          } catch (error) {
            this.onError(error);
          }
        }

        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          // In DEV mode, we swap out invokeGuardedCallback for a special version
          // that plays more nicely with the browser's DevTools. The idea is to preserve
          // "Pause on exceptions" behavior. Because React wraps all user-provided
          // functions in invokeGuardedCallback, and the production version of
          // invokeGuardedCallback uses a try-catch, all user exceptions are treated
          // like caught exceptions, and the DevTools won't pause unless the developer
          // takes the extra step of enabling pause on caught exceptions. This is
          // unintuitive, though, because even though React has caught the error, from
          // the developer's perspective, the error is uncaught.
          //
          // To preserve the expected "Pause on exceptions" behavior, we don't use a
          // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
          // DOM node, and call the user-provided callback from inside an event handler
          // for that fake event. If the callback throws, the error is "captured" using
          // a global event handler. But because the error happens in a different
          // event loop context, it does not interrupt the normal program flow.
          // Effectively, this gives us try-catch behavior without actually using
          // try-catch. Neat!
          // Check that the browser supports the APIs we need to implement our special
          // DEV version of invokeGuardedCallback
          if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
            var fakeNode = document.createElement('react');

            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
              // If document doesn't exist we know for sure we will crash in this method
              // when we call document.createEvent(). However this can cause confusing
              // errors: https://github.com/facebookincubator/create-react-app/issues/3482
              // So we preemptively throw with a better message instead.
              if (!(typeof document !== 'undefined')) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }

              var evt = document.createEvent('Event');
              var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
              // set this to true at the beginning, then set it to false right after
              // calling the function. If the function errors, `didError` will never be
              // set to false. This strategy works even if the browser is flaky and
              // fails to call our global error handler, because it doesn't rely on
              // the error event at all.

              var didError = true; // Keeps track of the value of window.event so that we can reset it
              // during the callback to let user code access window.event in the
              // browsers that support it.

              var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
              // dispatching: https://github.com/facebook/react/issues/13688

              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

              function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.

                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
                  window.event = windowEvent;
                }
              } // Create an event handler for our fake event. We will synchronously
              // dispatch our fake event using `dispatchEvent`. Inside the handler, we
              // call the user-provided callback.


              var funcArgs = Array.prototype.slice.call(arguments, 3);

              function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              } // Create a global error event handler. We use this to capture the value
              // that was thrown. It's possible that this error handler will fire more
              // than once; for example, if non-React code also calls `dispatchEvent`
              // and a handler for that event throws. We should be resilient to most of
              // those cases. Even if our error event handler fires more than once, the
              // last error event is always used. If the callback actually does error,
              // we know that the last error event is the correct one, because it's not
              // possible for anything else to have happened in between our callback
              // erroring and the code that follows the `dispatchEvent` call below. If
              // the callback doesn't error, but the error event was fired, we know to
              // ignore it because `didError` will be false, as described above.


              var error; // Use this to track whether the error event is ever called.

              var didSetError = false;
              var isCrossOriginError = false;

              function handleWindowError(event) {
                error = event.error;
                didSetError = true;

                if (error === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }

                if (event.defaultPrevented) {
                  // Some other error handler has prevented default.
                  // Browsers silence the error report if this happens.
                  // We'll remember this to later decide whether to log it or not.
                  if (error != null && _typeof3(error) === 'object') {
                    try {
                      error._suppressLogging = true;
                    } catch (inner) {// Ignore.
                    }
                  }
                }
              } // Create a fake event type.


              var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

              window.addEventListener('error', handleWindowError);
              fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
              // errors, it will trigger our global error handler.

              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);

              if (windowEventDescriptor) {
                Object.defineProperty(window, 'event', windowEventDescriptor);
              }

              if (didCall && didError) {
                if (!didSetError) {
                  // The callback errored, but the error event never fired.
                  error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
                } else if (isCrossOriginError) {
                  error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
                }

                this.onError(error);
              } // Remove our event listeners


              window.removeEventListener('error', handleWindowError);

              if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null; // Used by event system to capture/rethrow the first error.

        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function onError(error) {
            hasError = true;
            caughtError = error;
          }
        };
        /**
         * Call a function while guarding against errors that happens within it.
         * Returns an error if it throws, otherwise null.
         *
         * In production, this is implemented using a try-catch. The reason we don't
         * use a try-catch directly is so that we can swap out a different
         * implementation in DEV mode.
         *
         * @param {String} name of the guard to use for logging or debugging
         * @param {Function} func The function to invoke
         * @param {*} context The context to use when calling the function
         * @param {...*} args Arguments for function
         */

        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        /**
         * Same as invokeGuardedCallback, but instead of returning an error, it stores
         * it in a global so it can be rethrown by `rethrowCaughtError` later.
         * TODO: See if caughtError and rethrowError can be unified.
         *
         * @param {String} name of the guard to use for logging or debugging
         * @param {Function} func The function to invoke
         * @param {*} context The context to use when calling the function
         * @param {...*} args Arguments for function
         */


        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);

          if (hasError) {
            var error = clearCaughtError();

            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error;
            }
          }
        }
        /**
         * During execution of guarded functions we will capture the first error which
         * we will rethrow to be handled by the top level error handler.
         */


        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
          }
        }

        function hasCaughtError() {
          return hasError;
        }

        function clearCaughtError() {
          if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        /**
         * `ReactInstanceMap` maintains a mapping from a public facing stateful
         * instance (key) and the internal representation (value). This allows public
         * methods to accept the user facing instance as an argument and map them back
         * to internal methods.
         *
         * Note that this module is currently shared and assumed to be stateless.
         * If this becomes an actual Map, that will break.
         */


        function get(key) {
          return key._reactInternals;
        }

        function has(key) {
          return key._reactInternals !== undefined;
        }

        function set(key, value) {
          key._reactInternals = value;
        } // Don't change these two values. They're used by React Dev Tools.


        var NoFlags =
        /*                      */
        0;
        var PerformedWork =
        /*                */
        1; // You can change the rest (and add more).

        var Placement =
        /*                    */
        2;
        var Update =
        /*                       */
        4;
        var PlacementAndUpdate =
        /*           */
        6;
        var Deletion =
        /*                     */
        8;
        var ContentReset =
        /*                 */
        16;
        var Callback =
        /*                     */
        32;
        var DidCapture =
        /*                   */
        64;
        var Ref =
        /*                          */
        128;
        var Snapshot =
        /*                     */
        256;
        var Passive =
        /*                      */
        512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.

        var PassiveUnmountPendingDev =
        /*     */
        8192;
        var Hydrating =
        /*                    */
        1024;
        var HydratingAndUpdate =
        /*           */
        1028; // Passive & Update & Callback & Ref & Snapshot

        var LifecycleEffectMask =
        /*          */
        932; // Union of all host effects

        var HostEffectMask =
        /*               */
        2047; // These are not really side effects, but we still reuse this field.

        var Incomplete =
        /*                   */
        2048;
        var ShouldCapture =
        /*                */
        4096;
        var ForceUpdateForLegacySuspense =
        /* */
        16384; // Static tags describe aspects of a fiber that are not specific to a render,

        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;

          if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;

            do {
              node = nextNode;

              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
              }

              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }

          if (node.tag === HostRoot) {
            // TODO: Check if this was a nested HostRoot when used with
            // renderContainerIntoSubtree.
            return nearestMounted;
          } // If we didn't hit the root, that means that we're in an disconnected tree
          // that has been unmounted.


          return null;
        }

        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;

            if (suspenseState === null) {
              var current = fiber.alternate;

              if (current !== null) {
                suspenseState = current.memoizedState;
              }
            }

            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }

          return null;
        }

        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }

        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }

        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;

            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;

              if (!instance._warnedAboutRefsInRender) {
                error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
              }

              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);

          if (!fiber) {
            return false;
          }

          return getNearestMountedFiber(fiber) === fiber;
        }

        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }

        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;

          if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);

            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }

            if (nearestMounted !== fiber) {
              return null;
            }

            return fiber;
          } // If we have two possible branches, we'll walk backwards up to the root
          // to see what path the root points to. On the way we may hit one of the
          // special cases and we'll deal with them.


          var a = fiber;
          var b = alternate;

          while (true) {
            var parentA = a.return;

            if (parentA === null) {
              // We're at the root.
              break;
            }

            var parentB = parentA.alternate;

            if (parentB === null) {
              // There is no alternate. This is an unusual case. Currently, it only
              // happens when a Suspense component is hidden. An extra fragment fiber
              // is inserted in between the Suspense fiber and its children. Skip
              // over this extra fragment fiber and proceed to the next parent.
              var nextParent = parentA.return;

              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              } // If there's no parent, we're at the root.


              break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.


            if (parentA.child === parentB.child) {
              var child = parentA.child;

              while (child) {
                if (child === a) {
                  // We've determined that A is the current branch.
                  assertIsMounted(parentA);
                  return fiber;
                }

                if (child === b) {
                  // We've determined that B is the current branch.
                  assertIsMounted(parentA);
                  return alternate;
                }

                child = child.sibling;
              } // We should never have an alternate for any mounting node. So the only
              // way this could possibly happen is if this was unmounted, if at all.


              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }

            if (a.return !== b.return) {
              // The return pointer of A and the return pointer of B point to different
              // fibers. We assume that return pointers never criss-cross, so A must
              // belong to the child set of A.return, and B must belong to the child
              // set of B.return.
              a = parentA;
              b = parentB;
            } else {
              // The return pointers point to the same fiber. We'll have to use the
              // default, slow path: scan the child sets of each parent alternate to see
              // which child belongs to which set.
              //
              // Search parent A's child set
              var didFindChild = false;
              var _child = parentA.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }

                _child = _child.sibling;
              }

              if (!didFindChild) {
                // Search parent B's child set
                _child = parentB.child;

                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }

                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }

                  _child = _child.sibling;
                }

                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }

            if (!(a.alternate === b)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          } // If the root is not a host container, we're in a disconnected tree. I.e.
          // unmounted.


          if (!(a.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }

          if (a.stateNode.current === a) {
            // We've determined that A is the current branch.
            return fiber;
          } // Otherwise B has to be current branch.


          return alternate;
        }

        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);

          if (!currentParent) {
            return null;
          } // Next we'll drill down this component to find the first HostComponent/Text.


          var node = currentParent;

          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === currentParent) {
              return null;
            }

            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          } // Flow needs the return null here, but ESLint complains about it.
          // eslint-disable-next-line no-unreachable


          return null;
        }

        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);

          if (!currentParent) {
            return null;
          } // Next we'll drill down this component to find the first HostComponent/Text.


          var node = currentParent;

          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === currentParent) {
              return null;
            }

            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          } // Flow needs the return null here, but ESLint complains about it.
          // eslint-disable-next-line no-unreachable


          return null;
        }

        function doesFiberContain(parentFiber, childFiber) {
          var node = childFiber;
          var parentFiberAlternate = parentFiber.alternate;

          while (node !== null) {
            if (node === parentFiber || node === parentFiberAlternate) {
              return true;
            }

            node = node.return;
          }

          return false;
        }

        var attemptUserBlockingHydration;

        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }

        var attemptContinuousHydration;

        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }

        var attemptHydrationAtCurrentPriority;

        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }

        var attemptHydrationAtPriority;

        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        } // TODO: Upgrade this definition once we're on a newer version of Flow that


        var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

        var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
        // if the last target was dehydrated.

        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

        var queuedPointers = new Map();
        var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

        var queuedExplicitHydrationTargets = [];

        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }

        var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
        'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];

        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }

        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent: nativeEvent,
            targetContainers: [targetContainer]
          };
        }

        function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        } // Resets the replaying for this type of continuous event to no event.


        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case 'focusin':
            case 'focusout':
              queuedFocus = null;
              break;

            case 'dragenter':
            case 'dragleave':
              queuedDrag = null;
              break;

            case 'mouseover':
            case 'mouseout':
              queuedMouse = null;
              break;

            case 'pointerover':
            case 'pointerout':
              {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }

            case 'gotpointercapture':
            case 'lostpointercapture':
              {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
          }
        }

        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);

              if (_fiber2 !== null) {
                // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
              }
            }

            return queuedEvent;
          } // If we have already queued this exact event, then it's because
          // the different event systems have different DOM event listeners.
          // We can accumulate the flags, and the targetContainers, and
          // store a single event to be replayed.


          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;

          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }

          return existingQueuedEvent;
        }

        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          // These set relatedTarget to null because the replayed event will be treated as if we
          // moved from outside the window (no target) onto the target once it hydrates.
          // Instead of mutating we could clone the event.
          switch (domEventName) {
            case 'focusin':
              {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }

            case 'dragenter':
              {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }

            case 'mouseover':
              {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }

            case 'pointerover':
              {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }

            case 'gotpointercapture':
              {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
          }

          return false;
        } // Check if this target is unblocked. Returns true if it's unblocked.


        function attemptExplicitHydrationTarget(queuedTarget) {
          // TODO: This function shares a lot of logic with attemptToDispatchEvent.
          // Try to unify them. It's a bit tricky since it would require two return
          // values.
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);

          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);

            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;

              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);

                if (instance !== null) {
                  // We're blocked on hydrating this boundary.
                  // Increase its priority.
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
                    Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root = nearestMounted.stateNode;

                if (root.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                  // a root other than sync.

                  return;
                }
              }
            }
          }

          queuedTarget.blockedOn = null;
        }

        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }

          var targetContainers = queuedEvent.targetContainers;

          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

            if (nextBlockedOn !== null) {
              // We're still blocked. Try again later.
              var _fiber3 = getInstanceFromNode(nextBlockedOn);

              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }

              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            } // This target container was successfully dispatched. Try the next.


            targetContainers.shift();
          }

          return true;
        }

        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }

        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false; // First replay discrete events.

          while (queuedDiscreteEvents.length > 0) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];

            if (nextDiscreteEvent.blockedOn !== null) {
              // We're still blocked.
              // Increase the priority of this boundary to unblock
              // the next discrete event.
              var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);

              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }

              break;
            }

            var targetContainers = nextDiscreteEvent.targetContainers;

            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);

              if (nextBlockedOn !== null) {
                // We're still blocked. Try again later.
                nextDiscreteEvent.blockedOn = nextBlockedOn;
                break;
              } // This target container was successfully dispatched. Try the next.


              targetContainers.shift();
            }

            if (nextDiscreteEvent.blockedOn === null) {
              // We've successfully replayed the first event. Let's try the next one.
              queuedDiscreteEvents.shift();
            }
          } // Next replay any continuous events.


          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }

          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }

          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }

          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }

        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;

            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
              // now unblocked. This first might not actually be unblocked yet.
              // We could check it early to avoid scheduling an unnecessary callback.

              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }

        function retryIfBlockedOn(unblocked) {
          // Mark anything that was blocked on this as no longer blocked
          // and eligible for a replay.
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.

            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];

              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }

          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }

          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }

          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }

          var unblock = function unblock(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
          };

          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);

          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];

            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }

          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];

            if (nextExplicitTarget.blockedOn !== null) {
              // We're still blocked.
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);

              if (nextExplicitTarget.blockedOn === null) {
                // We're unblocked.
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }

        var DiscreteEvent = 0;
        var UserBlockingEvent = 1;
        var ContinuousEvent = 2;
        /**
         * Generate a mapping of standard vendor prefixes using the defined style property and event name.
         *
         * @param {string} styleProp
         * @param {string} eventName
         * @returns {object}
         */

        function makePrefixMap(styleProp, eventName) {
          var prefixes = {};
          prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes['Webkit' + styleProp] = 'webkit' + eventName;
          prefixes['Moz' + styleProp] = 'moz' + eventName;
          return prefixes;
        }
        /**
         * A list of event names to a configurable list of vendor prefixes.
         */


        var vendorPrefixes = {
          animationend: makePrefixMap('Animation', 'AnimationEnd'),
          animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
          animationstart: makePrefixMap('Animation', 'AnimationStart'),
          transitionend: makePrefixMap('Transition', 'TransitionEnd')
        };
        /**
         * Event names that have already been detected and prefixed (if applicable).
         */

        var prefixedEventNames = {};
        /**
         * Element to check for prefixes on.
         */

        var style = {};
        /**
         * Bootstrap if a DOM exists.
         */

        if (canUseDOM) {
          style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
          // the un-prefixed "animation" and "transition" properties are defined on the
          // style object but the events that fire will still be prefixed, so we need
          // to check if the un-prefixed events are usable, and if not remove them from the map.

          if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          } // Same as above


          if (!('TransitionEvent' in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        /**
         * Attempts to determine the correct vendor prefixed event name.
         *
         * @param {string} eventName
         * @returns {string}
         */


        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }

          var prefixMap = vendorPrefixes[eventName];

          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }

          return eventName;
        }

        var ANIMATION_END = getVendorPrefixedEventName('animationend');
        var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
        var ANIMATION_START = getVendorPrefixedEventName('animationstart');
        var TRANSITION_END = getVendorPrefixedEventName('transitionend');
        var topLevelEventsToReactNames = new Map();
        var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
        // the code required to apply the same logic for event prioritization and that of the
        // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
        // duplication (for which there would be quite a bit). For the events that are not needed
        // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
        // array of top level events.
        // Lastly, we ignore prettier so we can keep the formatting sane.
        // prettier-ignore

        var discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close', 'contextmenu', 'contextMenu', 'copy', 'copy', 'cut', 'cut', 'auxclick', 'auxClick', 'dblclick', 'doubleClick', // Careful!
        'dragend', 'dragEnd', 'dragstart', 'dragStart', 'drop', 'drop', 'focusin', 'focus', // Careful!
        'focusout', 'blur', // Careful!
        'input', 'input', 'invalid', 'invalid', 'keydown', 'keyDown', 'keypress', 'keyPress', 'keyup', 'keyUp', 'mousedown', 'mouseDown', 'mouseup', 'mouseUp', 'paste', 'paste', 'pause', 'pause', 'play', 'play', 'pointercancel', 'pointerCancel', 'pointerdown', 'pointerDown', 'pointerup', 'pointerUp', 'ratechange', 'rateChange', 'reset', 'reset', 'seeked', 'seeked', 'submit', 'submit', 'touchcancel', 'touchCancel', 'touchend', 'touchEnd', 'touchstart', 'touchStart', 'volumechange', 'volumeChange'];
        var otherDiscreteEvents = ['change', 'selectionchange', 'textInput', 'compositionstart', 'compositionend', 'compositionupdate'];
        var userBlockingPairsForSimpleEventPlugin = ['drag', 'drag', 'dragenter', 'dragEnter', 'dragexit', 'dragExit', 'dragleave', 'dragLeave', 'dragover', 'dragOver', 'mousemove', 'mouseMove', 'mouseout', 'mouseOut', 'mouseover', 'mouseOver', 'pointermove', 'pointerMove', 'pointerout', 'pointerOut', 'pointerover', 'pointerOver', 'scroll', 'scroll', 'toggle', 'toggle', 'touchmove', 'touchMove', 'wheel', 'wheel']; // prettier-ignore

        var continuousPairsForSimpleEventPlugin = ['abort', 'abort', ANIMATION_END, 'animationEnd', ANIMATION_ITERATION, 'animationIteration', ANIMATION_START, 'animationStart', 'canplay', 'canPlay', 'canplaythrough', 'canPlayThrough', 'durationchange', 'durationChange', 'emptied', 'emptied', 'encrypted', 'encrypted', 'ended', 'ended', 'error', 'error', 'gotpointercapture', 'gotPointerCapture', 'load', 'load', 'loadeddata', 'loadedData', 'loadedmetadata', 'loadedMetadata', 'loadstart', 'loadStart', 'lostpointercapture', 'lostPointerCapture', 'playing', 'playing', 'progress', 'progress', 'seeking', 'seeking', 'stalled', 'stalled', 'suspend', 'suspend', 'timeupdate', 'timeUpdate', TRANSITION_END, 'transitionEnd', 'waiting', 'waiting'];
        /**
         * Turns
         * ['abort', ...]
         *
         * into
         *
         * topLevelEventsToReactNames = new Map([
         *   ['abort', 'onAbort'],
         * ]);
         *
         * and registers them.
         */

        function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
          // As the event types are in pairs of two, we need to iterate
          // through in twos. The events are in pairs of two to save code
          // and improve init perf of processing this array, as it will
          // result in far fewer object allocations and property accesses
          // if we only use three arrays to process all the categories of
          // instead of tuples.
          for (var i = 0; i < eventTypes.length; i += 2) {
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = 'on' + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [topEvent]);
          }
        }

        function setEventPriorities(eventTypes, priority) {
          for (var i = 0; i < eventTypes.length; i++) {
            eventPriorities.set(eventTypes[i], priority);
          }
        }

        function getEventPriorityForPluginSystem(domEventName) {
          var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
          // want to warn if we can't detect the priority
          // for the event.

          return priority === undefined ? ContinuousEvent : priority;
        }

        function registerSimpleEvents() {
          registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
          registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
          registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
          setEventPriorities(otherDiscreteEvents, DiscreteEvent);
        }

        var Scheduler_now = Scheduler.unstable_now;
        {
          // Provide explicit error message when production+profiling bundle of e.g.
          // react-dom is used with production (non-profiling) bundle of
          // scheduler/tracing
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        } // ascending numbers so we can compare them like numbers. They start at 90 to
        // avoid clashing with Scheduler's priorities.

        var ImmediatePriority = 99;
        var UserBlockingPriority = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

        var NoPriority = 90;
        var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.

        var SyncLanePriority = 15;
        var SyncBatchedLanePriority = 14;
        var InputDiscreteHydrationLanePriority = 13;
        var InputDiscreteLanePriority = 12;
        var InputContinuousHydrationLanePriority = 11;
        var InputContinuousLanePriority = 10;
        var DefaultHydrationLanePriority = 9;
        var DefaultLanePriority = 8;
        var TransitionHydrationPriority = 7;
        var TransitionPriority = 6;
        var RetryLanePriority = 5;
        var SelectiveHydrationLanePriority = 4;
        var IdleHydrationLanePriority = 3;
        var IdleLanePriority = 2;
        var OffscreenLanePriority = 1;
        var NoLanePriority = 0;
        var TotalLanes = 31;
        var NoLanes =
        /*                        */
        0;
        var NoLane =
        /*                          */
        0;
        var SyncLane =
        /*                        */
        1;
        var SyncBatchedLane =
        /*                 */
        2;
        var InputDiscreteHydrationLane =
        /*      */
        4;
        var InputDiscreteLanes =
        /*                    */
        24;
        var InputContinuousHydrationLane =
        /*           */
        32;
        var InputContinuousLanes =
        /*                  */
        192;
        var DefaultHydrationLane =
        /*            */
        256;
        var DefaultLanes =
        /*                   */
        3584;
        var TransitionHydrationLane =
        /*                */
        4096;
        var TransitionLanes =
        /*                       */
        4186112;
        var RetryLanes =
        /*                            */
        62914560;
        var SomeRetryLane =
        /*                  */
        33554432;
        var SelectiveHydrationLane =
        /*          */
        67108864;
        var NonIdleLanes =
        /*                                 */
        134217727;
        var IdleHydrationLane =
        /*               */
        134217728;
        var IdleLanes =
        /*                             */
        805306368;
        var OffscreenLane =
        /*                   */
        1073741824;
        var NoTimestamp = -1;

        function setCurrentUpdateLanePriority(newLanePriority) {} // "Registers" used to "return" multiple values
        // Used by getHighestPriorityLanes and getNextLanes:


        var return_highestLanePriority = DefaultLanePriority;

        function getHighestPriorityLanes(lanes) {
          if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
          }

          if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
          }

          if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
          }

          var inputDiscreteLanes = InputDiscreteLanes & lanes;

          if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
          }

          if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
          }

          var inputContinuousLanes = InputContinuousLanes & lanes;

          if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
          }

          if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
          }

          var defaultLanes = DefaultLanes & lanes;

          if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
          }

          if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
          }

          var transitionLanes = TransitionLanes & lanes;

          if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
          }

          var retryLanes = RetryLanes & lanes;

          if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
          }

          if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
          }

          if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
          }

          var idleLanes = IdleLanes & lanes;

          if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
          }

          if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
          }

          {
            error('Should have found matching lanes. This is a bug in React.');
          } // This shouldn't be reachable, but as a fallback, return the entire bitmask.

          return_highestLanePriority = DefaultLanePriority;
          return lanes;
        }

        function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
          switch (schedulerPriorityLevel) {
            case ImmediatePriority:
              return SyncLanePriority;

            case UserBlockingPriority:
              return InputContinuousLanePriority;

            case NormalPriority:
            case LowPriority:
              // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
              return DefaultLanePriority;

            case IdlePriority:
              return IdleLanePriority;

            default:
              return NoLanePriority;
          }
        }

        function lanePriorityToSchedulerPriority(lanePriority) {
          switch (lanePriority) {
            case SyncLanePriority:
            case SyncBatchedLanePriority:
              return ImmediatePriority;

            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
              return UserBlockingPriority;

            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
              return NormalPriority;

            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
              return IdlePriority;

            case NoLanePriority:
              return NoPriority;

            default:
              {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
          }
        }

        function getNextLanes(root, wipLanes) {
          // Early bailout if there's no pending work left.
          var pendingLanes = root.pendingLanes;

          if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
          }

          var nextLanes = NoLanes;
          var nextLanePriority = NoLanePriority;
          var expiredLanes = root.expiredLanes;
          var suspendedLanes = root.suspendedLanes;
          var pingedLanes = root.pingedLanes; // Check if any work has expired.

          if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
          } else {
            // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            } else {
              // The only remaining work is Idle.
              var unblockedLanes = pendingLanes & ~suspendedLanes;

              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            }
          }

          if (nextLanes === NoLanes) {
            // This should only be reachable if we're suspended
            // TODO: Consider warning in this path if a fallback timer is not scheduled.
            return NoLanes;
          } // If there are higher priority lanes, we'll include them even if they
          // are suspended.


          nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
          // it and we'll lose our progress. We should only do this if the new lanes are
          // higher priority.

          if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
          // bother waiting until the root is complete.
          (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;

            if (nextLanePriority <= wipLanePriority) {
              return wipLanes;
            } else {
              return_highestLanePriority = nextLanePriority;
            }
          } // Check for entangled lanes and add them to the batch.
          //
          // A lane is said to be entangled with another when it's not allowed to render
          // in a batch that does not also include the other lane. Typically we do this
          // when multiple updates have the same source, and we only want to respond to
          // the most recent event from that source.
          //
          // Note that we apply entanglements *after* checking for partial work above.
          // This means that if a lane is entangled during an interleaved event while
          // it's already rendering, we won't interrupt it. This is intentional, since
          // entanglement is usually "best effort": we'll try our best to render the
          // lanes in the same batch, but it's not worth throwing out partially
          // completed work in order to do it.
          //
          // For those exceptions where entanglement is semantically important, like
          // useMutableSource, we should ensure that there is no partial work at the
          // time we apply the entanglement.


          var entangledLanes = root.entangledLanes;

          if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;

            while (lanes > 0) {
              var index = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index;
              nextLanes |= entanglements[index];
              lanes &= ~lane;
            }
          }

          return nextLanes;
        }

        function getMostRecentEventTime(root, lanes) {
          var eventTimes = root.eventTimes;
          var mostRecentEventTime = NoTimestamp;

          while (lanes > 0) {
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];

            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }

            lanes &= ~lane;
          }

          return mostRecentEventTime;
        }

        function computeExpirationTime(lane, currentTime) {
          // TODO: Expiration heuristic is constant per lane, so could use a map.
          getHighestPriorityLanes(lane);
          var priority = return_highestLanePriority;

          if (priority >= InputContinuousLanePriority) {
            // User interactions should expire slightly more quickly.
            //
            // NOTE: This is set to the corresponding constant as in Scheduler.js. When
            // we made it larger, a product metric in www regressed, suggesting there's
            // a user interaction that's being starved by a series of synchronous
            // updates. If that theory is correct, the proper solution is to fix the
            // starvation. However, this scenario supports the idea that expiration
            // times are an important safeguard when starvation does happen.
            //
            // Also note that, in the case of user input specifically, this will soon no
            // longer be an issue because we plan to make user input synchronous by
            // default (until you enter `startTransition`, of course.)
            //
            // If weren't planning to make these updates synchronous soon anyway, I
            // would probably make this number a configurable parameter.
            return currentTime + 250;
          } else if (priority >= TransitionPriority) {
            return currentTime + 5000;
          } else {
            // Anything idle priority or lower should never expire.
            return NoTimestamp;
          }
        }

        function markStarvedLanesAsExpired(root, currentTime) {
          // TODO: This gets called every time we yield. We can optimize by storing
          // the earliest expiration time on the root. Then use that to quickly bail out
          // of this function.
          var pendingLanes = root.pendingLanes;
          var suspendedLanes = root.suspendedLanes;
          var pingedLanes = root.pingedLanes;
          var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
          // expiration time. If so, we'll assume the update is being starved and mark
          // it as expired to force it to finish.

          var lanes = pendingLanes;

          while (lanes > 0) {
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];

            if (expirationTime === NoTimestamp) {
              // Found a pending lane with no expiration time. If it's not suspended, or
              // if it's pinged, assume it's CPU-bound. Compute a new expiration time
              // using the current time.
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              // This lane expired
              root.expiredLanes |= lane;
            }

            lanes &= ~lane;
          }
        } // This returns the highest priority pending lanes regardless of whether they


        function getLanesToRetrySynchronouslyOnError(root) {
          var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }

          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }

          return NoLanes;
        }

        function returnNextLanesPriority() {
          return return_highestLanePriority;
        }

        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }

        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }

        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        } // To ensure consistency across multiple updates in the same event, this should
        // be a pure function, so that it always returns the same lane for given inputs.


        function findUpdateLane(lanePriority, wipLanes) {
          switch (lanePriority) {
            case NoLanePriority:
              break;

            case SyncLanePriority:
              return SyncLane;

            case SyncBatchedLanePriority:
              return SyncBatchedLane;

            case InputDiscreteLanePriority:
              {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);

                if (_lane === NoLane) {
                  // Shift to the next priority level
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }

                return _lane;
              }

            case InputContinuousLanePriority:
              {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);

                if (_lane2 === NoLane) {
                  // Shift to the next priority level
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }

                return _lane2;
              }

            case DefaultLanePriority:
              {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);

                if (_lane3 === NoLane) {
                  // If all the default lanes are already being worked on, look for a
                  // lane in the transition range.
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);

                  if (_lane3 === NoLane) {
                    // All the transition lanes are taken, too. This should be very
                    // rare, but as a last resort, pick a default lane. This will have
                    // the effect of interrupting the current work-in-progress render.
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }

                return _lane3;
              }

            case TransitionPriority: // Should be handled by findTransitionLane instead

            case RetryLanePriority:
              // Should be handled by findRetryLane instead
              break;

            case IdleLanePriority:
              var lane = pickArbitraryLane(IdleLanes & ~wipLanes);

              if (lane === NoLane) {
                lane = pickArbitraryLane(IdleLanes);
              }

              return lane;
          }

          {
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
          }
        } // To ensure consistency across multiple updates in the same event, this should
        // be pure function, so that it always returns the same lane for given inputs.


        function findTransitionLane(wipLanes, pendingLanes) {
          // First look for lanes that are completely unclaimed, i.e. have no
          // pending work.
          var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);

          if (lane === NoLane) {
            // If all lanes have pending work, look for a lane that isn't currently
            // being worked on.
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);

            if (lane === NoLane) {
              // If everything is being worked on, pick any lane. This has the
              // effect of interrupting the current work-in-progress.
              lane = pickArbitraryLane(TransitionLanes);
            }
          }

          return lane;
        } // To ensure consistency across multiple updates in the same event, this should
        // be pure function, so that it always returns the same lane for given inputs.


        function findRetryLane(wipLanes) {
          // This is a fork of `findUpdateLane` designed specifically for Suspense
          // "retries" — a special update that attempts to flip a Suspense boundary
          // from its placeholder state to its primary/resolved state.
          var lane = pickArbitraryLane(RetryLanes & ~wipLanes);

          if (lane === NoLane) {
            lane = pickArbitraryLane(RetryLanes);
          }

          return lane;
        }

        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }

        function getLowestPriorityLane(lanes) {
          // This finds the most significant non-zero bit.
          var index = 31 - clz32(lanes);
          return index < 0 ? NoLanes : 1 << index;
        }

        function getEqualOrHigherPriorityLanes(lanes) {
          return (getLowestPriorityLane(lanes) << 1) - 1;
        }

        function pickArbitraryLane(lanes) {
          // This wrapper function gets inlined. Only exists so to communicate that it
          // doesn't matter which bit is selected; you can pick any bit without
          // affecting the algorithms where its used. Here I'm using
          // getHighestPriorityLane because it requires the fewest operations.
          return getHighestPriorityLane(lanes);
        }

        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }

        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }

        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }

        function isSubsetOfLanes(set, subset) {
          return (set & subset) === subset;
        }

        function mergeLanes(a, b) {
          return a | b;
        }

        function removeLanes(set, subset) {
          return set & ~subset;
        } // Seems redundant, but it changes the type from a single lane (used for
        // updates) to a group of lanes (used for flushing work).


        function laneToLanes(lane) {
          return lane;
        }

        function higherPriorityLane(a, b) {
          // This works because the bit ranges decrease in priority as you go left.
          return a !== NoLane && a < b ? a : b;
        }

        function createLaneMap(initial) {
          // Intentionally pushing one by one.
          // https://v8.dev/blog/elements-kinds#avoid-creating-holes
          var laneMap = [];

          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }

          return laneMap;
        }

        function markRootUpdated(root, updateLane, eventTime) {
          root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
          // it's not practical to try every single possible combination. We need a
          // heuristic to decide which lanes to attempt to render, and in which batches.
          // For now, we use the same heuristic as in the old ExpirationTimes model:
          // retry any lane at equal or lower priority, but don't try updates at higher
          // priority without also including the lower priority updates. This works well
          // when considering updates across different priority levels, but isn't
          // sufficient for updates within the same priority, since we want to treat
          // those updates as parallel.
          // Unsuspend any update at equal or lower priority.

          var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111

          root.suspendedLanes &= higherPriorityLanes;
          root.pingedLanes &= higherPriorityLanes;
          var eventTimes = root.eventTimes;
          var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
          // recent event, and we assume time is monotonically increasing.

          eventTimes[index] = eventTime;
        }

        function markRootSuspended(root, suspendedLanes) {
          root.suspendedLanes |= suspendedLanes;
          root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

          var expirationTimes = root.expirationTimes;
          var lanes = suspendedLanes;

          while (lanes > 0) {
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
          }
        }

        function markRootPinged(root, pingedLanes, eventTime) {
          root.pingedLanes |= root.suspendedLanes & pingedLanes;
        }

        function markDiscreteUpdatesExpired(root) {
          root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
        }

        function hasDiscreteLanes(lanes) {
          return (lanes & InputDiscreteLanes) !== NoLanes;
        }

        function markRootMutableRead(root, updateLane) {
          root.mutableReadLanes |= updateLane & root.pendingLanes;
        }

        function markRootFinished(root, remainingLanes) {
          var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
          root.pendingLanes = remainingLanes; // Let's try everything again

          root.suspendedLanes = 0;
          root.pingedLanes = 0;
          root.expiredLanes &= remainingLanes;
          root.mutableReadLanes &= remainingLanes;
          root.entangledLanes &= remainingLanes;
          var entanglements = root.entanglements;
          var eventTimes = root.eventTimes;
          var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

          var lanes = noLongerPendingLanes;

          while (lanes > 0) {
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
          }
        }

        function markRootEntangled(root, entangledLanes) {
          root.entangledLanes |= entangledLanes;
          var entanglements = root.entanglements;
          var lanes = entangledLanes;

          while (lanes > 0) {
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] |= entangledLanes;
            lanes &= ~lane;
          }
        }

        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
        // Based on:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

        var log = Math.log;
        var LN2 = Math.LN2;

        function clz32Fallback(lanes) {
          if (lanes === 0) {
            return 32;
          }

          return 31 - (log(lanes) / LN2 | 0) | 0;
        } // Intentionally not named imports because Rollup would use dynamic dispatch for


        var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority,
            runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

        var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
        // We'd like to remove this but it's not clear if this is safe.

        function setEnabled(enabled) {
          _enabled = !!enabled;
        }

        function isEnabled() {
          return _enabled;
        }

        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriorityForPluginSystem(domEventName);
          var listenerWrapper;

          switch (eventPriority) {
            case DiscreteEvent:
              listenerWrapper = dispatchDiscreteEvent;
              break;

            case UserBlockingEvent:
              listenerWrapper = dispatchUserBlockingUpdate;
              break;

            case ContinuousEvent:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }

          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }

        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          }
          discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
        }

        function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
          }
        }

        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }

          var allowReplay = true;
          {
            // TODO: replaying capture phase events is currently broken
            // because we used to do it during top-level native bubble handlers
            // but now we use different bubble and capture handlers.
            // In eager mode, we attach capture listeners early, so we need
            // to filter them out until we fix the logic to handle them correctly.
            // This could've been outside the flag but I put it inside to reduce risk.
            allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
          }

          if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
            domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
          }

          var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

          if (blockedOn === null) {
            // We successfully dispatched this event.
            if (allowReplay) {
              clearIfContinuousEvent(domEventName, nativeEvent);
            }

            return;
          }

          if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
              // This this to be replayed later once the target is available.
              queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }

            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              return;
            } // We need to clear only if we didn't queue because
            // queueing is accummulative.


            clearIfContinuousEvent(domEventName, nativeEvent);
          } // This is not replayable so we'll invoke it but without a target,
          // in case the event system needs to trace it.


          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.


        function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          // TODO: Warn if _enabled is false.
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);

          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);

            if (nearestMounted === null) {
              // This tree has been unmounted already. Dispatch without a target.
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;

              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);

                if (instance !== null) {
                  // Queue the event to be replayed later. Abort dispatching since we
                  // don't want this event dispatched twice through the event system.
                  // TODO: If this is the first discrete event in the queue. Schedule an increased
                  // priority for this boundary.
                  return instance;
                } // This shouldn't happen, something went wrong but to avoid blocking
                // the whole system, dispatch the event without a target.
                // TODO: Warn.


                targetInst = null;
              } else if (tag === HostRoot) {
                var root = nearestMounted.stateNode;

                if (root.hydrate) {
                  // If this happens during a replay something went wrong and it might block
                  // the whole system.
                  return getContainerFromFiber(nearestMounted);
                }

                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
              }
            }
          }

          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.

          return null;
        }

        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }

        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }

        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
          });
          return listener;
        }

        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive: passive
          });
          return listener;
        }
        /**
         * These variables store information about text content of a target node,
         * allowing comparison of content before and after a given event.
         *
         * Identify the node where selection currently begins, then observe
         * both its text content and its current position in the DOM. Since the
         * browser may natively replace the target node during composition, we can
         * use its position to find its replacement.
         *
         *
         */


        var root = null;
        var startText = null;
        var fallbackText = null;

        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }

        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }

        function getData() {
          if (fallbackText) {
            return fallbackText;
          }

          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;

          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }

          var minEnd = startLength - start;

          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }

          var sliceTail = end > 1 ? 1 - end : undefined;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }

        function getText() {
          if ('value' in root) {
            return root.value;
          }

          return root.textContent;
        }
        /**
         * `charCode` represents the actual "character code" and is safe to use with
         * `String.fromCharCode`. As such, only keys that correspond to printable
         * characters produce a valid `charCode`, the only exception to this is Enter.
         * The Tab-key is considered non-printable and does not have a `charCode`,
         * presumably because it does not produce a tab-character in browsers.
         *
         * @param {object} nativeEvent Native browser event.
         * @return {number} Normalized `charCode` property.
         */


        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;

          if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            // IE8 does not implement `charCode`, but `keyCode` has the correct value.
            charCode = keyCode;
          } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
          // report Enter as charCode 10 when ctrl is pressed.


          if (charCode === 10) {
            charCode = 13;
          } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
          // Must not discard the (non-)printable Enter-key.


          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }

          return 0;
        }

        function functionThatReturnsTrue() {
          return true;
        }

        function functionThatReturnsFalse() {
          return false;
        } // This is intentionally a factory so that we have different returned constructors.
        // If we had a single constructor, it would be megamorphic and engines would deopt.


        function createSyntheticEvent(Interface) {
          /**
           * Synthetic events are dispatched by event plugins, typically in response to a
           * top-level event delegation handler.
           *
           * These systems should generally use pooling to reduce the frequency of garbage
           * collection. The system should check `isPersistent` to determine whether the
           * event should be released into the pool after being dispatched. Users that
           * need a persisted event should invoke `persist`.
           *
           * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
           * normalizing browser quirks. Subclasses do not necessarily have to implement a
           * DOM interface; custom application-specific events can also subclass this.
           */
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;

            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }

              var normalize = Interface[_propName];

              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }

            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }

            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }

          _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function preventDefault() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;

              if (!event) {
                return;
              }

              if (event.preventDefault) {
                event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
              } else if (typeof event.returnValue !== 'unknown') {
                event.returnValue = false;
              }

              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function stopPropagation() {
              var event = this.nativeEvent;

              if (!event) {
                return;
              }

              if (event.stopPropagation) {
                event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
              } else if (typeof event.cancelBubble !== 'unknown') {
                // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
              }

              this.isPropagationStopped = functionThatReturnsTrue;
            },

            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function persist() {// Modern event system doesn't use pooling.
            },

            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue
          });

          return SyntheticBaseEvent;
        }
        /**
         * @interface Event
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */


        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function timeStamp(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);

        var UIEventInterface = _assign({}, EventInterface, {
          view: 0,
          detail: 0
        });

        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;

        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }

            lastMouseEvent = event;
          }
        }
        /**
         * @interface MouseEvent
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */


        var MouseEventInterface = _assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function relatedTarget(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function movementX(event) {
            if ('movementX' in event) {
              return event.movementX;
            }

            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function movementY(event) {
            if ('movementY' in event) {
              return event.movementY;
            } // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.


            return lastMovementY;
          }
        });

        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        /**
         * @interface DragEvent
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */

        var DragEventInterface = _assign({}, MouseEventInterface, {
          dataTransfer: 0
        });

        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        /**
         * @interface FocusEvent
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */

        var FocusEventInterface = _assign({}, UIEventInterface, {
          relatedTarget: 0
        });

        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        /**
         * @interface Event
         * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
         * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
         */

        var AnimationEventInterface = _assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });

        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        /**
         * @interface Event
         * @see http://www.w3.org/TR/clipboard-apis/
         */

        var ClipboardEventInterface = _assign({}, EventInterface, {
          clipboardData: function clipboardData(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
          }
        });

        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        /**
         * @interface Event
         * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
         */

        var CompositionEventInterface = _assign({}, EventInterface, {
          data: 0
        });

        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        /**
         * @interface Event
         * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
         *      /#events-inputevents
         */
        // Happens to share the same list for now.

        var SyntheticInputEvent = SyntheticCompositionEvent;
        /**
         * Normalization of deprecated HTML5 `key` values
         * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
         */

        var normalizeKey = {
          Esc: 'Escape',
          Spacebar: ' ',
          Left: 'ArrowLeft',
          Up: 'ArrowUp',
          Right: 'ArrowRight',
          Down: 'ArrowDown',
          Del: 'Delete',
          Win: 'OS',
          Menu: 'ContextMenu',
          Apps: 'ContextMenu',
          Scroll: 'ScrollLock',
          MozPrintableKey: 'Unidentified'
        };
        /**
         * Translation from legacy `keyCode` to HTML5 `key`
         * Only special keys supported, all others depend on keyboard layout or browser
         * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
         */

        var translateToKey = {
          '8': 'Backspace',
          '9': 'Tab',
          '12': 'Clear',
          '13': 'Enter',
          '16': 'Shift',
          '17': 'Control',
          '18': 'Alt',
          '19': 'Pause',
          '20': 'CapsLock',
          '27': 'Escape',
          '32': ' ',
          '33': 'PageUp',
          '34': 'PageDown',
          '35': 'End',
          '36': 'Home',
          '37': 'ArrowLeft',
          '38': 'ArrowUp',
          '39': 'ArrowRight',
          '40': 'ArrowDown',
          '45': 'Insert',
          '46': 'Delete',
          '112': 'F1',
          '113': 'F2',
          '114': 'F3',
          '115': 'F4',
          '116': 'F5',
          '117': 'F6',
          '118': 'F7',
          '119': 'F8',
          '120': 'F9',
          '121': 'F10',
          '122': 'F11',
          '123': 'F12',
          '144': 'NumLock',
          '145': 'ScrollLock',
          '224': 'Meta'
        };
        /**
         * @param {object} nativeEvent Native browser event.
         * @return {string} Normalized `key` property.
         */

        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

            if (key !== 'Unidentified') {
              return key;
            }
          } // Browser does not implement `key`, polyfill as much of it as we can.


          if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.

            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
          }

          if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
            // While user keyboard layout determines the actual meaning of each
            // `keyCode` value, almost all function keys have a universal value.
            return translateToKey[nativeEvent.keyCode] || 'Unidentified';
          }

          return '';
        }
        /**
         * Translation from modifier key to the associated property in the event.
         * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
         */


        var modifierKeyToProp = {
          Alt: 'altKey',
          Control: 'ctrlKey',
          Meta: 'metaKey',
          Shift: 'shiftKey'
        }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
        // getModifierState. If getModifierState is not supported, we map it to a set of
        // modifier keys exposed by the event. In this case, Lock-keys are not supported.

        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;

          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }

          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }

        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        /**
         * @interface KeyboardEvent
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */


        var KeyboardEventInterface = _assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function charCode(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') {
              return getEventCharCode(event);
            }

            return 0;
          },
          keyCode: function keyCode(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') {
              return event.keyCode;
            }

            return 0;
          },
          which: function which(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') {
              return getEventCharCode(event);
            }

            if (event.type === 'keydown' || event.type === 'keyup') {
              return event.keyCode;
            }

            return 0;
          }
        });

        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        /**
         * @interface PointerEvent
         * @see http://www.w3.org/TR/pointerevents/
         */

        var PointerEventInterface = _assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });

        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        /**
         * @interface TouchEvent
         * @see http://www.w3.org/TR/touch-events/
         */

        var TouchEventInterface = _assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });

        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        /**
         * @interface Event
         * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
         * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
         */

        var TransitionEventInterface = _assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });

        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        /**
         * @interface WheelEvent
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */

        var WheelEventInterface = _assign({}, MouseEventInterface, {
          deltaX: function deltaX(event) {
            return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
            'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function deltaY(event) {
            return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
            'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
            'wheelDelta' in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0
        });

        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
        var documentMode = null;

        if (canUseDOM && 'documentMode' in document) {
          documentMode = document.documentMode;
        } // Webkit offers a very useful `textInput` event that can be used to
        // directly represent `beforeInput`. The IE `textinput` event is not as
        // useful, so we don't use it.


        var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
        // by the native compositionend event may be incorrect. Japanese ideographic
        // spaces, for instance (\u3000) are not recorded correctly.

        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

        function registerEvents() {
          registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
          registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
          registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
          registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
        } // Track whether we've ever handled a keypress on the space key.


        var hasSpaceKeypress = false;
        /**
         * Return whether a native keypress event is assumed to be a command.
         * This is required because Firefox fires `keypress` events for key commands
         * (cut, copy, select-all, etc.) even though no character is inserted.
         */

        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
          !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        /**
         * Translate native top level events into event types.
         */


        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case 'compositionstart':
              return 'onCompositionStart';

            case 'compositionend':
              return 'onCompositionEnd';

            case 'compositionupdate':
              return 'onCompositionUpdate';
          }
        }
        /**
         * Does our fallback best-guess model think this event signifies that
         * composition has begun?
         */


        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
        }
        /**
         * Does our fallback mode think that this event is the end of composition?
         */


        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case 'keyup':
              // Command keys insert or clear IME input.
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

            case 'keydown':
              // Expect IME keyCode on each keydown. If we get any other
              // code we must have exited earlier.
              return nativeEvent.keyCode !== START_KEYCODE;

            case 'keypress':
            case 'mousedown':
            case 'focusout':
              // Events are not possible without cancelling IME.
              return true;

            default:
              return false;
          }
        }
        /**
         * Google Input Tools provides composition data via a CustomEvent,
         * with the `data` property populated in the `detail` object. If this
         * is available on the event object, use it. If not, this is a plain
         * composition event and we have nothing special to extract.
         *
         * @param {object} nativeEvent
         * @return {?string}
         */


        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;

          if (_typeof3(detail) === 'object' && 'data' in detail) {
            return detail.data;
          }

          return null;
        }
        /**
         * Check if a composition event was triggered by Korean IME.
         * Our fallback mode does not work well with IE's Korean IME,
         * so just use native composition events when Korean IME is used.
         * Although CompositionEvent.locale property is deprecated,
         * it is available in IE, where our fallback mode is enabled.
         *
         * @param {object} nativeEvent
         * @return {boolean}
         */


        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === 'ko';
        } // Track the current IME composition status, if any.


        var isComposing = false;
        /**
         * @return {?object} A SyntheticCompositionEvent.
         */

        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;

          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = 'onCompositionStart';
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = 'onCompositionEnd';
          }

          if (!eventType) {
            return null;
          }

          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === 'onCompositionEnd') {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }

          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: event,
              listeners: listeners
            });

            if (fallbackData) {
              // Inject data generated from fallback path into the synthetic event.
              // This matches the property of native CompositionEventInterface.
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);

              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }

        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case 'compositionend':
              return getDataFromCustomEvent(nativeEvent);

            case 'keypress':
              /**
               * If native `textInput` events are available, our goal is to make
               * use of them. However, there is a special case: the spacebar key.
               * In Webkit, preventing default on a spacebar `textInput` event
               * cancels character insertion, but it *also* causes the browser
               * to fall back to its default spacebar behavior of scrolling the
               * page.
               *
               * Tracking at:
               * https://code.google.com/p/chromium/issues/detail?id=355103
               *
               * To avoid this issue, use the keypress event as if no `textInput`
               * event is available.
               */
              var which = nativeEvent.which;

              if (which !== SPACEBAR_CODE) {
                return null;
              }

              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;

            case 'textInput':
              // Record the characters to be added to the DOM.
              var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
              // it at the keypress level and bail immediately. Android Chrome
              // doesn't give us keycodes, so we need to ignore it.

              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }

              return chars;

            default:
              // For other native event types, do nothing.
              return null;
          }
        }
        /**
         * For browsers that do not provide the `textInput` event, extract the
         * appropriate string to use for SyntheticInputEvent.
         */


        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          // If we are currently composing (IME) and using a fallback to do so,
          // try to extract the composed characters from the fallback object.
          // If composition event is available, we extract a string only at
          // compositionevent, otherwise extract it at fallback events.
          if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }

            return null;
          }

          switch (domEventName) {
            case 'paste':
              // If a paste event occurs after a keypress, throw out the input
              // chars. Paste events should not lead to BeforeInput events.
              return null;

            case 'keypress':
              /**
               * As of v27, Firefox may fire keypress events even when no character
               * will be inserted. A few possibilities:
               *
               * - `which` is `0`. Arrow keys, Esc key, etc.
               *
               * - `which` is the pressed key code, but no char is available.
               *   Ex: 'AltGr + d` in Polish. There is no modified character for
               *   this key combination and no character is inserted into the
               *   document, but FF fires the keypress for char code `100` anyway.
               *   No `input` event will occur.
               *
               * - `which` is the pressed key code, but a command combination is
               *   being used. Ex: `Cmd+C`. No character is inserted, and no
               *   `input` event will occur.
               */
              if (!isKeypressCommand(nativeEvent)) {
                // IE fires the `keypress` event when a user types an emoji via
                // Touch keyboard of Windows.  In such a case, the `char` property
                // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                // is 2, the property `which` does not represent an emoji correctly.
                // In such a case, we directly return the `char` property instead of
                // using `which`.
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }

              return null;

            case 'compositionend':
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

            default:
              return null;
          }
        }
        /**
         * Extract a SyntheticInputEvent for `beforeInput`, based on either native
         * `textInput` or fallback behavior.
         *
         * @return {?object} A SyntheticInputEvent.
         */


        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;

          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          } // If no characters are being inserted, no BeforeInput event should
          // be fired.


          if (!chars) {
            return null;
          }

          var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

          if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: event,
              listeners: listeners
            });
            event.data = chars;
          }
        }
        /**
         * Create an `onBeforeInput` event to match
         * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
         *
         * This event plugin is based on the native `textInput` event
         * available in Chrome, Safari, Opera, and IE. This event fires after
         * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
         *
         * `beforeInput` is spec'd but not implemented in any browsers, and
         * the `input` event does not provide any useful information about what has
         * actually been added, contrary to the spec. Thus, `textInput` is the best
         * available event to identify the characters that have actually been inserted
         * into the target node.
         *
         * This plugin is also responsible for emitting `composition` events, thus
         * allowing us to share composition fallback code for both `beforeInput` and
         * `composition` event types.
         */


        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        /**
         * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
         */


        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          'datetime-local': true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };

        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

          if (nodeName === 'input') {
            return !!supportedInputTypes[elem.type];
          }

          if (nodeName === 'textarea') {
            return true;
          }

          return false;
        }
        /**
         * Checks if an event is supported in the current execution environment.
         *
         * NOTE: This will not work correctly for non-generic events such as `change`,
         * `reset`, `load`, `error`, and `select`.
         *
         * Borrows from Modernizr.
         *
         * @param {string} eventNameSuffix Event name, e.g. "click".
         * @return {boolean} True if the event is supported.
         * @internal
         * @license Modernizr 3.0.0pre (Custom Build) | MIT
         */


        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }

          var eventName = 'on' + eventNameSuffix;
          var isSupported = (eventName in document);

          if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
          }

          return isSupported;
        }

        function registerEvents$1() {
          registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
        }

        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          // Flag this event loop as needing state restore.
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

          if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
              event: event,
              listeners: listeners
            });
          }
        }
        /**
         * For IE shims
         */


        var activeElement = null;
        var activeElementInst = null;
        /**
         * SECTION: handle `change` event
         */

        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
        }

        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
          // other events and have it go through ReactBrowserEventEmitter. Since it
          // doesn't, we manually listen for the events and so we have to enqueue and
          // process the abstract event manually.
          //
          // Batching is necessary here in order to ensure that all event handlers run
          // before the next rerender (including event handlers attached to ancestor
          // elements instead of directly on the input). Without this, controlled
          // components don't work properly in conjunction with event bubbling because
          // the component is rerendered and the value reverted before all the event
          // handlers can run. See https://github.com/facebook/react/issues/708.

          batchedUpdates(runEventInBatch, dispatchQueue);
        }

        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }

        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);

          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }

        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === 'change') {
            return targetInst;
          }
        }
        /**
         * SECTION: handle `input` event
         */


        var isInputEventSupported = false;

        if (canUseDOM) {
          // IE9 claims to support the input event but fails to trigger it when
          // deleting text, so we ignore its input events.
          isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
        }
        /**
         * (For IE <=9) Starts tracking propertychange events on the passed-in element
         * and override the value property so that we can distinguish user events from
         * value changes in JS.
         */


        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent('onpropertychange', handlePropertyChange);
        }
        /**
         * (For IE <=9) Removes the event listeners from the currently-tracked element,
         * if any exists.
         */


        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }

          activeElement.detachEvent('onpropertychange', handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        /**
         * (For IE <=9) Handles a propertychange event, sending a `change` event if
         * the value of the active element has changed.
         */


        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== 'value') {
            return;
          }

          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }

        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === 'focusout') {
            stopWatchingForValueChange();
          }
        } // For IE8 and IE9.


        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
            // On the selectionchange event, the target is just document which isn't
            // helpful for us so just check activeElement instead.
            //
            // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
            // propertychange on the first input event after setting `value` from a
            // script and fires only keydown, keypress, keyup. Catching keyup usually
            // gets it and catching keydown lets us fire an event for the first
            // keystroke if user does a key repeat (it'll be a little delayed: right
            // before the second keystroke). Other input methods (e.g., paste) seem to
            // fire selectionchange normally.
            return getInstIfValueChanged(activeElementInst);
          }
        }
        /**
         * SECTION: handle `click` event
         */


        function shouldUseClickEvent(elem) {
          // Use the `click` event to detect changes to checkbox and radio inputs.
          // This approach works across all browsers, whereas `change` does not fire
          // until `blur` in IE8.
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
        }

        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === 'click') {
            return getInstIfValueChanged(targetInst);
          }
        }

        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === 'input' || domEventName === 'change') {
            return getInstIfValueChanged(targetInst);
          }
        }

        function handleControlledInputBlur(node) {
          var state = node._wrapperState;

          if (!state || !state.controlled || node.type !== 'number') {
            return;
          }

          {
            // If controlled, assign the value attribute to the current value on blur
            setDefaultValue(node, 'number', node.value);
          }
        }
        /**
         * This plugin creates an `onChange` event that normalizes change events
         * across form elements. This event fires at a time when it's possible to
         * change the element's value without seeing a flicker.
         *
         * Supported elements are:
         * - input (see `isTextInputElement`)
         * - textarea
         * - select
         */


        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;

          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }

          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);

            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }

          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          } // When blurring, set the value attribute for number inputs


          if (domEventName === 'focusout') {
            handleControlledInputBlur(targetNode);
          }
        }

        function registerEvents$2() {
          registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
          registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
          registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
          registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
        }
        /**
         * For almost every interaction we care about, there will be both a top-level
         * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
         * we do not extract duplicate events. However, moving the mouse into the
         * browser from outside will not fire a `mouseout` event. In this case, we use
         * the `mouseover` top-level event.
         */


        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
          var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

          if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

            if (related) {
              // If the related node is managed by React, we can assume that we have
              // already dispatched the corresponding events during its mouseout.
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }

          if (!isOutEvent && !isOverEvent) {
            // Must not be a mouse or pointer in or out - ignoring.
            return;
          }

          var win; // TODO: why is this nullable in the types but we read from it?

          if (nativeEventTarget.window === nativeEventTarget) {
            // `nativeEventTarget` is probably a window object.
            win = nativeEventTarget;
          } else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;

            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }

          var from;
          var to;

          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;

            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);

              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
          }

          if (from === to) {
            // Nothing pertains to our managed components.
            return;
          }

          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = 'onMouseLeave';
          var enterEventType = 'onMouseEnter';
          var eventTypePrefix = 'mouse';

          if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
          }

          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null; // We should only process this nativeEvent if we are processing
          // the first ancestor. Next time, we will ignore the event.

          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }

          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        /**
         * inlined Object.is polyfill to avoid requiring consumers ship their own
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
         */


        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
          ;
        }

        var objectIs = typeof Object.is === 'function' ? Object.is : is;
        var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        /**
         * Performs equality by iterating through keys on an object and returning false
         * when any key has values which are not strictly equal between the arguments.
         * Returns true when the values of all keys are strictly equal.
         */

        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }

          if (_typeof3(objA) !== 'object' || objA === null || _typeof3(objB) !== 'object' || objB === null) {
            return false;
          }

          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);

          if (keysA.length !== keysB.length) {
            return false;
          } // Test for A's keys different from B.


          for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
              return false;
            }
          }

          return true;
        }
        /**
         * Given any node return the first leaf node without children.
         *
         * @param {DOMElement|DOMTextNode} node
         * @return {DOMElement|DOMTextNode}
         */


        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }

          return node;
        }
        /**
         * Get the next sibling within a container. This will walk up the
         * DOM if a node's siblings have been exhausted.
         *
         * @param {DOMElement|DOMTextNode} node
         * @return {?DOMElement|DOMTextNode}
         */


        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }

            node = node.parentNode;
          }
        }
        /**
         * Get object describing the nodes which contain characters at offset.
         *
         * @param {DOMElement|DOMTextNode} root
         * @param {number} offset
         * @return {?object}
         */


        function getNodeForCharacterOffset(root, offset) {
          var node = getLeafNode(root);
          var nodeStart = 0;
          var nodeEnd = 0;

          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;

              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node: node,
                  offset: offset - nodeStart
                };
              }

              nodeStart = nodeEnd;
            }

            node = getLeafNode(getSiblingNode(node));
          }
        }
        /**
         * @param {DOMElement} outerNode
         * @return {?object}
         */


        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();

          if (!selection || selection.rangeCount === 0) {
            return null;
          }

          var anchorNode = selection.anchorNode,
              anchorOffset = selection.anchorOffset,
              focusNode = selection.focusNode,
              focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
          // up/down buttons on an <input type="number">. Anonymous divs do not seem to
          // expose properties, triggering a "Permission denied error" if any of its
          // properties are accessed. The only seemingly possible way to avoid erroring
          // is to access a property that typically works for non-anonymous divs and
          // catch any error that may otherwise arise. See
          // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

          try {
            /* eslint-disable no-unused-expressions */
            anchorNode.nodeType;
            focusNode.nodeType;
            /* eslint-enable no-unused-expressions */
          } catch (e) {
            return null;
          }

          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        /**
         * Returns {start, end} where `start` is the character/codepoint index of
         * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
         * `end` is the index of (focusNode, focusOffset).
         *
         * Returns null if you pass in garbage input but we should probably just crash.
         *
         * Exported only for testing.
         */


        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;

          outer: while (true) {
            var next = null;

            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }

              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }

              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }

              if ((next = node.firstChild) === null) {
                break;
              } // Moving from `node` to its first child `next`.


              parentNode = node;
              node = next;
            }

            while (true) {
              if (node === outerNode) {
                // If `outerNode` has children, this is always the second time visiting
                // it. If it has no children, this is still the first loop, and the only
                // valid selection is anchorNode and focusNode both equal to this node
                // and both offsets 0, in which case we will have handled above.
                break outer;
              }

              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }

              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }

              if ((next = node.nextSibling) !== null) {
                break;
              }

              node = parentNode;
              parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.


            node = next;
          }

          if (start === -1 || end === -1) {
            // This should never happen. (Would happen if the anchor/focus nodes aren't
            // actually inside the passed-in node.)
            return null;
          }

          return {
            start: start,
            end: end
          };
        }
        /**
         * In modern non-IE browsers, we can support both forward and backward
         * selections.
         *
         * Note: IE10+ supports the Selection object, but it does not support
         * the `extend` method, which means that even in modern IE, it's not possible
         * to programmatically create a backward selection. Thus, for all IE
         * versions, we use the old IE API to create our selections.
         *
         * @param {DOMElement|DOMTextNode} node
         * @param {object} offsets
         */


        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
          // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
          // fails when pasting 100+ items)

          if (!win.getSelection) {
            return;
          }

          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
          // Flip backward selections, so we can set with a single range.

          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }

          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);

          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }

            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();

            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }

        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }

        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ('contains' in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }

        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }

        function isSameOriginFrame(iframe) {
          try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
          } catch (err) {
            return false;
          }
        }

        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();

          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }

            element = getActiveElement(win.document);
          }

          return element;
        }
        /**
         * @ReactInputSelection: React input selection module. Based on Selection.js,
         * but modified to be suitable for react and has a couple of bug fixes (doesn't
         * assume buttons have range selections allowed).
         * Input selection module for React.
         */

        /**
         * @hasSelectionCapabilities: we get the element types that support selection
         * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
         * and `selectionEnd` rows.
         */


        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
        }

        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        /**
         * @restoreSelection: If any selection information was potentially lost,
         * restore it. This is useful when performing operations that could remove dom
         * nodes and place them back in, resulting in focus being lost.
         */


        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;

          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            } // Focusing a node can change the scroll position, which is undesirable


            var ancestors = [];
            var ancestor = priorFocusedElem;

            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }

            if (typeof priorFocusedElem.focus === 'function') {
              priorFocusedElem.focus();
            }

            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        /**
         * @getSelection: Gets the selection bounds of a focused textarea, input or
         * contentEditable node.
         * -@input: Look up selection bounds of this input
         * -@return {start: selectionStart, end: selectionEnd}
         */


        function getSelection(input) {
          var selection;

          if ('selectionStart' in input) {
            // Modern browser with input or textarea.
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            // Content editable or old IE textarea.
            selection = getOffsets(input);
          }

          return selection || {
            start: 0,
            end: 0
          };
        }
        /**
         * @setSelection: Sets the selection bounds of a textarea or input and focuses
         * the input.
         * -@input     Set selection bounds of this input or textarea
         * -@offsets   Object of same form that is returned from get*
         */


        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;

          if (end === undefined) {
            end = start;
          }

          if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }

        var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

        function registerEvents$3() {
          registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
        }

        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        /**
         * Get an object which is a unique representation of the current selection.
         *
         * The return value will not be consistent across nodes or browsers, but
         * two identical selections on the same node will return identical objects.
         */

        function getSelection$1(node) {
          if ('selectionStart' in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        /**
         * Get document associated with the event target.
         */


        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        /**
         * Poll selection to see whether it's changed.
         *
         * @param {object} nativeEvent
         * @param {object} nativeEventTarget
         * @return {?SyntheticEvent}
         */


        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          // Ensure we have the right element, and that the user is not dragging a
          // selection (this matches native `select` event behavior). In HTML5, select
          // fires only on input and textarea thus if there's no focused element we
          // won't dispatch.
          var doc = getEventTargetDocument(nativeEventTarget);

          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          } // Only fire when selection has actually changed.


          var currentSelection = getSelection$1(activeElement$1);

          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

            if (listeners.length > 0) {
              var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: event,
                listeners: listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        /**
         * This plugin creates an `onSelect` event that normalizes select events
         * across form elements.
         *
         * Supported elements are:
         * - input (see `isTextInputElement`)
         * - textarea
         * - contentEditable
         *
         * This differs from native browser implementations in the following ways:
         * - Fires on contentEditable fields as well as inputs.
         * - Fires for collapsed selection.
         * - Fires after user input.
         */


        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

          switch (domEventName) {
            // Track the input node that has focus.
            case 'focusin':
              if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }

              break;

            case 'focusout':
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.

            case 'mousedown':
              mouseDown = true;
              break;

            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.

            case 'selectionchange':
              if (skipSelectionChangeEvent) {
                break;
              }

            // falls through

            case 'keydown':
            case 'keyup':
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }

        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);

          if (reactName === undefined) {
            return;
          }

          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;

          switch (domEventName) {
            case 'keypress':
              // Firefox creates a keypress event for function keys too. This removes
              // the unwanted keypress events. Enter is however both printable and
              // non-printable. One would expect Tab to be as well (but it isn't).
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }

            /* falls through */

            case 'keydown':
            case 'keyup':
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;

            case 'focusin':
              reactEventType = 'focus';
              SyntheticEventCtor = SyntheticFocusEvent;
              break;

            case 'focusout':
              reactEventType = 'blur';
              SyntheticEventCtor = SyntheticFocusEvent;
              break;

            case 'beforeblur':
            case 'afterblur':
              SyntheticEventCtor = SyntheticFocusEvent;
              break;

            case 'click':
              // Firefox creates a click event on right mouse clicks. This removes the
              // unwanted click events.
              if (nativeEvent.button === 2) {
                return;
              }

            /* falls through */

            case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup': // TODO: Disabled elements should not respond to mouse events

            /* falls through */

            case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
              SyntheticEventCtor = SyntheticMouseEvent;
              break;

            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
              SyntheticEventCtor = SyntheticDragEvent;
              break;

            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
              SyntheticEventCtor = SyntheticTouchEvent;
              break;

            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;

            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;

            case 'scroll':
              SyntheticEventCtor = SyntheticUIEvent;
              break;

            case 'wheel':
              SyntheticEventCtor = SyntheticWheelEvent;
              break;

            case 'copy':
            case 'cut':
            case 'paste':
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;

            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }

          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            // Some events don't bubble in the browser.
            // In the past, React has always bubbled them, but this can be surprising.
            // We're going to try aligning closer to the browser behavior by not bubbling
            // them in React either. We'll start by not bubbling onScroll, and then expand.
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === 'scroll';

            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

            if (_listeners.length > 0) {
              // Intentionally create event lazily.
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        } // TODO: remove top-level side effect.


        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();

        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          // TODO: we should remove the concept of a "SimpleEventPlugin".
          // This is the basic functionality of the event system. All
          // the other plugins are essentially polyfills. So the plugin
          // should probably be inlined somewhere and have its logic
          // be core the to event system. This would potentially allow
          // us to ship builds of React without the polyfilled plugins below.
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
          // event's native "bubble" phase, which means that we're
          // not in the capture phase. That's because we emulate
          // the capture phase here still. This is a trade-off,
          // because in an ideal world we would not emulate and use
          // the phases properly, like we do with the SimpleEvent
          // plugin. However, the plugins below either expect
          // emulation (EnterLeave) or use state localized to that
          // plugin (BeforeInput, Change, Select). The state in
          // these modules complicates things, as you'll essentially
          // get the case where the capture phase event might change
          // state, only for the following bubble event to come in
          // later and not trigger anything as the state now
          // invalidates the heuristics of the event plugin. We
          // could alter all these plugins to work in such ways, but
          // that might cause other unknown side-effects that we
          // can't forsee right now.

          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        } // List of events that need to be individually attached to media elements.


        var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
        // set them on the actual target element itself. This is primarily
        // because these events do not consistently bubble in the DOM.

        var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || 'unknown-event';
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
          event.currentTarget = null;
        }

        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;

          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i],
                  instance = _dispatchListeners$i.instance,
                  currentTarget = _dispatchListeners$i.currentTarget,
                  listener = _dispatchListeners$i.listener;

              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }

              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i],
                  _instance = _dispatchListeners$_i.instance,
                  _currentTarget = _dispatchListeners$_i.currentTarget,
                  _listener = _dispatchListeners$_i.listener;

              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }

              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }

        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i],
                event = _dispatchQueue$i.event,
                listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
          } // This would be a good time to rethrow if any of the event handlers threw.


          rethrowCaughtError();
        }

        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }

        function listenToNonDelegatedEvent(domEventName, targetElement) {
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }

        var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);

        function listenToAllSupportedEvents(rootContainerElement) {
          {
            if (rootContainerElement[listeningMarker]) {
              // Performance optimization: don't iterate through events
              // for the same portal container or root node more than once.
              // TODO: once we remove the flag, we may be able to also
              // remove some of the bookkeeping maps used for laziness.
              return;
            }

            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function (domEventName) {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement, null);
              }

              listenToNativeEvent(domEventName, true, rootContainerElement, null);
            });
          }
        }

        function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
          var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
          var target = rootContainerElement; // selectionchange needs to be attached to the document
          // otherwise it won't capture incoming events that are only
          // triggered on the document directly.

          if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) {
            target = rootContainerElement.ownerDocument;
          } // If the event can be delegated (or is capture phase), we can
          // register it to the root container. Otherwise, we should
          // register the event to the target element and mark it as
          // a non-delegated event.


          if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            // For all non-delegated events, apart from scroll, we attach
            // their event listeners to the respective elements that their
            // events fire on. That means we can skip this step, as event
            // listener has already been added previously. However, we
            // special case the scroll event because the reality is that any
            // element can scroll.
            // TODO: ideally, we'd eventually apply the same logic to all
            // events from the nonDelegatedEvents list. Then we can remove
            // this special case and use the same logic for all events.
            if (domEventName !== 'scroll') {
              return;
            }

            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
          }

          var listenerSet = getEventListenerSet(target);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
          // we need to trap an event listener onto the target.

          if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }

            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }

        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
          // active and not passive.

          var isPassiveListener = undefined;

          if (passiveBrowserEventsSupported) {
            // Browsers introduced an intervention, making these events
            // passive by default on document. React doesn't bind them
            // to document anymore, but changing this now would undo
            // the performance wins from the change. So we emulate
            // the existing behavior manually on the roots now.
            // https://github.com/facebook/react/issues/19651
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
              isPassiveListener = true;
            }
          }

          targetContainer = targetContainer;
          var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we

          if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== undefined) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }

        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }

        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;

          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

            if (targetInst !== null) {
              // The below logic attempts to work out if we need to change
              // the target fiber to a different ancestor. We had similar logic
              // in the legacy event system, except the big difference between
              // systems is that the modern event system now has an event listener
              // attached to each React Root and React Portal Root. Together,
              // the DOM nodes representing these roots are the "rootContainer".
              // To figure out which ancestor instance we should use, we traverse
              // up the fiber tree from the target instance and attempt to find
              // root boundaries that match that of our current "rootContainer".
              // If we find that "rootContainer", we find the parent fiber
              // sub-tree for that root and make that our ancestor instance.
              var node = targetInst;

              mainLoop: while (true) {
                if (node === null) {
                  return;
                }

                var nodeTag = node.tag;

                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;

                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }

                  if (nodeTag === HostPortal) {
                    // The target is a portal, but it's not the rootContainer we're looking for.
                    // Normally portals handle their own events all the way down to the root.
                    // So we should be able to stop now. However, we don't know if this portal
                    // was part of *our* root.
                    var grandNode = node.return;

                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;

                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;

                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          // This is the rootContainer we're looking for and we found it as
                          // a parent of the Portal. That means we can ignore it because the
                          // Portal will bubble through to us.
                          return;
                        }
                      }

                      grandNode = grandNode.return;
                    }
                  } // Now we need to find it's corresponding host fiber in the other
                  // tree. To do this we can use getClosestInstanceFromNode, but we
                  // need to validate that the fiber is a host instance, otherwise
                  // we need to traverse up through the DOM till we find the correct
                  // node that is from the other tree.


                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);

                    if (parentNode === null) {
                      return;
                    }

                    var parentTag = parentNode.tag;

                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }

                    container = container.parentNode;
                  }
                }

                node = node.return;
              }
            }
          }

          batchedEventUpdates(function () {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }

        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
          };
        }

        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
          var captureName = reactName !== null ? reactName + 'Capture' : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

          while (instance !== null) {
            var _instance2 = instance,
                stateNode = _instance2.stateNode,
                tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode; // createEventHandle listeners

              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);

                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.


            if (accumulateTargetOnly) {
              break;
            }

            instance = instance.return;
          }

          return listeners;
        } // We should only use this function for:
        // - BeforeInputEventPlugin
        // - ChangeEventPlugin
        // - SelectEventPlugin
        // This is because we only process these plugins
        // in the bubble phase, so we need to accumulate two
        // phase event listeners (via emulation).


        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + 'Capture';
          var listeners = [];
          var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

          while (instance !== null) {
            var _instance3 = instance,
                stateNode = _instance3.stateNode,
                tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);

              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }

              var bubbleListener = getListener(instance, reactName);

              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }

            instance = instance.return;
          }

          return listeners;
        }

        function getParent(inst) {
          if (inst === null) {
            return null;
          }

          do {
            inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
            // That is depending on if we want nested subtrees (layers) to bubble
            // events to their parent. We could also go through parentNode on the
            // host node but that wouldn't work for React Native and doesn't let us
            // do the portal feature.
          } while (inst && inst.tag !== HostComponent);

          if (inst) {
            return inst;
          }

          return null;
        }
        /**
         * Return the lowest common ancestor of A and B, or null if they are in
         * different trees.
         */


        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;

          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          var depthB = 0;

          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          } // If A is deeper, crawl up.


          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          } // If B is deeper, crawl up.


          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          } // Walk in lockstep until we find a match.


          var depth = depthA;

          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }

            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }

          return null;
        }

        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;

          while (instance !== null) {
            if (instance === common) {
              break;
            }

            var _instance4 = instance,
                alternate = _instance4.alternate,
                stateNode = _instance4.stateNode,
                tag = _instance4.tag;

            if (alternate !== null && alternate === common) {
              break;
            }

            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;

              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);

                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);

                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }

            instance = instance.return;
          }

          if (listeners.length !== 0) {
            dispatchQueue.push({
              event: event,
              listeners: listeners
            });
          }
        } // We should only use this function for:
        // - EnterLeaveEventPlugin
        // This is because we only process this plugin
        // in the bubble phase, so we need to accumulate two
        // phase event listeners.


        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;

          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }

          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }

        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? 'capture' : 'bubble');
        }

        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
        var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
        var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
        var AUTOFOCUS = 'autoFocus';
        var CHILDREN = 'children';
        var STYLE = 'style';
        var HTML$1 = '__html';
        var HTML_NAMESPACE$1 = Namespaces.html;
        var warnedUnknownTags;
        var suppressHydrationWarning;
        var validatePropertiesInDevelopment;
        var warnForTextDifference;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeMarkupForTextOrAttribute;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true
          };

          validatePropertiesInDevelopment = function validatePropertiesInDevelopment(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies: registrationNameDependencies,
              possibleRegistrationNames: possibleRegistrationNames
            });
          }; // IE 11 parses & normalizes the style attribute as opposed to other
          // browsers. It adds spaces and sorts the properties in some
          // non-alphabetical order. Handling that would require sorting CSS
          // properties in the client & server versions or applying
          // `expectedStyle` to a temporary DOM node to read its `style` attribute
          // normalized. Since it only affects IE, we're skipping style warnings
          // in that browser completely in favor of doing all that work.
          // See https://github.com/facebook/react/issues/11807


          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
          // It also can turn \u0000 into \uFFFD inside attributes.
          // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
          // If we have a mismatch, it might be caused by that.
          // We will still patch up in this case but not fire the warning.

          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

          normalizeMarkupForTextOrAttribute = function normalizeMarkupForTextOrAttribute(markup) {
            var markupString = typeof markup === 'string' ? markup : '' + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
          };

          warnForTextDifference = function warnForTextDifference(serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }

            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

            if (normalizedServerText === normalizedClientText) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };

          warnForPropDifference = function warnForPropDifference(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }

            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

            if (normalizedServerValue === normalizedClientValue) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };

          warnForExtraAttributes = function warnForExtraAttributes(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }

            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function (name) {
              names.push(name);
            });
            error('Extra attributes from the server: %s', names);
          };

          warnForInvalidEventListener = function warnForInvalidEventListener(registrationName, listener) {
            if (listener === false) {
              error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
            } else {
              error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, _typeof3(listener));
            }
          }; // Parse the HTML and read it back to normalize the HTML string so that it
          // can be used for comparison.


          normalizeHTML = function normalizeHTML(parent, html) {
            // We could have created a separate document here to avoid
            // re-initializing custom elements if they exist. But this breaks
            // how <noscript> is being handled. So we use the same document.
            // See the discussion in https://github.com/facebook/react/pull/11157.
            var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }

        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }

        function noop() {}

        function trapClickOnNonInteractiveElement(node) {
          // Mobile Safari does not fire properly bubble click events on
          // non-interactive elements, which means delegated click listeners do not
          // fire. The workaround for this bug involves attaching an empty click
          // listener on the target node.
          // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
          // Just set it using the onclick property so that we don't have to manage any
          // bookkeeping for it. Not sure if we need to clear it when the listener is
          // removed.
          // TODO: Only do this for the relevant Safaris maybe?
          node.onclick = noop;
        }

        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }

            var nextProp = nextProps[propKey];

            if (propKey === STYLE) {
              {
                if (nextProp) {
                  // Freeze the next style object so that we can assume it won't be
                  // mutated. We have already warned for this in the past.
                  Object.freeze(nextProp);
                }
              } // Relies on `updateStylesByID` not mutating `styleUpdates`.

              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === 'string') {
                // Avoid setting initial textContent when the text is empty. In IE11 setting
                // textContent on a <textarea> will cause the placeholder to not
                // show within the <textarea> until it has been focused and blurred again.
                // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                var canSetTextContent = tag !== 'textarea' || nextProp !== '';

                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === 'number') {
                setTextContent(domElement, '' + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;else if (propKey === AUTOFOCUS) ;else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== 'function') {
                  warnForInvalidEventListener(propKey, nextProp);
                }

                if (propKey === 'onScroll') {
                  listenToNonDelegatedEvent('scroll', domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }

        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          // TODO: Handle wasCustomComponentTag
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];

            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }

        function createElement(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
          // tags get no namespace.

          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;

          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }

          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
              // allow <SVG> or <mATH>.

              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
              }
            }

            if (type === 'script') {
              // Create the script via .innerHTML so its "parser-inserted" flag is
              // set to true and it does not execute
              var div = ownerDocument.createElement('div');
              div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
              // This is guaranteed to yield a script element.

              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') {
              // $FlowIssue `createElement` should be updated for Web Components
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
              // See discussion in https://github.com/facebook/react/pull/6896
              // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
              domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
              // attributes on `select`s needs to be added before `option`s are inserted.
              // This prevents:
              // - a bug where the `select` does not scroll to the correct option because singular
              //  `select` elements automatically pick the first item #13222
              // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
              // See https://github.com/facebook/react/issues/13222
              // and https://github.com/facebook/react/issues/14239

              if (type === 'select') {
                var node = domElement;

                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                  // it is possible that no option is selected.
                  //
                  // This is only necessary when a select in "single selection mode".
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }

          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
              }
            }
          }
          return domElement;
        }

        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }

        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          } // TODO: Make sure that we check isMounted before firing any of these events.

          var props;

          switch (tag) {
            case 'dialog':
              listenToNonDelegatedEvent('cancel', domElement);
              listenToNonDelegatedEvent('close', domElement);
              props = rawProps;
              break;

            case 'iframe':
            case 'object':
            case 'embed':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the load event.
              listenToNonDelegatedEvent('load', domElement);
              props = rawProps;
              break;

            case 'video':
            case 'audio':
              // We listen to these events in case to ensure emulated bubble
              // listeners still fire for all the media events.
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }

              props = rawProps;
              break;

            case 'source':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the error event.
              listenToNonDelegatedEvent('error', domElement);
              props = rawProps;
              break;

            case 'img':
            case 'image':
            case 'link':
              // We listen to these events in case to ensure emulated bubble
              // listeners still fire for error and load events.
              listenToNonDelegatedEvent('error', domElement);
              listenToNonDelegatedEvent('load', domElement);
              props = rawProps;
              break;

            case 'details':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the toggle event.
              listenToNonDelegatedEvent('toggle', domElement);
              props = rawProps;
              break;

            case 'input':
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;

            case 'option':
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;

            case 'select':
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;

            case 'textarea':
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;

            default:
              props = rawProps;
          }

          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

          switch (tag) {
            case 'input':
              // TODO: Make sure we check if this is still unmounted or do any clean
              // up necessary since we never stop tracking anymore.
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;

            case 'textarea':
              // TODO: Make sure we check if this is still unmounted or do any clean
              // up necessary since we never stop tracking anymore.
              track(domElement);
              postMountWrapper$3(domElement);
              break;

            case 'option':
              postMountWrapper$1(domElement, rawProps);
              break;

            case 'select':
              postMountWrapper$2(domElement, rawProps);
              break;

            default:
              if (typeof props.onClick === 'function') {
                // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
              }

              break;
          }
        } // Calculate the diff between the two objects.


        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;

          switch (tag) {
            case 'input':
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;

            case 'option':
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;

            case 'select':
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;

            case 'textarea':
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;

            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;

              if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
                // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
              }

              break;
          }

          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;

          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }

            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];

              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }

                  styleUpdates[styleName] = '';
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;else if (propKey === AUTOFOCUS) ;else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              // This is a special case. If any listener updates we need to ensure
              // that the "current" fiber pointer gets updated so we need a commit
              // to update this element.
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              // For all other deleted properties we add it to the queue. We use
              // the allowed property list in the commit phase instead.
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }

          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;

            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }

            if (propKey === STYLE) {
              {
                if (nextProp) {
                  // Freeze the next style object so that we can assume it won't be
                  // mutated. We have already warned for this in the past.
                  Object.freeze(nextProp);
                }
              }

              if (lastProp) {
                // Unset styles on `lastProp` but not on `nextProp`.
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }

                    styleUpdates[styleName] = '';
                  }
                } // Update styles that changed since `lastProp`.


                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }

                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                // Relies on `updateStylesByID` not mutating `styleUpdates`.
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }

                  updatePayload.push(propKey, styleUpdates);
                }

                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
              var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === 'string' || typeof nextProp === 'number') {
                (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                // We eagerly listen to this even though we haven't committed yet.
                if (typeof nextProp !== 'function') {
                  warnForInvalidEventListener(propKey, nextProp);
                }

                if (propKey === 'onScroll') {
                  listenToNonDelegatedEvent('scroll', domElement);
                }
              }

              if (!updatePayload && lastProp !== nextProp) {
                // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
              }
            } else if (_typeof3(nextProp) === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
              // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
              // In this case, call the opaque object's toString function which generates a new client
              // ID so client and server IDs match and throws to rerender.
              nextProp.toString();
            } else {
              // For any other property we always add it to the queue and then we
              // filter it out using the allowed property list during the commit.
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }

          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }

          return updatePayload;
        } // Apply the diff.


        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          // Update checked *before* name.
          // In the middle of an update, it is possible to have multiple checked.
          // When a checked radio tries to change name, browser makes another radio's checked false.
          if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }

          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
          // changed.

          switch (tag) {
            case 'input':
              // Update the wrapper around inputs *after* updating props. This has to
              // happen after `updateDOMProperties`. Otherwise HTML5 input validations
              // raise warnings and prevent the new value from being assigned.
              updateWrapper(domElement, nextRawProps);
              break;

            case 'textarea':
              updateWrapper$1(domElement, nextRawProps);
              break;

            case 'select':
              // <select> value update needs to occur after <option> children
              // reconciliation
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }

        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();

            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }

            return possibleStandardNames[lowerCasedName] || null;
          }
        }

        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          } // TODO: Make sure that we check isMounted before firing any of these events.

          switch (tag) {
            case 'dialog':
              listenToNonDelegatedEvent('cancel', domElement);
              listenToNonDelegatedEvent('close', domElement);
              break;

            case 'iframe':
            case 'object':
            case 'embed':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the load event.
              listenToNonDelegatedEvent('load', domElement);
              break;

            case 'video':
            case 'audio':
              // We listen to these events in case to ensure emulated bubble
              // listeners still fire for all the media events.
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }

              break;

            case 'source':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the error event.
              listenToNonDelegatedEvent('error', domElement);
              break;

            case 'img':
            case 'image':
            case 'link':
              // We listen to these events in case to ensure emulated bubble
              // listeners still fire for error and load events.
              listenToNonDelegatedEvent('error', domElement);
              listenToNonDelegatedEvent('load', domElement);
              break;

            case 'details':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the toggle event.
              listenToNonDelegatedEvent('toggle', domElement);
              break;

            case 'input':
              initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;

            case 'option':
              validateProps(domElement, rawProps);
              break;

            case 'select':
              initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;

            case 'textarea':
              initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;
          }

          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;

            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();

              switch (name) {
                // Built-in SSR attribute is allowed
                case 'data-reactroot':
                  break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.

                case 'value':
                  break;

                case 'checked':
                  break;

                case 'selected':
                  break;

                default:
                  // Intentionally use the original name.
                  // See discussion in https://github.com/facebook/react/pull/10676.
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;

          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }

            var nextProp = rawProps[propKey];

            if (propKey === CHILDREN) {
              // For text content children we compare against textContent. This
              // might match additional HTML that is hidden when we read it using
              // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
              // satisfies our requirement. Our requirement is not to produce perfect
              // HTML and attributes. Ideally we should preserve structure but it's
              // ok not to if the visible content is still enough to indicate what
              // even listeners these nodes might be wired up to.
              // TODO: Warn if there is more than a single textNode as a child.
              // TODO: Should we use domElement.firstChild.nodeValue to compare?
              if (typeof nextProp === 'string') {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }

                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === 'number') {
                if (domElement.textContent !== '' + nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }

                  updatePayload = [CHILDREN, '' + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== 'function') {
                  warnForInvalidEventListener(propKey, nextProp);
                }

                if (propKey === 'onScroll') {
                  listenToNonDelegatedEvent('scroll', domElement);
                }
              }
            } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === 'boolean') {
              // Validate that the properties correspond to their expected values.
              var serverValue = void 0;
              var propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning) ;else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);

                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey);

                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute('style');

                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);

                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;

                if (propertyInfo !== null) {
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;

                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }

                  if (ownNamespace === HTML_NAMESPACE$1) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);

                    if (standardName !== null && standardName !== propKey) {
                      // If an SVG prop is supplied with bad casing, it will
                      // be successfully parsed from HTML, but will produce a mismatch
                      // (and would be incorrectly rendered on the client).
                      // However, we already warn about bad casing elsewhere.
                      // So we'll skip the misleading extra mismatch warning in this case.
                      isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

                      extraAttributeNames.delete(standardName);
                    } // $FlowFixMe - Should be inferred as not undefined.


                    extraAttributeNames.delete(propKey);
                  }

                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }

                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }

          {
            // $FlowFixMe - Should be inferred as not undefined.
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              // $FlowFixMe - Should be inferred as not undefined.
              warnForExtraAttributes(extraAttributeNames);
            }
          }

          switch (tag) {
            case 'input':
              // TODO: Make sure we check if this is still unmounted or do any clean
              // up necessary since we never stop tracking anymore.
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;

            case 'textarea':
              // TODO: Make sure we check if this is still unmounted or do any clean
              // up necessary since we never stop tracking anymore.
              track(domElement);
              postMountWrapper$3(domElement);
              break;

            case 'select':
            case 'option':
              // For input and textarea we current always set the value property at
              // post mount to force it to diverge from attributes. However, for
              // option and select we don't quite do the same thing and select
              // is not resilient to the DOM state changing so we don't do that here.
              // TODO: Consider not doing this for input and textarea.
              break;

            default:
              if (typeof rawProps.onClick === 'function') {
                // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
              }

              break;
          }

          return updatePayload;
        }

        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }

        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }

        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }

        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }

        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
          }
        }

        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === '') {
              // We expect to insert empty text nodes since they're not represented in
              // the HTML.
              // TODO: Remove this special case if we can just avoid inserting empty
              // text nodes.
              return;
            }

            if (didWarnInvalidHydration) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }

        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case 'input':
              restoreControlledState(domElement, props);
              return;

            case 'textarea':
              restoreControlledState$2(domElement, props);
              return;

            case 'select':
              restoreControlledState$1(domElement, props);
              return;
          }
        }

        var validateDOMNesting = function validateDOMNesting() {};

        var updatedAncestorInfo = function updatedAncestorInfo() {};

        {
          // This validation code was written based on the HTML5 parsing spec:
          // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
          //
          // Note: this does not catch all invalid nesting, nor does it try to (as it's
          // not clear what practical benefit doing so provides); instead, we warn only
          // for cases where the parser will give a parse tree differing from what React
          // intended. For example, <b><div></div></b> is invalid but we don't warn
          // because it still parses correctly; we do warn for other cases like nested
          // <p> tags where the beginning of the second element implicitly closes the
          // first, causing a confusing mess.
          // https://html.spec.whatwg.org/multipage/syntax.html#special
          var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

          var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
          // TODO: Distinguish by namespace here -- for <title>, including it here
          // errs on the side of fewer warnings
          'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

          var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

          var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };

          updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

            var info = {
              tag: tag
            };

            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }

            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            } // See rules for 'li', 'dd', 'dt' start tags in
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


            if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }

            ancestorInfo.current = info;

            if (tag === 'form') {
              ancestorInfo.formTag = info;
            }

            if (tag === 'a') {
              ancestorInfo.aTagInScope = info;
            }

            if (tag === 'button') {
              ancestorInfo.buttonTagInScope = info;
            }

            if (tag === 'nobr') {
              ancestorInfo.nobrTagInScope = info;
            }

            if (tag === 'p') {
              ancestorInfo.pTagInButtonScope = info;
            }

            if (tag === 'li') {
              ancestorInfo.listItemTagAutoclosing = info;
            }

            if (tag === 'dd' || tag === 'dt') {
              ancestorInfo.dlItemTagAutoclosing = info;
            }

            return ancestorInfo;
          };
          /**
           * Returns whether
           */


          var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {
            // First, let's check if we're in an unusual parsing mode...
            switch (parentTag) {
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
              case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';

              case 'optgroup':
                return tag === 'option' || tag === '#text';
              // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
              // but

              case 'option':
                return tag === '#text';
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
              // No special behavior since these rules fall back to "in body" mode for
              // all except special table nodes which cause bad parsing behavior anyway.
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

              case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

              case 'tbody':
              case 'thead':
              case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

              case 'colgroup':
                return tag === 'col' || tag === 'template';
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

              case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

              case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
              // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

              case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';

              case 'frameset':
                return tag === 'frame';

              case '#document':
                return tag === 'html';
            } // Probably in the "in body" parsing mode, so we outlaw only tag combos
            // where the parsing rules cause implicit opens or closes to be added.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


            switch (tag) {
              case 'h1':
              case 'h2':
              case 'h3':
              case 'h4':
              case 'h5':
              case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

              case 'rp':
              case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;

              case 'body':
              case 'caption':
              case 'col':
              case 'colgroup':
              case 'frameset':
              case 'frame':
              case 'head':
              case 'html':
              case 'tbody':
              case 'td':
              case 'tfoot':
              case 'th':
              case 'thead':
              case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
            }

            return true;
          };
          /**
           * Returns whether
           */


          var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {
            switch (tag) {
              case 'address':
              case 'article':
              case 'aside':
              case 'blockquote':
              case 'center':
              case 'details':
              case 'dialog':
              case 'dir':
              case 'div':
              case 'dl':
              case 'fieldset':
              case 'figcaption':
              case 'figure':
              case 'footer':
              case 'header':
              case 'hgroup':
              case 'main':
              case 'menu':
              case 'nav':
              case 'ol':
              case 'p':
              case 'section':
              case 'summary':
              case 'ul':
              case 'pre':
              case 'listing':
              case 'table':
              case 'hr':
              case 'xmp':
              case 'h1':
              case 'h2':
              case 'h3':
              case 'h4':
              case 'h5':
              case 'h6':
                return ancestorInfo.pTagInButtonScope;

              case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

              case 'li':
                return ancestorInfo.listItemTagAutoclosing;

              case 'dd':
              case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;

              case 'button':
                return ancestorInfo.buttonTagInScope;

              case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;

              case 'nobr':
                return ancestorInfo.nobrTagInScope;
            }

            return null;
          };

          var didWarn$1 = {};

          validateDOMNesting = function validateDOMNesting(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;

            if (childText != null) {
              if (childTag != null) {
                error('validateDOMNesting: when childText is passed, childTag should be null');
              }

              childTag = '#text';
            }

            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;

            if (!invalidParentOrAncestor) {
              return;
            }

            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

            if (didWarn$1[warnKey]) {
              return;
            }

            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = '';

            if (childTag === '#text') {
              if (/\S/.test(childText)) {
                tagDisplayName = 'Text nodes';
              } else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
              }
            } else {
              tagDisplayName = '<' + childTag + '>';
            }

            if (invalidParent) {
              var info = '';

              if (ancestorTag === 'table' && childTag === 'tr') {
                info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
              }

              error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
        }
        var SUSPENSE_START_DATA = '$';
        var SUSPENSE_END_DATA = '/$';
        var SUSPENSE_PENDING_START_DATA = '$?';
        var SUSPENSE_FALLBACK_START_DATA = '$!';
        var STYLE$1 = 'style';
        var eventsEnabled = null;
        var selectionInformation = null;

        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
              return !!props.autoFocus;
          }

          return false;
        }

        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;

          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
              {
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                break;
              }

            default:
              {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
          }

          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace: namespace,
              ancestorInfo: ancestorInfo
            };
          }
        }

        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace: namespace,
              ancestorInfo: ancestorInfo
            };
          }
        }

        function getPublicInstance(instance) {
          return instance;
        }

        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }

        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }

        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            // TODO: take namespace into account when validating.
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);

            if (typeof props.children === 'string' || typeof props.children === 'number') {
              var string = '' + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }

            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }

        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }

        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }

        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;

            if (_typeof3(newProps.children) !== _typeof3(oldProps.children) && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
              var string = '' + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }

        function shouldSetTextContent(type, props) {
          return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || _typeof3(props.dangerouslySetInnerHTML) === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }

        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        } // if a component just imports ReactDOM (e.g. for findDOMNode).
        // Some environments might not have setTimeout or clearTimeout.


        var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
        var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
        var noTimeout = -1; // -------------------

        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          // Despite the naming that might imply otherwise, this method only
          // fires if there is an `Update` effect scheduled during mounting.
          // This happens if `finalizeInitialChildren` returns `true` (which it
          // does to implement the `autoFocus` attribute on the client). But
          // there are also other cases when this might happen (such as patching
          // up text content during hydration mismatch). So we'll check this again.
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }

        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          // Update the props handle so that we know which props are the ones with
          // with current event handlers.
          updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }

        function resetTextContent(domElement) {
          setTextContent(domElement, '');
        }

        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }

        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }

        function appendChildToContainer(container, child) {
          var parentNode;

          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          } // This container might be used for a portal.
          // If something inside a portal is clicked, that click should bubble
          // through the React tree. However, on Mobile Safari the click would
          // never bubble through the *DOM* tree unless an ancestor with onclick
          // event exists. So we wouldn't see it and dispatch it.
          // This is why we ensure that non React root containers have inline onclick
          // defined.
          // https://github.com/facebook/react/issues/11918


          var reactRootContainer = container._reactRootContainer;

          if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(parentNode);
          }
        }

        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }

        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }

        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }

        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }

        function hideInstance(instance) {
          // TODO: Does this work for all element types? What about MathML? Should we
          // pass host context to this method?
          instance = instance;
          var style = instance.style;

          if (typeof style.setProperty === 'function') {
            style.setProperty('display', 'none', 'important');
          } else {
            style.display = 'none';
          }
        }

        function hideTextInstance(textInstance) {
          textInstance.nodeValue = '';
        }

        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
          instance.style.display = dangerousStyleValue('display', display);
        }

        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }

        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = '';
          } else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;

            if (body != null) {
              body.textContent = '';
            }
          }
        } // -------------------


        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          } // This has now been refined to an element node.


          return instance;
        }

        function canHydrateTextInstance(instance, text) {
          if (text === '' || instance.nodeType !== TEXT_NODE) {
            // Empty strings are not parsed by HTML so there won't be a correct match here.
            return null;
          } // This has now been refined to a text node.


          return instance;
        }

        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }

        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }

        function getNextHydratable(node) {
          // Skip non-hydratable nodes.
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;

            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }

          return node;
        }

        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }

        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }

        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
          // get attached.

          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace);
        }

        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }

        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
          // There might be nested nodes so we need to keep track of how
          // deep we are and only break out when we're back on top.

          var depth = 0;

          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;

              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }

            node = node.nextSibling;
          } // TODO: Warn, we didn't find the end comment boundary.


          return null;
        } // Returns the SuspenseInstance if this node is a direct child of a
        // SuspenseInstance. I.e. if its previous sibling is a Comment with
        // SUSPENSE_x_START_DATA. Otherwise, null.


        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
          // There might be nested nodes so we need to keep track of how
          // deep we are and only break out when we're back on top.

          var depth = 0;

          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;

              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }

            node = node.previousSibling;
          }

          return null;
        }

        function commitHydratedContainer(container) {
          // Retry if any event replaying was blocked on this.
          retryIfBlockedOn(container);
        }

        function commitHydratedSuspenseInstance(suspenseInstance) {
          // Retry if any event replaying was blocked on this.
          retryIfBlockedOn(suspenseInstance);
        }

        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }

        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }

        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE) ;else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }

        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE) ;else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }

        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }

        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }

        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }

        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }

        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
        }

        var clientId = 0;

        function makeClientIdInDEV(warnOnAccessInDEV) {
          var id = 'r:' + (clientId++).toString(36);
          return {
            toString: function toString() {
              warnOnAccessInDEV();
              return id;
            },
            valueOf: function valueOf() {
              warnOnAccessInDEV();
              return id;
            }
          };
        }

        function isOpaqueHydratingObject(value) {
          return value !== null && _typeof3(value) === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
        }

        function makeOpaqueHydratingObject(attemptToReadValue) {
          return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
          };
        }

        function preparePortalMount(portalInstance) {
          {
            listenToAllSupportedEvents(portalInstance);
          }
        }

        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = '__reactFiber$' + randomKey;
        var internalPropsKey = '__reactProps$' + randomKey;
        var internalContainerInstanceKey = '__reactContainer$' + randomKey;
        var internalEventHandlersKey = '__reactEvents$' + randomKey;

        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }

        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }

        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }

        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
        // If the target node is part of a hydrated or not yet rendered subtree, then
        // this may also return a SuspenseComponent or HostRoot to indicate that.
        // Conceptually the HostRoot fiber is a child of the Container node. So if you
        // pass the Container node as the targetNode, you will not actually get the
        // HostRoot back. To get to the HostRoot, you need to pass a child of it.
        // The same thing applies to Suspense boundaries.


        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];

          if (targetInst) {
            // Don't return HostRoot or SuspenseComponent here.
            return targetInst;
          } // If the direct event target isn't a React owned DOM node, we need to look
          // to see if one of its parents is a React owned DOM node.


          var parentNode = targetNode.parentNode;

          while (parentNode) {
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

            if (targetInst) {
              // Since this wasn't the direct target of the event, we might have
              // stepped past dehydrated DOM nodes to get here. However they could
              // also have been non-React nodes. We need to answer which one.
              // If we the instance doesn't have any children, then there can't be
              // a nested suspense boundary within it. So we can use this as a fast
              // bailout. Most of the time, when people add non-React children to
              // the tree, it is using a ref to a child-less DOM node.
              // Normally we'd only need to check one of the fibers because if it
              // has ever gone from having children to deleting them or vice versa
              // it would have deleted the dehydrated boundary nested inside already.
              // However, since the HostRoot starts out with an alternate it might
              // have one on the alternate so we need to check in case this was a
              // root.
              var alternate = targetInst.alternate;

              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                // Next we need to figure out if the node that skipped past is
                // nested within a dehydrated boundary and if so, which one.
                var suspenseInstance = getParentSuspenseInstance(targetNode);

                while (suspenseInstance !== null) {
                  // We found a suspense instance. That means that we haven't
                  // hydrated it yet. Even though we leave the comments in the
                  // DOM after hydrating, and there are boundaries in the DOM
                  // that could already be hydrated, we wouldn't have found them
                  // through this pass since if the target is hydrated it would
                  // have had an internalInstanceKey on it.
                  // Let's get the fiber associated with the SuspenseComponent
                  // as the deepest instance.
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];

                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  } // If we don't find a Fiber on the comment, it might be because
                  // we haven't gotten to hydrate it yet. There might still be a
                  // parent boundary that hasn't above this one so we need to find
                  // the outer most that is known.


                  suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                  // host component also hasn't hydrated yet. We can return it
                  // below since it will bail out on the isMounted check later.
                }
              }

              return targetInst;
            }

            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }

          return null;
        }
        /**
         * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
         * instance, or null if the node was not rendered by this React.
         */


        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }

          return null;
        }
        /**
         * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
         * DOM node.
         */


        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            // In Fiber this, is just the state node right now. We assume it will be
            // a host component or host text.
            return inst.stateNode;
          } // Without this first invariant, passing a non-DOM-component triggers the next
          // invariant for a missing parent, which is super confusing.


          {
            {
              throw Error("getNodeFromInstance: Invalid argument.");
            }
          }
        }

        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }

        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }

        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];

          if (elementListenerSet === undefined) {
            elementListenerSet = node[internalEventHandlersKey] = new Set();
          }

          return elementListenerSet;
        }

        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }

        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            // $FlowFixMe This is okay but Flow doesn't know it.
            var has = Function.call.bind(Object.prototype.hasOwnProperty);

            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.

                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof3(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                  }

                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                } catch (ex) {
                  error$1 = ex;
                }

                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, _typeof3(error$1));
                  setCurrentlyValidatingElement(null);
                }

                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  // Only monitor this failure once because there tends to be a lot of the
                  // same error.
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error('Failed %s type: %s', location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }

        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;

        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }

        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error('Unexpected pop.');
            }
            return;
          }

          {
            if (fiber !== fiberStack[index]) {
              error('Unexpected Fiber popped.');
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }

        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }

        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        } // A cursor to the current merged context object on the stack.

        var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

        var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
        // We use this to get access to the parent context after we have already
        // pushed the next context provider, and now need to merge their contexts.

        var previousContext = emptyContextObject;

        function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              // If the fiber is a context provider itself, when we read its context
              // we may have already pushed its own child context on the stack. A context
              // provider should not "see" its own child context. Therefore we read the
              // previous (parent) context instead for a context provider.
              return previousContext;
            }

            return contextStackCursor.current;
          }
        }

        function cacheContext(workInProgress, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }

        function getMaskedContext(workInProgress, unmaskedContext) {
          {
            var type = workInProgress.type;
            var contextTypes = type.contextTypes;

            if (!contextTypes) {
              return emptyContextObject;
            } // Avoid recreating masked context unless unmasked context has changed.
            // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
            // This may trigger infinite loops if componentWillReceiveProps calls setState.


            var instance = workInProgress.stateNode;

            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }

            var context = {};

            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }

            {
              var name = getComponentName(type) || 'Unknown';
              checkPropTypes(contextTypes, context, 'context', name);
            } // Cache unmasked context so we can avoid recreating masked context unless necessary.
            // Context is created before the class component is instantiated so check for instance.

            if (instance) {
              cacheContext(workInProgress, unmaskedContext, context);
            }

            return context;
          }
        }

        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }

        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== undefined;
          }
        }

        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }

        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }

        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }

            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }

        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
            // It has only been added in Fiber to match the (unintentional) behavior in Stack.

            if (typeof instance.getChildContext !== 'function') {
              {
                var componentName = getComponentName(type) || 'Unknown';

                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
                }
              }
              return parentContext;
            }

            var childContext = instance.getChildContext();

            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
                }
              }
            }

            {
              var name = getComponentName(type) || 'Unknown';
              checkPropTypes(childContextTypes, childContext, 'child context', name);
            }
            return _assign({}, parentContext, childContext);
          }
        }

        function pushContextProvider(workInProgress) {
          {
            var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
            // If the instance does not exist yet, we will push null at first,
            // and replace it on the stack later when invalidating the context.

            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
            // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
            return true;
          }
        }

        function invalidateContextProvider(workInProgress, type, didChange) {
          {
            var instance = workInProgress.stateNode;

            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }

            if (didChange) {
              // Merge parent and own context.
              // Skip this if we're not updating due to sCU.
              // This avoids unnecessarily recomputing memoized values.
              var mergedContext = processChildContext(workInProgress, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
              // It is important to unwind the context in the reverse order.

              pop(didPerformWorkStackCursor, workInProgress);
              pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

              push(contextStackCursor, mergedContext, workInProgress);
              push(didPerformWorkStackCursor, didChange, workInProgress);
            } else {
              pop(didPerformWorkStackCursor, workInProgress);
              push(didPerformWorkStackCursor, didChange, workInProgress);
            }
          }
        }

        function findCurrentUnmaskedContext(fiber) {
          {
            // Currently this is only used with renderSubtreeIntoContainer; not sure if it
            // makes sense elsewhere
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }

            var node = fiber;

            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;

                case ClassComponent:
                  {
                    var Component = node.type;

                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }

                    break;
                  }
              }

              node = node.return;
            } while (node !== null);

            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }

        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var rendererID = null;
        var injectedHook = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
            // No DevTools
            return false;
          }

          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

          if (hook.isDisabled) {
            // This isn't a real property on the hook, but it can be set to opt out
            // of DevTools integration and associated warnings and logs.
            // https://github.com/facebook/react/issues/3877
            return true;
          }

          if (!hook.supportsFiber) {
            {
              error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
            } // DevTools exists, even though it doesn't support Fiber.

            return true;
          }

          try {
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

            injectedHook = hook;
          } catch (err) {
            // Catch all errors because it is unsafe to throw during initialization.
            {
              error('React instrumentation encountered an error: %s.', err);
            }
          } // DevTools exists


          return true;
        }

        function onScheduleRoot(root, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error('React instrumentation encountered an error: %s', err);
                }
              }
            }
          }
        }

        function onCommitRoot(root, priorityLevel) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
            try {
              var didError = (root.current.flags & DidCapture) === DidCapture;

              if (enableProfilerTimer) {
                injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error('React instrumentation encountered an error: %s', err);
                }
              }
            }
          }
        }

        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error('React instrumentation encountered an error: %s', err);
                }
              }
            }
          }
        }

        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
            Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
            Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
            Scheduler_shouldYield = Scheduler.unstable_shouldYield,
            Scheduler_requestPaint = Scheduler.unstable_requestPaint,
            Scheduler_now$1 = Scheduler.unstable_now,
            Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
            Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
            Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
            Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
            Scheduler_LowPriority = Scheduler.unstable_LowPriority,
            Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          // Provide explicit error message when production+profiling bundle of e.g.
          // react-dom is used with production (non-profiling) bundle of
          // scheduler/tracing
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
        // ascending numbers so we can compare them like numbers. They start at 90 to
        // avoid clashing with Scheduler's priorities.

        var ImmediatePriority$1 = 99;
        var UserBlockingPriority$2 = 98;
        var NormalPriority$1 = 97;
        var LowPriority$1 = 96;
        var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.

        var NoPriority$1 = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
        Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
        // This will be the case for modern browsers that support `performance.now`. In
        // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
        // timestamp. In that case, subtract the module initialization time to simulate
        // the behavior of performance.now and keep our times small enough to fit
        // within 32 bits.
        // TODO: Consider lifting this into Scheduler.

        var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
          return Scheduler_now$1() - initialTimeMs$1;
        };

        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority$1;

            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$2;

            case Scheduler_NormalPriority:
              return NormalPriority$1;

            case Scheduler_LowPriority:
              return LowPriority$1;

            case Scheduler_IdlePriority:
              return IdlePriority$1;

            default:
              {
                {
                  throw Error("Unknown priority level.");
                }
              }
          }
        }

        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority$1:
              return Scheduler_ImmediatePriority;

            case UserBlockingPriority$2:
              return Scheduler_UserBlockingPriority;

            case NormalPriority$1:
              return Scheduler_NormalPriority;

            case LowPriority$1:
              return Scheduler_LowPriority;

            case IdlePriority$1:
              return Scheduler_IdlePriority;

            default:
              {
                {
                  throw Error("Unknown priority level.");
                }
              }
          }
        }

        function runWithPriority$1(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }

        function scheduleCallback(reactPriorityLevel, callback, options) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options);
        }

        function scheduleSyncCallback(callback) {
          // Push this callback into an internal queue. We'll flush these either in
          // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
          if (syncQueue === null) {
            syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            // Push onto existing queue. Don't need to schedule a callback because
            // we already scheduled one when we created the queue.
            syncQueue.push(callback);
          }

          return fakeCallbackNode;
        }

        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }

        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }

          flushSyncCallbackQueueImpl();
        }

        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            var i = 0;
            {
              try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function () {
                  for (; i < _queue.length; i++) {
                    var callback = _queue[i];

                    do {
                      callback = callback(_isSync2);
                    } while (callback !== null);
                  }
                });
                syncQueue = null;
              } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                } // Resume flushing in the next tick


                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error;
              } finally {
                isFlushingSyncQueue = false;
              }
            }
          }
        } // TODO: this is special because it gets imported during build.


        var ReactVersion = '17.0.1';
        var NoMode = 0;
        var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
        // tag instead

        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var DebugTracingMode = 16;
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = 0;

        function requestCurrentTransition() {
          return ReactCurrentBatchConfig.transition;
        }

        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {},
          flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {},
          recordLegacyContextWarning: function recordLegacyContextWarning(fiber, instance) {},
          flushLegacyContextWarning: function flushLegacyContextWarning() {},
          discardPendingWarnings: function discardPendingWarnings() {}
        };
        {
          var findStrictRoot = function findStrictRoot(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;

            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }

              node = node.return;
            }

            return maybeStrictRoot;
          };

          var setToSortedString = function setToSortedString(set) {
            var array = [];
            set.forEach(function (value) {
              array.push(value);
            });
            return array.sort().join(', ');
          };

          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

          var didWarnAboutUnsafeLifecycles = new Set();

          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
            // Dedup strategy: Warn once per component.
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }

            if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
            instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }

            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }

            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }

            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }

            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }

            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };

          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
            // We do an initial pass to gather component names
            var componentWillMountUniqueNames = new Set();

            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function (fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }

            var UNSAFE_componentWillMountUniqueNames = new Set();

            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }

            var componentWillReceivePropsUniqueNames = new Set();

            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }

            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }

            var componentWillUpdateUniqueNames = new Set();

            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function (fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }

            var UNSAFE_componentWillUpdateUniqueNames = new Set();

            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            } // Finally, we flush all the warnings
            // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
            }

            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

              error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
            }

            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

              error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
            }

            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

              warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
            }

            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

              warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
            }

            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

              warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
            }
          };

          var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

          var didWarnAboutLegacyContext = new Set();

          ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
            var strictRoot = findStrictRoot(fiber);

            if (strictRoot === null) {
              error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
              return;
            } // Dedup strategy: Warn once per component.


            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }

            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
              if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }

              warningsForRoot.push(fiber);
            }
          };

          ReactStrictModeWarnings.flushLegacyContextWarning = function () {
            pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }

              var firstFiber = fiberArray[0];
              var uniqueNames = new Set();
              fiberArray.forEach(function (fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);

              try {
                setCurrentFiber(firstFiber);
                error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };

          ReactStrictModeWarnings.discardPendingWarnings = function () {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }

        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({}, baseProps);

            var defaultProps = Component.defaultProps;

            for (var propName in defaultProps) {
              if (props[propName] === undefined) {
                props[propName] = defaultProps[propName];
              }
            }

            return props;
          }

          return baseProps;
        } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
        // Math.pow(2, 30) - 1
        // 0b111111111111111111111111111111


        var MAX_SIGNED_31_BIT_INT = 1073741823;
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          // Use this to detect multiple renderers using the same context
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;

        function resetContextDependencies() {
          // This is called right before React yields execution, to ensure `readContext`
          // cannot be called outside the render phase.
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }

        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }

        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }

        function pushProvider(providerFiber, nextValue) {
          var context = providerFiber.type._context;
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
              }

              context._currentRenderer = rendererSigil;
            }
          }
        }

        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context = providerFiber.type._context;
          {
            context._currentValue = currentValue;
          }
        }

        function calculateChangedBits(context, newValue, oldValue) {
          if (objectIs(oldValue, newValue)) {
            // No change
            return 0;
          } else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
              }
            }
            return changedBits | 0;
          }
        }

        function scheduleWorkOnParentPath(parent, renderLanes) {
          // Update the child lanes of all the ancestors, including the alternates.
          var node = parent;

          while (node !== null) {
            var alternate = node.alternate;

            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes);

              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else {
              // Neither alternate was updated, which means the rest of the
              // ancestor path already has sufficient priority.
              break;
            }

            node = node.return;
          }
        }

        function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
          var fiber = workInProgress.child;

          if (fiber !== null) {
            // Set the return pointer of the child to the work-in-progress fiber.
            fiber.return = workInProgress;
          }

          while (fiber !== null) {
            var nextFiber = void 0; // Visit this fiber.

            var list = fiber.dependencies;

            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;

              while (dependency !== null) {
                // Check if the context matches.
                if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                  // Match! Schedule an update on this fiber.
                  if (fiber.tag === ClassComponent) {
                    // Schedule a force update on the work-in-progress.
                    var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                    update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                    // update to the current fiber, too, which means it will persist even if
                    // this render is thrown away. Since it's a race condition, not sure it's
                    // worth fixing.

                    enqueueUpdate(fiber, update);
                  }

                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                  var alternate = fiber.alternate;

                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                  }

                  scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.

                  list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                  // dependency list.

                  break;
                }

                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              // Don't scan deeper if this is a matching provider
              nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            } else {
              // Traverse down.
              nextFiber = fiber.child;
            }

            if (nextFiber !== null) {
              // Set the return pointer of the child to the work-in-progress fiber.
              nextFiber.return = fiber;
            } else {
              // No child. Traverse to next sibling.
              nextFiber = fiber;

              while (nextFiber !== null) {
                if (nextFiber === workInProgress) {
                  // We're back to the root of this subtree. Exit.
                  nextFiber = null;
                  break;
                }

                var sibling = nextFiber.sibling;

                if (sibling !== null) {
                  // Set the return pointer of the sibling to the work-in-progress fiber.
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                } // No more siblings. Traverse up.


                nextFiber = nextFiber.return;
              }
            }

            fiber = nextFiber;
          }
        }

        function prepareToReadContext(workInProgress, renderLanes) {
          currentlyRenderingFiber = workInProgress;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress.dependencies;

          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;

            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes)) {
                // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
              } // Reset the work-in-progress list


              dependencies.firstContext = null;
            }
          }
        }

        function _readContext(context, observedBits) {
          {
            // This warning would fire if you read context inside a Hook like useMemo.
            // Unlike the class check below, it's not enforced in production for perf.
            if (isDisallowedContextReadInDEV) {
              error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
            }
          }
          if (lastContextWithAllBitsObserved === context) ;else if (observedBits === false || observedBits === 0) ;else {
            var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
              // Observe all updates.
              lastContextWithAllBitsObserved = context;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else {
              resolvedObservedBits = observedBits;
            }

            var contextItem = {
              context: context,
              observedBits: resolvedObservedBits,
              next: null
            };

            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              } // This is the first dependency for this component. Create a new list.


              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem,
                responders: null
              };
            } else {
              // Append a new context item.
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context._currentValue;
        }

        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
        // It should only be read right after calling `processUpdateQueue`, via
        // `checkHasForceUpdateAfterProcessing`.

        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }

        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }

        function cloneUpdateQueue(current, workInProgress) {
          // Clone the update queue from current. Unless it's already a clone.
          var queue = workInProgress.updateQueue;
          var currentQueue = current.updateQueue;

          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
          }
        }

        function createUpdate(eventTime, lane) {
          var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }

        function enqueueUpdate(fiber, update) {
          var updateQueue = fiber.updateQueue;

          if (updateQueue === null) {
            // Only occurs if the fiber has been unmounted.
            return;
          }

          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;

          if (pending === null) {
            // This is the first update. Create a circular list.
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }

          sharedQueue.pending = update;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
              didWarnUpdateInsideUpdate = true;
            }
          }
        }

        function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
          // Captured updates are updates that are thrown by a child during the render
          // phase. They should be discarded if the render is aborted. Therefore,
          // we should only put them on the work-in-progress queue, not the current one.
          var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

          var current = workInProgress.alternate;

          if (current !== null) {
            var currentQueue = current.updateQueue;

            if (queue === currentQueue) {
              // The work-in-progress queue is the same as current. This happens when
              // we bail out on a parent fiber that then captures an error thrown by
              // a child. Since we want to append the update only to the work-in
              // -progress queue, we need to clone the updates. We usually clone during
              // processUpdateQueue, but that didn't happen in this case because we
              // skipped over the parent when we bailed out.
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;

              if (firstBaseUpdate !== null) {
                // Loop through the updates and clone them.
                var update = firstBaseUpdate;

                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };

                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }

                  update = update.next;
                } while (update !== null); // Append the captured update the end of the cloned list.


                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                // There are no base updates.
                newFirst = newLast = capturedUpdate;
              }

              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress.updateQueue = queue;
              return;
            }
          } // Append the update to the end of the list.


          var lastBaseUpdate = queue.lastBaseUpdate;

          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }

          queue.lastBaseUpdate = capturedUpdate;
        }

        function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState:
              {
                var payload = update.payload;

                if (typeof payload === 'function') {
                  // Updater function
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress.mode & StrictMode) {
                      disableLogs();

                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }

                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                } // State object


                return payload;
              }

            case CaptureUpdate:
              {
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
              }
            // Intentional fallthrough

            case UpdateState:
              {
                var _payload = update.payload;
                var partialState;

                if (typeof _payload === 'function') {
                  // Updater function
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress.mode & StrictMode) {
                      disableLogs();

                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }

                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  // Partial state object
                  partialState = _payload;
                }

                if (partialState === null || partialState === undefined) {
                  // Null and undefined are treated as no-ops.
                  return prevState;
                } // Merge the partial state and the previous state.


                return _assign({}, prevState, partialState);
              }

            case ForceUpdate:
              {
                hasForceUpdate = true;
                return prevState;
              }
          }

          return prevState;
        }

        function processUpdateQueue(workInProgress, props, instance, renderLanes) {
          // This is always non-null on a ClassComponent or HostRoot
          var queue = workInProgress.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

          var pendingQueue = queue.shared.pending;

          if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.

            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue

            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }

            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument

            var current = workInProgress.alternate;

            if (current !== null) {
              // This is always non-null on a ClassComponent or HostRoot
              var currentQueue = current.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }

                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          } // These values may change as we process the queue.


          if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.

            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;

            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;

              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                // Priority is insufficient. Skip this update. If this is the first
                // skipped update, the previous update/state is the new base
                // update/state.
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };

                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                } // Update the remaining priority in the queue.


                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                // This update does have sufficient priority.
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                } // Process this update.


                newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                var callback = update.callback;

                if (callback !== null) {
                  workInProgress.flags |= Callback;
                  var effects = queue.effects;

                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }

              update = update.next;

              if (update === null) {
                pendingQueue = queue.shared.pending;

                if (pendingQueue === null) {
                  break;
                } else {
                  // An update was scheduled from inside a reducer. Add the new
                  // pending updates to the end of the list and keep processing.
                  var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                  // unravel them when transferring them to the base queue.

                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);

            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }

            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.

            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
          }

          {
            currentlyProcessingQueue = null;
          }
        }

        function callCallback(callback, context) {
          if (!(typeof callback === 'function')) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }

          callback.call(context);
        }

        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }

        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }

        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          // Commit the effects
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;

          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;

              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }

        var fakeInternalInstance = {};
        var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
        // We'll use it to determine whether we need to initialize legacy refs.

        var emptyRefsObject = new React.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();

          warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
            if (callback === null || typeof callback === 'function') {
              return;
            }

            var key = callerName + '_' + callback;

            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
            }
          };

          warnOnUndefinedDerivedState = function warnOnUndefinedDerivedState(type, partialState) {
            if (partialState === undefined) {
              var componentName = getComponentName(type) || 'Component';

              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
              }
            }
          }; // This is so gross but it's at least non-critical and can be removed if
          // it causes problems. This is meant to give a nicer error message for
          // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
          // ...)) which otherwise throws a "_processChildContext is not a function"
          // exception.


          Object.defineProperty(fakeInternalInstance, '_processChildContext', {
            enumerable: false,
            value: function value() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }

        function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress.memoizedState;
          {
            if (workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
              } finally {
                reenableLogs();
              }
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          } // Merge the partial state and the previous state.

          var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
          workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
          // base state.

          if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }

        var classComponentUpdater = {
          isMounted: isMounted,
          enqueueSetState: function enqueueSetState(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;

            if (callback !== undefined && callback !== null) {
              {
                warnOnInvalidCallback(callback, 'setState');
              }
              update.callback = callback;
            }

            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;

            if (callback !== undefined && callback !== null) {
              {
                warnOnInvalidCallback(callback, 'replaceState');
              }
              update.callback = callback;
            }

            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;

            if (callback !== undefined && callback !== null) {
              {
                warnOnInvalidCallback(callback, 'forceUpdate');
              }
              update.callback = callback;
            }

            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        };

        function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress.stateNode;

          if (typeof instance.shouldComponentUpdate === 'function') {
            {
              if (workInProgress.mode & StrictMode) {
                disableLogs();

                try {
                  // Invoke the function an extra time to help detect side-effects.
                  instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  reenableLogs();
                }
              }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (shouldUpdate === undefined) {
                error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
              }
            }
            return shouldUpdate;
          }

          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }

          return true;
        }

        function checkClassInstance(workInProgress, ctor, newProps) {
          var instance = workInProgress.stateNode;
          {
            var name = getComponentName(ctor) || 'Component';
            var renderPresent = instance.render;

            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === 'function') {
                error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
              } else {
                error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
              }
            }

            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
            }

            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
            }

            if (instance.propTypes) {
              error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
            }

            if (instance.contextType) {
              error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
            }

            {
              if (instance.contextTypes) {
                error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
              }

              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
              }
            }

            if (typeof instance.componentShouldUpdate === 'function') {
              error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
            }

            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
              error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
            }

            if (typeof instance.componentDidUnmount === 'function') {
              error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
            }

            if (typeof instance.componentDidReceiveProps === 'function') {
              error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
            }

            if (typeof instance.componentWillRecieveProps === 'function') {
              error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
            }

            if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
              error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
            }

            var hasMutatedProps = instance.props !== newProps;

            if (instance.props !== undefined && hasMutatedProps) {
              error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
            }

            if (instance.defaultProps) {
              error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
            }

            if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
            }

            if (typeof instance.getDerivedStateFromProps === 'function') {
              error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
            }

            if (typeof instance.getDerivedStateFromError === 'function') {
              error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
            }

            if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
              error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
            }

            var _state = instance.state;

            if (_state && (_typeof3(_state) !== 'object' || isArray(_state))) {
              error('%s.state: must be set to an object or null', name);
            }

            if (typeof instance.getChildContext === 'function' && _typeof3(ctor.childContextTypes) !== 'object') {
              error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
            }
          }
        }

        function adoptClassInstance(workInProgress, instance) {
          instance.updater = classComponentUpdater;
          workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

          set(instance, workInProgress);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }

        function constructClassInstance(workInProgress, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ('contextType' in ctor) {
              var isValid = // Allow null for conditional declaration
              contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';

                if (contextType === undefined) {
                  addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
                } else if (_typeof3(contextType) !== 'object') {
                  addendum = ' However, it is set to a ' + _typeof3(contextType) + '.';
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = ' Did you accidentally pass the Context.Provider instead?';
                } else if (contextType._context !== undefined) {
                  // <Context.Consumer>
                  addendum = ' Did you accidentally pass the Context.Consumer instead?';
                } else {
                  addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                }

                error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
              }
            }
          }

          if (_typeof3(contextType) === 'object' && contextType !== null) {
            context = _readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
          } // Instantiate twice to help detect side-effects.


          {
            if (workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                new ctor(props, context); // eslint-disable-line no-new
              } finally {
                reenableLogs();
              }
            }
          }
          var instance = new ctor(props, context);
          var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
          adoptClassInstance(workInProgress, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
              var componentName = getComponentName(ctor) || 'Component';

              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
              }
            } // If new component APIs are defined, "unsafe" lifecycles won't be called.
            // Warn about these lifecycles if they are present.
            // Don't warn about react-lifecycles-compat polyfilled methods though.


            if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;

              if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = 'componentWillMount';
              } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
                foundWillMountName = 'UNSAFE_componentWillMount';
              }

              if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = 'componentWillReceiveProps';
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
              }

              if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = 'componentWillUpdate';
              } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                foundWillUpdateName = 'UNSAFE_componentWillUpdate';
              }

              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';

                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
              }
            }
          } // Cache unmasked context so we can avoid recreating masked context unless necessary.
          // ReactFiberContext usually updates this cache but can't for newly-created instances.

          if (isLegacyContextConsumer) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return instance;
        }

        function callComponentWillMount(workInProgress, instance) {
          var oldState = instance.state;

          if (typeof instance.componentWillMount === 'function') {
            instance.componentWillMount();
          }

          if (typeof instance.UNSAFE_componentWillMount === 'function') {
            instance.UNSAFE_componentWillMount();
          }

          if (oldState !== instance.state) {
            {
              error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
          var oldState = instance.state;

          if (typeof instance.componentWillReceiveProps === 'function') {
            instance.componentWillReceiveProps(newProps, nextContext);
          }

          if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }

          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress.type) || 'Component';

              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        } // Invokes the mount life-cycles on a previously never rendered instance.


        function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
          {
            checkClassInstance(workInProgress, ctor, newProps);
          }
          var instance = workInProgress.stateNode;
          instance.props = newProps;
          instance.state = workInProgress.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress);
          var contextType = ctor.contextType;

          if (_typeof3(contextType) === 'object' && contextType !== null) {
            instance.context = _readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
          }

          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || 'Component';

              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
              }
            }

            if (workInProgress.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
            }

            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
            }
          }
          processUpdateQueue(workInProgress, newProps, instance, renderLanes);
          instance.state = workInProgress.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

          if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
          } // In order to support react-lifecycles-compat polyfilled components,
          // Unsafe lifecycles should not be invoked for components using the new APIs.


          if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.

            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
          }

          if (typeof instance.componentDidMount === 'function') {
            workInProgress.flags |= Update;
          }
        }

        function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
          var instance = workInProgress.stateNode;
          var oldProps = workInProgress.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;

          if (_typeof3(contextType) === 'object' && contextType !== null) {
            nextContext = _readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
          }

          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
          // ever the previously attempted to render - not the "current". However,
          // during componentDidUpdate we pass the "current" props.
          // In order to support react-lifecycles-compat polyfilled components,
          // Unsafe lifecycles should not be invoked for components using the new APIs.

          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
            }
          }

          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress, newProps, instance, renderLanes);
          newState = workInProgress.memoizedState;

          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
              workInProgress.flags |= Update;
            }

            return false;
          }

          if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
          }

          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

          if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
              if (typeof instance.componentWillMount === 'function') {
                instance.componentWillMount();
              }

              if (typeof instance.UNSAFE_componentWillMount === 'function') {
                instance.UNSAFE_componentWillMount();
              }
            }

            if (typeof instance.componentDidMount === 'function') {
              workInProgress.flags |= Update;
            }
          } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
              workInProgress.flags |= Update;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.


            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
          } // Update the existing instance's state, props, and context pointers even
          // if shouldComponentUpdate returns false.


          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        } // Invokes the update life-cycles and returns false if it shouldn't rerender.


        function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
          var instance = workInProgress.stateNode;
          cloneUpdateQueue(current, workInProgress);
          var unresolvedOldProps = workInProgress.memoizedProps;
          var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;

          if (_typeof3(contextType) === 'object' && contextType !== null) {
            nextContext = _readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
          }

          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
          // ever the previously attempted to render - not the "current". However,
          // during componentDidUpdate we pass the "current" props.
          // In order to support react-lifecycles-compat polyfilled components,
          // Unsafe lifecycles should not be invoked for components using the new APIs.

          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
            }
          }

          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress, newProps, instance, renderLanes);
          newState = workInProgress.memoizedState;

          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
              if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.flags |= Update;
              }
            }

            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
              if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.flags |= Snapshot;
              }
            }

            return false;
          }

          if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
          }

          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

          if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
              if (typeof instance.componentWillUpdate === 'function') {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }

              if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }

            if (typeof instance.componentDidUpdate === 'function') {
              workInProgress.flags |= Update;
            }

            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
              workInProgress.flags |= Snapshot;
            }
          } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
              if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.flags |= Update;
              }
            }

            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
              if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.flags |= Snapshot;
              }
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.


            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
          } // Update the existing instance's state, props, and context pointers even
          // if shouldComponentUpdate returns false.


          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }

        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;

        var warnForMissingKey = function warnForMissingKey(child, returnFiber) {};

        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          /**
           * Warn if there's no key explicitly set on dynamic arrays of children or
           * object keys are not valid. This allows us to keep track of children between
           * updates.
           */

          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};

          warnForMissingKey = function warnForMissingKey(child, returnFiber) {
            if (child === null || _typeof3(child) !== 'object') {
              return;
            }

            if (!child._store || child._store.validated || child.key != null) {
              return;
            }

            if (!(_typeof3(child._store) === 'object')) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }

            child._store.validated = true;
            var componentName = getComponentName(returnFiber.type) || 'Component';

            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }

            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
          };
        }
        var isArray$1 = Array.isArray;

        function coerceRef(returnFiber, current, element) {
          var mixedRef = element.ref;

          if (mixedRef !== null && typeof mixedRef !== 'function' && _typeof3(mixedRef) !== 'object') {
            {
              // TODO: Clean this up once we turn on the string ref warning for
              // everyone, because the strict mode case will no longer be relevant
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
              // because these cannot be automatically converted to an arrow function
              // using a codemod. Therefore, we don't have to warn about string refs again.
              !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || 'Component';

                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }

            if (element._owner) {
              var owner = element._owner;
              var inst;

              if (owner) {
                var ownerFiber = owner;

                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                }

                inst = ownerFiber.stateNode;
              }

              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }

              var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

              if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
                return current.ref;
              }

              var ref = function ref(value) {
                var refs = inst.refs;

                if (refs === emptyRefsObject) {
                  // This is a lazy pooled frozen object, so we need to initialize.
                  refs = inst.refs = {};
                }

                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };

              ref._stringRef = stringRef;
              return ref;
            } else {
              if (!(typeof mixedRef === 'string')) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }

              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
          }

          return mixedRef;
        }

        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== 'textarea') {
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }

        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentName(returnFiber.type) || 'Component';

            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }

            ownerHasFunctionTypeWarning[componentName] = true;
            error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
          }
        } // We avoid inlining this to avoid potential deopts from using try/catch.
        // to be able to optimize each path individually by branching early. This needs
        // a compiler or we can do it manually. Helpers that don't need this branching
        // live outside of this function.


        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              // Noop.
              return;
            } // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.


            var last = returnFiber.lastEffect;

            if (last !== null) {
              last.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }

            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
          }

          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              // Noop.
              return null;
            } // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.


            var childToDelete = currentFirstChild;

            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }

            return null;
          }

          function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;

            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }

              existingChild = existingChild.sibling;
            }

            return existingChildren;
          }

          function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }

          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;

            if (!shouldTrackSideEffects) {
              // Noop.
              return lastPlacedIndex;
            }

            var current = newFiber.alternate;

            if (current !== null) {
              var oldIndex = current.index;

              if (oldIndex < lastPlacedIndex) {
                // This is a move.
                newFiber.flags = Placement;
                return lastPlacedIndex;
              } else {
                // This item can stay in place.
                return oldIndex;
              }
            } else {
              // This is an insertion.
              newFiber.flags = Placement;
              return lastPlacedIndex;
            }
          }

          function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags = Placement;
            }

            return newFiber;
          }

          function updateTextNode(returnFiber, current, textContent, lanes) {
            if (current === null || current.tag !== HostText) {
              // Insert
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              // Update
              var existing = useFiber(current, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }

          function updateElement(returnFiber, current, element, lanes) {
            if (current !== null) {
              if (current.elementType === element.type || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(current, element)) {
                // Move based on index
                var existing = useFiber(current, element.props);
                existing.ref = coerceRef(returnFiber, current, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            } // Insert


            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current, element);
            created.return = returnFiber;
            return created;
          }

          function updatePortal(returnFiber, current, portal, lanes) {
            if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
              // Insert
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              // Update
              var existing = useFiber(current, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }

          function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (current === null || current.tag !== Fragment) {
              // Insert
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              // Update
              var existing = useFiber(current, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }

          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
              // Text nodes don't have keys. If the previous node is implicitly keyed
              // we can continue to replace it without aborting even if it is not a text
              // node.
              var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }

            if (_typeof3(newChild) === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }

                case REACT_PORTAL_TYPE:
                  {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

                    _created2.return = returnFiber;
                    return _created2;
                  }
              }

              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

                _created3.return = returnFiber;
                return _created3;
              }

              throwOnInvalidObjectType(returnFiber, newChild);
            }

            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }

          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;

            if (typeof newChild === 'string' || typeof newChild === 'number') {
              // Text nodes don't have keys. If the previous node is implicitly keyed
              // we can continue to replace it without aborting even if it is not a text
              // node.
              if (key !== null) {
                return null;
              }

              return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }

            if (_typeof3(newChild) === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }

                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }

                case REACT_PORTAL_TYPE:
                  {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
              }

              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }

                return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
              }

              throwOnInvalidObjectType(returnFiber, newChild);
            }

            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }

          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
              // Text nodes don't have keys, so we neither have to check the old nor
              // new node for the key. If both are text nodes, they match.
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }

            if (_typeof3(newChild) === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }

                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }

                case REACT_PORTAL_TYPE:
                  {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
              }

              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;

                return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
              }

              throwOnInvalidObjectType(returnFiber, newChild);
            }

            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          /**
           * Warns if there is a duplicate or missing key
           */


          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (_typeof3(child) !== 'object' || child === null) {
                return knownKeys;
              }

              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;

                  if (typeof key !== 'string') {
                    break;
                  }

                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key);
                    break;
                  }

                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }

                  error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
                  break;
              }
            }
            return knownKeys;
          }

          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // This algorithm can't optimize by searching from both ends since we
            // don't have backpointers on fibers. I'm trying to see how far we can get
            // with that model. If it ends up not being worth the tradeoffs, we can
            // add it later.
            // Even with a two ended optimization, we'd want to optimize for the case
            // where there are few changes and brute force the comparison instead of
            // going for the Map. It'd like to explore hitting that path first in
            // forward-only mode and only go for the Map once we notice that we need
            // lots of look ahead. This doesn't handle reversal as well as two ended
            // search but that's unusual. Besides, for the two ended optimization to
            // work on Iterables, we'd need to copy the whole set.
            // In this first iteration, we'll just live with hitting the bad case
            // (adding everything to a Map) in for every insert/move.
            // If you change this code, also update reconcileChildrenIterator() which
            // uses the same algorithm.
            {
              // First, validate keys.
              var knownKeys = null;

              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;

            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }

              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

              if (newFiber === null) {
                // TODO: This breaks on empty slots like null children. That's
                // unfortunate because it triggers the slow path all the time. We need
                // a better way to communicate whether this was a miss or null,
                // boolean, undefined, etc.
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }

                break;
              }

              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  // We matched the slot, but we didn't reuse the existing fiber, so we
                  // need to delete the existing child.
                  deleteChild(returnFiber, oldFiber);
                }
              }

              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
              } else {
                // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
              }

              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }

            if (newIdx === newChildren.length) {
              // We've reached the end of the new children. We can delete the rest.
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }

            if (oldFiber === null) {
              // If we don't have any more existing children we can choose a fast path
              // since the rest will all be insertions.
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

                if (_newFiber === null) {
                  continue;
                }

                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

                if (previousNewFiber === null) {
                  // TODO: Move out of the loop. This only happens for the first run.
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }

                previousNewFiber = _newFiber;
              }

              return resultingFirstChild;
            } // Add all children to a key map for quick lookups.


            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    // The new fiber is a work in progress, but if there exists a
                    // current, that means that we reused the fiber. We need to delete
                    // it from the child list so that we don't add it to the deletion
                    // list.
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }

                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }

                previousNewFiber = _newFiber2;
              }
            }

            if (shouldTrackSideEffects) {
              // Any existing children that weren't consumed above were deleted. We need
              // to add them to the deletion list.
              existingChildren.forEach(function (child) {
                return deleteChild(returnFiber, child);
              });
            }

            return resultingFirstChild;
          }

          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);

            if (!(typeof iteratorFn === 'function')) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }

            {
              // We don't support rendering Generators because it's a mutation.
              // See https://github.com/facebook/react/issues/12995
              if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
              newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) {
                  error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
                }

                didWarnAboutGenerators = true;
              } // Warn about using Maps as children


              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
                }

                didWarnAboutMaps = true;
              } // First, validate keys.
              // We'll get a different iterator later for the main pass.


              var _newChildren = iteratorFn.call(newChildrenIterable);

              if (_newChildren) {
                var knownKeys = null;

                var _step = _newChildren.next();

                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);

            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }

            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();

            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }

              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

              if (newFiber === null) {
                // TODO: This breaks on empty slots like null children. That's
                // unfortunate because it triggers the slow path all the time. We need
                // a better way to communicate whether this was a miss or null,
                // boolean, undefined, etc.
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }

                break;
              }

              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  // We matched the slot, but we didn't reuse the existing fiber, so we
                  // need to delete the existing child.
                  deleteChild(returnFiber, oldFiber);
                }
              }

              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
              } else {
                // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
              }

              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }

            if (step.done) {
              // We've reached the end of the new children. We can delete the rest.
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }

            if (oldFiber === null) {
              // If we don't have any more existing children we can choose a fast path
              // since the rest will all be insertions.
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);

                if (_newFiber3 === null) {
                  continue;
                }

                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

                if (previousNewFiber === null) {
                  // TODO: Move out of the loop. This only happens for the first run.
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }

                previousNewFiber = _newFiber3;
              }

              return resultingFirstChild;
            } // Add all children to a key map for quick lookups.


            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    // The new fiber is a work in progress, but if there exists a
                    // current, that means that we reused the fiber. We need to delete
                    // it from the child list so that we don't add it to the deletion
                    // list.
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }

                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }

                previousNewFiber = _newFiber4;
              }
            }

            if (shouldTrackSideEffects) {
              // Any existing children that weren't consumed above were deleted. We need
              // to add them to the deletion list.
              existingChildren.forEach(function (child) {
                return deleteChild(returnFiber, child);
              });
            }

            return resultingFirstChild;
          }

          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              // We already have an existing node so let's just update it and delete
              // the rest.
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.


            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }

          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;

            while (child !== null) {
              // TODO: If key === null and child.key === null, then this only applies to
              // the first item in the list.
              if (child.key === key) {
                switch (child.tag) {
                  case Fragment:
                    {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }

                      break;
                    }

                  case Block: // We intentionally fallthrough here if enableBlocksAPI is not on.
                  // eslint-disable-next-lined no-fallthrough

                  default:
                    {
                      if (child.elementType === element.type || // Keep this check inline so it only runs on the false path:
                      isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);

                        var _existing3 = useFiber(child, element.props);

                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }

                      break;
                    }
                } // Didn't match.


                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }

              child = child.sibling;
            }

            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }

          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;

            while (child !== null) {
              // TODO: If key === null and child.key === null, then this only applies to
              // the first item in the list.
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }

              child = child.sibling;
            }

            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } // This API will tag the children with the side-effect of the reconciliation
          // itself. They will be added to the side-effect list as we pass through the
          // children and the parent.


          function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = _typeof3(newChild) === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            } // Handle object types


            var isObject = _typeof3(newChild) === 'object' && newChild !== null;

            if (isObject) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              }
            }

            if (typeof newChild === 'string' || typeof newChild === 'number') {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            }

            if (isArray$1(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }

            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }

            if (isObject) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }

            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }

            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
              // If the new child is undefined, and the return fiber is a composite
              // component, throw an error. If Fiber return types are disabled,
              // we already threw above.
              switch (returnFiber.tag) {
                case ClassComponent:
                  {
                    {
                      var instance = returnFiber.stateNode;

                      if (instance.render._isMockFunction) {
                        // We allow auto-mocks to proceed as if they're returning null.
                        break;
                      }
                    }
                  }
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough

                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                  {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
              }
            } // Remaining cases are all treated as empty.


            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }

          return reconcileChildFibers;
        }

        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);

        function cloneChildFibers(current, workInProgress) {
          if (!(current === null || workInProgress.child === current.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }

          if (workInProgress.child === null) {
            return;
          }

          var currentChild = workInProgress.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress.child = newChild;
          newChild.return = workInProgress;

          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
          }

          newChild.sibling = null;
        } // Reset a workInProgress child set to prepare it for a second pass.


        function resetChildFibers(workInProgress, lanes) {
          var child = workInProgress.child;

          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }

        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);

        function requiredContext(c) {
          if (!(c !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }

          return c;
        }

        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }

        function pushHostContainer(fiber, nextRootInstance) {
          // Push current root instance onto the stack;
          // This allows us to reset root when portals are popped.
          push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
          // This enables us to pop only Fibers that provide unique contexts.

          push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
          // However, we can't just call getRootHostContext() and push it because
          // we'd have a different number of entries on the stack depending on
          // whether getRootHostContext() throws somewhere in renderer code or not.
          // So we push an empty value first. This lets us safely unwind on errors.

          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }

        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }

        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }

        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

          if (context === nextContext) {
            return;
          } // Track the context and the Fiber that provided it.
          // This enables us to pop only Fibers that provide unique contexts.


          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }

        function popHostContext(fiber) {
          // Do not pop unless this Fiber provided the current context.
          // pushHostContext() only pushes Fibers that provide unique contexts.
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }

          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }

        var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
        // inherited deeply down the subtree. The upper bits only affect
        // this immediate suspense boundary and gets reset each new
        // boundary or suspense list.

        var SubtreeSuspenseContextMask = 1; // Subtree Flags:
        // InvisibleParentSuspenseContext indicates that one of our parent Suspense
        // boundaries is not currently showing visible main content.
        // Either because it is already showing a fallback or is not mounted at all.
        // We can use this to determine if it is desirable to trigger a fallback at
        // the parent. If not, then we might need to trigger undesirable boundaries
        // and/or suspend the commit to avoid hiding the parent content.

        var InvisibleParentSuspenseContext = 1; // Shallow Flags:
        // ForceSuspenseFallback can be used by SuspenseList to force newly added
        // items into their fallback state during one of the render passes.

        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);

        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }

        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }

        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }

        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }

        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }

        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }

        function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
          // If it was the primary children that just suspended, capture and render the
          // fallback. Otherwise, don't capture and bubble to the next boundary.
          var nextState = workInProgress.memoizedState;

          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              // A dehydrated boundary always captures.
              return true;
            }

            return false;
          }

          var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

          if (props.fallback === undefined) {
            return false;
          } // Regular boundaries always capture.


          if (props.unstable_avoidThisFallback !== true) {
            return true;
          } // If it's a boundary we should avoid, then we prefer to bubble up to the
          // parent boundary if it is currently invisible.


          if (hasInvisibleParent) {
            return false;
          } // If the parent is not able to handle it, we must handle it.


          return true;
        }

        function findFirstSuspended(row) {
          var node = row;

          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;

              if (state !== null) {
                var dehydrated = state.dehydrated;

                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;

              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === row) {
              return null;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }

          return null;
        }

        var NoFlags$1 =
        /*  */
        0; // Represents whether effect should fire.

        var HasEffect =
        /* */
        1; // Represents the phase in which the effect (not the clean-up) fires.

        var Layout =
        /*    */
        2;
        var Passive$1 =
        /*   */
        4; // This may have been an insertion or a hydration.

        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;

        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }

        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;

              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
          // these children are not part of the reconciliation list of children.
          // Even if we abort and rereconcile the children, that will try to hydrate
          // again and the nodes are still in the host tree so these will be
          // recreated.

          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }

        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;

                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;

                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }

                  break;
                }

              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;

                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;

                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;

                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }

                  break;
                }

              default:
                return;
            }
          }
        }

        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent:
              {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);

                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }

                return false;
              }

            case HostText:
              {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);

                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }

                return false;
              }

            case SuspenseComponent:
              {
                return false;
              }

            default:
              return false;
          }
        }

        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }

          var nextInstance = nextHydratableInstance;

          if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }

          var firstAttemptedInstance = nextInstance;

          if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);

            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              // Nothing to hydrate. Make it an insertion.
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.


            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }

          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }

        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

          fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
          // is a new ref we mark this as an update.

          if (updatePayload !== null) {
            return true;
          }

          return false;
        }

        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              // We assume that prepareToHydrateHostTextInstance is called in a context where the
              // hydration parent is the parent host component of this host text.
              var returnFiber = hydrationParentFiber;

              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot:
                    {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }

                  case HostComponent:
                    {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                }
              }
            }
          }
          return shouldUpdate;
        }

        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }

          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }

        function popToNextHostParent(fiber) {
          var parent = fiber.return;

          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }

          hydrationParentFiber = parent;
        }

        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            // We're deeper than the current hydration context, inside an inserted
            // tree.
            return false;
          }

          if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }

          var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
          // We only do this deeper than head and body since they tend to have random
          // other nodes in them. We also ignore components with pure text content in
          // side of them.
          // TODO: Better heuristic.

          if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;

            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }

          popToNextHostParent(fiber);

          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }

          return true;
        }

        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }

        function getIsHydrating() {
          return isHydrating;
        } // and should be reset before starting a new render.
        // This tracks which mutable sources need to be reset after a render.


        var workInProgressSources = [];
        var rendererSigil$1;
        {
          // Used to detect multiple renderers using the same mutable source.
          rendererSigil$1 = {};
        }

        function markSourceAsDirty(mutableSource) {
          workInProgressSources.push(mutableSource);
        }

        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }

          workInProgressSources.length = 0;
        }

        function getWorkInProgressVersion(mutableSource) {
          {
            return mutableSource._workInProgressVersionPrimary;
          }
        }

        function setWorkInProgressVersion(mutableSource, version) {
          {
            mutableSource._workInProgressVersionPrimary = version;
          }
          workInProgressSources.push(mutableSource);
        }

        function warnAboutMultipleRenderersDEV(mutableSource) {
          {
            {
              if (mutableSource._currentPrimaryRenderer == null) {
                mutableSource._currentPrimaryRenderer = rendererSigil$1;
              } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
              }
            }
          }
        } // Eager reads the version of a mutable source and stores it on the root.


        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
            ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnAboutUseOpaqueIdentifier;
        {
          didWarnAboutUseOpaqueIdentifier = {};
          didWarnAboutMismatchedHooksForComponent = new Set();
        } // These are set right before calling the component.

        var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
        // the work-in-progress hook.

        var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
        // current hook list is the list that belongs to the current fiber. The
        // work-in-progress hook list is a new list that will be added to the
        // work-in-progress fiber.

        var currentHook = null;
        var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
        // does not get reset if we do another render pass; only when we're completely
        // finished evaluating this component. This is an optimization so we know
        // whether we need to clear render phase updates after a throw.

        var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
        // gets reset after each attempt.
        // TODO: Maybe there's some way to consolidate this with
        // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

        var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
        // The list stores the order of hooks used during the initial render (mount).
        // Subsequent renders (updates) reference this list.

        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
        // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
        // When true, such Hooks will always be "remounted". Only used during hot reload.

        var ignorePreviousDependencies = false;

        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;

            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }

        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;

            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;

              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }

        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
              // Verify deps, but only on mount to avoid extra checks.
              // It's unlikely their type would change as usually you define them inline.
              error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, _typeof3(deps));
            }
          }
        }

        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);

            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);

              if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;

                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                  // lol @ IE not supporting String#repeat

                  while (row.length < secondColumnStart) {
                    row += ' ';
                  }

                  row += newHookName + '\n';
                  table += row;
                }

                error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
              }
            }
          }
        }

        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }

        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              // Only true when this component is being hot reloaded.
              return false;
            }
          }

          if (prevDeps === null) {
            {
              error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
            }
            return false;
          }

          {
            // Don't bother comparing lengths in prod because these arrays should be
            // passed inline.
            if (nextDeps.length !== prevDeps.length) {
              error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
            }
          }

          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }

            return false;
          }

          return true;
        }

        function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress;
          {
            hookTypesDev = current !== null ? current._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1; // Used for hot reloading:

            ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
          }
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          workInProgress.lanes = NoLanes; // The following should have already been reset
          // currentHook = null;
          // workInProgressHook = null;
          // didScheduleRenderPhaseUpdate = false;
          // TODO Warn if no hooks are used at all during mount, then some are used during update.
          // Currently we will identify the update render as a mount because memoizedState === null.
          // This is tricky because it's valid for certain types of components (e.g. React.lazy)
          // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
          // Non-stateful hooks (e.g. context) don't get added to memoizedState,
          // so memoizedState would be null during updates and mounts.

          {
            if (current !== null && current.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              // This dispatcher handles an edge case where a component is updating,
              // but no stateful hooks have been used.
              // We want to match the production code behavior (which will use HooksDispatcherOnMount),
              // but with the extra DEV validation to ensure hooks ordering hasn't changed.
              // This dispatcher does that.
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg); // Check if there was a render phase update

          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;

            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;

              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }

              numberOfReRenders += 1;
              {
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
              } // Start over from the beginning of the list

              currentHook = null;
              workInProgressHook = null;
              workInProgress.updateQueue = null;
              {
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          } // We can assume the previous dispatcher is always this one, since we set it
          // at the beginning of the render phase and there's no re-entrancy.


          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress._debugHookTypes = hookTypesDev;
          } // This check uses currentHook so that it works the same in DEV and prod bundles.
          // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.

          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;

          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }

          return children;
        }

        function bailoutHooks(current, workInProgress, lanes) {
          workInProgress.updateQueue = current.updateQueue;
          workInProgress.flags &= ~(Passive | Update);
          current.lanes = removeLanes(current.lanes, lanes);
        }

        function resetHooksAfterThrow() {
          // We can assume the previous dispatcher is always this one, since we set it
          // at the beginning of the render phase and there's no re-entrancy.
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

          if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;

            while (hook !== null) {
              var queue = hook.queue;

              if (queue !== null) {
                queue.pending = null;
              }

              hook = hook.next;
            }

            didScheduleRenderPhaseUpdate = false;
          }

          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
        }

        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };

          if (workInProgressHook === null) {
            // This is the first hook in the list
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            // Append to the end of the list
            workInProgressHook = workInProgressHook.next = hook;
          }

          return workInProgressHook;
        }

        function updateWorkInProgressHook() {
          // This function is used both for updates and for re-renders triggered by a
          // render phase update. It assumes there is either a current hook we can
          // clone, or a work-in-progress hook from a previous render pass that we can
          // use as a base. When we reach the end of the base list, we must switch to
          // the dispatcher used for mounts.
          var nextCurrentHook;

          if (currentHook === null) {
            var current = currentlyRenderingFiber$1.alternate;

            if (current !== null) {
              nextCurrentHook = current.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }

          var nextWorkInProgressHook;

          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }

          if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }

            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };

            if (workInProgressHook === null) {
              // This is the first hook in the list.
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              // Append to the end of the list.
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }

          return workInProgressHook;
        }

        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }

        function basicStateReducer(state, action) {
          // $FlowFixMe: Flow doesn't like mixed types
          return typeof action === 'function' ? action(state) : action;
        }

        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;

          if (init !== undefined) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }

          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }

        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;

          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }

          queue.lastRenderedReducer = reducer;
          var current = currentHook; // The last rebase update that is NOT part of the base state.

          var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

          var pendingQueue = queue.pending;

          if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
              // Merge the pending queue and the base queue.
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }

            {
              if (current.baseQueue !== baseQueue) {
                // Internal invariant that should never happen, but feasibly could in
                // the future if we implement resuming, or some form of that.
                error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
              }
            }
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }

          if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;

            do {
              var updateLane = update.lane;

              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                // Priority is insufficient. Skip this update. If this is the first
                // skipped update, the previous update/state is the new base
                // update/state.
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };

                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                } // Update the remaining priority in the queue.
                // TODO: Don't need to accumulate this. Instead, we can remove
                // renderLanes from the original lanes.


                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                // This update does have sufficient priority.
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                } // Process this update.


                if (update.eagerReducer === reducer) {
                  // If this update was processed eagerly, and its reducer matches the
                  // current reducer, we can use the eagerly computed state.
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }

              update = update.next;
            } while (update !== null && update !== first);

            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            } // Mark that the fiber performed work, but only if the new state is
            // different from the current state.


            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }

            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }

          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }

        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;

          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }

          queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
          // work-in-progress hook.

          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;

          if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;

            do {
              // Process this render phase update. We don't have to check the
              // priority because it will always be the same as the current
              // render's.
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
            // different from the current state.


            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }

            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.

            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }

            queue.lastRenderedState = newState;
          }

          return [newState, dispatch];
        }

        function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
          {
            warnAboutMultipleRenderersDEV(source);
          }
          var getVersion = source._getVersion;
          var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?

          var isSafeToReadFromSource = false; // Check the version first.
          // If this render has already been started with a specific version,
          // we can use it alone to determine if we can safely read from the source.

          var currentRenderVersion = getWorkInProgressVersion(source);

          if (currentRenderVersion !== null) {
            // It's safe to read if the store hasn't been mutated since the last time
            // we read something.
            isSafeToReadFromSource = currentRenderVersion === version;
          } else {
            // If there's no version, then this is the first time we've read from the
            // source during the current render pass, so we need to do a bit more work.
            // What we need to determine is if there are any hooks that already
            // subscribed to the source, and if so, whether there are any pending
            // mutations that haven't been synchronized yet.
            //
            // If there are no pending mutations, then `root.mutableReadLanes` will be
            // empty, and we know we can safely read.
            //
            // If there *are* pending mutations, we may still be able to safely read
            // if the currently rendering lanes are inclusive of the pending mutation
            // lanes, since that guarantees that the value we're about to read from
            // the source is consistent with the values that we read during the most
            // recent mutation.
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);

            if (isSafeToReadFromSource) {
              // If it's safe to read from this source during the current render,
              // store the version in case other components read from it.
              // A changed version number will let those components know to throw and restart the render.
              setWorkInProgressVersion(source, version);
            }
          }

          if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            {
              if (typeof snapshot === 'function') {
                error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
              }
            }
            return snapshot;
          } else {
            // This handles the special case of a mutable source being shared between renderers.
            // In that case, if the source is mutated between the first and second renderer,
            // The second renderer don't know that it needs to reset the WIP version during unwind,
            // (because the hook only marks sources as dirty if it's written to their WIP version).
            // That would cause this tear check to throw again and eventually be visible to the user.
            // We can avoid this infinite loop by explicitly marking the source as dirty.
            //
            // This can lead to tearing in the first renderer when it resumes,
            // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
            markSourceAsDirty(source);
            {
              {
                throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
              }
            }
          }
        }

        function useMutableSource(hook, source, getSnapshot, subscribe) {
          var root = getWorkInProgressRoot();

          if (!(root !== null)) {
            {
              throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
          }

          var getVersion = source._getVersion;
          var version = getVersion(source._source);
          var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const

          var _dispatcher$useState = dispatcher.useState(function () {
            return readFromUnsubcribedMutableSource(root, source, getSnapshot);
          }),
              currentSnapshot = _dispatcher$useState[0],
              setSnapshot = _dispatcher$useState[1];

          var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
          // We use it to clear the pending update queue if we have a new source.

          var stateHook = workInProgressHook;
          var memoizedState = hook.memoizedState;
          var refs = memoizedState.refs;
          var prevGetSnapshot = refs.getSnapshot;
          var prevSource = memoizedState.source;
          var prevSubscribe = memoizedState.subscribe;
          var fiber = currentlyRenderingFiber$1;
          hook.memoizedState = {
            refs: refs,
            source: source,
            subscribe: subscribe
          }; // Sync the values needed by our subscription handler after each commit.

          dispatcher.useEffect(function () {
            refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.

            refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.

            var maybeNewVersion = getVersion(source._source);

            if (!objectIs(version, maybeNewVersion)) {
              var maybeNewSnapshot = getSnapshot(source._source);
              {
                if (typeof maybeNewSnapshot === 'function') {
                  error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
                }
              }

              if (!objectIs(snapshot, maybeNewSnapshot)) {
                setSnapshot(maybeNewSnapshot);
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root, lane);
              } // If the source mutated between render and now,
              // there may be state updates already scheduled from the old source.
              // Entangle the updates so that they render in the same batch.


              markRootEntangled(root, root.mutableReadLanes);
            }
          }, [getSnapshot, source, subscribe]); // If we got a new source or subscribe function, re-subscribe in a passive effect.

          dispatcher.useEffect(function () {
            var handleChange = function handleChange() {
              var latestGetSnapshot = refs.getSnapshot;
              var latestSetSnapshot = refs.setSnapshot;

              try {
                latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.

                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root, lane);
              } catch (error) {
                // A selector might throw after a source mutation.
                // e.g. it might try to read from a part of the store that no longer exists.
                // In this case we should still schedule an update with React.
                // Worst case the selector will throw again and then an error boundary will handle it.
                latestSetSnapshot(function () {
                  throw error;
                });
              }
            };

            var unsubscribe = subscribe(source._source, handleChange);
            {
              if (typeof unsubscribe !== 'function') {
                error('Mutable source subscribe function must return an unsubscribe function.');
              }
            }
            return unsubscribe;
          }, [source, subscribe]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
          //
          // If either the source or the subscription have changed we can't can't trust the update queue.
          // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
          //
          // If the getSnapshot function changed, we also shouldn't rely on the update queue.
          // It's possible that the underlying source was mutated between the when the last "change" event fired,
          // and when the current render (with the new getSnapshot function) is processed.
          //
          // In both cases, we need to throw away pending updates (since they are no longer relevant)
          // and treat reading from the source as we do in the mount case.

          if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            // Create a new queue and setState method,
            // So if there are interleaved updates, they get pushed to the older queue.
            // When this becomes current, the previous queue and dispatch method will be discarded,
            // including any interleaving updates that occur.
            var newQueue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
          }

          return snapshot;
        }

        function mountMutableSource(source, getSnapshot, subscribe) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = {
            refs: {
              getSnapshot: getSnapshot,
              setSnapshot: null
            },
            source: source,
            subscribe: subscribe
          };
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }

        function updateMutableSource(source, getSnapshot, subscribe) {
          var hook = updateWorkInProgressHook();
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }

        function mountState(initialState) {
          var hook = mountWorkInProgressHook();

          if (typeof initialState === 'function') {
            // $FlowFixMe: Flow doesn't like mixed types
            initialState = initialState();
          }

          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }

        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }

        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }

        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;

            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }

          return effect;
        }

        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }

        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }

        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === undefined ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
        }

        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === undefined ? null : deps;
          var destroy = undefined;

          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;

            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;

              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }

          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }

        function mountEffect(create, deps) {
          {
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create, deps);
        }

        function updateEffect(create, deps) {
          {
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create, deps);
        }

        function mountLayoutEffect(create, deps) {
          return mountEffectImpl(Update, Layout, create, deps);
        }

        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }

        function imperativeHandleEffect(create, ref) {
          if (typeof ref === 'function') {
            var refCallback = ref;

            var _inst = create();

            refCallback(_inst);
            return function () {
              refCallback(null);
            };
          } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty('current')) {
                error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
              }
            }

            var _inst2 = create();

            refObject.current = _inst2;
            return function () {
              refObject.current = null;
            };
          }
        }

        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== 'function') {
              error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? _typeof3(create) : 'null');
            }
          } // TODO: If deps are provided, should we skip comparing the ref itself?

          var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }

        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== 'function') {
              error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? _typeof3(create) : 'null');
            }
          } // TODO: If deps are provided, should we skip comparing the ref itself?

          var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }

        function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
          // The react-debug-hooks package injects its own implementation
          // so that e.g. DevTools can display custom hook values.
        }

        var updateDebugValue = mountDebugValue;

        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === undefined ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }

        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === undefined ? null : deps;
          var prevState = hook.memoizedState;

          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];

              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }

          hook.memoizedState = [callback, nextDeps];
          return callback;
        }

        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === undefined ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }

        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === undefined ? null : deps;
          var prevState = hook.memoizedState;

          if (prevState !== null) {
            // Assume these are defined. If they're not, areHookInputsEqual will warn.
            if (nextDeps !== null) {
              var prevDeps = prevState[1];

              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }

          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }

        function mountDeferredValue(value) {
          var _mountState = mountState(value),
              prevValue = _mountState[0],
              setValue = _mountState[1];

          mountEffect(function () {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;

            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }

        function updateDeferredValue(value) {
          var _updateState = updateState(),
              prevValue = _updateState[0],
              setValue = _updateState[1];

          updateEffect(function () {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;

            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }

        function rerenderDeferredValue(value) {
          var _rerenderState = rerenderState(),
              prevValue = _rerenderState[0],
              setValue = _rerenderState[1];

          updateEffect(function () {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;

            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }

        function startTransition(setPending, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          {
            runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function () {
              setPending(true);
            });
            runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;

              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            });
          }
        }

        function mountTransition() {
          var _mountState2 = mountState(false),
              isPending = _mountState2[0],
              setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
          // never changes.


          var start = startTransition.bind(null, setPending);
          mountRef(start);
          return [start, isPending];
        }

        function updateTransition() {
          var _updateState2 = updateState(),
              isPending = _updateState2[0];

          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }

        function rerenderTransition() {
          var _rerenderState2 = rerenderState(),
              isPending = _rerenderState2[0];

          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }

        var isUpdatingOpaqueValueInRenderPhase = false;

        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }

        function warnOnOpaqueIdentifierAccessInDEV(fiber) {
          {
            // TODO: Should warn in effects and callbacks, too
            var name = getComponentName(fiber.type) || 'Unknown';

            if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
              error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');
              didWarnAboutUseOpaqueIdentifier[name] = true;
            }
          }
        }

        function mountOpaqueIdentifier() {
          var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));

          if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;

            var readValue = function readValue() {
              if (!didUpgrade) {
                // Only upgrade once. This works even inside the render phase because
                // the update is added to a shared queue, which outlasts the
                // in-progress render.
                didUpgrade = true;
                {
                  isUpdatingOpaqueValueInRenderPhase = true;
                  setId(makeId());
                  isUpdatingOpaqueValueInRenderPhase = false;
                  warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
              }

              {
                {
                  throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                }
              }
            };

            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];

            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
              currentlyRenderingFiber$1.flags |= Update | Passive;
              pushEffect(HasEffect | Passive$1, function () {
                setId(makeId());
              }, undefined, null);
            }

            return id;
          } else {
            var _id = makeId();

            mountState(_id);
            return _id;
          }
        }

        function updateOpaqueIdentifier() {
          var id = updateState()[0];
          return id;
        }

        function rerenderOpaqueIdentifier() {
          var id = rerenderState()[0];
          return id;
        }

        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === 'function') {
              error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
            }
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = {
            lane: lane,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null
          }; // Append the update to the end of the list.

          var pending = queue.pending;

          if (pending === null) {
            // This is the first update. Create a circular list.
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }

          queue.pending = update;
          var alternate = fiber.alternate;

          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            // This is a render phase update. Stash it in a lazily-created map of
            // queue -> linked list of updates. After this render pass, we'll restart
            // and apply the stashed updates on top of the work-in-progress hook.
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          } else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              // The queue is currently empty, which means we can eagerly compute the
              // next state before entering the render phase. If the new state is the
              // same as the current state, we may be able to bail out entirely.
              var lastRenderedReducer = queue.lastRenderedReducer;

              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }

                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                  // it, on the update object. If the reducer hasn't changed by the
                  // time we enter the render phase, then the eager state can be used
                  // without calling the reducer again.

                  update.eagerReducer = lastRenderedReducer;
                  update.eagerState = eagerState;

                  if (objectIs(eagerState, currentState)) {
                    // Fast path. We can bail out without scheduling React to re-render.
                    // It's still possible that we'll need to rebase this update later,
                    // if the component re-renders for a different reason and by that
                    // time the reducer has changed.
                    return;
                  }
                } catch (error) {// Suppress the error. It will throw again in the render phase.
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }

            {
              // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
              if ('undefined' !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        }

        var ContextOnlyDispatcher = {
          readContext: _readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useOpaqueIdentifier: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function warnInvalidContextAccess() {
            error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
          };

          var warnInvalidHookAccess = function warnInvalidHookAccess() {
            error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
          };

          HooksDispatcherOnMountInDEV = {
            readContext: function readContext(context, observedBits) {
              return _readContext(context, observedBits);
            },
            useCallback: function useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              mountHookTypesDev();
              return _readContext(context, observedBits);
            },
            useEffect: function useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function useState(initialState) {
              currentHookNameInDev = 'useState';
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function useTransition() {
              currentHookNameInDev = 'useTransition';
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function readContext(context, observedBits) {
              return _readContext(context, observedBits);
            },
            useCallback: function useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              updateHookTypesDev();
              return _readContext(context, observedBits);
            },
            useEffect: function useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function useState(initialState) {
              currentHookNameInDev = 'useState';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function useTransition() {
              currentHookNameInDev = 'useTransition';
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              updateHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              updateHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function readContext(context, observedBits) {
              return _readContext(context, observedBits);
            },
            useCallback: function useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              updateHookTypesDev();
              return _readContext(context, observedBits);
            },
            useEffect: function useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              updateHookTypesDev();
              return updateRef();
            },
            useState: function useState(initialState) {
              currentHookNameInDev = 'useState';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function useTransition() {
              currentHookNameInDev = 'useTransition';
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function readContext(context, observedBits) {
              return _readContext(context, observedBits);
            },
            useCallback: function useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              updateHookTypesDev();
              return _readContext(context, observedBits);
            },
            useEffect: function useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              updateHookTypesDev();
              return updateRef();
            },
            useState: function useState(initialState) {
              currentHookNameInDev = 'useState';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function useTransition() {
              currentHookNameInDev = 'useTransition';
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function readContext(context, observedBits) {
              warnInvalidContextAccess();
              return _readContext(context, observedBits);
            },
            useCallback: function useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return _readContext(context, observedBits);
            },
            useEffect: function useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function useState(initialState) {
              currentHookNameInDev = 'useState';
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function useTransition() {
              currentHookNameInDev = 'useTransition';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function readContext(context, observedBits) {
              warnInvalidContextAccess();
              return _readContext(context, observedBits);
            },
            useCallback: function useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return _readContext(context, observedBits);
            },
            useEffect: function useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function useState(initialState) {
              currentHookNameInDev = 'useState';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function useTransition() {
              currentHookNameInDev = 'useTransition';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function readContext(context, observedBits) {
              warnInvalidContextAccess();
              return _readContext(context, observedBits);
            },
            useCallback: function useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return _readContext(context, observedBits);
            },
            useEffect: function useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function useState(initialState) {
              currentHookNameInDev = 'useState';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function useTransition() {
              currentHookNameInDev = 'useTransition';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;

        function getCommitTime() {
          return commitTime;
        }

        function recordCommitTime() {
          commitTime = now$1();
        }

        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();

          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }

        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }

        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;

            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }

            profilerStartTime = -1;
          }
        }

        function transferActualDuration(fiber) {
          // Transfer time spent rendering these children so we don't lose it
          // after we rerender. This is used as a helper in special cases
          // where we should count the work of multiple passes.
          var child = fiber.child;

          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }

        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }

        function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
          if (current === null) {
            // If this is a fresh new component that hasn't been rendered yet, we
            // won't update its child set by applying minimal side-effects. Instead,
            // we will add them all to the child before it gets rendered. That means
            // we can optimize this reconciliation pass by not tracking side-effects.
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
          } else {
            // If the current child is the same as the work in progress, it means that
            // we haven't yet started any work on these children. Therefore, we use
            // the clone algorithm to create a copy of all the current children.
            // If we had any progressed work already, that is invalid at this point so
            // let's throw it out.
            workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
          }
        }

        function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
          // This function is fork of reconcileChildren. It's used in cases where we
          // want to reconcile without matching against the existing set. This has the
          // effect of all current children being unmounted; even if the type and key
          // are the same, the old child is unmounted and a new child is created.
          //
          // To do this, we're going to go through the reconcile algorithm twice. In
          // the first pass, we schedule a deletion for all the current children by
          // passing null.
          workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
          // pass null in place of where we usually pass the current child set. This has
          // the effect of remounting all children regardless of whether their
          // identities match.

          workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
        }

        function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
          // TODO: current can be non-null here even if the component
          // hasn't yet mounted. This happens after the first render suspends.
          // We'll need to figure out if this is fine or can cause issues.
          {
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              var innerPropTypes = Component.propTypes;

              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                'prop', getComponentName(Component));
              }
            }
          }
          var render = Component.render;
          var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

          var nextChildren;
          prepareToReadContext(workInProgress, renderLanes);
          {
            ReactCurrentOwner$1.current = workInProgress;
            setIsRendering(true);
            nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);

            if (workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
              } finally {
                reenableLogs();
              }
            }

            setIsRendering(false);
          }

          if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          } // React DevTools reads this flag.


          workInProgress.flags |= PerformedWork;
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
          if (current === null) {
            var type = Component.type;

            if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component.defaultProps === undefined) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              } // If this is a plain function component without default props,
              // and with only the default shallow comparison, we upgrade it
              // to a SimpleMemoComponent to allow fast path updates.

              workInProgress.tag = SimpleMemoComponent;
              workInProgress.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress, type);
              }
              return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
            }

            {
              var innerPropTypes = type.propTypes;

              if (innerPropTypes) {
                // Inner memo component props aren't currently validated in createElement.
                // We could move it there, but we'd still need this for lazy code path.
                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                'prop', getComponentName(type));
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
          }

          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;

            if (_innerPropTypes) {
              // Inner memo component props aren't currently validated in createElement.
              // We could move it there, but we'd still need this for lazy code path.
              checkPropTypes(_innerPropTypes, nextProps, // Resolved props
              'prop', getComponentName(_type));
            }
          }
          var currentChild = current.child; // This is always exactly one child

          if (!includesSomeLane(updateLanes, renderLanes)) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison

            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;

            if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
          } // React DevTools reads this flag.


          workInProgress.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress.ref;
          newChild.return = workInProgress;
          workInProgress.child = newChild;
          return newChild;
        }

        function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
          // TODO: current can be non-null here even if the component
          // hasn't yet mounted. This happens when the inner render suspends.
          // We'll need to figure out if this is fine or can cause issues.
          {
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              var outerMemoType = workInProgress.elementType;

              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;

                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.


                var outerPropTypes = outerMemoType && outerMemoType.propTypes;

                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
                  'prop', getComponentName(outerMemoType));
                }
              }
            }
          }

          if (current !== null) {
            var prevProps = current.memoizedProps;

            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && // Prevent bailout if the implementation changed due to hot reload.
            workInProgress.type === current.type) {
              didReceiveUpdate = false;

              if (!includesSomeLane(renderLanes, updateLanes)) {
                // The pending lanes were cleared at the beginning of beginWork. We're
                // about to bail out, but there might be other lanes that weren't
                // included in the current render. Usually, the priority level of the
                // remaining updates is accumlated during the evaluation of the
                // component (i.e. when processing the update queue). But since since
                // we're bailing out early *without* evaluating the component, we need
                // to account for it here, too. Reset to the value of the current fiber.
                // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                // because a MemoComponent fiber does not have hooks or an update queue;
                // rather, it wraps around an inner component, which may or may not
                // contains hooks.
                // TODO: Move the reset at in beginWork out of the common path so that
                // this is no longer necessary.
                workInProgress.lanes = current.lanes;
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
              }
            }
          }

          return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
        }

        function updateOffscreenComponent(current, workInProgress, renderLanes) {
          var nextProps = workInProgress.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current !== null ? current.memoizedState : null;

          if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
              // In legacy sync mode, don't defer the subtree. Render it now.
              // TODO: Figure out what we should do in Blocking mode.
              var nextState = {
                baseLanes: NoLanes
              };
              workInProgress.memoizedState = nextState;
              pushRenderLanes(workInProgress, renderLanes);
            } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
              var nextBaseLanes;

              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
              } else {
                nextBaseLanes = renderLanes;
              } // Schedule this fiber to re-render at offscreen priority. Then bailout.


              {
                markSpawnedWork(OffscreenLane);
              }
              workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes
              };
              workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
              // to avoid a push/pop misalignment.

              pushRenderLanes(workInProgress, nextBaseLanes);
              return null;
            } else {
              // Rendering at offscreen, so we can clear the base lanes.
              var _nextState2 = {
                baseLanes: NoLanes
              };
              workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

              var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
              pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
          } else {
            var _subtreeRenderLanes;

            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state

              workInProgress.memoizedState = null;
            } else {
              // We weren't previously hidden, and we still aren't, so there's nothing
              // special to do. Need to push to the stack regardless, though, to avoid
              // a push/pop misalignment.
              _subtreeRenderLanes = renderLanes;
            }

            pushRenderLanes(workInProgress, _subtreeRenderLanes);
          }

          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        } // Note: These happen to have identical begin phases, for now. We shouldn't hold
        // ourselves to this constraint, though. If the behavior diverges, we should
        // fork the function.


        var updateLegacyHiddenComponent = updateOffscreenComponent;

        function updateFragment(current, workInProgress, renderLanes) {
          var nextChildren = workInProgress.pendingProps;
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function updateMode(current, workInProgress, renderLanes) {
          var nextChildren = workInProgress.pendingProps.children;
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function updateProfiler(current, workInProgress, renderLanes) {
          {
            workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
            // These are reset during render to allow the DevTools commit hook a chance to read them,

            var stateNode = workInProgress.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          var nextProps = workInProgress.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function markRef(current, workInProgress) {
          var ref = workInProgress.ref;

          if (current === null && ref !== null || current !== null && current.ref !== ref) {
            // Schedule a Ref effect
            workInProgress.flags |= Ref;
          }
        }

        function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
          {
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              var innerPropTypes = Component.propTypes;

              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                'prop', getComponentName(Component));
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
            context = getMaskedContext(workInProgress, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress, renderLanes);
          {
            ReactCurrentOwner$1.current = workInProgress;
            setIsRendering(true);
            nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);

            if (workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
              } finally {
                reenableLogs();
              }
            }

            setIsRendering(false);
          }

          if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          } // React DevTools reads this flag.


          workInProgress.flags |= PerformedWork;
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
          {
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              var innerPropTypes = Component.propTypes;

              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                'prop', getComponentName(Component));
              }
            }
          } // Push context providers early to prevent context stack mismatches.
          // During mounting we don't know the child context yet as the instance doesn't exist.
          // We will invalidate the child context in finishClassComponent() right after rendering.

          var hasContext;

          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
          } else {
            hasContext = false;
          }

          prepareToReadContext(workInProgress, renderLanes);
          var instance = workInProgress.stateNode;
          var shouldUpdate;

          if (instance === null) {
            if (current !== null) {
              // A class component without an instance only mounts if it suspended
              // inside a non-concurrent tree, in an inconsistent state. We want to
              // treat it like a new mount, even though an empty version of it already
              // committed. Disconnect the alternate pointers.
              current.alternate = null;
              workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

              workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.


            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            shouldUpdate = true;
          } else if (current === null) {
            // In a resume, we'll already have an instance we can reuse.
            shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
          } else {
            shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
          }

          var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
          {
            var inst = workInProgress.stateNode;

            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
              }

              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }

        function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
          // Refs should update even if shouldComponentUpdate returns false
          markRef(current, workInProgress);
          var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

          if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) {
              invalidateContextProvider(workInProgress, Component, false);
            }

            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          }

          var instance = workInProgress.stateNode; // Rerender

          ReactCurrentOwner$1.current = workInProgress;
          var nextChildren;

          if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();

              if (workInProgress.mode & StrictMode) {
                disableLogs();

                try {
                  instance.render();
                } finally {
                  reenableLogs();
                }
              }

              setIsRendering(false);
            }
          } // React DevTools reads this flag.


          workInProgress.flags |= PerformedWork;

          if (current !== null && didCaptureError) {
            // If we're recovering from an error, reconcile without reusing any of
            // the existing children. Conceptually, the normal children and the children
            // that are shown on error are two different sets, so we shouldn't reuse
            // normal children even if their identities match.
            forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
          } else {
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          } // Memoize state using the values we just used to render.
          // TODO: Restructure so we never read values from the instance.


          workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

          if (hasContext) {
            invalidateContextProvider(workInProgress, Component, true);
          }

          return workInProgress.child;
        }

        function pushHostRootContext(workInProgress) {
          var root = workInProgress.stateNode;

          if (root.pendingContext) {
            pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
          } else if (root.context) {
            // Should always be set
            pushTopLevelContextObject(workInProgress, root.context, false);
          }

          pushHostContainer(workInProgress, root.containerInfo);
        }

        function updateHostRoot(current, workInProgress, renderLanes) {
          pushHostRootContext(workInProgress);
          var updateQueue = workInProgress.updateQueue;

          if (!(current !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }

          var nextProps = workInProgress.pendingProps;
          var prevState = workInProgress.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current, workInProgress);
          processUpdateQueue(workInProgress, nextProps, null, renderLanes);
          var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
          // being called "element".

          var nextChildren = nextState.element;

          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          }

          var root = workInProgress.stateNode;

          if (root.hydrate && enterHydrationState(workInProgress)) {
            // If we don't have any current children this might be the first pass.
            // We always try to hydrate. If this isn't a hydration pass there won't
            // be any children to hydrate which is effectively the same thing as
            // not hydrating.
            {
              var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;

              if (mutableSourceEagerHydrationData != null) {
                for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                  var mutableSource = mutableSourceEagerHydrationData[i];
                  var version = mutableSourceEagerHydrationData[i + 1];
                  setWorkInProgressVersion(mutableSource, version);
                }
              }
            }
            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
            workInProgress.child = child;
            var node = child;

            while (node) {
              // Mark each child as hydrating. This is a fast path to know whether this
              // tree is part of a hydrating tree. This is used to determine if a child
              // node has fully mounted yet, and for scheduling event replaying.
              // Conceptually this is similar to Placement in that a new subtree is
              // inserted into the React tree here. It just happens to not need DOM
              // mutations because it already exists.
              node.flags = node.flags & ~Placement | Hydrating;
              node = node.sibling;
            }
          } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            resetHydrationState();
          }

          return workInProgress.child;
        }

        function updateHostComponent(current, workInProgress, renderLanes) {
          pushHostContext(workInProgress);

          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          var type = workInProgress.type;
          var nextProps = workInProgress.pendingProps;
          var prevProps = current !== null ? current.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);

          if (isDirectTextChild) {
            // We special case a direct text child of a host node. This is a common
            // case. We won't handle it as a reified child. We will instead handle
            // this in the host environment that also has access to this prop. That
            // avoids allocating another HostText fiber and traversing it.
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            // If we're switching from a direct text child to a normal child, or to
            // empty, we need to schedule the text content to be reset.
            workInProgress.flags |= ContentReset;
          }

          markRef(current, workInProgress);
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function updateHostText(current, workInProgress) {
          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          } // Nothing to do here. This is terminal. We'll do the completion step
          // immediately after.


          return null;
        }

        function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
          if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

            workInProgress.flags |= Placement;
          }

          var props = workInProgress.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload); // Store the unwrapped component in the type.

          workInProgress.type = Component;
          var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;

          switch (resolvedTag) {
            case FunctionComponent:
              {
                {
                  validateFunctionComponentInDev(workInProgress, Component);
                  workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
              }

            case ClassComponent:
              {
                {
                  workInProgress.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
              }

            case ForwardRef:
              {
                {
                  workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
              }

            case MemoComponent:
              {
                {
                  if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;

                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
                      'prop', getComponentName(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
                updateLanes, renderLanes);
                return child;
              }
          }

          var hint = '';
          {
            if (Component !== null && _typeof3(Component) === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = ' Did you wrap a component in React.lazy() more than once?';
            }
          } // This message intentionally doesn't mention ForwardRef or MemoComponent
          // because the fact that it's a separate type of work is an
          // implementation detail.

          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }

        function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
          if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

            workInProgress.flags |= Placement;
          } // Promote the fiber to a class and try rendering again.


          workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
          // Push context providers early to prevent context stack mismatches.
          // During mounting we don't know the child context yet as the instance doesn't exist.
          // We will invalidate the child context in finishClassComponent() right after rendering.

          var hasContext;

          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
          } else {
            hasContext = false;
          }

          prepareToReadContext(workInProgress, renderLanes);
          constructClassInstance(workInProgress, Component, nextProps);
          mountClassInstance(workInProgress, Component, nextProps, renderLanes);
          return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        }

        function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
          if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

            workInProgress.flags |= Placement;
          }

          var props = workInProgress.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
            context = getMaskedContext(workInProgress, unmaskedContext);
          }
          prepareToReadContext(workInProgress, renderLanes);
          var value;
          {
            if (Component.prototype && typeof Component.prototype.render === 'function') {
              var componentName = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }

            if (workInProgress.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
            }

            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress;
            value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
            setIsRendering(false);
          } // React DevTools reads this flag.

          workInProgress.flags |= PerformedWork;
          {
            // Support for module components is deprecated and is removed behind a flag.
            // Whether or not it would crash later, we want to show a good message in DEV first.
            if (_typeof3(value) === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
              var _componentName = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }

          if ( // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
          _typeof3(value) === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            {
              var _componentName2 = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            } // Proceed under the assumption that this is a class instance

            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.

            var hasContext = false;

            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress);
            } else {
              hasContext = false;
            }

            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;

            if (typeof getDerivedStateFromProps === 'function') {
              applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            }

            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
          } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            {
              if (workInProgress.mode & StrictMode) {
                disableLogs();

                try {
                  value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                } finally {
                  reenableLogs();
                }
              }
            }
            reconcileChildren(null, workInProgress, value, renderLanes);
            {
              validateFunctionComponentInDev(workInProgress, Component);
            }
            return workInProgress.child;
          }
        }

        function validateFunctionComponentInDev(workInProgress, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
              }
            }

            if (workInProgress.ref !== null) {
              var info = '';
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();

              if (ownerName) {
                info += '\n\nCheck the render method of `' + ownerName + '`.';
              }

              var warningKey = ownerName || workInProgress._debugID || '';
              var debugSource = workInProgress._debugSource;

              if (debugSource) {
                warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
              }

              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
              }
            }

            if (typeof Component.getDerivedStateFromProps === 'function') {
              var _componentName3 = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }

            if (_typeof3(Component.contextType) === 'object' && Component.contextType !== null) {
              var _componentName4 = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }

        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryLane: NoLane
        };

        function mountSuspenseOffscreenState(renderLanes) {
          return {
            baseLanes: renderLanes
          };
        }

        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
          };
        } // TODO: Probably should inline this back


        function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
          // If we're already showing a fallback, there are cases where we need to
          // remain on that fallback regardless of whether the content has resolved.
          // For example, SuspenseList coordinates when nested content appears.
          if (current !== null) {
            var suspenseState = current.memoizedState;

            if (suspenseState === null) {
              // Currently showing content. Don't hide it, even if ForceSuspenseFallack
              // is true. More precise name might be "ForceRemainSuspenseFallback".
              // Note: This is a factoring smell. Can't remain on a fallback if there's
              // no fallback to remain on.
              return false;
            }
          } // Not currently showing content. Consult the Suspense context.


          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }

        function getRemainingWorkInPrimaryTree(current, renderLanes) {
          // TODO: Should not remove render lanes that were pinged during this render
          return removeLanes(current.childLanes, renderLanes);
        }

        function updateSuspenseComponent(current, workInProgress, renderLanes) {
          var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

          {
            if (shouldSuspend(workInProgress)) {
              workInProgress.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

          if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
          } else {
            // Attempting the main content
            if (current === null || current.memoizedState !== null) {
              // This is a new mount or this boundary is already showing a fallback state.
              // Mark this subtree context as having at least one invisible parent that could
              // handle the fallback state.
              // Boundaries without fallbacks or should be avoided are not considered since
              // they cannot handle preferred fallback states.
              if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }

          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
          // boundary's children. This involves some custom reconcilation logic. Two
          // main reasons this is so complicated.
          //
          // First, Legacy Mode has different semantics for backwards compatibility. The
          // primary tree will commit in an inconsistent state, so when we do the
          // second pass to render the fallback, we do some exceedingly, uh, clever
          // hacks to make that not totally break. Like transferring effects and
          // deletions from hidden tree. In Concurrent Mode, it's much simpler,
          // because we bailout on the primary tree completely and leave it in its old
          // state, no effects. Same as what we do for Offscreen (except that
          // Offscreen doesn't have the first render pass).
          //
          // Second is hydration. During hydration, the Suspense fiber has a slightly
          // different layout, where the child points to a dehydrated fragment, which
          // contains the DOM rendered by the server.
          //
          // Third, even if you set all that aside, Suspense is like error boundaries in
          // that we first we try to render one tree, and if that fails, we render again
          // and switch to a different tree. Like a try/catch block. So we have to track
          // which branch we're currently rendering. Ideally we would model this using
          // a stack.

          if (current === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) {
              tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            }

            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;

            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
              var primaryChildFragment = workInProgress.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
              workInProgress.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
              // This is a CPU-bound tree. Skip this tree and show a placeholder to
              // unblock the surrounding content. Then immediately retry after the
              // initial commit.
              var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);

              var _primaryChildFragment = workInProgress.child;
              _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
              workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
              // get it started back up to attempt the next item. While in terms of
              // priority this work has the same priority as this current render, it's
              // not part of the same transition once the transition has committed. If
              // it's sync, we still want to yield so that it can be painted.
              // Conceptually, this is really the same as pinging. We can use any
              // RetryLane even if it's the one currently rendering since we're leaving
              // it behind on this node.

              workInProgress.lanes = SomeRetryLane;
              {
                markSpawnedWork(SomeRetryLane);
              }
              return _fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
            }
          } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current.memoizedState;

            if (prevState !== null) {
              if (showFallback) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _nextPrimaryChildren2 = nextProps.children;

                var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);

                var _primaryChildFragment3 = workInProgress.child;
                var prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment;
              } else {
                var _nextPrimaryChildren3 = nextProps.children;

                var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);

                workInProgress.memoizedState = null;
                return _primaryChildFragment4;
              }
            } else {
              // The current tree is not already showing a fallback.
              if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;

                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);

                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
                // fallback children.

                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
              } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;

                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);

                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
              }
            }
          }
        }

        function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
          var mode = workInProgress.mode;
          var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
          };
          var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
          primaryChildFragment.return = workInProgress;
          workInProgress.child = primaryChildFragment;
          return primaryChildFragment;
        }

        function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
          var mode = workInProgress.mode;
          var progressedPrimaryFragment = workInProgress.child;
          var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;

          if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;

            if (workInProgress.mode & ProfileMode) {
              // Reset the durations from the first pass so they aren't included in the
              // final amounts. This seems counterintuitive, since we're intentionally
              // not measuring part of the render phase, but this makes it match what we
              // do in Concurrent Mode.
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }

            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
          } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
          }

          primaryChildFragment.return = workInProgress;
          fallbackChildFragment.return = workInProgress;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress.child = primaryChildFragment;
          return fallbackChildFragment;
        }

        function createWorkInProgressOffscreenFiber(current, offscreenProps) {
          // The props argument to `createWorkInProgress` is `any` typed, so we use this
          // wrapper function to constrain it.
          return createWorkInProgress(current, offscreenProps);
        }

        function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
          var currentPrimaryChildFragment = current.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
          });

          if ((workInProgress.mode & BlockingMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes;
          }

          primaryChildFragment.return = workInProgress;
          primaryChildFragment.sibling = null;

          if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
          }

          workInProgress.child = primaryChildFragment;
          return primaryChildFragment;
        }

        function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
          var mode = workInProgress.mode;
          var currentPrimaryChildFragment = current.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
          };
          var primaryChildFragment;

          if ( // In legacy mode, we commit the primary tree as if it successfully
          // completed, even though it's in an inconsistent state.
          (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
          // already cloned. In legacy mode, the only case where this isn't true is
          // when DevTools forces us to display a fallback; we skip the first render
          // pass entirely and go straight to rendering the fallback. (In Concurrent
          // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
          // only codepath.)
          workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;

            if (workInProgress.mode & ProfileMode) {
              // Reset the durations from the first pass so they aren't included in the
              // final amounts. This seems counterintuitive, since we're intentionally
              // not measuring part of the render phase, but this makes it match what we
              // do in Concurrent Mode.
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion effect during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it. So we need to remove it from the list. Deletions are stored
            // on the same list as effects. We want to keep the effects from the primary
            // tree. So we copy the primary child fragment's effect list, which does not
            // include the fallback deletion effect.


            var progressedLastEffect = primaryChildFragment.lastEffect;

            if (progressedLastEffect !== null) {
              workInProgress.firstEffect = primaryChildFragment.firstEffect;
              workInProgress.lastEffect = progressedLastEffect;
              progressedLastEffect.nextEffect = null;
            } else {
              // TODO: Reset this somewhere else? Lol legacy mode is so weird.
              workInProgress.firstEffect = workInProgress.lastEffect = null;
            }
          } else {
            primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          }

          var fallbackChildFragment;

          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.

            fallbackChildFragment.flags |= Placement;
          }

          fallbackChildFragment.return = workInProgress;
          primaryChildFragment.return = workInProgress;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress.child = primaryChildFragment;
          return fallbackChildFragment;
        }

        function scheduleWorkOnFiber(fiber, renderLanes) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
          var alternate = fiber.alternate;

          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
          }

          scheduleWorkOnParentPath(fiber.return, renderLanes);
        }

        function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
          // Mark any Suspense boundaries with fallbacks as having work to do.
          // If they were previously forced into fallbacks, they may now be able
          // to unblock.
          var node = firstChild;

          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;

              if (state !== null) {
                scheduleWorkOnFiber(node, renderLanes);
              }
            } else if (node.tag === SuspenseListComponent) {
              // If the tail is hidden there might not be an Suspense boundaries
              // to schedule work on. In this case we have to schedule it on the
              // list itself.
              // We don't have to traverse to the children of the list since
              // the list will propagate the change when it rerenders.
              scheduleWorkOnFiber(node, renderLanes);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }

        function findLastContentRow(firstChild) {
          // This is going to find the last row among these children that is already
          // showing content on the screen, as opposed to being in fallback state or
          // new. If a row has multiple Suspense boundaries, any of them being in the
          // fallback state, counts as the whole row being in a fallback state.
          // Note that the "rows" will be workInProgress, but any nested children
          // will still be current since we haven't rendered them yet. The mounted
          // order may not be the same as the new order. We use the new order.
          var row = firstChild;
          var lastContentRow = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }

            row = row.sibling;
          }

          return lastContentRow;
        }

        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;

              if (typeof revealOrder === 'string') {
                switch (revealOrder.toLowerCase()) {
                  case 'together':
                  case 'forwards':
                  case 'backwards':
                    {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }

                  case 'forward':
                  case 'backward':
                    {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }

                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }

        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }

        function validateSuspenseListNestedChild(childSlot, index) {
          {
            var isArray = Array.isArray(childSlot);
            var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

            if (isArray || isIterable) {
              var type = isArray ? 'array' : 'iterable';
              error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);
              return false;
            }
          }
          return true;
        }

        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);

                if (typeof iteratorFn === 'function') {
                  var childrenIterator = iteratorFn.call(children);

                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;

                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }

                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }

        function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress.memoizedState;

          if (renderState === null) {
            workInProgress.memoizedState = {
              isBackwards: isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail: tail,
              tailMode: tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        } // This can end up rendering this component multiple passes.
        // The first pass splits the children fibers into two sets. A head and tail.
        // We first render the head. If anything is in fallback state, we do another
        // pass through beginWork to rerender all children (including the tail) with
        // the force suspend context. If the first render didn't have anything in
        // in fallback state. Then we render each row in the tail one-by-one.
        // That happens in the completeWork phase without going back to beginWork.


        function updateSuspenseListComponent(current, workInProgress, renderLanes) {
          var nextProps = workInProgress.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current, workInProgress, newChildren, renderLanes);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
          } else {
            var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

            if (didSuspendBefore) {
              // If we previously forced a fallback, we need to schedule work
              // on any nested boundaries to let them know to try to render
              // again. This is the same as context updating.
              propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
            }

            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext);

          if ((workInProgress.mode & BlockingMode) === NoMode) {
            // In legacy mode, SuspenseList doesn't work so we just
            // use make it a noop by treating it as the default revealOrder.
            workInProgress.memoizedState = null;
          } else {
            switch (revealOrder) {
              case 'forwards':
                {
                  var lastContentRow = findLastContentRow(workInProgress.child);
                  var tail;

                  if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                  } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }

                  initSuspenseListRenderState(workInProgress, false, // isBackwards
                  tail, lastContentRow, tailMode, workInProgress.lastEffect);
                  break;
                }

              case 'backwards':
                {
                  // We're going to find the first row that has existing content.
                  // At the same time we're going to reverse the list of everything
                  // we pass in the meantime. That's going to be our tail in reverse
                  // order.
                  var _tail = null;
                  var row = workInProgress.child;
                  workInProgress.child = null;

                  while (row !== null) {
                    var currentRow = row.alternate; // New rows can't be content rows.

                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      // This is the beginning of the main content.
                      workInProgress.child = row;
                      break;
                    }

                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


                  initSuspenseListRenderState(workInProgress, true, // isBackwards
                  _tail, null, // last
                  tailMode, workInProgress.lastEffect);
                  break;
                }

              case 'together':
                {
                  initSuspenseListRenderState(workInProgress, false, // isBackwards
                  null, // tail
                  null, // last
                  undefined, workInProgress.lastEffect);
                  break;
                }

              default:
                {
                  // The default reveal order is the same as not having
                  // a boundary.
                  workInProgress.memoizedState = null;
                }
            }
          }

          return workInProgress.child;
        }

        function updatePortalComponent(current, workInProgress, renderLanes) {
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          var nextChildren = workInProgress.pendingProps;

          if (current === null) {
            // Portals are special because we don't append the children during mount
            // but at commit. Therefore we need to track insertions which the normal
            // flow doesn't do during mount. This doesn't happen at the root because
            // the root always starts with a "current" with a null child.
            // TODO: Consider unifying this with how the root works.
            workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
          } else {
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          }

          return workInProgress.child;
        }

        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

        function updateContextProvider(current, workInProgress, renderLanes) {
          var providerType = workInProgress.type;
          var context = providerType._context;
          var newProps = workInProgress.pendingProps;
          var oldProps = workInProgress.memoizedProps;
          var newValue = newProps.value;
          {
            if (!('value' in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
              }
            }

            var providerPropTypes = workInProgress.type.propTypes;

            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
            }
          }
          pushProvider(workInProgress, newValue);

          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);

            if (changedBits === 0) {
              // No change. Bailout early if children are the same.
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              }
            } else {
              // The context value changed. Search for matching consumers and schedule
              // them to update.
              propagateContextChange(workInProgress, context, changedBits, renderLanes);
            }
          }

          var newChildren = newProps.children;
          reconcileChildren(current, workInProgress, newChildren, renderLanes);
          return workInProgress.child;
        }

        var hasWarnedAboutUsingContextAsConsumer = false;

        function updateContextConsumer(current, workInProgress, renderLanes) {
          var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
          // DEV mode, we create a separate object for Context.Consumer that acts
          // like a proxy to Context. This proxy object adds unnecessary code in PROD
          // so we use the old behaviour (Context.Consumer references Context) to
          // reduce size and overhead. The separate object references context via
          // a property called "_context", which also gives us the ability to check
          // in DEV mode if this property exists or not and warn if it does not.

          {
            if (context._context === undefined) {
              // This may be because it's a Context (rather than a Consumer).
              // Or it may be because it's older React where they're the same thing.
              // We only want to warn if we're sure it's a new React.
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress.pendingProps;
          var render = newProps.children;
          {
            if (typeof render !== 'function') {
              error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
            }
          }
          prepareToReadContext(workInProgress, renderLanes);

          var newValue = _readContext(context, newProps.unstable_observedBits);

          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress;
            setIsRendering(true);
            newChildren = render(newValue);
            setIsRendering(false);
          } // React DevTools reads this flag.

          workInProgress.flags |= PerformedWork;
          reconcileChildren(current, workInProgress, newChildren, renderLanes);
          return workInProgress.child;
        }

        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }

        function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
          if (current !== null) {
            // Reuse previous dependencies
            workInProgress.dependencies = current.dependencies;
          }

          {
            // Don't update "base" render times for bailouts.
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

          if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
            // The children don't have any work either. We can skip them.
            // TODO: Once we add back resuming, we should check if the children are
            // a work-in-progress set. If so, we need to transfer their effects.
            return null;
          } else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current, workInProgress);
            return workInProgress.child;
          }
        }

        function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;

            if (returnFiber === null) {
              throw new Error('Cannot swap the root fiber.');
            } // Disconnect from the old current.
            // It will get deleted.


            current.alternate = null;
            oldWorkInProgress.alternate = null; // Connect to the new tree.

            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;

              if (prevSibling === null) {
                throw new Error('Expected parent to have a child.');
              }

              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;

                if (prevSibling === null) {
                  throw new Error('Expected to find the previous sibling.');
                }
              }

              prevSibling.sibling = newWorkInProgress;
            } // Delete the old fiber and place the new one.
            // Since the old fiber is disconnected, we have to schedule it manually.


            var last = returnFiber.lastEffect;

            if (last !== null) {
              last.nextEffect = current;
              returnFiber.lastEffect = current;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current;
            }

            current.nextEffect = null;
            current.flags = Deletion;
            newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

            return newWorkInProgress;
          }
        }

        function beginWork(current, workInProgress, renderLanes) {
          var updateLanes = workInProgress.lanes;
          {
            if (workInProgress._debugNeedsRemount && current !== null) {
              // This will restart the begin phase with a new fiber.
              return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
            }
          }

          if (current !== null) {
            var oldProps = current.memoizedProps;
            var newProps = workInProgress.pendingProps;

            if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
            workInProgress.type !== current.type) {
              // If props or context changed, mark the fiber as having performed work.
              // This may be unset if the props are determined to be equal later (memo).
              didReceiveUpdate = true;
            } else if (!includesSomeLane(renderLanes, updateLanes)) {
              didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
              // the begin phase. There's still some bookkeeping we that needs to be done
              // in this optimized path, mostly pushing stuff onto the stack.

              switch (workInProgress.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress);
                  resetHydrationState();
                  break;

                case HostComponent:
                  pushHostContext(workInProgress);
                  break;

                case ClassComponent:
                  {
                    var Component = workInProgress.type;

                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress);
                    }

                    break;
                  }

                case HostPortal:
                  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                  break;

                case ContextProvider:
                  {
                    var newValue = workInProgress.memoizedProps.value;
                    pushProvider(workInProgress, newValue);
                    break;
                  }

                case Profiler:
                  {
                    // Profiler should only call onRender when one of its descendants actually rendered.
                    var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                    if (hasChildWork) {
                      workInProgress.flags |= Update;
                    } // Reset effect durations for the next eventual effect phase.
                    // These are reset during render to allow the DevTools commit hook a chance to read them,


                    var stateNode = workInProgress.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                  break;

                case SuspenseComponent:
                  {
                    var state = workInProgress.memoizedState;

                    if (state !== null) {
                      // whether to retry the primary children, or to skip over it and
                      // go straight to the fallback. Check the priority of the primary
                      // child fragment.
                      var primaryChildFragment = workInProgress.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;

                      if (includesSomeLane(renderLanes, primaryChildLanes)) {
                        // The primary children have pending work. Use the normal path
                        // to attempt to render the primary children again.
                        return updateSuspenseComponent(current, workInProgress, renderLanes);
                      } else {
                        // The primary child fragment does not have pending work marked
                        // on it
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                        // priority. Bailout.

                        var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

                        if (child !== null) {
                          // The fallback children have pending work. Skip over the
                          // primary children and work on the fallback.
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }

                    break;
                  }

                case SuspenseListComponent:
                  {
                    var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

                    var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        // If something was in fallback state last time, and we have all the
                        // same children then we're still in progressive loading state.
                        // Something might get unblocked by state updates or retries in the
                        // tree which will affect the tail. So we need to use the normal
                        // path to compute the correct tail.
                        return updateSuspenseListComponent(current, workInProgress, renderLanes);
                      } // If none of the children had any work, that means that none of
                      // them got retried so they'll still be blocked in the same way
                      // as before. We can fast bail out.


                      workInProgress.flags |= DidCapture;
                    } // If nothing suspended before and we're rendering the same children,
                    // then the tail doesn't matter. Anything new that suspends will work
                    // in the "together" mode, so we can continue from the state we had.


                    var renderState = workInProgress.memoizedState;

                    if (renderState !== null) {
                      // Reset to the "together" mode in case we've started a different
                      // update in the past but didn't complete it.
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }

                    pushSuspenseContext(workInProgress, suspenseStackCursor.current);

                    if (_hasChildWork) {
                      break;
                    } else {
                      // If none of the children had any work, that means that none of
                      // them got retried so they'll still be blocked in the same way
                      // as before. We can fast bail out.
                      return null;
                    }
                  }

                case OffscreenComponent:
                case LegacyHiddenComponent:
                  {
                    // Need to check if the tree still needs to be deferred. This is
                    // almost identical to the logic used in the normal update path,
                    // so we'll just enter that. The only difference is we'll bail out
                    // at the next level instead of this one, because the child props
                    // have not changed. Which is fine.
                    // TODO: Probably should refactor `beginWork` to split the bailout
                    // path from the normal path. I'm tempted to do a labeled break here
                    // but I won't :)
                    workInProgress.lanes = NoLanes;
                    return updateOffscreenComponent(current, workInProgress, renderLanes);
                  }
              }

              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else {
              if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
              } else {
                // An update was scheduled on this fiber, but there are no new props
                // nor legacy context. Set this to false. If an update queue or context
                // consumer produces a changed value, it will set this to true. Otherwise,
                // the component will assume the children have not changed and bail out.
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
          } // Before entering the begin phase, clear pending update priority.
          // TODO: This assumes that we're about to evaluate the component and process
          // the update queue. However, there's an exception: SimpleMemoComponent
          // sometimes bails out later in the begin phase. This indicates that we should
          // move this assignment out of the common path and into each branch.


          workInProgress.lanes = NoLanes;

          switch (workInProgress.tag) {
            case IndeterminateComponent:
              {
                return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
              }

            case LazyComponent:
              {
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
              }

            case FunctionComponent:
              {
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
              }

            case ClassComponent:
              {
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;

                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

                return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
              }

            case HostRoot:
              return updateHostRoot(current, workInProgress, renderLanes);

            case HostComponent:
              return updateHostComponent(current, workInProgress, renderLanes);

            case HostText:
              return updateHostText(current, workInProgress);

            case SuspenseComponent:
              return updateSuspenseComponent(current, workInProgress, renderLanes);

            case HostPortal:
              return updatePortalComponent(current, workInProgress, renderLanes);

            case ForwardRef:
              {
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;

                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

                return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
              }

            case Fragment:
              return updateFragment(current, workInProgress, renderLanes);

            case Mode:
              return updateMode(current, workInProgress, renderLanes);

            case Profiler:
              return updateProfiler(current, workInProgress, renderLanes);

            case ContextProvider:
              return updateContextProvider(current, workInProgress, renderLanes);

            case ContextConsumer:
              return updateContextConsumer(current, workInProgress, renderLanes);

            case MemoComponent:
              {
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

                {
                  if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;

                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
                      'prop', getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
              }

            case SimpleMemoComponent:
              {
                return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
              }

            case IncompleteClassComponent:
              {
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;

                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

                return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
              }

            case SuspenseListComponent:
              {
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
              }

            case FundamentalComponent:
              {
                break;
              }

            case ScopeComponent:
              {
                break;
              }

            case Block:
              {
                break;
              }

            case OffscreenComponent:
              {
                return updateOffscreenComponent(current, workInProgress, renderLanes);
              }

            case LegacyHiddenComponent:
              {
                return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
              }
          }

          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }

        function markUpdate(workInProgress) {
          // Tag the fiber with an update effect. This turns a Placement into
          // a PlacementAndUpdate.
          workInProgress.flags |= Update;
        }

        function markRef$1(workInProgress) {
          workInProgress.flags |= Ref;
        }

        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          // Mutation mode
          appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
            // We only have the top Fiber that was created but we need recurse down its
            // children to find all the terminal nodes.
            var node = workInProgress.child;

            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal) ;else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }

              if (node === workInProgress) {
                return;
              }

              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress) {
                  return;
                }

                node = node.return;
              }

              node.sibling.return = node.return;
              node = node.sibling;
            }
          };

          updateHostContainer = function updateHostContainer(workInProgress) {// Noop
          };

          updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance) {
            // If we have an alternate, that means this is an update and we need to
            // schedule a side-effect to do the updates.
            var oldProps = current.memoizedProps;

            if (oldProps === newProps) {
              // In mutation mode, this is sufficient for a bailout because
              // we won't touch this node even if children changed.
              return;
            } // If we get updated because one of our children updated, we don't
            // have newProps so we'll have to reuse them.
            // TODO: Split the update API as separate for the props vs. children.
            // Even better would be if children weren't special cased at all tho.


            var instance = workInProgress.stateNode;
            var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
            // component is hitting the resume path. Figure out why. Possibly
            // related to `hidden`.

            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

            workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
            // is a new ref we mark this as an update. All the work is done in commitWork.

            if (updatePayload) {
              markUpdate(workInProgress);
            }
          };

          updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
            // If the text differs, mark it as an update. All the work in done in commitWork.
            if (oldText !== newText) {
              markUpdate(workInProgress);
            }
          };
        }

        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            // If we're hydrating, we should consume as many items as we can
            // so we don't leave any behind.
            return;
          }

          switch (renderState.tailMode) {
            case 'hidden':
              {
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;

                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }

                  tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.


                if (lastTailNode === null) {
                  // All remaining items in the tail are insertions.
                  renderState.tail = null;
                } else {
                  // Detach the insertion after the last node that was already
                  // inserted.
                  lastTailNode.sibling = null;
                }

                break;
              }

            case 'collapsed':
              {
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;

                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }

                  _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.


                if (_lastTailNode === null) {
                  // All remaining items in the tail are insertions.
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  // Detach the insertion after the last node that was already
                  // inserted.
                  _lastTailNode.sibling = null;
                }

                break;
              }
          }
        }

        function completeWork(current, workInProgress, renderLanes) {
          var newProps = workInProgress.pendingProps;

          switch (workInProgress.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;

            case ClassComponent:
              {
                var Component = workInProgress.type;

                if (isContextProvider(Component)) {
                  popContext(workInProgress);
                }

                return null;
              }

            case HostRoot:
              {
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress.stateNode;

                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }

                if (current === null || current.child === null) {
                  // If we hydrated, pop so that we can delete any remaining children
                  // that weren't hydrated.
                  var wasHydrated = popHydrationState(workInProgress);

                  if (wasHydrated) {
                    // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                  } else if (!fiberRoot.hydrate) {
                    // Schedule an effect to clear this container at the start of the next commit.
                    // This handles the case of React rendering into a container with previous children.
                    // It's also safe to do for updates too, because current.child would only be null
                    // if the previous render was null (so the the container would already be empty).
                    workInProgress.flags |= Snapshot;
                  }
                }

                updateHostContainer(workInProgress);
                return null;
              }

            case HostComponent:
              {
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;

                if (current !== null && workInProgress.stateNode != null) {
                  updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

                  if (current.ref !== workInProgress.ref) {
                    markRef$1(workInProgress);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    } // This can happen when we abort work.


                    return null;
                  }

                  var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                  // "stack" as the parent. Then append children as we go in beginWork
                  // or completeWork depending on whether we want to add them top->down or
                  // bottom->up. Top->down is faster in IE11.

                  var _wasHydrated = popHydrationState(workInProgress);

                  if (_wasHydrated) {
                    // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                      // If changes to the hydrated node need to be applied at the
                      // commit-phase we mark this as such.
                      markUpdate(workInProgress);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                    appendAllChildren(instance, workInProgress, false, false);
                    workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                    // (eg DOM renderer supports auto-focus for certain elements).
                    // Make sure such renderers get scheduled for later work.

                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress);
                    }
                  }

                  if (workInProgress.ref !== null) {
                    // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                  }
                }

                return null;
              }

            case HostText:
              {
                var newText = newProps;

                if (current && workInProgress.stateNode != null) {
                  var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                  // to schedule a side-effect to do the updates.

                  updateHostText$1(current, workInProgress, oldText, newText);
                } else {
                  if (typeof newText !== 'string') {
                    if (!(workInProgress.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    } // This can happen when we abort work.

                  }

                  var _rootContainerInstance = getRootHostContainer();

                  var _currentHostContext = getHostContext();

                  var _wasHydrated2 = popHydrationState(workInProgress);

                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                  }
                }

                return null;
              }

            case SuspenseComponent:
              {
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;

                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                  // Something suspended. Re-render with the fallback children.
                  workInProgress.lanes = renderLanes; // Do not reset the effect list.

                  if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress);
                  }

                  return workInProgress;
                }

                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;

                if (current === null) {
                  if (workInProgress.memoizedProps.fallback !== undefined) {
                    popHydrationState(workInProgress);
                  }
                } else {
                  var prevState = current.memoizedState;
                  prevDidTimeout = prevState !== null;
                }

                if (nextDidTimeout && !prevDidTimeout) {
                  // If this subtreee is running in blocking mode we can suspend,
                  // otherwise we won't suspend.
                  // TODO: This will still suspend a synchronous tree if anything
                  // in the concurrent tree already suspended during this render.
                  // This is a known bug.
                  if ((workInProgress.mode & BlockingMode) !== NoMode) {
                    // TODO: Move this back to throwException because this is too late
                    // if this is a large tree which is common for initial loads. We
                    // don't know if we should restart a render or not until we get
                    // this marker, and this is too late.
                    // If this render already had a ping or lower pri updates,
                    // and this is the first time we know we're going to suspend we
                    // should be able to immediately restart from within throwException.
                    var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      // If this was in an invisible tree or a new render, then showing
                      // this boundary is ok.
                      renderDidSuspend();
                    } else {
                      // Otherwise, we're going to have to hide content so we should
                      // suspend for longer if possible.
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }

                {
                  // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                  if (nextDidTimeout || prevDidTimeout) {
                    // If this boundary just timed out, schedule an effect to attach a
                    // retry listener to the promise. This flag is also used to hide the
                    // primary children. In mutation mode, we also need the flag to
                    // *unhide* children that were previously hidden, so check if this
                    // is currently timed out, too.
                    workInProgress.flags |= Update;
                  }
                }
                return null;
              }

            case HostPortal:
              popHostContainer(workInProgress);
              updateHostContainer(workInProgress);

              if (current === null) {
                preparePortalMount(workInProgress.stateNode.containerInfo);
              }

              return null;

            case ContextProvider:
              // Pop provider fiber
              popProvider(workInProgress);
              return null;

            case IncompleteClassComponent:
              {
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;

                if (isContextProvider(_Component)) {
                  popContext(workInProgress);
                }

                return null;
              }

            case SuspenseListComponent:
              {
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;

                if (renderState === null) {
                  // We're running in the default, "independent" mode.
                  // We don't do anything in this mode.
                  return null;
                }

                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;

                if (renderedTail === null) {
                  // We just rendered the head.
                  if (!didSuspendAlready) {
                    // This is the first pass. We need to figure out if anything is still
                    // suspended in the rendered set.
                    // If new content unsuspended, but there's still some content that
                    // didn't. Then we need to do a second pass that forces everything
                    // to keep showing their fallbacks.
                    // We might be suspended if something in this render pass suspended, or
                    // something in the previous committed pass suspended. Otherwise,
                    // there's no chance so we can skip the expensive call to
                    // findFirstSuspended.
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

                    if (!cannotBeSuspended) {
                      var row = workInProgress.child;

                      while (row !== null) {
                        var suspended = findFirstSuspended(row);

                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                          // part of the second pass. In that case nothing will subscribe to
                          // its thennables. Instead, we'll transfer its thennables to the
                          // SuspenseList so that it can retry if they resolve.
                          // There might be multiple of these in the list but since we're
                          // going to wait for all of them anyway, it doesn't really matter
                          // which ones gets to ping. In theory we could get clever and keep
                          // track of how many dependencies remain but it gets tricky because
                          // in the meantime, we can add/remove/change items and dependencies.
                          // We might bail out of the loop before finding any but that
                          // doesn't matter since that means that the other boundaries that
                          // we did find already has their listeners attached.

                          var newThennables = suspended.updateQueue;

                          if (newThennables !== null) {
                            workInProgress.updateQueue = newThennables;
                            workInProgress.flags |= Update;
                          } // Rerender the whole list, but this time, we'll force fallbacks
                          // to stay in place.
                          // Reset the effect list before doing the second pass since that's now invalid.


                          if (renderState.lastEffect === null) {
                            workInProgress.firstEffect = null;
                          }

                          workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                          resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                          // rerender the children.

                          pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress.child;
                        }

                        row = row.sibling;
                      }
                    }

                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      // We have already passed our CPU deadline but we still have rows
                      // left in the tail. We'll just give up further attempts to render
                      // the main content and only render fallbacks.
                      workInProgress.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                      // to get it started back up to attempt the next item. While in terms
                      // of priority this work has the same priority as this current render,
                      // it's not part of the same transition once the transition has
                      // committed. If it's sync, we still want to yield so that it can be
                      // painted. Conceptually, this is really the same as pinging.
                      // We can use any RetryLane even if it's the one currently rendering
                      // since we're leaving it behind on this node.

                      workInProgress.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  } // Next we're going to render the tail.

                } else {
                  // Append the rendered row to the child list.
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);

                    if (_suspended !== null) {
                      workInProgress.flags |= DidCapture;
                      didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                      // get lost if this row ends up dropped during a second pass.

                      var _newThennables = _suspended.updateQueue;

                      if (_newThennables !== null) {
                        workInProgress.updateQueue = _newThennables;
                        workInProgress.flags |= Update;
                      }

                      cutOffTailIfNeeded(renderState, true); // This might have been modified.

                      if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                      ) {
                          // We need to delete the row we just rendered.
                          // Reset the effect list to what it was before we rendered this
                          // child. The nested children have already appended themselves.
                          var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                          if (lastEffect !== null) {
                            lastEffect.nextEffect = null;
                          } // We're done.


                          return null;
                        }
                    } else if ( // The time it took to render last row is greater than the remaining
                    // time we have to render. So rendering one more row would likely
                    // exceed it.
                    now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                      // We have now passed our CPU deadline and we'll just give up further
                      // attempts to render the main content and only render fallbacks.
                      // The assumption is that this is usually faster.
                      workInProgress.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                      // to get it started back up to attempt the next item. While in terms
                      // of priority this work has the same priority as this current render,
                      // it's not part of the same transition once the transition has
                      // committed. If it's sync, we still want to yield so that it can be
                      // painted. Conceptually, this is really the same as pinging.
                      // We can use any RetryLane even if it's the one currently rendering
                      // since we're leaving it behind on this node.

                      workInProgress.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }

                  if (renderState.isBackwards) {
                    // The effect list of the backwards tail will have been added
                    // to the end. This breaks the guarantee that life-cycles fire in
                    // sibling order but that isn't a strong guarantee promised by React.
                    // Especially since these might also just pop in during future commits.
                    // Append to the beginning of the list.
                    renderedTail.sibling = workInProgress.child;
                    workInProgress.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;

                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress.child = renderedTail;
                    }

                    renderState.last = renderedTail;
                  }
                }

                if (renderState.tail !== null) {
                  // We still have tail rows to render.
                  // Pop a row.
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress.lastEffect;
                  renderState.renderingStartTime = now();
                  next.sibling = null; // Restore the context.
                  // TODO: We can probably just avoid popping it instead and only
                  // setting it the first time we go from not suspended to suspended.

                  var suspenseContext = suspenseStackCursor.current;

                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }

                  pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

                  return next;
                }

                return null;
              }

            case FundamentalComponent:
              {
                break;
              }

            case ScopeComponent:
              {
                break;
              }

            case Block:
              break;

            case OffscreenComponent:
            case LegacyHiddenComponent:
              {
                popRenderLanes(workInProgress);

                if (current !== null) {
                  var _nextState = workInProgress.memoizedState;
                  var _prevState = current.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;

                  if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
                    workInProgress.flags |= Update;
                  }
                }

                return null;
              }
          }

          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }

        function unwindWork(workInProgress, renderLanes) {
          switch (workInProgress.tag) {
            case ClassComponent:
              {
                var Component = workInProgress.type;

                if (isContextProvider(Component)) {
                  popContext(workInProgress);
                }

                var flags = workInProgress.flags;

                if (flags & ShouldCapture) {
                  workInProgress.flags = flags & ~ShouldCapture | DidCapture;

                  if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress);
                  }

                  return workInProgress;
                }

                return null;
              }

            case HostRoot:
              {
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;

                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }

                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress;
              }

            case HostComponent:
              {
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
              }

            case SuspenseComponent:
              {
                popSuspenseContext(workInProgress);
                var _flags2 = workInProgress.flags;

                if (_flags2 & ShouldCapture) {
                  workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

                  if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress);
                  }

                  return workInProgress;
                }

                return null;
              }

            case SuspenseListComponent:
              {
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.

                return null;
              }

            case HostPortal:
              popHostContainer(workInProgress);
              return null;

            case ContextProvider:
              popProvider(workInProgress);
              return null;

            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress);
              return null;

            default:
              return null;
          }
        }

        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent:
              {
                var childContextTypes = interruptedWork.type.childContextTypes;

                if (childContextTypes !== null && childContextTypes !== undefined) {
                  popContext(interruptedWork);
                }

                break;
              }

            case HostRoot:
              {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }

            case HostComponent:
              {
                popHostContext(interruptedWork);
                break;
              }

            case HostPortal:
              popHostContainer(interruptedWork);
              break;

            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;

            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;

            case ContextProvider:
              popProvider(interruptedWork);
              break;

            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }

        function createCapturedValue(value, source) {
          // If the value is an error, call this function immediately after it is thrown
          // so the stack is accurate.
          return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
          };
        } // This module is forked in different environments.
        // By default, return `true` to log errors to the console.
        // Forks can return `false` if this isn't desirable.


        function showErrorDialog(boundary, errorInfo) {
          return true;
        }

        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.

            if (logError === false) {
              return;
            }

            var error = errorInfo.value;

            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
              // `preventDefault()` in window `error` handler.
              // We record this information as an expando on the error.

              if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  // The error is recoverable and was silenced.
                  // Ignore it and don't print the stack addendum.
                  // This is handy for testing error boundaries without noise.
                  return;
                } // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.


                console['error'](error); // Don't transform to our wrapper
                // For a more detailed description of this block, see:
                // https://github.com/facebook/react/pull/13384
              }

              var componentName = source ? getComponentName(source.type) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
              var errorBoundaryMessage;
              var errorBoundaryName = getComponentName(boundary.type);

              if (errorBoundaryName) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
              }

              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
              // We don't include the original error message and JS stack because the browser
              // has already printed it. Even if the application swallows the error, it is still
              // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

              console['error'](combinedMessage); // Don't transform to our wrapper
            } else {
              // In production, we print the error directly.
              // This will include the message, the JS stack, and anything the browser wants to show.
              // We pass the error object instead of custom message so that the browser displays the error natively.
              console['error'](error); // Don't transform to our wrapper
            }
          } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function () {
              throw e;
            });
          }
        }

        var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

          update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
          // being called "element".

          update.payload = {
            element: null
          };
          var error = errorInfo.value;

          update.callback = function () {
            onUncaughtError(error);
            logCapturedError(fiber, errorInfo);
          };

          return update;
        }

        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

          if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;

            update.payload = function () {
              logCapturedError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }

          var inst = fiber.stateNode;

          if (inst !== null && typeof inst.componentDidCatch === 'function') {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }

              if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

                logCapturedError(fiber, errorInfo);
              }

              var error$1 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
              });
              {
                if (typeof getDerivedStateFromError !== 'function') {
                  // If componentDidCatch is the only error boundary method defined,
                  // then it needs to call setState to recover from errors.
                  // If no state update is scheduled then the boundary will swallow the error.
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
                  }
                }
              }
            };
          } else {
            update.callback = function () {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }

          return update;
        }

        function attachPingListener(root, wakeable, lanes) {
          // Attach a listener to the promise to "ping" the root and retry. But only if
          // one does not already exist for the lanes we're currently rendering (which
          // acts like a "thread ID" here).
          var pingCache = root.pingCache;
          var threadIDs;

          if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);

            if (threadIDs === undefined) {
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }

          if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            wakeable.then(ping, ping);
          }
        }

        function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
          // The source fiber did not complete.
          sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.

          sourceFiber.firstEffect = sourceFiber.lastEffect = null;

          if (value !== null && _typeof3(value) === 'object' && typeof value.then === 'function') {
            // This is a wakeable.
            var wakeable = value;

            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              // Reset the memoizedState to what it was before we attempted
              // to render it.
              var currentSource = sourceFiber.alternate;

              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }

            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

            var _workInProgress = returnFiber;

            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                // Found the nearest boundary.
                // Stash the promise on the boundary fiber. If the boundary times out, we'll
                // attach another listener to flip the boundary back to its normal state.
                var wakeables = _workInProgress.updateQueue;

                if (wakeables === null) {
                  var updateQueue = new Set();
                  updateQueue.add(wakeable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  wakeables.add(wakeable);
                } // If the boundary is outside of blocking mode, we should *not*
                // suspend the commit. Pretend as if the suspended component rendered
                // null and keep rendering. In the commit phase, we'll schedule a
                // subsequent synchronous update to re-render the Suspense.
                //
                // Note: It doesn't matter whether the component that suspended was
                // inside a blocking mode tree. If the Suspense is outside of it, we
                // should *not* suspend the commit.


                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.flags |= DidCapture;
                  sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                  // But we shouldn't call any lifecycle methods or callbacks. Remove
                  // all lifecycle effect tags.

                  sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;

                    if (currentSourceFiber === null) {
                      // This is a new mount. Change the tag so it's not mistaken for a
                      // completed class component. For example, we should not call
                      // componentWillUnmount if it is deleted.
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      // When we try rendering again, we should not reuse the current fiber,
                      // since it's known to be in an inconsistent state. Use a force update to
                      // prevent a bail out.
                      var update = createUpdate(NoTimestamp, SyncLane);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  } // The source fiber did not complete. Mark it with Sync priority to
                  // indicate that it still has pending work.


                  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.

                  return;
                } // Confirmed that the boundary is in a concurrent mode tree. Continue
                // with the normal suspend path.
                //
                // After this we'll use a set of heuristics to determine whether this
                // render pass will run to completion or restart or "suspend" the commit.
                // The actual logic for this is spread out in different places.
                //
                // This first principle is that if we're going to suspend when we complete
                // a root, then we should also restart if we get an update or ping that
                // might unsuspend it, and vice versa. The only reason to suspend is
                // because you think you might want to restart before committing. However,
                // it doesn't make sense to restart only while in the period we're suspended.
                //
                // Restarting too aggressively is also not good because it starves out any
                // intermediate loading state. So we use heuristics to determine when.
                // Suspense Heuristics
                //
                // If nothing threw a Promise or all the same fallbacks are already showing,
                // then don't suspend/restart.
                //
                // If this is an initial render of a new tree of Suspense boundaries and
                // those trigger a fallback, then don't suspend/restart. We want to ensure
                // that we can show the initial loading state as quickly as possible.
                //
                // If we hit a "Delayed" case, such as when we'd switch from content back into
                // a fallback, then we should always suspend/restart. Transitions apply
                // to this case. If none is defined, JND is used instead.
                //
                // If we're already showing a fallback and it gets "retried", allowing us to show
                // another level, but there's still an inner boundary that would show a fallback,
                // then we suspend/restart for 500ms since the last time we showed a fallback
                // anywhere in the tree. This effectively throttles progressive loading into a
                // consistent train of commits. This also gives us an opportunity to restart to
                // get to the completed state slightly earlier.
                //
                // If there's ambiguity due to batching it's resolved in preference of:
                // 1) "delayed", 2) "initial render", 3) "retry".
                //
                // We want to ensure that a "busy" state doesn't get force committed. We want to
                // ensure that new initial loading states can commit as soon as possible.


                attachPingListener(root, wakeable, rootRenderLanes);
                _workInProgress.flags |= ShouldCapture;
                _workInProgress.lanes = rootRenderLanes;
                return;
              } // This boundary already captured during this render. Continue to the next
              // boundary.


              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?


            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
          } // We didn't find a boundary that could handle this type of exception. Start
          // over and traverse parent path again, this time treating the exception
          // as an error.


          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          var workInProgress = returnFiber;

          do {
            switch (workInProgress.tag) {
              case HostRoot:
                {
                  var _errorInfo = value;
                  workInProgress.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);

                  var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);

                  enqueueCapturedUpdate(workInProgress, _update);
                  return;
                }

              case ClassComponent:
                // Capture and retry
                var errorInfo = value;
                var ctor = workInProgress.type;
                var instance = workInProgress.stateNode;

                if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress.flags |= ShouldCapture;

                  var _lane = pickArbitraryLane(rootRenderLanes);

                  workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

                  var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);

                  enqueueCapturedUpdate(workInProgress, _update2);
                  return;
                }

                break;
            }

            workInProgress = workInProgress.return;
          } while (workInProgress !== null);
        }

        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;

        var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
          instance.props = current.memoizedProps;
          instance.state = current.memoizedState;
          {
            instance.componentWillUnmount();
          }
        }; // Capture errors so they don't interrupt unmounting.


        function safelyCallComponentWillUnmount(current, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current, unmountError);
            }
          }
        }

        function safelyDetachRef(current) {
          var ref = current.ref;

          if (ref !== null) {
            if (typeof ref === 'function') {
              {
                invokeGuardedCallback(null, ref, null, null);

                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }

        function safelyCallDestroy(current, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);

            if (hasCaughtError()) {
              var error = clearCaughtError();
              captureCommitPhaseError(current, error);
            }
          }
        }

        function commitBeforeMutationLifeCycles(current, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
              {
                return;
              }

            case ClassComponent:
              {
                if (finishedWork.flags & Snapshot) {
                  if (current !== null) {
                    var prevProps = current.memoizedProps;
                    var prevState = current.memoizedState;
                    var instance = finishedWork.stateNode; // We could update instance props and state here,
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.

                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                        }

                        if (instance.state !== finishedWork.memoizedState) {
                          error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                      if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }

                return;
              }

            case HostRoot:
              {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root = finishedWork.stateNode;
                    clearContainer(root.containerInfo);
                  }
                }
                return;
              }

            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              // Nothing to do for these component types
              return;
          }

          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }

        function commitHookEffectListUnmount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;

            do {
              if ((effect.tag & tag) === tag) {
                // Unmount
                var destroy = effect.destroy;
                effect.destroy = undefined;

                if (destroy !== undefined) {
                  destroy();
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }

        function commitHookEffectListMount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;

            do {
              if ((effect.tag & tag) === tag) {
                // Mount
                var create = effect.create;
                effect.destroy = create();
                {
                  var destroy = effect.destroy;

                  if (destroy !== undefined && typeof destroy !== 'function') {
                    var addendum = void 0;

                    if (destroy === null) {
                      addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                    } else if (typeof destroy.then === 'function') {
                      addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
                    } else {
                      addendum = ' You returned: ' + destroy;
                    }

                    error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
                  }
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }

        function schedulePassiveEffects(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;

            do {
              var _effect = effect,
                  next = _effect.next,
                  tag = _effect.tag;

              if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                enqueuePendingPassiveHookEffectMount(finishedWork, effect);
              }

              effect = next;
            } while (effect !== firstEffect);
          }
        }

        function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
              {
                // At this point layout effects have already been destroyed (during mutation phase).
                // This is done to prevent sibling component effects from interfering with each other,
                // e.g. a destroy function in one component should never override a ref set
                // by a create function in another component during the same commit.
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }

            case ClassComponent:
              {
                var instance = finishedWork.stateNode;

                if (finishedWork.flags & Update) {
                  if (current === null) {
                    // We could update instance props and state here,
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                        }

                        if (instance.state !== finishedWork.memoizedState) {
                          error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                    var prevState = current.memoizedState; // We could update instance props and state here,
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.

                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                        }

                        if (instance.state !== finishedWork.memoizedState) {
                          error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.


                var updateQueue = finishedWork.updateQueue;

                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                      }
                    }
                  } // We could update instance props and state here,
                  // but instead we rely on them being set during last render.
                  // TODO: revisit this when we implement resuming.

                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }

                return;
              }

            case HostRoot:
              {
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;

                if (_updateQueue !== null) {
                  var _instance = null;

                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;

                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }

                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }

                return;
              }

            case HostComponent:
              {
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.

                if (current === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }

                return;
              }

            case HostText:
              {
                // We have no life-cycles associated with text.
                return;
              }

            case HostPortal:
              {
                // We have no life-cycles associated with portals.
                return;
              }

            case Profiler:
              {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps,
                      onCommit = _finishedWork$memoize2.onCommit,
                      onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime = getCommitTime();

                  if (typeof onRender === 'function') {
                    {
                      onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }

            case SuspenseComponent:
              {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }

            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
              return;
          }

          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }

        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            // We only have the top Fiber that was inserted but we need to recurse down its
            // children to find all the terminal nodes.
            var node = finishedWork;

            while (true) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;

                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;

                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }

              if (node === finishedWork) {
                return;
              }

              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }

                node = node.return;
              }

              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }

        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;

          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;

            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;

              default:
                instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag


            if (typeof ref === 'function') {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty('current')) {
                  error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }

        function commitDetachRef(current) {
          var currentRef = current.ref;

          if (currentRef !== null) {
            if (typeof currentRef === 'function') {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        } // User-originating errors (lifecycles and refs) should not interrupt
        // deletion, so don't let them throw. Host-originating errors should
        // interrupt deletion, so it's okay


        function commitUnmount(finishedRoot, current, renderPriorityLevel) {
          onCommitUnmount(current);

          switch (current.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
              {
                var updateQueue = current.updateQueue;

                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;

                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;

                    do {
                      var _effect2 = effect,
                          destroy = _effect2.destroy,
                          tag = _effect2.tag;

                      if (destroy !== undefined) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current, effect);
                        } else {
                          {
                            safelyCallDestroy(current, destroy);
                          }
                        }
                      }

                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }

                return;
              }

            case ClassComponent:
              {
                safelyDetachRef(current);
                var instance = current.stateNode;

                if (typeof instance.componentWillUnmount === 'function') {
                  safelyCallComponentWillUnmount(current, instance);
                }

                return;
              }

            case HostComponent:
              {
                safelyDetachRef(current);
                return;
              }

            case HostPortal:
              {
                // TODO: this is recursive.
                // We are also not using this parent because
                // the portal will get pushed immediately.
                {
                  unmountHostComponents(finishedRoot, current);
                }
                return;
              }

            case FundamentalComponent:
              {
                return;
              }

            case DehydratedFragment:
              {
                return;
              }

            case ScopeComponent:
              {
                return;
              }
          }
        }

        function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
          // While we're inside a removed host node we don't want to call
          // removeChild on the inner nodes because they're removed by the top
          // call anyway. We also want to call componentWillUnmount on all
          // composites before this host node is removed from the tree. Therefore
          // we do an inner loop while we're still inside the host node.
          var node = root;

          while (true) {
            commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.

            if (node.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
            // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === root) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === root) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }

        function detachFiberMutation(fiber) {
          // Cut off the return pointers to disconnect it from the tree. Ideally, we
          // should clear the child pointer of the parent alternate to let this
          // get GC:ed but we don't know which for sure which parent is the current
          // one so we'll settle for GC:ing the subtree of this child. This child
          // itself will be GC:ed when the parent updates the next time.
          // Note: we cannot null out sibling here, otherwise it can cause issues
          // with findDOMNode and how it requires the sibling field to carry out
          // traversal in a later effect. See PR #16820. We now clear the sibling
          // field after effects, see: detachFiberAfterEffects.
          //
          // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
          // It may be required if the current component is an error boundary,
          // and one of its descendants throws while unmounting a passive effect.
          fiber.alternate = null;
          fiber.child = null;
          fiber.dependencies = null;
          fiber.firstEffect = null;
          fiber.lastEffect = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.return = null;
          fiber.updateQueue = null;
          {
            fiber._debugOwner = null;
          }
        }

        function getHostParentFiber(fiber) {
          var parent = fiber.return;

          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }

            parent = parent.return;
          }

          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }

        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }

        function getHostSibling(fiber) {
          // We're going to search forward into the tree until we find a sibling host
          // node. Unfortunately, if multiple insertions are done in a row we have to
          // search past them. This leads to exponential search for the next sibling.
          // TODO: Find a more efficient way to do this.
          var node = fiber;

          siblings: while (true) {
            // If we didn't find anything, let's try the next sibling.
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;

            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              // If it is not host node and, we might have a host node inside it.
              // Try to search down until we find one.
              if (node.flags & Placement) {
                // If we don't have a child, try the siblings instead.
                continue siblings;
              } // If we don't have a child, try the siblings instead.
              // We also skip portals because they are not part of this host tree.


              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            } // Check if this host node is stable or about to be placed.


            if (!(node.flags & Placement)) {
              // Found it!
              return node.stateNode;
            }
          }
        }

        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

          var parent;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;

          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode;
              isContainer = false;
              break;

            case HostRoot:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;

            case HostPortal:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;

            case FundamentalComponent: // eslint-disable-next-line-no-fallthrough

            default:
              {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
          }

          if (parentFiber.flags & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag

            parentFiber.flags &= ~ContentReset;
          }

          var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
          // children to find all the terminal nodes.

          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent);
          }
        }

        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;

          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;

            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal) ;else {
            var child = node.child;

            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;

              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }

        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;

          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;

            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal) ;else {
            var child = node.child;

            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;

              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }

        function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
          // We only have the top Fiber that was deleted but we need to recurse down its
          // children to find all the terminal nodes.
          var node = current; // Each iteration, currentParent is populated with node's host parent if not
          // currentParentIsValid.

          var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

          var currentParent;
          var currentParentIsContainer;

          while (true) {
            if (!currentParentIsValid) {
              var parent = node.return;

              findParent: while (true) {
                if (!(parent !== null)) {
                  {
                    throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }

                var parentStateNode = parent.stateNode;

                switch (parent.tag) {
                  case HostComponent:
                    currentParent = parentStateNode;
                    currentParentIsContainer = false;
                    break findParent;

                  case HostRoot:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;

                  case HostPortal:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                }

                parent = parent.return;
              }

              currentParentIsValid = true;
            }

            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
              // node from the tree.

              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              } // Don't visit children because we already visited them.

            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                // When we go into a portal, it becomes the parent to remove from.
                // We will reassign it back when we pop the portal on the way up.
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true; // Visit children because portals might contain host components.

                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.

              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }

            if (node === current) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === current) {
                return;
              }

              node = node.return;

              if (node.tag === HostPortal) {
                // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
              }
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }

        function commitDeletion(finishedRoot, current, renderPriorityLevel) {
          {
            // Recursively delete all host nodes from the parent.
            // Detach refs and call componentWillUnmount() on the whole subtree.
            unmountHostComponents(finishedRoot, current);
          }
          var alternate = current.alternate;
          detachFiberMutation(current);

          if (alternate !== null) {
            detachFiberMutation(alternate);
          }
        }

        function commitWork(current, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
              {
                // Layout effects are destroyed during the mutation phase so that all
                // destroy functions for all fibers are called before any create functions.
                // This prevents sibling component effects from interfering with each other,
                // e.g. a destroy function in one component should never override a ref set
                // by a create function in another component during the same commit.
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }

            case ClassComponent:
              {
                return;
              }

            case HostComponent:
              {
                var instance = finishedWork.stateNode;

                if (instance != null) {
                  // Commit the work prepared earlier.
                  var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                  // as the newProps. The updatePayload will contain the real change in
                  // this case.

                  var oldProps = current !== null ? current.memoizedProps : newProps;
                  var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;

                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }

                return;
              }

            case HostText:
              {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }

                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.

                var oldText = current !== null ? current.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }

            case HostRoot:
              {
                {
                  var _root = finishedWork.stateNode;

                  if (_root.hydrate) {
                    // We've just hydrated. No need to hydrate again.
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }

            case Profiler:
              {
                return;
              }

            case SuspenseComponent:
              {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }

            case SuspenseListComponent:
              {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }

            case IncompleteClassComponent:
              {
                return;
              }

            case FundamentalComponent:
              {
                break;
              }

            case ScopeComponent:
              {
                break;
              }

            case OffscreenComponent:
            case LegacyHiddenComponent:
              {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
          }

          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }

        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;

          if (newState !== null) {
            markCommitTimeOfFallback();
            {
              // Hide the Offscreen component that contains the primary children. TODO:
              // Ideally, this effect would have been scheduled on the Offscreen fiber
              // itself. That's how unhiding works: the Offscreen component schedules an
              // effect on itself. However, in this case, the component didn't complete,
              // so the fiber was never added to the effect list in the normal path. We
              // could have appended it to the effect list in the Suspense component's
              // second pass, but doing it this way is less complicated. This would be
              // simpler if we got rid of the effect list and traversed the tree, like
              // we're planning to do.
              var primaryChildParent = finishedWork.child;
              hideOrUnhideAllChildren(primaryChildParent, true);
            }
          }
        }

        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;

          if (newState === null) {
            var current = finishedWork.alternate;

            if (current !== null) {
              var prevState = current.memoizedState;

              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;

                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }

        function attachSuspenseRetryListeners(finishedWork) {
          // If this boundary just timed out, then it will have a set of wakeables.
          // For each wakeable, attach a listener so that when it resolves, React
          // attempts to re-render the boundary in the primary (pre-timeout) state.
          var wakeables = finishedWork.updateQueue;

          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;

            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }

            wakeables.forEach(function (wakeable) {
              // Memoize using the boundary fiber to prevent redundant listeners.
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

              if (!retryCache.has(wakeable)) {
                {
                  if (wakeable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing.unstable_wrap(retry);
                  }
                }
                retryCache.add(wakeable);
                wakeable.then(retry, retry);
              }
            });
          }
        } // This function detects when a Suspense boundary goes from visible to hidden.
        // It returns false if the boundary is already hidden.
        // TODO: Use an effect tag.


        function isSuspenseBoundaryBeingHidden(current, finishedWork) {
          if (current !== null) {
            var oldState = current.memoizedState;

            if (oldState === null || oldState.dehydrated !== null) {
              var newState = finishedWork.memoizedState;
              return newState !== null && newState.dehydrated === null;
            }
          }

          return false;
        }

        function commitResetTextContent(current) {
          resetTextContent(current.stateNode);
        }

        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;

        if (typeof Symbol === 'function' && Symbol.for) {
          var symbolFor$1 = Symbol.for;
          COMPONENT_TYPE = symbolFor$1('selector.component');
          HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
          ROLE_TYPE = symbolFor$1('selector.role');
          TEST_NAME_TYPE = symbolFor$1('selector.test_id');
          TEXT_TYPE = symbolFor$1('selector.text');
        }

        var commitHooks = [];

        function onCommitRoot$1() {
          {
            commitHooks.forEach(function (commitHook) {
              return commitHook();
            });
          }
        }

        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
            ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
            IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext =
        /*             */
        0;
        var BatchedContext =
        /*               */
        1;
        var EventContext =
        /*                 */
        2;
        var DiscreteEventContext =
        /*         */
        4;
        var LegacyUnbatchedContext =
        /*       */
        8;
        var RenderContext =
        /*                */
        16;
        var CommitContext =
        /*                */
        32;
        var RetryAfterError =
        /*       */
        64;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5; // Describes where we are in the React execution stack

        var executionContext = NoContext; // The root we're working on

        var workInProgressRoot = null; // The fiber we're working on

        var workInProgress = null; // The lanes we're rendering

        var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
        // This is a superset of the lanes we started working on at the root. The only
        // case where it's different from `workInProgressRootRenderLanes` is when we
        // enter a subtree that is hidden and needs to be unhidden: Suspense and
        // Offscreen component.
        //
        // Most things in the work loop should deal with workInProgressRootRenderLanes.
        // Most things in begin/complete phases should deal with subtreeRenderLanes.

        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

        var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

        var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
        // slightly different than `renderLanes` because `renderLanes` can change as you
        // enter and exit an Offscreen tree. This value is the combination of all render
        // lanes for the entire render phase.

        var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
        // includes unprocessed updates, not work in bailed out children.

        var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

        var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.

        var workInProgressRootPingedLanes = NoLanes;
        var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
        // model where we don't commit new loading states in too quick succession.

        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
        // more and prefer CPU suspense heuristics instead.

        var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
        // suspense heuristics and opt out of rendering more content.

        var RENDER_TIMEOUT_MS = 500;

        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }

        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }

        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority$1;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveHookEffectsMount = [];
        var pendingPassiveHookEffectsUnmount = [];
        var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
        // during the commit phase. This enables them to be traced across components
        // that spawn new work during render. E.g. hidden boundaries, suspended SSR
        // hydration or SuspenseList.
        // TODO: Can use a bitmask instead of an array

        var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
        // event times as simultaneous, even if the actual clock time has advanced
        // between the first and second call.

        var currentEventTime = NoTimestamp;
        var currentEventWipLanes = NoLanes;
        var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
        // We warn about state updates for unmounted components differently in this case.

        var isFlushingPassiveEffects = false;
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;

        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }

        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            // We're inside React, so it's fine to read the actual time.
            return now();
          } // We're not inside React, so we may be in the middle of a browser event.


          if (currentEventTime !== NoTimestamp) {
            // Use the same start time for all updates until we enter React again.
            return currentEventTime;
          } // This is the first update since React yielded. Compute a new start time.


          currentEventTime = now();
          return currentEventTime;
        }

        function requestUpdateLane(fiber) {
          // Special cases
          var mode = fiber.mode;

          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          } // The algorithm for assigning an update to a lane should be stable for all
          // updates at the same priority within the same event. To do this, the inputs
          // to the algorithm must be the same. For example, we use the `renderLanes`
          // to avoid choosing a lane that is already in the middle of rendering.
          //
          // However, the "included" lanes could be mutated in between updates in the
          // same event, like if you perform an update inside `flushSync`. Or any other
          // code path that might call `prepareFreshStack`.
          //
          // The trick we use is to cache the first of each of these inputs within an
          // event. Then reset the cached values once we can be sure the event is over.
          // Our heuristic for that is whenever we enter a concurrent work loop.
          //
          // We'll do the same for `currentEventPendingLanes` below.


          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }

          var isTransition = requestCurrentTransition() !== NoTransition;

          if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) {
              currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            }

            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
          } // TODO: Remove this dependency on the Scheduler priority.
          // To do that, we're replacing it with an update lane priority.


          var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
          // This couples React to the Scheduler internals, so we're replacing it
          // with the currentUpdateLanePriority above. As an example of how this
          // could be problematic, if we're not inside `Scheduler.runWithPriority`,
          // then we'll get the priority of the current running Scheduler task,
          // which is probably not what we want.

          var lane;

          if ( // TODO: Temporary. We're removing the concept of discrete updates.
          (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
            lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
          } else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
          }

          return lane;
        }

        function requestRetryLane(fiber) {
          // This is a fork of `requestUpdateLane` designed specifically for Suspense
          // "retries" — a special update that attempts to flip a Suspense boundary
          // from its placeholder state to its primary/resolved state.
          // Special cases
          var mode = fiber.mode;

          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          } // See `requestUpdateLane` for explanation of `currentEventWipLanes`


          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }

          return findRetryLane(currentEventWipLanes);
        }

        function scheduleUpdateOnFiber(fiber, lane, eventTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root = markUpdateLaneFromFiberToRoot(fiber, lane);

          if (root === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
          } // Mark that the root has a pending update.


          markRootUpdated(root, lane, eventTime);

          if (root === workInProgressRoot) {
            // Received an update to a tree that's in the middle of rendering. Mark
            // that there was an interleaved update work on this root. Unless the
            // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
            // phase update. In that case, we don't treat render phase updates as if
            // they were interleaved, for backwards compat reasons.
            {
              workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            }

            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              // The root already suspended with a delay, which means this render
              // definitely won't finish. Since we have a new update, let's mark it as
              // suspended now, right before marking the incoming update. This has the
              // effect of interrupting the current render and switching to the update.
              // TODO: Make sure this doesn't override pings that happen while we've
              // already started rendering.
              markRootSuspended$1(root, workInProgressRootRenderLanes);
            }
          } // TODO: requestUpdateLanePriority also reads the priority. Pass the
          // priority as an argument to that function and this one.


          var priorityLevel = getCurrentPriorityLevel();

          if (lane === SyncLane) {
            if ( // Check if we're inside unbatchedUpdates
            (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
            (executionContext & (RenderContext | CommitContext)) === NoContext) {
              // Register pending interactions on the root to avoid losing traced interaction data.
              schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
              // root inside of batchedUpdates should be synchronous, but layout updates
              // should be deferred until the end of the batch.

              performSyncWorkOnRoot(root);
            } else {
              ensureRootIsScheduled(root, eventTime);
              schedulePendingInteractions(root, lane);

              if (executionContext === NoContext) {
                // Flush the synchronous work now, unless we're already working or inside
                // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                // scheduleCallbackForFiber to preserve the ability to schedule a callback
                // without immediately flushing it. We only do this for user-initiated
                // updates, to preserve historical behavior of legacy mode.
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          } else {
            // Schedule a discrete update but only if it's not Sync.
            if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
            // discrete, even inside a discrete event.
            priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
              // This is the result of a discrete event. Track the lowest priority
              // discrete update per root so we can flush them early, if needed.
              if (rootsWithPendingDiscreteUpdates === null) {
                rootsWithPendingDiscreteUpdates = new Set([root]);
              } else {
                rootsWithPendingDiscreteUpdates.add(root);
              }
            } // Schedule other updates after in case the callback is sync.


            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, lane);
          } // We use this when assigning a lane for a transition inside
          // `requestUpdateLane`. We assume it's the same as the root being updated,
          // since in the common case of a single root app it probably is. If it's not
          // the same root, then it's not a huge deal, we just might batch more stuff
          // together more than necessary.


          mostRecentlyUpdatedRoot = root;
        } // This is split into a separate function so we can mark a fiber with pending
        // work without treating it as a typical update that originates from an event;
        // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
        // on a fiber.


        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          // Update the source fiber's lanes
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;

          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }

          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          } // Walk the parent path to the root and update the child expiration time.

          var node = sourceFiber;
          var parent = sourceFiber.return;

          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;

            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }

            node = parent;
            parent = parent.return;
          }

          if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
          } else {
            return null;
          }
        } // Use this function to schedule a task for a root. There's only one task per
        // root; if a task was already scheduled, we'll check to make sure the priority
        // of the existing task is the same as the priority of the next level that the
        // root has work on. This function is called on every update, and right before
        // exiting a task.


        function ensureRootIsScheduled(root, currentTime) {
          var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
          // expired so we know to work on those next.

          markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

          var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.

          var newCallbackPriority = returnNextLanesPriority();

          if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) {
              cancelCallback(existingCallbackNode);
              root.callbackNode = null;
              root.callbackPriority = NoLanePriority;
            }

            return;
          } // Check if there's an existing task. We may be able to reuse it.


          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root.callbackPriority;

            if (existingCallbackPriority === newCallbackPriority) {
              // The priority hasn't changed. We can reuse the existing task. Exit.
              return;
            } // The priority changed. Cancel the existing callback. We'll schedule a new
            // one below.


            cancelCallback(existingCallbackNode);
          } // Schedule a new callback.


          var newCallbackNode;

          if (newCallbackPriority === SyncLanePriority) {
            // Special case: Sync React callbacks are scheduled on a special
            // internal queue
            newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
          } else if (newCallbackPriority === SyncBatchedLanePriority) {
            newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
          } else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
          }

          root.callbackPriority = newCallbackPriority;
          root.callbackNode = newCallbackNode;
        } // This is the entry point for every concurrent task, i.e. anything that
        // goes through Scheduler.


        function performConcurrentWorkOnRoot(root) {
          // Since we know we're in a React event, we can clear the current
          // event time. The next update will compute a new event time.
          currentEventTime = NoTimestamp;
          currentEventWipLanes = NoLanes;
          currentEventPendingLanes = NoLanes;

          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          } // Flush any pending passive effects before deciding which lanes to work on,
          // in case they schedule additional work.


          var originalCallbackNode = root.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();

          if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root.callbackNode !== originalCallbackNode) {
              // The current task was canceled. Exit. We don't need to call
              // `ensureRootIsScheduled` because the check above implies either that
              // there's a new task, or that there's no remaining work on this root.
              return null;
            }
          } // Determine the next expiration time to work on, using the fields stored
          // on the root.


          var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

          if (lanes === NoLanes) {
            // Defensive coding. This is never expected to happen.
            return null;
          }

          var exitStatus = renderRootConcurrent(root, lanes);

          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            // The render included lanes that were updated during the render phase.
            // For example, when unhiding a hidden tree, we include all the lanes
            // that were previously skipped when the tree was hidden. That set of
            // lanes is a superset of the lanes we started rendering with.
            //
            // So we'll throw out the current work and restart.
            prepareFreshStack(root, NoLanes);
          } else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
              executionContext |= RetryAfterError; // If an error occurred during hydration,
              // discard server response and fall back to client side render.

              if (root.hydrate) {
                root.hydrate = false;
                clearContainer(root.containerInfo);
              } // If something threw an error, try rendering one more time. We'll render
              // synchronously to block concurrent data mutations, and we'll includes
              // all pending updates are included. If it still fails after the second
              // attempt, we'll give up and commit the resulting tree.


              lanes = getLanesToRetrySynchronouslyOnError(root);

              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root, lanes);
              }
            }

            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root, NoLanes);
              markRootSuspended$1(root, lanes);
              ensureRootIsScheduled(root, now());
              throw fatalError;
            } // We now have a consistent tree. The next step is either to commit it,
            // or, if something suspended, wait to commit it after a timeout.


            var finishedWork = root.current.alternate;
            root.finishedWork = finishedWork;
            root.finishedLanes = lanes;
            finishConcurrentRender(root, exitStatus, lanes);
          }

          ensureRootIsScheduled(root, now());

          if (root.callbackNode === originalCallbackNode) {
            // The task node scheduled for this root is the same one that's
            // currently executed. Need to return a continuation.
            return performConcurrentWorkOnRoot.bind(null, root);
          }

          return null;
        }

        function finishConcurrentRender(root, exitStatus, lanes) {
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored:
              {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough

            case RootErrored:
              {
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root);
                break;
              }

            case RootSuspended:
              {
                markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.

                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  // This render only included retries, no updates. Throttle committing
                  // retries so that we don't show too many loading states too quickly.
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root, NoLanes);

                    if (nextLanes !== NoLanes) {
                      // There's additional work on this root.
                      break;
                    }

                    var suspendedLanes = root.suspendedLanes;

                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      // We should prefer to render the fallback of at the last
                      // suspended level. Ping the last suspended level to try
                      // rendering it again.
                      // FIXME: What if the suspended lanes are Idle? Should not restart.
                      var eventTime = requestEventTime();
                      markRootPinged(root, suspendedLanes);
                      break;
                    } // The render is suspended, it hasn't timed out, and there's no
                    // lower priority work to do. Instead of committing the fallback
                    // immediately, wait for more data to arrive.


                    root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                    break;
                  }
                } // The work expired. Commit immediately.


                commitRoot(root);
                break;
              }

            case RootSuspendedWithDelay:
              {
                markRootSuspended$1(root, lanes);

                if (includesOnlyTransitions(lanes)) {
                  // This is a transition, so we should exit without committing a
                  // placeholder and without scheduling a timeout. Delay indefinitely
                  // until we receive more data.
                  break;
                }

                if (!shouldForceFlushFallbacksInDEV()) {
                  // This is not a transition, but we did trigger an avoided state.
                  // Schedule a placeholder to display after a short delay, using the Just
                  // Noticeable Difference.
                  // TODO: Is the JND optimization worth the added complexity? If this is
                  // the only reason we track the event time, then probably not.
                  // Consider removing.
                  var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;

                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


                  if (_msUntilTimeout > 10) {
                    // Instead of committing the fallback immediately, wait for more data
                    // to arrive.
                    root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                    break;
                  }
                } // Commit the placeholder.


                commitRoot(root);
                break;
              }

            case RootCompleted:
              {
                // The work completed. Ready to commit.
                commitRoot(root);
                break;
              }

            default:
              {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
          }
        }

        function markRootSuspended$1(root, suspendedLanes) {
          // When suspending, we should always exclude lanes that were pinged or (more
          // rarely, since we try to avoid it) updated during the render phase.
          // TODO: Lol maybe there's a better way to factor this besides this
          // obnoxiously named function :)
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
          markRootSuspended(root, suspendedLanes);
        } // This is the entry point for synchronous tasks that don't go
        // through Scheduler


        function performSyncWorkOnRoot(root) {
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }

          flushPassiveEffects();
          var lanes;
          var exitStatus;

          if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
            // There's a partial tree, and at least one of its lanes has expired. Finish
            // rendering it before rendering the rest of the expired work.
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root, lanes);

            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              // The render included lanes that were updated during the render phase.
              // For example, when unhiding a hidden tree, we include all the lanes
              // that were previously skipped when the tree was hidden. That set of
              // lanes is a superset of the lanes we started rendering with.
              //
              // Note that this only happens when part of the tree is rendered
              // concurrently. If the whole tree is rendered synchronously, then there
              // are no interleaved events.
              lanes = getNextLanes(root, lanes);
              exitStatus = renderRootSync(root, lanes);
            }
          } else {
            lanes = getNextLanes(root, NoLanes);
            exitStatus = renderRootSync(root, lanes);
          }

          if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError; // If an error occurred during hydration,
            // discard server response and fall back to client side render.

            if (root.hydrate) {
              root.hydrate = false;
              clearContainer(root.containerInfo);
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.


            lanes = getLanesToRetrySynchronouslyOnError(root);

            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root, lanes);
            }
          }

          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
          } // We now have a consistent tree. Because this is a sync render, we
          // will commit it even if something suspended.


          var finishedWork = root.current.alternate;
          root.finishedWork = finishedWork;
          root.finishedLanes = lanes;
          commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next
          // pending level.

          ensureRootIsScheduled(root, now());
          return null;
        }

        function flushDiscreteUpdates() {
          // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
          // However, `act` uses `batchedUpdates`, so there's no way to distinguish
          // those two cases. Need to fix this before exposing flushDiscreteUpdates
          // as a public API.
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
              }
            } // We're already rendering, so we can't synchronously flush pending work.
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.

            return;
          }

          flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
          // they fire before the next serial event.

          flushPassiveEffects();
        }

        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function (root) {
              markDiscreteUpdatesExpired(root);
              ensureRootIsScheduled(root, now());
            });
          } // Now flush the immediate queue.


          flushSyncCallbackQueue();
        }

        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;

          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;

            if (executionContext === NoContext) {
              // Flush the immediate callbacks that were scheduled during this batch
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }

        function batchedEventUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;

          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;

            if (executionContext === NoContext) {
              // Flush the immediate callbacks that were scheduled during this batch
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }

        function discreteUpdates$1(fn, a, b, c, d) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          {
            try {
              return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
            } finally {
              executionContext = prevExecutionContext;

              if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
        }

        function unbatchedUpdates(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;

          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;

            if (executionContext === NoContext) {
              // Flush the immediate callbacks that were scheduled during this batch
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }

        function flushSync(fn, a) {
          var prevExecutionContext = executionContext;

          if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
            }
            return fn(a);
          }

          executionContext |= BatchedContext;
          {
            try {
              if (fn) {
                return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
              } else {
                return undefined;
              }
            } finally {
              executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
              // Note that this will happen even if batchedUpdates is higher up
              // the stack.

              flushSyncCallbackQueue();
            }
          }
        }

        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }

        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }

        function prepareFreshStack(root, lanes) {
          root.finishedWork = null;
          root.finishedLanes = NoLanes;
          var timeoutHandle = root.timeoutHandle;

          if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

            cancelTimeout(timeoutHandle);
          }

          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;

            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }

          workInProgressRoot = root;
          workInProgress = createWorkInProgress(root.current, null);
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }

        function handleError(root, thrownValue) {
          do {
            var erroredWork = workInProgress;

            try {
              // Reset module-level state that was set during the render phase.
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
              // separate issue. Write a regression test using string refs.

              ReactCurrentOwner$2.current = null;

              if (erroredWork === null || erroredWork.return === null) {
                // Expected to be working on a non-root fiber. This is a fatal error
                // because there's no ancestor that can handle it; the root is
                // supposed to capture all errors that weren't caught by an error
                // boundary.
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                // sibling, or the parent if there are no siblings. But since the root
                // has no siblings nor a parent, we set it to null. Usually this is
                // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                // intentionally not calling those, we need set it here.
                // TODO: Consider calling `unwindWork` to pop the contexts.

                workInProgress = null;
                return;
              }

              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }

              throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              // Something in the return path also threw.
              thrownValue = yetAnotherThrownValue;

              if (workInProgress === erroredWork && erroredWork !== null) {
                // If this boundary has already errored, then we had trouble processing
                // the error. Bubble it to the next boundary.
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }

              continue;
            } // Return to the normal work loop.


            return;
          } while (true);
        }

        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

          if (prevDispatcher === null) {
            // The React isomorphic package does not include a default dispatcher.
            // Instead the first renderer will lazily attach one, in order to give
            // nicer error messages.
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }

        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }

        function pushInteractions(root) {
          {
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root.memoizedInteractions;
            return prevInteractions;
          }
        }

        function popInteractions(prevInteractions) {
          {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }

        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }

        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }

        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }

        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          } // Check if there are updates that we skipped tree that might have unblocked
          // this render.


          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
            // Mark the current render as suspended so that we switch to working on
            // the updates that were skipped. Usually we only suspend at the end of
            // the render phase.
            // TODO: We should probably always mark the root as suspended immediately
            // (inside this function), since by suspending at the end of the render
            // phase introduces a potential mistake where we suspend lanes that were
            // pinged or updated while we were rendering.
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }

        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        } // Called during render to determine if anything has suspended.
        // Returns false if we're not sure.


        function renderHasNotSuspendedYet() {
          // If something errored or completed, we can't really be sure,
          // so those are false.
          return workInProgressRootExitStatus === RootIncomplete;
        }

        function renderRootSync(root, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
          // and prepare a fresh one. Otherwise we'll continue where we left off.

          if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root, lanes);
            startWorkOnPendingInteractions(root, lanes);
          }

          var prevInteractions = pushInteractions(root);

          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root, thrownValue);
            }
          } while (true);

          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);

          if (workInProgress !== null) {
            // This is a sync render, so we should have finished the whole tree.
            {
              {
                throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }

          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        } // The work loop is an extremely hot path. Tell Closure not to inline it.

        /** @noinline */


        function workLoopSync() {
          // Already timed out, so perform work without checking if we need to yield.
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }

        function renderRootConcurrent(root, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
          // and prepare a fresh one. Otherwise we'll continue where we left off.

          if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root, lanes);
            startWorkOnPendingInteractions(root, lanes);
          }

          var prevInteractions = pushInteractions(root);

          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root, thrownValue);
            }
          } while (true);

          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;

          if (workInProgress !== null) {
            return RootIncomplete;
          } else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

            return workInProgressRootExitStatus;
          }
        }
        /** @noinline */


        function workLoopConcurrent() {
          // Perform work until Scheduler asks us to yield
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }

        function performUnitOfWork(unitOfWork) {
          // The current, flushed, state of this fiber is the alternate. Ideally
          // nothing should rely on this, but relying on it here means that we don't
          // need an additional field on the work in progress.
          var current = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;

          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
          }

          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;

          if (next === null) {
            // If this doesn't spawn new work, complete the current work.
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }

          ReactCurrentOwner$2.current = null;
        }

        function completeUnitOfWork(unitOfWork) {
          // Attempt to complete the current unit of work, then move to the next
          // sibling. If there are no more siblings, return to the parent fiber.
          var completedWork = unitOfWork;

          do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.

            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;

              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }

              resetCurrentFiber();

              if (next !== null) {
                // Completing this fiber spawned new work. Work on that next.
                workInProgress = next;
                return;
              }

              resetChildLanes(completedWork);

              if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
              (returnFiber.flags & Incomplete) === NoFlags) {
                // Append all the effects of the subtree and this fiber onto the effect
                // list of the parent. The completion order of the children affects the
                // side-effect order.
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = completedWork.firstEffect;
                }

                if (completedWork.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                  }

                  returnFiber.lastEffect = completedWork.lastEffect;
                } // If this fiber had side-effects, we append it AFTER the children's
                // side-effects. We can perform certain side-effects earlier if needed,
                // by doing multiple passes over the effect list. We don't want to
                // schedule our own side-effect on our own list because if end up
                // reusing children we'll schedule this effect onto itself since we're
                // at the end.


                var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                // list. PerformedWork effect is read by React DevTools but shouldn't be
                // committed.

                if (flags > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork;
                  } else {
                    returnFiber.firstEffect = completedWork;
                  }

                  returnFiber.lastEffect = completedWork;
                }
              }
            } else {
              // This fiber did not complete because something threw. Pop values off
              // the stack without entering the complete phase. If this is a boundary,
              // capture values if possible.
              var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.


              if (_next !== null) {
                // If completing this work spawned new work, do that next. We'll come
                // back here again.
                // Since we're restarting, remove anything that is not a host effect
                // from the effect tag.
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }

              if ((completedWork.mode & ProfileMode) !== NoMode) {
                // Record the render duration for the fiber that errored.
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;

                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }

                completedWork.actualDuration = actualDuration;
              }

              if (returnFiber !== null) {
                // Mark the parent fiber as incomplete and clear its effect list.
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.flags |= Incomplete;
              }
            }

            var siblingFiber = completedWork.sibling;

            if (siblingFiber !== null) {
              // If there is more work to do in this returnFiber, do that next.
              workInProgress = siblingFiber;
              return;
            } // Otherwise, return to the parent


            completedWork = returnFiber; // Update the next thing we're working on in case something throws.

            workInProgress = completedWork;
          } while (completedWork !== null); // We've reached the root.


          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }

        function resetChildLanes(completedWork) {
          if ( // TODO: Move this check out of the hot path by moving `resetChildLanes`
          // to switch statement in `completeWork`.
          (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
            // The children of this component are hidden. Don't bubble their
            // expiration times.
            return;
          }

          var newChildLanes = NoLanes; // Bubble up the earliest expiration time.

          if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.

            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;

            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));

              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }

              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }

            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;

            if (isTimedOutSuspense) {
              // Don't count time spent in a timed out Suspense subtree as part of the base duration.
              var primaryChildFragment = completedWork.child;

              if (primaryChildFragment !== null) {
                treeBaseDuration -= primaryChildFragment.treeBaseDuration;
              }
            }

            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;

            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              _child = _child.sibling;
            }
          }

          completedWork.childLanes = newChildLanes;
        }

        function commitRoot(root) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
          return null;
        }

        function commitRootImpl(root, renderPriorityLevel) {
          do {
            // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
            // means `flushPassiveEffects` will sometimes result in additional
            // passive effects. So we need to keep flushing in a loop until there are
            // no more pending effects.
            // TODO: Might be better if `flushPassiveEffects` did not automatically
            // flush synchronous work at the end, to avoid factoring hazards like this.
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);

          flushRenderPhaseStrictModeWarningsInDEV();

          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }

          var finishedWork = root.finishedWork;
          var lanes = root.finishedLanes;

          if (finishedWork === null) {
            return null;
          }

          root.finishedWork = null;
          root.finishedLanes = NoLanes;

          if (!(finishedWork !== root.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          } // commitRoot never returns a continuation; it always finishes synchronously.
          // So we can clear these now to allow a new callback to be scheduled.


          root.callbackNode = null; // Update the first and last pending times on this root. The new first
          // pending time is whatever is left on the root fiber.

          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of
          // `flushDiscreteUpdates` starts a useless render pass which may cancels
          // a scheduled timeout.

          if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
              rootsWithPendingDiscreteUpdates.delete(root);
            }
          }

          if (root === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          } // Get the list of effects.


          var firstEffect;

          if (finishedWork.flags > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            // There is no effect on the root.
            firstEffect = finishedWork.firstEffect;
          }

          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.

            focusedInstanceHandle = prepareForCommit(root.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;

            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);

                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }

                  var error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null); // We no longer need to track the active instance fiber


            focusedInstanceHandle = null;
            {
              // Mark the current commit time to be shared by all Profilers in this
              // batch. This enables them to be grouped later.
              recordCommitTime();
            } // The next phase is the mutation phase, where we mutate the host tree.

            nextEffect = firstEffect;

            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }

                  var _error = clearCaughtError();

                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);

            resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.

            root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.

            nextEffect = firstEffect;

            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);

                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }

                  var _error2 = clearCaughtError();

                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);

            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.

            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            // No effects.
            root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            // no effects.
            // TODO: Maybe there's a better way to report this.

            {
              recordCommitTime();
            }
          }

          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

          if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;

            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;

              if (nextEffect.flags & Deletion) {
                detachFiberAfterEffects(nextEffect);
              }

              nextEffect = nextNextEffect;
            }
          } // Read this again, since an effect might have updated it


          remainingLanes = root.pendingLanes; // Check if there's remaining work on this root

          if (remainingLanes !== NoLanes) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;

                for (var i = 0; i < expirationTimes.length; i++) {
                  scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
                }
              }

              schedulePendingInteractions(root, remainingLanes);
            }
          } else {
            // If there's no remaining work, we can clear the set of already failed
            // error boundaries.
            legacyErrorBoundariesThatAlreadyFailed = null;
          }

          {
            if (!rootDidHavePassiveEffects) {
              // If there are no passive effects, then we can complete the pending interactions.
              // Otherwise, we'll wait until after the passive effects are flushed.
              // Wait to do this until after remaining work has been scheduled,
              // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
              finishPendingInteractions(root, lanes);
            }
          }

          if (remainingLanes === SyncLane) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root;
            }
          } else {
            nestedUpdateCount = 0;
          }

          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            onCommitRoot$1();
          } // Always call this before exiting `commitRoot`, to ensure that any
          // additional work on this root is scheduled.

          ensureRootIsScheduled(root, now());

          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }

          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
            // synchronously, but layout updates should be deferred until the end
            // of the batch.
            return null;
          } // If layout work was scheduled, flush it now.


          flushSyncCallbackQueue();
          return null;
        }

        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var current = nextEffect.alternate;

            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
              if ((nextEffect.flags & Deletion) !== NoFlags) {
                if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              } else {
                // TODO: Move this out of the hot path using a dedicated effect tag.
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              }
            }

            var flags = nextEffect.flags;

            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(nextEffect);
              commitBeforeMutationLifeCycles(current, nextEffect);
              resetCurrentFiber();
            }

            if ((flags & Passive) !== NoFlags) {
              // If there are passive effects, schedule a callback to flush at
              // the earliest opportunity.
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, function () {
                  flushPassiveEffects();
                  return null;
                });
              }
            }

            nextEffect = nextEffect.nextEffect;
          }
        }

        function commitMutationEffects(root, renderPriorityLevel) {
          // TODO: Should probably move the bulk of this function to commitWork.
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;

            if (flags & ContentReset) {
              commitResetTextContent(nextEffect);
            }

            if (flags & Ref) {
              var current = nextEffect.alternate;

              if (current !== null) {
                commitDetachRef(current);
              }
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.


            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);

            switch (primaryFlags) {
              case Placement:
                {
                  commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                  // inserted, before any life-cycles like componentDidMount gets called.
                  // TODO: findDOMNode doesn't rely on this any more but isMounted does
                  // and isMounted is deprecated anyway so we should be able to kill this.

                  nextEffect.flags &= ~Placement;
                  break;
                }

              case PlacementAndUpdate:
                {
                  // Placement
                  commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                  // inserted, before any life-cycles like componentDidMount gets called.

                  nextEffect.flags &= ~Placement; // Update

                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }

              case Hydrating:
                {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }

              case HydratingAndUpdate:
                {
                  nextEffect.flags &= ~Hydrating; // Update

                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }

              case Update:
                {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }

              case Deletion:
                {
                  commitDeletion(root, nextEffect);
                  break;
                }
            }

            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }

        function commitLayoutEffects(root, committedLanes) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;

            if (flags & (Update | Callback)) {
              var current = nextEffect.alternate;
              commitLifeCycles(root, current, nextEffect);
            }

            {
              if (flags & Ref) {
                commitAttachRef(nextEffect);
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }

        function flushPassiveEffects() {
          // Returns whether passive effects were flushed.
          if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            {
              return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
            }
          }

          return false;
        }

        function enqueuePendingPassiveHookEffectMount(fiber, effect) {
          pendingPassiveHookEffectsMount.push(effect, fiber);

          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function () {
              flushPassiveEffects();
              return null;
            });
          }
        }

        function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
          pendingPassiveHookEffectsUnmount.push(effect, fiber);
          {
            fiber.flags |= PassiveUnmountPendingDev;
            var alternate = fiber.alternate;

            if (alternate !== null) {
              alternate.flags |= PassiveUnmountPendingDev;
            }
          }

          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function () {
              flushPassiveEffects();
              return null;
            });
          }
        }

        function invokePassiveEffectCreate(effect) {
          var create = effect.create;
          effect.destroy = create();
        }

        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }

          var root = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;

          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }

          {
            isFlushingPassiveEffects = true;
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called
          // before ANY passive effect create functions are called.
          // Otherwise effects in sibling components might interfere with each other.
          // e.g. a destroy function in one component may unintentionally override a ref
          // value set by a create function in another component.
          // Layout effects have the same constraint.
          // First pass: Destroy stale passive effects.

          var unmountEffects = pendingPassiveHookEffectsUnmount;
          pendingPassiveHookEffectsUnmount = [];

          for (var i = 0; i < unmountEffects.length; i += 2) {
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = undefined;
            {
              fiber.flags &= ~PassiveUnmountPendingDev;
              var alternate = fiber.alternate;

              if (alternate !== null) {
                alternate.flags &= ~PassiveUnmountPendingDev;
              }
            }

            if (typeof destroy === 'function') {
              {
                setCurrentFiber(fiber);
                {
                  invokeGuardedCallback(null, destroy, null);
                }

                if (hasCaughtError()) {
                  if (!(fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }

                  var error = clearCaughtError();
                  captureCommitPhaseError(fiber, error);
                }

                resetCurrentFiber();
              }
            }
          } // Second pass: Create new passive effects.


          var mountEffects = pendingPassiveHookEffectsMount;
          pendingPassiveHookEffectsMount = [];

          for (var _i = 0; _i < mountEffects.length; _i += 2) {
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            {
              setCurrentFiber(_fiber);
              {
                invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
              }

              if (hasCaughtError()) {
                if (!(_fiber !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }

                var _error4 = clearCaughtError();

                captureCommitPhaseError(_fiber, _error4);
              }

              resetCurrentFiber();
            }
          } // Note: This currently assumes there are no passive effects on the root fiber
          // because the root is not part of its own effect list.
          // This could change in the future.


          var effect = root.current.firstEffect;

          while (effect !== null) {
            var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

            effect.nextEffect = null;

            if (effect.flags & Deletion) {
              detachFiberAfterEffects(effect);
            }

            effect = nextNextEffect;
          }

          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root, lanes);
          }
          {
            isFlushingPassiveEffects = false;
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
          // exceeds the limit, we'll fire a warning.

          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }

        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }

        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }

        function prepareToThrowUncaughtError(error) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
          }
        }

        var onUncaughtError = prepareToThrowUncaughtError;

        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
          var errorInfo = createCapturedValue(error, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          enqueueUpdate(rootFiber, update);
          var eventTime = requestEventTime();
          var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);

          if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, SyncLane);
          }
        }

        function captureCommitPhaseError(sourceFiber, error) {
          if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
            return;
          }

          var fiber = sourceFiber.return;

          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;

              if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                enqueueUpdate(fiber, update);
                var eventTime = requestEventTime();
                var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);

                if (root !== null) {
                  markRootUpdated(root, SyncLane, eventTime);
                  ensureRootIsScheduled(root, eventTime);
                  schedulePendingInteractions(root, SyncLane);
                } else {
                  // This component has already been unmounted.
                  // We can't schedule any follow up work for the root because the fiber is already unmounted,
                  // but we can still call the log-only boundary so the error isn't swallowed.
                  //
                  // TODO This is only a temporary bandaid for the old reconciler fork.
                  // We can delete this special case once the new fork is merged.
                  if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    try {
                      instance.componentDidCatch(error, errorInfo);
                    } catch (errorToIgnore) {// TODO Ignore this error? Rethrow it?
                      // This is kind of an edge case.
                    }
                  }
                }

                return;
              }
            }

            fiber = fiber.return;
          }
        }

        function pingSuspendedRoot(root, wakeable, pingedLanes) {
          var pingCache = root.pingCache;

          if (pingCache !== null) {
            // The wakeable resolved, so we no longer need to memoize, because it will
            // never be thrown again.
            pingCache.delete(wakeable);
          }

          var eventTime = requestEventTime();
          markRootPinged(root, pingedLanes);

          if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              // Restart from the root.
              prepareFreshStack(root, NoLanes);
            } else {
              // Even though we can't restart right now, we might get an
              // opportunity later. So we mark this render as having a ping.
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }

          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, pingedLanes);
        }

        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          // The boundary fiber (a Suspense component or SuspenseList component)
          // previously was rendered in its fallback state. One of the promises that
          // suspended it has resolved, which means at least part of the tree was
          // likely unblocked. Try rendering again, at a new expiration time.
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          } // TODO: Special case idle priority?


          var eventTime = requestEventTime();
          var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);

          if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, retryLane);
          }
        }

        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane; // Default

          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }

          if (retryCache !== null) {
            // The wakeable resolved, so we no longer need to memoize, because it will
            // never be thrown again.
            retryCache.delete(wakeable);
          }

          retryTimedOutBoundary(boundaryFiber, retryLane);
        } // Computes the next Just Noticeable Difference (JND) boundary.
        // The theory is that a person can't tell the difference between small differences in time.
        // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
        // difference in the experience. However, waiting for longer might mean that we can avoid
        // showing an intermediate loading state. The longer we have already waited, the harder it
        // is to tell small differences in time. Therefore, the longer we've already waited,
        // the longer we can wait additionally. At some point we have to give up though.
        // We pick a train model where the next boundary commits at a consistent schedule.
        // These particular numbers are vague estimates. We expect to adjust them based on research.


        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }

        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }

          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
            }
          }
        }

        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }

        var didWarnStateUpdateForNotYetMountedComponent = null;

        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              // We let the other warning about render phase updates deal with this one.
              return;
            }

            if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
              return;
            }

            var tag = fiber.tag;

            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              // Only warn for user-defined components, not internal ones like Suspense.
              return;
            } // We show the whole stack but dedupe on the top component's name because
            // the problematic code almost always lies inside that component.


            var componentName = getComponentName(fiber.type) || 'ReactComponent';

            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }

              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
            }

            var previousFiber = current;

            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }

        var didWarnStateUpdateForUnmountedComponent = null;

        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;

            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              // Only warn for user-defined components, not internal ones like Suspense.
              return;
            } // If there are pending passive effects unmounts for this Fiber,
            // we can assume that they would have prevented this update.


            if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
              return;
            } // We show the whole stack but dedupe on the top component's name because
            // the problematic code almost always lies inside that component.


            var componentName = getComponentName(fiber.type) || 'ReactComponent';

            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }

              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
            }

            if (isFlushingPassiveEffects) ;else {
              var previousFiber = current;

              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }

        var beginWork$1;
        {
          var dummyFiber = null;

          beginWork$1 = function beginWork$1(current, unitOfWork, lanes) {
            // If a component throws an error, we replay it again in a synchronously
            // dispatched event, so that the debugger will treat it as an uncaught
            // error See ReactErrorUtils for more information.
            // Before entering the begin phase, copy the work-in-progress onto a dummy
            // fiber. If beginWork throws, we'll use this to reset the state.
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

            try {
              return beginWork(current, unitOfWork, lanes);
            } catch (originalError) {
              if (originalError !== null && _typeof3(originalError) === 'object' && typeof originalError.then === 'function') {
                // Don't replay promises. Treat everything else like an error.
                throw originalError;
              } // Keep this code in sync with handleError; any changes here must have
              // corresponding changes there.


              resetContextDependencies();
              resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
              // same fiber again.
              // Unwind the failed stack frame

              unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

              if (unitOfWork.mode & ProfileMode) {
                // Reset the profiler timer.
                startProfilerTimer(unitOfWork);
              } // Run beginWork again.


              invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

              if (hasCaughtError()) {
                var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.

                throw replayError;
              } else {
                // This branch is reachable if the render phase is impure.
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }

        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                  {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

                    var dedupeKey = renderingComponentName;

                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                      error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
                    }

                    break;
                  }

                case ClassComponent:
                  {
                    if (!didWarnAboutUpdateInRender) {
                      error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');
                      didWarnAboutUpdateInRender = true;
                    }

                    break;
                  }
              }
            }
          }
        } // a 'shared' variable that changes when act() opens/closes in tests.


        var IsThisRendererActing = {
          current: false
        };

        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              var previousFiber = current;

              try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
                'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
                'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }

        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
            }
          }
        }

        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              var previousFiber = current;

              try {
                setCurrentFiber(fiber);
                error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }

        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

        var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
        // scheduler is the actual recommendation. The alternative could be a testing build,
        // a new lib, or whatever; we dunno just yet. This message is for early adopters
        // to get their tests right.

        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + // Break up requires to avoid accidentally parsing them as dependencies.
                "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
              }
            }
          }
        }

        function computeThreadID(root, lane) {
          // Interaction threads are unique per root and expiration time.
          // NOTE: Intentionally unsound cast. All that matters is that it's a number
          // and it represents a batch of work. Could make a helper function instead,
          // but meh this is fine for now.
          return lane * 1000 + root.interactionThreadID;
        }

        function markSpawnedWork(lane) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [lane];
          } else {
            spawnedWorkDuringRender.push(lane);
          }
        }

        function scheduleInteractions(root, lane, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);

            if (pendingInteractions != null) {
              interactions.forEach(function (interaction) {
                if (!pendingInteractions.has(interaction)) {
                  // Update the pending async work count for previously unscheduled interaction.
                  interaction.__count++;
                }

                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.

              interactions.forEach(function (interaction) {
                interaction.__count++;
              });
            }

            var subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null) {
              var threadID = computeThreadID(root, lane);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }

        function schedulePendingInteractions(root, lane) {
          scheduleInteractions(root, lane, tracing.__interactionsRef.current);
        }

        function startWorkOnPendingInteractions(root, lanes) {
          // we can accurately attribute time spent working on it, And so that cascading
          // work triggered during the render phase will be associated with it.
          var interactions = new Set();
          root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) {
              scheduledInteractions.forEach(function (interaction) {
                return interactions.add(interaction);
              });
            }
          }); // Store the current set of interactions on the FiberRoot for a few reasons:
          // We can re-use it in hot functions like performConcurrentWorkOnRoot()
          // without having to recalculate it. We will also use it in commitWork() to
          // pass to any Profiler onRender() hooks. This also provides DevTools with a
          // way to access it when the onCommitRoot() hook is called.

          root.memoizedInteractions = interactions;

          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null) {
              var threadID = computeThreadID(root, lanes);

              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                // If the subscriber throws, rethrow it in a separate task
                scheduleCallback(ImmediatePriority$1, function () {
                  throw error;
                });
              }
            }
          }
        }

        function finishPendingInteractions(root, committedLanes) {
          var remainingLanesAfterCommit = root.pendingLanes;
          var subscriber;

          try {
            subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null && root.memoizedInteractions.size > 0) {
              // FIXME: More than one lane can finish in a single commit.
              var threadID = computeThreadID(root, committedLanes);
              subscriber.onWorkStopped(root.memoizedInteractions, threadID);
            }
          } catch (error) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function () {
              throw error;
            });
          } finally {
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            var pendingInteractionMap = root.pendingInteractionMap;
            pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
              // Only decrement the pending interaction count if we're done.
              // If there's still work at the current priority,
              // That indicates that we are waiting for suspense data.
              if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                pendingInteractionMap.delete(lane);
                scheduledInteractions.forEach(function (interaction) {
                  interaction.__count--;

                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error) {
                      // If the subscriber throws, rethrow it in a separate task
                      scheduleCallback(ImmediatePriority$1, function () {
                        throw error;
                      });
                    }
                  }
                });
              }
            });
          }
        } // `act` testing API


        function shouldForceFlushFallbacksInDEV() {
          // Never force flush in production. This function should get stripped out.
          return actingUpdatesScopeDepth > 0;
        } // so we can tell if any async act() calls try to run in parallel.


        var actingUpdatesScopeDepth = 0;

        function detachFiberAfterEffects(fiber) {
          fiber.sibling = null;
          fiber.stateNode = null;
        }

        var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

        var failedBoundaries = null;

        var setRefreshHandler = function setRefreshHandler(handler) {
          {
            resolveFamily = handler;
          }
        };

        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              // Hot reloading is disabled.
              return type;
            }

            var family = resolveFamily(type);

            if (family === undefined) {
              return type;
            } // Use the latest known implementation.


            return family.current;
          }
        }

        function resolveClassForHotReloading(type) {
          // No implementation differences.
          return resolveFunctionForHotReloading(type);
        }

        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              // Hot reloading is disabled.
              return type;
            }

            var family = resolveFamily(type);

            if (family === undefined) {
              // Check if we're dealing with a real forwardRef. Don't want to crash early.
              if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);

                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };

                  if (type.displayName !== undefined) {
                    syntheticType.displayName = type.displayName;
                  }

                  return syntheticType;
                }
              }

              return type;
            } // Use the latest known implementation.


            return family.current;
          }
        }

        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              // Hot reloading is disabled.
              return false;
            }

            var prevType = fiber.elementType;
            var nextType = element.type; // If we got here, we know types aren't === equal.

            var needsCompareFamilies = false;
            var $$typeofNextType = _typeof3(nextType) === 'object' && nextType !== null ? nextType.$$typeof : null;

            switch (fiber.tag) {
              case ClassComponent:
                {
                  if (typeof nextType === 'function') {
                    needsCompareFamilies = true;
                  }

                  break;
                }

              case FunctionComponent:
                {
                  if (typeof nextType === 'function') {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    // We don't know the inner type yet.
                    // We're going to assume that the lazy inner type is stable,
                    // and so it is sufficient to avoid reconciling it away.
                    // We're not going to unwrap or actually use the new lazy type.
                    needsCompareFamilies = true;
                  }

                  break;
                }

              case ForwardRef:
                {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }

                  break;
                }

              case MemoComponent:
              case SimpleMemoComponent:
                {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    // TODO: if it was but can no longer be simple,
                    // we shouldn't set this.
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }

                  break;
                }

              default:
                return false;
            } // Check if both types have a family and it's the same one.


            if (needsCompareFamilies) {
              // Note: memo() and forwardRef() we'll compare outer rather than inner type.
              // This means both of them need to be registered to preserve state.
              // If we unwrapped and compared the inner types for wrappers instead,
              // then we would risk falsely saying two separate memo(Foo)
              // calls are equivalent because they wrap the same Foo function.
              var prevFamily = resolveFamily(prevType);

              if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }

            return false;
          }
        }

        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              // Hot reloading is disabled.
              return;
            }

            if (typeof WeakSet !== 'function') {
              return;
            }

            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }

            failedBoundaries.add(fiber);
          }
        }

        var scheduleRefresh = function scheduleRefresh(root, update) {
          {
            if (resolveFamily === null) {
              // Hot reloading is disabled.
              return;
            }

            var staleFamilies = update.staleFamilies,
                updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function () {
              scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
            });
          }
        };

        var scheduleRoot = function scheduleRoot(root, element) {
          {
            if (root.context !== emptyContextObject) {
              // Super edge case: root has a legacy _renderSubtree context
              // but we don't know the parentComponent so we can't pass it.
              // Just ignore. We'll delete this with _renderSubtree code path later.
              return;
            }

            flushPassiveEffects();
            flushSync(function () {
              updateContainer(element, root, null, null);
            });
          }
        };

        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate,
                child = fiber.child,
                sibling = fiber.sibling,
                tag = fiber.tag,
                type = fiber.type;
            var candidateType = null;

            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;

              case ForwardRef:
                candidateType = type.render;
                break;
            }

            if (resolveFamily === null) {
              throw new Error('Expected resolveFamily to be set during hot reload.');
            }

            var needsRender = false;
            var needsRemount = false;

            if (candidateType !== null) {
              var family = resolveFamily(candidateType);

              if (family !== undefined) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }

            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }

            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }

            if (needsRemount || needsRender) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }

            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }

            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }

        var findHostInstancesForRefresh = function findHostInstancesForRefresh(root, families) {
          {
            var hostInstances = new Set();
            var types = new Set(families.map(function (family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
            return hostInstances;
          }
        };

        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child,
                sibling = fiber.sibling,
                tag = fiber.tag,
                type = fiber.type;
            var candidateType = null;

            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;

              case ForwardRef:
                candidateType = type.render;
                break;
            }

            var didMatch = false;

            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }

            if (didMatch) {
              // We have a match. This only drills down to the closest host components.
              // There's no need to search deeper because for the purpose of giving
              // visual feedback, "flashing" outermost parent rectangles is sufficient.
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              // If there's no match, maybe there will be one further down in the child tree.
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }

            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }

        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

            if (foundHostInstances) {
              return;
            } // If we didn't find any host children, fallback to closest host parent.


            var node = fiber;

            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;

                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;

                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }

              if (node.return === null) {
                throw new Error('Expected to reach root first.');
              }

              node = node.return;
            }
          }
        }

        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;

            while (true) {
              if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }

              if (node === fiber) {
                return foundHostInstances;
              }

              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }

                node = node.return;
              }

              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }

        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;

          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* eslint-disable no-new */

            new Map([[nonExtensibleObject, null]]);
            new Set([nonExtensibleObject]);
            /* eslint-enable no-new */
          } catch (e) {
            // TODO: Consider warning about bad polyfills
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;

        function FiberNode(tag, pendingProps, key, mode) {
          // Instance
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null; // Fiber

          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode; // Effects

          this.flags = NoFlags;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            // Note: The following is done to avoid a v8 performance cliff.
            //
            // Initializing the fields below to smis and later updating them with
            // double values will cause Fibers to end up having separate shapes.
            // This behavior/bug has something to do with Object.preventExtension().
            // Fortunately this only impacts DEV builds.
            // Unfortunately it makes React unusably slow for some applications.
            // To work around this, initialize the fields below with doubles.
            //
            // Learn more about this here:
            // https://github.com/facebook/react/issues/14365
            // https://bugs.chromium.org/p/v8/issues/detail?id=8538
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
            // This won't trigger the performance cliff mentioned above,
            // and it simplifies other profiler code (including DevTools).

            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            // This isn't directly used but is handy for debugging internals:
            this._debugID = debugCounter++;
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;

            if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
              Object.preventExtensions(this);
            }
          }
        } // This is a constructor function, rather than a POJO constructor, still
        // please ensure we do the following:
        // 1) Nobody should add any instance methods on this. Instance methods can be
        //    more difficult to predict when they get optimized and they are almost
        //    never inlined properly in static compilers.
        // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
        //    always know when it is a fiber.
        // 3) We might want to experiment with using numeric keys since they are easier
        //    to optimize in a non-JIT environment.
        // 4) We can easily go from a constructor to a createFiber object literal if that
        //    is faster.
        // 5) It should be easy to port this to a C struct and keep a C implementation
        //    compatible.


        var createFiber = function createFiber(tag, pendingProps, key, mode) {
          // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
          return new FiberNode(tag, pendingProps, key, mode);
        };

        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }

        function isSimpleFunctionComponent(type) {
          return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
        }

        function resolveLazyComponentTag(Component) {
          if (typeof Component === 'function') {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;

            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }

            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }

          return IndeterminateComponent;
        } // This is used to create an alternate fiber to do work on.


        function createWorkInProgress(current, pendingProps) {
          var workInProgress = current.alternate;

          if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            {
              // DEV-only fields
              workInProgress._debugID = current._debugID;
              workInProgress._debugSource = current._debugSource;
              workInProgress._debugOwner = current._debugOwner;
              workInProgress._debugHookTypes = current._debugHookTypes;
            }
            workInProgress.alternate = current;
            current.alternate = workInProgress;
          } else {
            workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

            workInProgress.type = current.type; // We already have an alternate.
            // Reset the effect tag.

            workInProgress.flags = NoFlags; // The effect list is no longer valid.

            workInProgress.nextEffect = null;
            workInProgress.firstEffect = null;
            workInProgress.lastEffect = null;
            {
              // We intentionally reset, rather than copy, actualDuration & actualStartTime.
              // This prevents time from endlessly accumulating in new commits.
              // This has the downside of resetting values for different priority renders,
              // But works for yielding (the common case) and should support resuming.
              workInProgress.actualDuration = 0;
              workInProgress.actualStartTime = -1;
            }
          }

          workInProgress.childLanes = current.childLanes;
          workInProgress.lanes = current.lanes;
          workInProgress.child = current.child;
          workInProgress.memoizedProps = current.memoizedProps;
          workInProgress.memoizedState = current.memoizedState;
          workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
          // it cannot be shared with the current fiber.

          var currentDependencies = current.dependencies;
          workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          }; // These will be overridden during the parent's reconciliation

          workInProgress.sibling = current.sibling;
          workInProgress.index = current.index;
          workInProgress.ref = current.ref;
          {
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
          }
          {
            workInProgress._debugNeedsRemount = current._debugNeedsRemount;

            switch (workInProgress.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;

              case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;

              case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
            }
          }
          return workInProgress;
        } // Used to reuse a Fiber for a second pass.


        function resetWorkInProgress(workInProgress, renderLanes) {
          // This resets the Fiber to what createFiber or createWorkInProgress would
          // have set the values to before during the first pass. Ideally this wouldn't
          // be necessary but unfortunately many code paths reads from the workInProgress
          // when they should be reading from current and writing to workInProgress.
          // We assume pendingProps, index, key, ref, return are still untouched to
          // avoid doing another reconciliation.
          // Reset the effect tag but keep any Placement tags, since that's something
          // that child fiber is setting, not the reconciliation.
          workInProgress.flags &= Placement; // The effect list is no longer valid.

          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
          var current = workInProgress.alternate;

          if (current === null) {
            // Reset to createFiber's initial values.
            workInProgress.childLanes = NoLanes;
            workInProgress.lanes = renderLanes;
            workInProgress.child = null;
            workInProgress.memoizedProps = null;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.dependencies = null;
            workInProgress.stateNode = null;
            {
              // Note: We don't reset the actualTime counts. It's useful to accumulate
              // actual time across multiple render passes.
              workInProgress.selfBaseDuration = 0;
              workInProgress.treeBaseDuration = 0;
            }
          } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

            workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.

            var currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              // Note: We don't reset the actualTime counts. It's useful to accumulate
              // actual time across multiple render passes.
              workInProgress.selfBaseDuration = current.selfBaseDuration;
              workInProgress.treeBaseDuration = current.treeBaseDuration;
            }
          }

          return workInProgress;
        }

        function createHostRootFiber(tag) {
          var mode;

          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }

          if (isDevToolsPresent) {
            // Always collect profile timings when DevTools are present.
            // This enables DevTools to start capturing timing at any point–
            // Without some nodes in the tree having empty base times.
            mode |= ProfileMode;
          }

          return createFiber(HostRoot, null, null, mode);
        }

        function createFiberFromTypeAndProps(type, // React$ElementType
        key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

          var resolvedType = type;

          if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === 'string') {
            fiberTag = HostComponent;
          } else {
            getTag: switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);

              case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;

              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;

              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);

              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);

              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);

              case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);

              case REACT_SCOPE_TYPE: // eslint-disable-next-line no-fallthrough

              default:
                {
                  if (_typeof3(type) === 'object' && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;

                      case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;

                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;

                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;

                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;

                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }

                  var info = '';
                  {
                    if (type === undefined || _typeof3(type) === 'object' && type !== null && Object.keys(type).length === 0) {
                      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                    }

                    var ownerName = owner ? getComponentName(owner.type) : null;

                    if (ownerName) {
                      info += '\n\nCheck the render method of `' + ownerName + '`.';
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : _typeof3(type)) + "." + info);
                    }
                  }
                }
            }
          }

          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }

        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }

        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== 'string') {
              error('Profiler must specify an "id" as a prop');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }

        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
          // This needs to be fixed in getComponentName so that it relies on the tag
          // instead.

          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          {
            // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
            // This needs to be fixed in getComponentName so that it relies on the tag
            // instead.
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
          // This needs to be fixed in getComponentName so that it relies on the tag
          // instead.

          {
            fiber.type = REACT_OFFSCREEN_TYPE;
          }
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
          var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
          // This needs to be fixed in getComponentName so that it relies on the tag
          // instead.

          {
            fiber.type = REACT_LEGACY_HIDDEN_TYPE;
          }
          fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

          fiber.elementType = 'DELETED';
          fiber.type = 'DELETED';
          return fiber;
        }

        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
          };
          return fiber;
        } // Used for stashing WIP properties to replay failed work in DEV.


        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            // This Fiber's initial properties will always be overwritten.
            // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          } // This is intentionally written as a list of all properties.
          // We tried to use Object.assign() instead but this is called in
          // the hottest path, and Object.assign() was too slow:
          // https://github.com/facebook/react/issues/12502
          // This code is DEV-only so size is not a concern.


          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugID = source._debugID;
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }

        function FiberRootNode(containerInfo, tag, hydrate) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate;
          this.callbackNode = null;
          this.callbackPriority = NoLanePriority;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = new Set();
            this.pendingInteractionMap = new Map();
          }
          {
            switch (tag) {
              case BlockingRoot:
                this._debugRootType = 'createBlockingRoot()';
                break;

              case ConcurrentRoot:
                this._debugRootType = 'createRoot()';
                break;

              case LegacyRoot:
                this._debugRootType = 'createLegacyRoot()';
                break;
            }
          }
        }

        function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
          var root = new FiberRootNode(containerInfo, tag, hydrate); // stateNode is any.

          var uninitializedFiber = createHostRootFiber(tag);
          root.current = uninitializedFiber;
          uninitializedFiber.stateNode = root;
          initializeUpdateQueue(uninitializedFiber);
          return root;
        } // This ensures that the version used for server rendering matches the one
        // that is eventually read during hydration.
        // If they don't match there's a potential tear and a full deopt render is required.


        function registerMutableSourceForHydration(root, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
          // Retaining it forever may interfere with GC.

          if (root.mutableSourceEagerHydrationData == null) {
            root.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }

        function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
        implementation) {
          var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
          };
        }

        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }

        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }

          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);

          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;

            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }

          return parentContext;
        }

        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);

            if (fiber === undefined) {
              if (typeof component.render === 'function') {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }

            var hostFiber = findCurrentHostFiber(fiber);

            if (hostFiber === null) {
              return null;
            }

            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || 'Component';

              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;

                try {
                  setCurrentFiber(hostFiber);

                  if (fiber.mode & StrictMode) {
                    error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
                  } else {
                    error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
                  }
                } finally {
                  // Ideally this should reset to previous but this shouldn't be called in
                  // render and there's another warning for that anyway.
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }

            return hostFiber.stateNode;
          }
        }

        function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate);
        }

        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          {
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var lane = requestUpdateLane(current$1);
          var context = getContextForSubtree(parentComponent);

          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }

          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
            }
          }
          var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
          // being called "element".

          update.payload = {
            element: element
          };
          callback = callback === undefined ? null : callback;

          if (callback !== null) {
            {
              if (typeof callback !== 'function') {
                error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
              }
            }
            update.callback = callback;
          }

          enqueueUpdate(current$1, update);
          scheduleUpdateOnFiber(current$1, lane, eventTime);
          return lane;
        }

        function getPublicRootInstance(container) {
          var containerFiber = container.current;

          if (!containerFiber.child) {
            return null;
          }

          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);

            default:
              return containerFiber.child.stateNode;
          }
        }

        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;

          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        } // Increases the priority of thennables when they resolve within this boundary.


        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;

          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }

        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            // We ignore HostRoots here because we can't increase
            // their priority and they should not suspend on I/O,
            // since you have to wrap anything that might suspend in
            // Suspense.
            return;
          }

          var eventTime = requestEventTime();
          var lane = InputDiscreteHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }

        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            // We ignore HostRoots here because we can't increase
            // their priority and they should not suspend on I/O,
            // since you have to wrap anything that might suspend in
            // Suspense.
            return;
          }

          var eventTime = requestEventTime();
          var lane = SelectiveHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }

        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            // We ignore HostRoots here because we can't increase
            // their priority other than synchronously flush it.
            return;
          }

          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }

        function runWithPriority$2(priority, fn) {
          try {
            setCurrentUpdateLanePriority(priority);
            return fn();
          } finally {}
        }

        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

          if (hostFiber === null) {
            return null;
          }

          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }

          return hostFiber.stateNode;
        }

        var shouldSuspendImpl = function shouldSuspendImpl(fiber) {
          return false;
        };

        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }

        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function copyWithDeleteImpl(obj, path, index) {
            var key = path[index];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

            if (index + 1 === path.length) {
              if (Array.isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }

              return updated;
            } // $FlowFixMe number or string is fine here


            updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
            return updated;
          };

          var copyWithDelete = function copyWithDelete(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };

          var copyWithRenameImpl = function copyWithRenameImpl(obj, oldPath, newPath, index) {
            var oldKey = oldPath[index];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

            if (index + 1 === oldPath.length) {
              var newKey = newPath[index]; // $FlowFixMe number or string is fine here

              updated[newKey] = updated[oldKey];

              if (Array.isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              // $FlowFixMe number or string is fine here
              updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
              obj[oldKey], oldPath, newPath, index + 1);
            }

            return updated;
          };

          var copyWithRename = function copyWithRename(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn('copyWithRename() expects paths of the same length');
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn('copyWithRename() expects paths to be the same except for the deepest key');
                  return;
                }
              }
            }

            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };

          var copyWithSetImpl = function copyWithSetImpl(obj, path, index, value) {
            if (index >= path.length) {
              return value;
            }

            var key = path[index];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

            updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
            return updated;
          };

          var copyWithSet = function copyWithSet(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };

          var findHook = function findHook(fiber, id) {
            // For now, the "id" of stateful hooks is just the stateful hook index.
            // This may change in the future with e.g. nested hooks.
            var currentHook = fiber.memoizedState;

            while (currentHook !== null && id > 0) {
              currentHook = currentHook.next;
              id--;
            }

            return currentHook;
          }; // Support DevTools editable values for useState and useReducer.


          overrideHookState = function overrideHookState(fiber, id, path, value) {
            var hook = findHook(fiber, id);

            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState; // We aren't actually adding an update to the queue,
              // because there is no update we can add for useReducer hooks that won't trigger an error.
              // (There's no appropriate action type for DevTools overrides.)
              // As a result though, React will see the scheduled update as a noop and bailout.
              // Shallow cloning props works as a workaround for now to bypass the bailout check.

              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };

          overrideHookStateDeletePath = function overrideHookStateDeletePath(fiber, id, path) {
            var hook = findHook(fiber, id);

            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState; // We aren't actually adding an update to the queue,
              // because there is no update we can add for useReducer hooks that won't trigger an error.
              // (There's no appropriate action type for DevTools overrides.)
              // As a result though, React will see the scheduled update as a noop and bailout.
              // Shallow cloning props works as a workaround for now to bypass the bailout check.

              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };

          overrideHookStateRenamePath = function overrideHookStateRenamePath(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);

            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState; // We aren't actually adding an update to the queue,
              // because there is no update we can add for useReducer hooks that won't trigger an error.
              // (There's no appropriate action type for DevTools overrides.)
              // As a result though, React will see the scheduled update as a noop and bailout.
              // Shallow cloning props works as a workaround for now to bypass the bailout check.

              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


          overrideProps = function overrideProps(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }

            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };

          overridePropsDeletePath = function overridePropsDeletePath(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }

            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };

          overridePropsRenamePath = function overridePropsRenamePath(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }

            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };

          scheduleUpdate = function scheduleUpdate(fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };

          setSuspenseHandler = function setSuspenseHandler(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }

        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        }

        function emptyFindFiberByHostInstance(instance) {
          return null;
        }

        function getCurrentFiberForDevTools() {
          return current;
        }

        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools
          });
        }

        function ReactDOMRoot(container, options) {
          this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
        }

        function ReactDOMBlockingRoot(container, tag, options) {
          this._internalRoot = createRootImpl(container, tag, options);
        }

        ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
          var root = this._internalRoot;
          {
            if (typeof arguments[1] === 'function') {
              error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
            }

            var container = root.containerInfo;

            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root.current);

              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root, null, null);
        };

        ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
          {
            if (typeof arguments[0] === 'function') {
              error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
            }
          }
          var root = this._internalRoot;
          var container = root.containerInfo;
          updateContainer(null, root, null, function () {
            unmarkContainerAsRoot(container);
          });
        };

        function createRootImpl(container, tag, options) {
          // Tag is either LegacyRoot or Concurrent Root
          var hydrate = options != null && options.hydrate === true;
          var hydrationCallbacks = options != null && options.hydrationOptions || null;
          var mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
          var root = createContainer(container, tag, hydrate);
          markContainerAsRoot(root.current, container);
          var containerNodeType = container.nodeType;
          {
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
          }

          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root, mutableSource);
            }
          }

          return root;
        }

        function createLegacyRoot(container, options) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options);
        }

        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
        }

        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        var warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function topLevelUpdateWarnings(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
                }
              }
            }

            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
            }

            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
              error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
            }
          };
        }

        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }

          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }

        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement = getReactRootElementInContainer(container);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }

        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

          if (!shouldHydrate) {
            var warned = false;
            var rootSibling;

            while (rootSibling = container.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
                }
              }
              container.removeChild(rootSibling);
            }
          }

          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v18. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
            }
          }
          return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
          } : undefined);
        }

        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== 'function') {
              error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
            }
          }
        }

        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
          } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
          // member of intersection type." Whyyyyyy.

          var root = container._reactRootContainer;
          var fiberRoot;

          if (!root) {
            // Initial mount
            root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root._internalRoot;

            if (typeof callback === 'function') {
              var originalCallback = callback;

              callback = function callback() {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            } // Initial mount should not be batched.


            unbatchedUpdates(function () {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root._internalRoot;

            if (typeof callback === 'function') {
              var _originalCallback = callback;

              callback = function callback() {
                var instance = getPublicRootInstance(fiberRoot);

                _originalCallback.call(instance);
              };
            } // Update


            updateContainer(children, fiberRoot, parentComponent, callback);
          }

          return getPublicRootInstance(fiberRoot);
        }

        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;

            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

              if (!warnedAboutRefsInRender) {
                error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
              }

              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }

          if (componentOrElement == null) {
            return null;
          }

          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }

          {
            return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
          }
        }

        function hydrate(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }

          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

            if (isModernRoot) {
              error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
            }
          } // TODO: throw or warn if we couldn't hydrate?

          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }

        function render(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }

          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

            if (isModernRoot) {
              error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }

        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }

          if (!(parentComponent != null && has(parentComponent))) {
            {
              throw Error("parentComponent must be a valid React Component");
            }
          }

          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }

        function unmountComponentAtNode(container) {
          if (!isValidContainer(container)) {
            {
              throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
          }

          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

            if (isModernRoot) {
              error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
            }
          }

          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
              }
            } // Unmount should not be batched.

            unbatchedUpdates(function () {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
                // $FlowFixMe This should probably use `delete container._reactRootContainer`
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?

            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);

              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
              }
            }
            return false;
          }
        }

        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setAttemptHydrationAtPriority(runWithPriority$2);
        var didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
          Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
          Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
            error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          } // TODO: pass ReactDOM portal implementation as third argument
          // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


          return createPortal(children, container, null, key);
        }

        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }

        function unstable_createPortal(children, container) {
          var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 18+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container, key);
        }

        var Internals = {
          // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
          // This is an array for better minification.
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, flushPassiveEffects, // TODO: This is related to `act`, not events. Move to separate key?
          IsThisRendererActing]
        };
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: 'react-dom'
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            // If we're in Chrome or Firefox, provide a download link if not installed.
            if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
              var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

              if (/^(https?|file):$/.test(protocol)) {
                // eslint-disable-next-line react-internal/no-production-logging
                console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync;
        exports.hydrate = hydrate;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_createPortal = unstable_createPortal;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
      })();
    }
  }, {
    "react": "../node_modules/react/index.js",
    "object-assign": "../node_modules/object-assign/index.js",
    "scheduler": "../node_modules/scheduler/index.js",
    "scheduler/tracing": "../node_modules/scheduler/tracing.js"
  }],
  "../node_modules/react-dom/index.js": [function (require, module, exports) {
    'use strict';

    function checkDCE() {
      /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
        return;
      }

      if ("development" !== 'production') {
        // This branch is unreachable because this function is only called
        // in production, but the condition is true only in development.
        // Therefore if the branch is still here, dead code elimination wasn't
        // properly applied.
        // Don't change the message. React DevTools relies on it. Also make sure
        // this message doesn't occur elsewhere in this function, or it will cause
        // a false positive.
        throw new Error('^_^');
      }

      try {
        // Verify that the code above has been dead code eliminated (DCE'd).
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        // DevTools shouldn't crash React, no matter what.
        // We should still report in case we break this code.
        console.error(err);
      }
    }

    if ("development" === 'production') {
      // DCE check should happen before ReactDOM bundle executes so that
      // DevTools can report bad minification during injection.
      checkDCE();
      module.exports = require('./cjs/react-dom.production.min.js');
    } else {
      module.exports = require('./cjs/react-dom.development.js');
    }
  }, {
    "./cjs/react-dom.development.js": "../node_modules/react-dom/cjs/react-dom.development.js"
  }],
  "../node_modules/tslib/tslib.es6.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.__extends = __extends;
    exports.__rest = __rest;
    exports.__decorate = __decorate;
    exports.__param = __param;
    exports.__metadata = __metadata;
    exports.__awaiter = __awaiter;
    exports.__generator = __generator;
    exports.__createBinding = __createBinding;
    exports.__exportStar = __exportStar;
    exports.__values = __values;
    exports.__read = __read;
    exports.__spread = __spread;
    exports.__spreadArrays = __spreadArrays;
    exports.__await = __await;
    exports.__asyncGenerator = __asyncGenerator;
    exports.__asyncDelegator = __asyncDelegator;
    exports.__asyncValues = __asyncValues;
    exports.__makeTemplateObject = __makeTemplateObject;
    exports.__importStar = __importStar;
    exports.__importDefault = __importDefault;
    exports.__classPrivateFieldGet = __classPrivateFieldGet;
    exports.__classPrivateFieldSet = __classPrivateFieldSet;
    exports.__assign = void 0;
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.
    
    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.
    
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    /* global Reflect, Promise */

    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    function __extends(d, b) {
      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var _assign2 = function __assign() {
      exports.__assign = _assign2 = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      return _assign2.apply(this, arguments);
    };

    exports.__assign = _assign2;

    function __rest(s, e) {
      var t = {};

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
      }

      if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
      }
      return t;
    }

    function __decorate(decorators, target, key, desc) {
      var c = arguments.length,
          r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
          d;
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof3(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      }
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
      return function (target, key) {
        decorator(target, key, paramIndex);
      };
    }

    function __metadata(metadataKey, metadataValue) {
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof3(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }

      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }

    function __generator(thisArg, body) {
      var _ = {
        label: 0,
        sent: function sent() {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) {
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];

            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;

              case 4:
                _.label++;
                return {
                  value: op[1],
                  done: false
                };

              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;

              case 7:
                op = _.ops.pop();

                _.trys.pop();

                continue;

              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }

                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }

                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }

                if (t && _.label < t[2]) {
                  _.label = t[2];

                  _.ops.push(op);

                  break;
                }

                if (t[2]) _.ops.pop();

                _.trys.pop();

                continue;
            }

            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    }

    function __createBinding(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    }

    function __exportStar(m, exports) {
      for (var p in m) {
        if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
      }
    }

    function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator,
          m = s && o[s],
          i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function next() {
          if (o && i >= o.length) o = void 0;
          return {
            value: o && o[i++],
            done: !o
          };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
          r,
          ar = [],
          e;

      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
          ar.push(r.value);
        }
      } catch (error) {
        e = {
          error: error
        };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }

      return ar;
    }

    function __spread() {
      for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
      }

      return ar;
    }

    function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
        s += arguments[i].length;
      }

      for (var r = Array(s), k = 0, i = 0; i < il; i++) {
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
          r[k] = a[j];
        }
      }

      return r;
    }

    ;

    function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
        return this;
      }, i;

      function verb(n) {
        if (g[n]) i[n] = function (v) {
          return new Promise(function (a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
      }

      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }

      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }

      function fulfill(value) {
        resume("next", value);
      }

      function reject(value) {
        resume("throw", value);
      }

      function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
      }
    }

    function __asyncDelegator(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function (e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function () {
        return this;
      }, i;

      function verb(n, f) {
        i[n] = o[n] ? function (v) {
          return (p = !p) ? {
            value: __await(o[n](v)),
            done: n === "return"
          } : f ? f(v) : v;
        } : f;
      }
    }

    function __asyncValues(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator],
          i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
        return this;
      }, i);

      function verb(n) {
        i[n] = o[n] && function (v) {
          return new Promise(function (resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }

      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function (v) {
          resolve({
            value: v,
            done: d
          });
        }, reject);
      }
    }

    function __makeTemplateObject(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {
          value: raw
        });
      } else {
        cooked.raw = raw;
      }

      return cooked;
    }

    ;

    function __importStar(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) {
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
      }
      result.default = mod;
      return result;
    }

    function __importDefault(mod) {
      return mod && mod.__esModule ? mod : {
        default: mod
      };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }

      return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }

      privateMap.set(receiver, value);
      return value;
    }
  }, {}],
  "../node_modules/process/browser.js": [function (require, module, exports) {
    // shim for using process in browser
    var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
    }

    function defaultClearTimeout() {
      throw new Error('clearTimeout has not been defined');
    }

    (function () {
      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }

      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();

    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
      } // if setTimeout wasn't available but was latter defined


      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }

      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }

    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
      } // if clearTimeout wasn't available but was latter defined


      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }

      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
          // Some versions of I.E. have different rules for clearTimeout vs setTimeout
          return cachedClearTimeout.call(this, marker);
        }
      }
    }

    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }

      draining = false;

      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }

      if (queue.length) {
        drainQueue();
      }
    }

    function drainQueue() {
      if (draining) {
        return;
      }

      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;

      while (len) {
        currentQueue = queue;
        queue = [];

        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }

        queueIndex = -1;
        len = queue.length;
      }

      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);

      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }

      queue.push(new Item(fun, args));

      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    }; // v8 likes predictible objects


    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }

    Item.prototype.run = function () {
      this.fun.apply(null, this.array);
    };

    process.title = 'browser';
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues

    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function (name) {
      return [];
    };

    process.binding = function (name) {
      throw new Error('process.binding is not supported');
    };

    process.cwd = function () {
      return '/';
    };

    process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
    };

    process.umask = function () {
      return 0;
    };
  }, {}],
  "../node_modules/ts-invariant/lib/invariant.esm.js": [function (require, module, exports) {
    var process = require("process");

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.invariant = invariant;
    exports.process = exports.InvariantError = exports.default = void 0;

    var _tslib = require("tslib");

    var genericMessage = "Invariant Violation";
    var _a = Object.setPrototypeOf,
        setPrototypeOf = _a === void 0 ? function (obj, proto) {
      obj.__proto__ = proto;
      return obj;
    } : _a;

    var InvariantError =
    /** @class */
    function (_super) {
      (0, _tslib.__extends)(InvariantError, _super);

      function InvariantError(message) {
        if (message === void 0) {
          message = genericMessage;
        }

        var _this = _super.call(this, typeof message === "number" ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)" : message) || this;

        _this.framesToPop = 1;
        _this.name = genericMessage;
        setPrototypeOf(_this, InvariantError.prototype);
        return _this;
      }

      return InvariantError;
    }(Error);

    exports.InvariantError = InvariantError;

    function invariant(condition, message) {
      if (!condition) {
        throw new InvariantError(message);
      }
    }

    function wrapConsoleMethod(method) {
      return function () {
        return console[method].apply(console, arguments);
      };
    }

    (function (invariant) {
      invariant.warn = wrapConsoleMethod("warn");
      invariant.error = wrapConsoleMethod("error");
    })(invariant || (exports.invariant = invariant = {})); // Code that uses ts-invariant with rollup-plugin-invariant may want to
    // import this process stub to avoid errors evaluating process.env.NODE_ENV.
    // However, because most ESM-to-CJS compilers will rewrite the process import
    // as tsInvariant.process, which prevents proper replacement by minifiers, we
    // also attempt to define the stub globally when it is not already defined.


    var processStub = {
      env: {}
    };
    exports.process = processStub;

    if (_typeof3(process) === "object") {
      exports.process = processStub = process;
    } else try {
      // Using Function to evaluate this assignment in global scope also escapes
      // the strict mode of the current module, thereby allowing the assignment.
      // Inspired by https://github.com/facebook/regenerator/pull/369.
      Function("stub", "process = stub")(processStub);
    } catch (atLeastWeTried) {// The assignment can fail if a Content Security Policy heavy-handedly
      // forbids Function usage. In those environments, developers should take
      // extra care to replace process.env.NODE_ENV in their production builds,
      // or define an appropriate global.process polyfill.
    }

    var invariant$1 = invariant;
    var _default = invariant$1;
    exports.default = _default;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "process": "../node_modules/process/browser.js"
  }],
  "../node_modules/graphql/version.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.versionInfo = exports.version = void 0;
    /**
     * Note: This file is autogenerated using "resources/gen-version.js" script and
     * automatically updated by "npm version" command.
     */

    /**
     * A string containing the version of the GraphQL.js library
     */

    var version = '15.4.0';
    /**
     * An object containing the components of the GraphQL.js version string
     */

    exports.version = version;
    var versionInfo = Object.freeze({
      major: 15,
      minor: 4,
      patch: 0,
      preReleaseTag: null
    });
    exports.versionInfo = versionInfo;
  }, {}],
  "../node_modules/graphql/jsutils/isPromise.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPromise;
    /**
     * Returns true if the value acts like a Promise, i.e. has a "then" function,
     * otherwise returns false.
     */
    // eslint-disable-next-line no-redeclare

    function isPromise(value) {
      return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';
    }
  }, {}],
  "../node_modules/graphql/jsutils/isObjectLike.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isObjectLike;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }
    /**
     * Return true if `value` is object-like. A value is object-like if it's not
     * `null` and has a `typeof` result of "object".
     */


    function isObjectLike(value) {
      return _typeof(value) == 'object' && value !== null;
    }
  }, {}],
  "../node_modules/graphql/polyfills/symbols.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SYMBOL_TO_STRING_TAG = exports.SYMBOL_ASYNC_ITERATOR = exports.SYMBOL_ITERATOR = void 0; // In ES2015 (or a polyfilled) environment, this will be Symbol.iterator
    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

    var SYMBOL_ITERATOR = typeof Symbol === 'function' && Symbol.iterator != null ? Symbol.iterator : '@@iterator'; // In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator
    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

    exports.SYMBOL_ITERATOR = SYMBOL_ITERATOR;
    var SYMBOL_ASYNC_ITERATOR = typeof Symbol === 'function' && Symbol.asyncIterator != null ? Symbol.asyncIterator : '@@asyncIterator'; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

    exports.SYMBOL_ASYNC_ITERATOR = SYMBOL_ASYNC_ITERATOR;
    var SYMBOL_TO_STRING_TAG = typeof Symbol === 'function' && Symbol.toStringTag != null ? Symbol.toStringTag : '@@toStringTag';
    exports.SYMBOL_TO_STRING_TAG = SYMBOL_TO_STRING_TAG;
  }, {}],
  "../node_modules/graphql/language/location.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getLocation = getLocation;
    /**
     * Represents a location in a Source.
     */

    /**
     * Takes a Source and a UTF-8 character offset, and returns the corresponding
     * line and column as a SourceLocation.
     */

    function getLocation(source, position) {
      var lineRegexp = /\r\n|[\n\r]/g;
      var line = 1;
      var column = position + 1;
      var match;

      while ((match = lineRegexp.exec(source.body)) && match.index < position) {
        line += 1;
        column = position + 1 - (match.index + match[0].length);
      }

      return {
        line: line,
        column: column
      };
    }
  }, {}],
  "../node_modules/graphql/language/printLocation.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printLocation = printLocation;
    exports.printSourceLocation = printSourceLocation;

    var _location = require("./location.mjs");
    /**
     * Render a helpful description of the location in the GraphQL Source document.
     */


    function printLocation(location) {
      return printSourceLocation(location.source, (0, _location.getLocation)(location.source, location.start));
    }
    /**
     * Render a helpful description of the location in the GraphQL Source document.
     */


    function printSourceLocation(source, sourceLocation) {
      var firstLineColumnOffset = source.locationOffset.column - 1;
      var body = whitespace(firstLineColumnOffset) + source.body;
      var lineIndex = sourceLocation.line - 1;
      var lineOffset = source.locationOffset.line - 1;
      var lineNum = sourceLocation.line + lineOffset;
      var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
      var columnNum = sourceLocation.column + columnOffset;
      var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
      var lines = body.split(/\r\n|[\n\r]/g);
      var locationLine = lines[lineIndex]; // Special case for minified documents

      if (locationLine.length > 120) {
        var subLineIndex = Math.floor(columnNum / 80);
        var subLineColumnNum = columnNum % 80;
        var subLines = [];

        for (var i = 0; i < locationLine.length; i += 80) {
          subLines.push(locationLine.slice(i, i + 80));
        }

        return locationStr + printPrefixedLines([["".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function (subLine) {
          return ['', subLine];
        }), [[' ', whitespace(subLineColumnNum - 1) + '^'], ['', subLines[subLineIndex + 1]]]));
      }

      return locationStr + printPrefixedLines([// Lines specified like this: ["prefix", "string"],
      ["".concat(lineNum - 1), lines[lineIndex - 1]], ["".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], ["".concat(lineNum + 1), lines[lineIndex + 1]]]);
    }

    function printPrefixedLines(lines) {
      var existingLines = lines.filter(function (_ref) {
        var _ = _ref[0],
            line = _ref[1];
        return line !== undefined;
      });
      var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {
        var prefix = _ref2[0];
        return prefix.length;
      }));
      return existingLines.map(function (_ref3) {
        var prefix = _ref3[0],
            line = _ref3[1];
        return leftPad(padLen, prefix) + (line ? ' | ' + line : ' |');
      }).join('\n');
    }

    function whitespace(len) {
      return Array(len + 1).join(' ');
    }

    function leftPad(len, str) {
      return whitespace(len - str.length) + str;
    }
  }, {
    "./location.mjs": "../node_modules/graphql/language/location.mjs"
  }],
  "../node_modules/graphql/error/GraphQLError.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printError = printError;
    exports.GraphQLError = void 0;

    var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.mjs"));

    var _symbols = require("../polyfills/symbols.mjs");

    var _location = require("../language/location.mjs");

    var _printLocation = require("../language/printLocation.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? new Map() : undefined;

      _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;

        if (typeof Class !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }

        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) return _cache.get(Class);

          _cache.set(Class, Wrapper);
        }

        function Wrapper() {
          return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }

        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return _setPrototypeOf(Wrapper, Class);
      };

      return _wrapNativeSuper(Class);
    }

    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
          return instance;
        };
      }

      return _construct.apply(null, arguments);
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    } // FIXME:
    // flowlint uninitialized-instance-property:off

    /**
     * A GraphQLError describes an Error found during the parse, validate, or
     * execute phases of performing a GraphQL operation. In addition to a message
     * and stack trace, it also includes information about the locations in a
     * GraphQL document and/or execution result that correspond to the Error.
     */


    var GraphQLError = /*#__PURE__*/function (_Error) {
      _inherits(GraphQLError, _Error);

      var _super = _createSuper(GraphQLError);
      /**
       * A message describing the Error for debugging purposes.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       *
       * Note: should be treated as readonly, despite invariant usage.
       */

      /**
       * An array of { line, column } locations within the source GraphQL document
       * which correspond to this error.
       *
       * Errors during validation often contain multiple locations, for example to
       * point out two things with the same name. Errors during execution include a
       * single location, the field which produced the error.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       */

      /**
       * An array describing the JSON-path into the execution response which
       * corresponds to this error. Only included for errors during execution.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       */

      /**
       * An array of GraphQL AST Nodes corresponding to this error.
       */

      /**
       * The source GraphQL document for the first location of this error.
       *
       * Note that if this Error represents more than one node, the source may not
       * represent nodes after the first node.
       */

      /**
       * An array of character offsets within the source GraphQL document
       * which correspond to this error.
       */

      /**
       * The original error thrown from a field resolver during execution.
       */

      /**
       * Extension fields to add to the formatted error.
       */


      function GraphQLError(message, nodes, source, positions, path, originalError, extensions) {
        var _locations2, _source2, _positions2, _extensions2;

        var _this;

        _classCallCheck(this, GraphQLError);

        _this = _super.call(this, message); // Compute list of blame nodes.

        var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.


        var _source = source;

        if (!_source && _nodes) {
          var _nodes$0$loc;

          _source = (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0 ? void 0 : _nodes$0$loc.source;
        }

        var _positions = positions;

        if (!_positions && _nodes) {
          _positions = _nodes.reduce(function (list, node) {
            if (node.loc) {
              list.push(node.loc.start);
            }

            return list;
          }, []);
        }

        if (_positions && _positions.length === 0) {
          _positions = undefined;
        }

        var _locations;

        if (positions && source) {
          _locations = positions.map(function (pos) {
            return (0, _location.getLocation)(source, pos);
          });
        } else if (_nodes) {
          _locations = _nodes.reduce(function (list, node) {
            if (node.loc) {
              list.push((0, _location.getLocation)(node.loc.source, node.loc.start));
            }

            return list;
          }, []);
        }

        var _extensions = extensions;

        if (_extensions == null && originalError != null) {
          var originalExtensions = originalError.extensions;

          if ((0, _isObjectLike.default)(originalExtensions)) {
            _extensions = originalExtensions;
          }
        }

        Object.defineProperties(_assertThisInitialized(_this), {
          name: {
            value: 'GraphQLError'
          },
          message: {
            value: message,
            // By being enumerable, JSON.stringify will include `message` in the
            // resulting output. This ensures that the simplest possible GraphQL
            // service adheres to the spec.
            enumerable: true,
            writable: true
          },
          locations: {
            // Coercing falsy values to undefined ensures they will not be included
            // in JSON.stringify() when not provided.
            value: (_locations2 = _locations) !== null && _locations2 !== void 0 ? _locations2 : undefined,
            // By being enumerable, JSON.stringify will include `locations` in the
            // resulting output. This ensures that the simplest possible GraphQL
            // service adheres to the spec.
            enumerable: _locations != null
          },
          path: {
            // Coercing falsy values to undefined ensures they will not be included
            // in JSON.stringify() when not provided.
            value: path !== null && path !== void 0 ? path : undefined,
            // By being enumerable, JSON.stringify will include `path` in the
            // resulting output. This ensures that the simplest possible GraphQL
            // service adheres to the spec.
            enumerable: path != null
          },
          nodes: {
            value: _nodes !== null && _nodes !== void 0 ? _nodes : undefined
          },
          source: {
            value: (_source2 = _source) !== null && _source2 !== void 0 ? _source2 : undefined
          },
          positions: {
            value: (_positions2 = _positions) !== null && _positions2 !== void 0 ? _positions2 : undefined
          },
          originalError: {
            value: originalError
          },
          extensions: {
            // Coercing falsy values to undefined ensures they will not be included
            // in JSON.stringify() when not provided.
            value: (_extensions2 = _extensions) !== null && _extensions2 !== void 0 ? _extensions2 : undefined,
            // By being enumerable, JSON.stringify will include `path` in the
            // resulting output. This ensures that the simplest possible GraphQL
            // service adheres to the spec.
            enumerable: _extensions != null
          }
        }); // Include (non-enumerable) stack trace.

        if (originalError === null || originalError === void 0 ? void 0 : originalError.stack) {
          Object.defineProperty(_assertThisInitialized(_this), 'stack', {
            value: originalError.stack,
            writable: true,
            configurable: true
          });
          return _possibleConstructorReturn(_this);
        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')


        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError);
        } else {
          Object.defineProperty(_assertThisInitialized(_this), 'stack', {
            value: Error().stack,
            writable: true,
            configurable: true
          });
        }

        return _this;
      }

      _createClass(GraphQLError, [{
        key: "toString",
        value: function toString() {
          return printError(this);
        } // FIXME: workaround to not break chai comparisons, should be remove in v16
        // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

      }, {
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'Object';
        }
      }]);

      return GraphQLError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /**
     * Prints a GraphQLError to a string, representing useful location information
     * about the error's position in the source.
     */


    exports.GraphQLError = GraphQLError;

    function printError(error) {
      var output = error.message;

      if (error.nodes) {
        for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {
          var node = _error$nodes2[_i2];

          if (node.loc) {
            output += '\n\n' + (0, _printLocation.printLocation)(node.loc);
          }
        }
      } else if (error.source && error.locations) {
        for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {
          var location = _error$locations2[_i4];
          output += '\n\n' + (0, _printLocation.printSourceLocation)(error.source, location);
        }
      }

      return output;
    }
  }, {
    "../jsutils/isObjectLike.mjs": "../node_modules/graphql/jsutils/isObjectLike.mjs",
    "../polyfills/symbols.mjs": "../node_modules/graphql/polyfills/symbols.mjs",
    "../language/location.mjs": "../node_modules/graphql/language/location.mjs",
    "../language/printLocation.mjs": "../node_modules/graphql/language/printLocation.mjs"
  }],
  "../node_modules/graphql/error/syntaxError.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.syntaxError = syntaxError;

    var _GraphQLError = require("./GraphQLError.mjs");
    /**
     * Produces a GraphQLError representing a syntax error, containing useful
     * descriptive information about the syntax error's position in the source.
     */


    function syntaxError(source, position, description) {
      return new _GraphQLError.GraphQLError("Syntax Error: ".concat(description), undefined, source, [position]);
    }
  }, {
    "./GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/language/kinds.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Kind = void 0;
    /**
     * The set of allowed kind values for AST nodes.
     */

    var Kind = Object.freeze({
      // Name
      NAME: 'Name',
      // Document
      DOCUMENT: 'Document',
      OPERATION_DEFINITION: 'OperationDefinition',
      VARIABLE_DEFINITION: 'VariableDefinition',
      SELECTION_SET: 'SelectionSet',
      FIELD: 'Field',
      ARGUMENT: 'Argument',
      // Fragments
      FRAGMENT_SPREAD: 'FragmentSpread',
      INLINE_FRAGMENT: 'InlineFragment',
      FRAGMENT_DEFINITION: 'FragmentDefinition',
      // Values
      VARIABLE: 'Variable',
      INT: 'IntValue',
      FLOAT: 'FloatValue',
      STRING: 'StringValue',
      BOOLEAN: 'BooleanValue',
      NULL: 'NullValue',
      ENUM: 'EnumValue',
      LIST: 'ListValue',
      OBJECT: 'ObjectValue',
      OBJECT_FIELD: 'ObjectField',
      // Directives
      DIRECTIVE: 'Directive',
      // Types
      NAMED_TYPE: 'NamedType',
      LIST_TYPE: 'ListType',
      NON_NULL_TYPE: 'NonNullType',
      // Type System Definitions
      SCHEMA_DEFINITION: 'SchemaDefinition',
      OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',
      // Type Definitions
      SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',
      OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',
      FIELD_DEFINITION: 'FieldDefinition',
      INPUT_VALUE_DEFINITION: 'InputValueDefinition',
      INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',
      UNION_TYPE_DEFINITION: 'UnionTypeDefinition',
      ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',
      ENUM_VALUE_DEFINITION: 'EnumValueDefinition',
      INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',
      // Directive Definitions
      DIRECTIVE_DEFINITION: 'DirectiveDefinition',
      // Type System Extensions
      SCHEMA_EXTENSION: 'SchemaExtension',
      // Type Extensions
      SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',
      OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',
      INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',
      UNION_TYPE_EXTENSION: 'UnionTypeExtension',
      ENUM_TYPE_EXTENSION: 'EnumTypeExtension',
      INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'
    });
    /**
     * The enum type representing the possible kind values of AST nodes.
     */

    exports.Kind = Kind;
  }, {}],
  "../node_modules/graphql/jsutils/invariant.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = invariant;

    function invariant(condition, message) {
      var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

      if (!booleanCondition) {
        throw new Error(message != null ? message : 'Unexpected invariant triggered.');
      }
    }
  }, {}],
  "../node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

    var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;
    var _default = nodejsCustomInspectSymbol;
    exports.default = _default;
  }, {}],
  "../node_modules/graphql/jsutils/defineInspect.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = defineInspect;

    var _invariant = _interopRequireDefault(require("./invariant.mjs"));

    var _nodejsCustomInspectSymbol = _interopRequireDefault(require("./nodejsCustomInspectSymbol.mjs"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`
     */


    function defineInspect(classObject) {
      var fn = classObject.prototype.toJSON;
      typeof fn === 'function' || (0, _invariant.default)(0);
      classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')

      if (_nodejsCustomInspectSymbol.default) {
        classObject.prototype[_nodejsCustomInspectSymbol.default] = fn;
      }
    }
  }, {
    "./invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "./nodejsCustomInspectSymbol.mjs": "../node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs"
  }],
  "../node_modules/graphql/language/ast.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isNode = isNode;
    exports.Token = exports.Location = void 0;

    var _defineInspect = _interopRequireDefault(require("../jsutils/defineInspect.mjs"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Contains a range of UTF-8 character offsets and token references that
     * identify the region of the source from which the AST derived.
     */


    var Location = /*#__PURE__*/function () {
      /**
       * The character offset at which this Node begins.
       */

      /**
       * The character offset at which this Node ends.
       */

      /**
       * The Token at which this Node begins.
       */

      /**
       * The Token at which this Node ends.
       */

      /**
       * The Source document the AST represents.
       */
      function Location(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }

      var _proto = Location.prototype;

      _proto.toJSON = function toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      };

      return Location;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


    exports.Location = Location;
    (0, _defineInspect.default)(Location);
    /**
     * Represents a range of characters represented by a lexical token
     * within a Source.
     */

    var Token = /*#__PURE__*/function () {
      /**
       * The kind of Token.
       */

      /**
       * The character offset at which this Node begins.
       */

      /**
       * The character offset at which this Node ends.
       */

      /**
       * The 1-indexed line number on which this Token appears.
       */

      /**
       * The 1-indexed column number at which this Token begins.
       */

      /**
       * For non-punctuation tokens, represents the interpreted value of the token.
       */

      /**
       * Tokens exist as nodes in a double-linked-list amongst all tokens
       * including ignored tokens. <SOF> is always the first node and <EOF>
       * the last.
       */
      function Token(kind, start, end, line, column, prev, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = prev;
        this.next = null;
      }

      var _proto2 = Token.prototype;

      _proto2.toJSON = function toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      };

      return Token;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


    exports.Token = Token;
    (0, _defineInspect.default)(Token);
    /**
     * @internal
     */

    function isNode(maybeNode) {
      return maybeNode != null && typeof maybeNode.kind === 'string';
    }
    /**
     * The list of all possible AST node types.
     */

  }, {
    "../jsutils/defineInspect.mjs": "../node_modules/graphql/jsutils/defineInspect.mjs"
  }],
  "../node_modules/graphql/language/tokenKind.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TokenKind = void 0;
    /**
     * An exported enum describing the different kinds of tokens that the
     * lexer emits.
     */

    var TokenKind = Object.freeze({
      SOF: '<SOF>',
      EOF: '<EOF>',
      BANG: '!',
      DOLLAR: '$',
      AMP: '&',
      PAREN_L: '(',
      PAREN_R: ')',
      SPREAD: '...',
      COLON: ':',
      EQUALS: '=',
      AT: '@',
      BRACKET_L: '[',
      BRACKET_R: ']',
      BRACE_L: '{',
      PIPE: '|',
      BRACE_R: '}',
      NAME: 'Name',
      INT: 'Int',
      FLOAT: 'Float',
      STRING: 'String',
      BLOCK_STRING: 'BlockString',
      COMMENT: 'Comment'
    });
    /**
     * The enum type representing the token kinds values.
     */

    exports.TokenKind = TokenKind;
  }, {}],
  "../node_modules/graphql/jsutils/inspect.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = inspect;

    var _nodejsCustomInspectSymbol = _interopRequireDefault(require("./nodejsCustomInspectSymbol.mjs"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }
    /* eslint-disable flowtype/no-weak-types */


    var MAX_ARRAY_LENGTH = 10;
    var MAX_RECURSIVE_DEPTH = 2;
    /**
     * Used to print values in error messages.
     */

    function inspect(value) {
      return formatValue(value, []);
    }

    function formatValue(value, seenValues) {
      switch (_typeof(value)) {
        case 'string':
          return JSON.stringify(value);

        case 'function':
          return value.name ? "[function ".concat(value.name, "]") : '[function]';

        case 'object':
          if (value === null) {
            return 'null';
          }

          return formatObjectValue(value, seenValues);

        default:
          return String(value);
      }
    }

    function formatObjectValue(value, previouslySeenValues) {
      if (previouslySeenValues.indexOf(value) !== -1) {
        return '[Circular]';
      }

      var seenValues = [].concat(previouslySeenValues, [value]);
      var customInspectFn = getCustomFn(value);

      if (customInspectFn !== undefined) {
        var customValue = customInspectFn.call(value); // check for infinite recursion

        if (customValue !== value) {
          return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);
        }
      } else if (Array.isArray(value)) {
        return formatArray(value, seenValues);
      }

      return formatObject(value, seenValues);
    }

    function formatObject(object, seenValues) {
      var keys = Object.keys(object);

      if (keys.length === 0) {
        return '{}';
      }

      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return '[' + getObjectTag(object) + ']';
      }

      var properties = keys.map(function (key) {
        var value = formatValue(object[key], seenValues);
        return key + ': ' + value;
      });
      return '{ ' + properties.join(', ') + ' }';
    }

    function formatArray(array, seenValues) {
      if (array.length === 0) {
        return '[]';
      }

      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return '[Array]';
      }

      var len = Math.min(MAX_ARRAY_LENGTH, array.length);
      var remaining = array.length - len;
      var items = [];

      for (var i = 0; i < len; ++i) {
        items.push(formatValue(array[i], seenValues));
      }

      if (remaining === 1) {
        items.push('... 1 more item');
      } else if (remaining > 1) {
        items.push("... ".concat(remaining, " more items"));
      }

      return '[' + items.join(', ') + ']';
    }

    function getCustomFn(object) {
      var customInspectFn = object[String(_nodejsCustomInspectSymbol.default)];

      if (typeof customInspectFn === 'function') {
        return customInspectFn;
      }

      if (typeof object.inspect === 'function') {
        return object.inspect;
      }
    }

    function getObjectTag(object) {
      var tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');

      if (tag === 'Object' && typeof object.constructor === 'function') {
        var name = object.constructor.name;

        if (typeof name === 'string' && name !== '') {
          return name;
        }
      }

      return tag;
    }
  }, {
    "./nodejsCustomInspectSymbol.mjs": "../node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs"
  }],
  "../node_modules/graphql/jsutils/devAssert.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = devAssert;

    function devAssert(condition, message) {
      var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

      if (!booleanCondition) {
        throw new Error(message);
      }
    }
  }, {}],
  "../node_modules/graphql/jsutils/instanceOf.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    /**
     * A replacement for instanceof which includes an error warning when multi-realm
     * constructors are detected.
     */
    // See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
    // See: https://webpack.js.org/guides/production/

    var _default = "development" === 'production' ? // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
    // eslint-disable-next-line no-shadow
    function instanceOf(value, constructor) {
      return value instanceof constructor;
    } : // eslint-disable-next-line no-shadow
    function instanceOf(value, constructor) {
      if (value instanceof constructor) {
        return true;
      }

      if (value) {
        var valueClass = value.constructor;
        var className = constructor.name;

        if (className && valueClass && valueClass.name === className) {
          throw new Error("Cannot use ".concat(className, " \"").concat(value, "\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results."));
        }
      }

      return false;
    };

    exports.default = _default;
  }, {}],
  "../node_modules/graphql/language/source.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isSource = isSource;
    exports.Source = void 0;

    var _symbols = require("../polyfills/symbols.mjs");

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.mjs"));

    var _instanceOf = _interopRequireDefault(require("../jsutils/instanceOf.mjs"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    /**
     * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are
     * optional, but they are useful for clients who store GraphQL documents in source files.
     * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might
     * be useful for `name` to be `"Foo.graphql"` and location to be `{ line: 40, column: 1 }`.
     * The `line` and `column` properties in `locationOffset` are 1-indexed.
     */


    var Source = /*#__PURE__*/function () {
      function Source(body) {
        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';
        var locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          line: 1,
          column: 1
        };
        typeof body === 'string' || (0, _devAssert.default)(0, "Body must be a string. Received: ".concat((0, _inspect.default)(body), "."));
        this.body = body;
        this.name = name;
        this.locationOffset = locationOffset;
        this.locationOffset.line > 0 || (0, _devAssert.default)(0, 'line in locationOffset is 1-indexed and must be positive.');
        this.locationOffset.column > 0 || (0, _devAssert.default)(0, 'column in locationOffset is 1-indexed and must be positive.');
      } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet


      _createClass(Source, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'Source';
        }
      }]);

      return Source;
    }();
    /**
     * Test if the given value is a Source object.
     *
     * @internal
     */
    // eslint-disable-next-line no-redeclare


    exports.Source = Source;

    function isSource(source) {
      return (0, _instanceOf.default)(source, Source);
    }
  }, {
    "../polyfills/symbols.mjs": "../node_modules/graphql/polyfills/symbols.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/devAssert.mjs": "../node_modules/graphql/jsutils/devAssert.mjs",
    "../jsutils/instanceOf.mjs": "../node_modules/graphql/jsutils/instanceOf.mjs"
  }],
  "../node_modules/graphql/language/directiveLocation.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DirectiveLocation = void 0;
    /**
     * The set of allowed directive location values.
     */

    var DirectiveLocation = Object.freeze({
      // Request Definitions
      QUERY: 'QUERY',
      MUTATION: 'MUTATION',
      SUBSCRIPTION: 'SUBSCRIPTION',
      FIELD: 'FIELD',
      FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',
      FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',
      INLINE_FRAGMENT: 'INLINE_FRAGMENT',
      VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',
      // Type System Definitions
      SCHEMA: 'SCHEMA',
      SCALAR: 'SCALAR',
      OBJECT: 'OBJECT',
      FIELD_DEFINITION: 'FIELD_DEFINITION',
      ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',
      INTERFACE: 'INTERFACE',
      UNION: 'UNION',
      ENUM: 'ENUM',
      ENUM_VALUE: 'ENUM_VALUE',
      INPUT_OBJECT: 'INPUT_OBJECT',
      INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'
    });
    /**
     * The enum type representing the directive location values.
     */

    exports.DirectiveLocation = DirectiveLocation;
  }, {}],
  "../node_modules/graphql/language/blockString.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.dedentBlockStringValue = dedentBlockStringValue;
    exports.getBlockStringIndentation = getBlockStringIndentation;
    exports.printBlockString = printBlockString;
    /**
     * Produces the value of a block string from its parsed raw value, similar to
     * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
     *
     * This implements the GraphQL spec's BlockStringValue() static algorithm.
     *
     * @internal
     */

    function dedentBlockStringValue(rawString) {
      // Expand a block string's raw value into independent lines.
      var lines = rawString.split(/\r\n|[\n\r]/g); // Remove common indentation from all lines but first.

      var commonIndent = getBlockStringIndentation(rawString);

      if (commonIndent !== 0) {
        for (var i = 1; i < lines.length; i++) {
          lines[i] = lines[i].slice(commonIndent);
        }
      } // Remove leading and trailing blank lines.


      var startLine = 0;

      while (startLine < lines.length && isBlank(lines[startLine])) {
        ++startLine;
      }

      var endLine = lines.length;

      while (endLine > startLine && isBlank(lines[endLine - 1])) {
        --endLine;
      } // Return a string of the lines joined with U+000A.


      return lines.slice(startLine, endLine).join('\n');
    }

    function isBlank(str) {
      for (var i = 0; i < str.length; ++i) {
        if (str[i] !== ' ' && str[i] !== '\t') {
          return false;
        }
      }

      return true;
    }
    /**
     * @internal
     */


    function getBlockStringIndentation(value) {
      var _commonIndent;

      var isFirstLine = true;
      var isEmptyLine = true;
      var indent = 0;
      var commonIndent = null;

      for (var i = 0; i < value.length; ++i) {
        switch (value.charCodeAt(i)) {
          case 13:
            //  \r
            if (value.charCodeAt(i + 1) === 10) {
              ++i; // skip \r\n as one symbol
            }

          // falls through

          case 10:
            //  \n
            isFirstLine = false;
            isEmptyLine = true;
            indent = 0;
            break;

          case 9: //   \t

          case 32:
            //  <space>
            ++indent;
            break;

          default:
            if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {
              commonIndent = indent;
            }

            isEmptyLine = false;
        }
      }

      return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;
    }
    /**
     * Print a block string in the indented block form by adding a leading and
     * trailing blank line. However, if a block string starts with whitespace and is
     * a single-line, adding a leading blank line would strip that whitespace.
     *
     * @internal
     */


    function printBlockString(value) {
      var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var isSingleLine = value.indexOf('\n') === -1;
      var hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
      var hasTrailingQuote = value[value.length - 1] === '"';
      var hasTrailingSlash = value[value.length - 1] === '\\';
      var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
      var result = ''; // Format a multi-line block quote to account for leading space.

      if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
        result += '\n' + indentation;
      }

      result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;

      if (printAsMultipleLines) {
        result += '\n';
      }

      return '"""' + result.replace(/"""/g, '\\"""') + '"""';
    }
  }, {}],
  "../node_modules/graphql/language/lexer.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isPunctuatorTokenKind = isPunctuatorTokenKind;
    exports.Lexer = void 0;

    var _syntaxError = require("../error/syntaxError.mjs");

    var _ast = require("./ast.mjs");

    var _tokenKind = require("./tokenKind.mjs");

    var _blockString = require("./blockString.mjs");
    /**
     * Given a Source object, creates a Lexer for that source.
     * A Lexer is a stateful stream generator in that every time
     * it is advanced, it returns the next token in the Source. Assuming the
     * source lexes, the final Token emitted by the lexer will be of kind
     * EOF, after which the lexer will repeatedly return the same EOF token
     * whenever called.
     */


    var Lexer = /*#__PURE__*/function () {
      /**
       * The previously focused non-ignored token.
       */

      /**
       * The currently focused non-ignored token.
       */

      /**
       * The (1-indexed) line containing the current token.
       */

      /**
       * The character offset at which the current line begins.
       */
      function Lexer(source) {
        var startOfFileToken = new _ast.Token(_tokenKind.TokenKind.SOF, 0, 0, 0, 0, null);
        this.source = source;
        this.lastToken = startOfFileToken;
        this.token = startOfFileToken;
        this.line = 1;
        this.lineStart = 0;
      }
      /**
       * Advances the token stream to the next non-ignored token.
       */


      var _proto = Lexer.prototype;

      _proto.advance = function advance() {
        this.lastToken = this.token;
        var token = this.token = this.lookahead();
        return token;
      }
      /**
       * Looks ahead and returns the next non-ignored token, but does not change
       * the state of Lexer.
       */
      ;

      _proto.lookahead = function lookahead() {
        var token = this.token;

        if (token.kind !== _tokenKind.TokenKind.EOF) {
          do {
            var _token$next; // Note: next is only mutable during parsing, so we cast to allow this.


            token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);
          } while (token.kind === _tokenKind.TokenKind.COMMENT);
        }

        return token;
      };

      return Lexer;
    }();
    /**
     * @internal
     */


    exports.Lexer = Lexer;

    function isPunctuatorTokenKind(kind) {
      return kind === _tokenKind.TokenKind.BANG || kind === _tokenKind.TokenKind.DOLLAR || kind === _tokenKind.TokenKind.AMP || kind === _tokenKind.TokenKind.PAREN_L || kind === _tokenKind.TokenKind.PAREN_R || kind === _tokenKind.TokenKind.SPREAD || kind === _tokenKind.TokenKind.COLON || kind === _tokenKind.TokenKind.EQUALS || kind === _tokenKind.TokenKind.AT || kind === _tokenKind.TokenKind.BRACKET_L || kind === _tokenKind.TokenKind.BRACKET_R || kind === _tokenKind.TokenKind.BRACE_L || kind === _tokenKind.TokenKind.PIPE || kind === _tokenKind.TokenKind.BRACE_R;
    }

    function printCharCode(code) {
      return (// NaN/undefined represents access beyond the end of the file.
        isNaN(code) ? _tokenKind.TokenKind.EOF : // Trust JSON for ASCII.
        code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.
        "\"\\u".concat(('00' + code.toString(16).toUpperCase()).slice(-4), "\"")
      );
    }
    /**
     * Gets the next token from the source starting at the given position.
     *
     * This skips over whitespace until it finds the next lexable token, then lexes
     * punctuators immediately or calls the appropriate helper function for more
     * complicated tokens.
     */


    function readToken(lexer, prev) {
      var source = lexer.source;
      var body = source.body;
      var bodyLength = body.length;
      var pos = prev.end;

      while (pos < bodyLength) {
        var code = body.charCodeAt(pos);
        var _line = lexer.line;

        var _col = 1 + pos - lexer.lineStart; // SourceCharacter


        switch (code) {
          case 0xfeff: // <BOM>

          case 9: //   \t

          case 32: //  <space>

          case 44:
            //  ,
            ++pos;
            continue;

          case 10:
            //  \n
            ++pos;
            ++lexer.line;
            lexer.lineStart = pos;
            continue;

          case 13:
            //  \r
            if (body.charCodeAt(pos + 1) === 10) {
              pos += 2;
            } else {
              ++pos;
            }

            ++lexer.line;
            lexer.lineStart = pos;
            continue;

          case 33:
            //  !
            return new _ast.Token(_tokenKind.TokenKind.BANG, pos, pos + 1, _line, _col, prev);

          case 35:
            //  #
            return readComment(source, pos, _line, _col, prev);

          case 36:
            //  $
            return new _ast.Token(_tokenKind.TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);

          case 38:
            //  &
            return new _ast.Token(_tokenKind.TokenKind.AMP, pos, pos + 1, _line, _col, prev);

          case 40:
            //  (
            return new _ast.Token(_tokenKind.TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);

          case 41:
            //  )
            return new _ast.Token(_tokenKind.TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);

          case 46:
            //  .
            if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {
              return new _ast.Token(_tokenKind.TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);
            }

            break;

          case 58:
            //  :
            return new _ast.Token(_tokenKind.TokenKind.COLON, pos, pos + 1, _line, _col, prev);

          case 61:
            //  =
            return new _ast.Token(_tokenKind.TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);

          case 64:
            //  @
            return new _ast.Token(_tokenKind.TokenKind.AT, pos, pos + 1, _line, _col, prev);

          case 91:
            //  [
            return new _ast.Token(_tokenKind.TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);

          case 93:
            //  ]
            return new _ast.Token(_tokenKind.TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);

          case 123:
            // {
            return new _ast.Token(_tokenKind.TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);

          case 124:
            // |
            return new _ast.Token(_tokenKind.TokenKind.PIPE, pos, pos + 1, _line, _col, prev);

          case 125:
            // }
            return new _ast.Token(_tokenKind.TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);

          case 34:
            //  "
            if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {
              return readBlockString(source, pos, _line, _col, prev, lexer);
            }

            return readString(source, pos, _line, _col, prev);

          case 45: //  -

          case 48: //  0

          case 49: //  1

          case 50: //  2

          case 51: //  3

          case 52: //  4

          case 53: //  5

          case 54: //  6

          case 55: //  7

          case 56: //  8

          case 57:
            //  9
            return readNumber(source, pos, code, _line, _col, prev);

          case 65: //  A

          case 66: //  B

          case 67: //  C

          case 68: //  D

          case 69: //  E

          case 70: //  F

          case 71: //  G

          case 72: //  H

          case 73: //  I

          case 74: //  J

          case 75: //  K

          case 76: //  L

          case 77: //  M

          case 78: //  N

          case 79: //  O

          case 80: //  P

          case 81: //  Q

          case 82: //  R

          case 83: //  S

          case 84: //  T

          case 85: //  U

          case 86: //  V

          case 87: //  W

          case 88: //  X

          case 89: //  Y

          case 90: //  Z

          case 95: //  _

          case 97: //  a

          case 98: //  b

          case 99: //  c

          case 100: // d

          case 101: // e

          case 102: // f

          case 103: // g

          case 104: // h

          case 105: // i

          case 106: // j

          case 107: // k

          case 108: // l

          case 109: // m

          case 110: // n

          case 111: // o

          case 112: // p

          case 113: // q

          case 114: // r

          case 115: // s

          case 116: // t

          case 117: // u

          case 118: // v

          case 119: // w

          case 120: // x

          case 121: // y

          case 122:
            // z
            return readName(source, pos, _line, _col, prev);
        }

        throw (0, _syntaxError.syntaxError)(source, pos, unexpectedCharacterMessage(code));
      }

      var line = lexer.line;
      var col = 1 + pos - lexer.lineStart;
      return new _ast.Token(_tokenKind.TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
    }
    /**
     * Report a message that an unexpected character was encountered.
     */


    function unexpectedCharacterMessage(code) {
      if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
        return "Cannot contain the invalid character ".concat(printCharCode(code), ".");
      }

      if (code === 39) {
        // '
        return 'Unexpected single quote character (\'), did you mean to use a double quote (")?';
      }

      return "Cannot parse the unexpected character ".concat(printCharCode(code), ".");
    }
    /**
     * Reads a comment token from the source file.
     *
     * #[\u0009\u0020-\uFFFF]*
     */


    function readComment(source, start, line, col, prev) {
      var body = source.body;
      var code;
      var position = start;

      do {
        code = body.charCodeAt(++position);
      } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator
      code > 0x001f || code === 0x0009));

      return new _ast.Token(_tokenKind.TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));
    }
    /**
     * Reads a number token from the source file, either a float
     * or an int depending on whether a decimal point appears.
     *
     * Int:   -?(0|[1-9][0-9]*)
     * Float: -?(0|[1-9][0-9]*)(\.[0-9]+)?((E|e)(+|-)?[0-9]+)?
     */


    function readNumber(source, start, firstCode, line, col, prev) {
      var body = source.body;
      var code = firstCode;
      var position = start;
      var isFloat = false;

      if (code === 45) {
        // -
        code = body.charCodeAt(++position);
      }

      if (code === 48) {
        // 0
        code = body.charCodeAt(++position);

        if (code >= 48 && code <= 57) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code), "."));
        }
      } else {
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      }

      if (code === 46) {
        // .
        isFloat = true;
        code = body.charCodeAt(++position);
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      }

      if (code === 69 || code === 101) {
        // E e
        isFloat = true;
        code = body.charCodeAt(++position);

        if (code === 43 || code === 45) {
          // + -
          code = body.charCodeAt(++position);
        }

        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      } // Numbers cannot be followed by . or NameStart


      if (code === 46 || isNameStart(code)) {
        throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
      }

      return new _ast.Token(isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT, start, position, line, col, prev, body.slice(start, position));
    }
    /**
     * Returns the new position in the source after reading digits.
     */


    function readDigits(source, start, firstCode) {
      var body = source.body;
      var position = start;
      var code = firstCode;

      if (code >= 48 && code <= 57) {
        // 0 - 9
        do {
          code = body.charCodeAt(++position);
        } while (code >= 48 && code <= 57); // 0 - 9


        return position;
      }

      throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
    }
    /**
     * Reads a string token from the source file.
     *
     * "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
     */


    function readString(source, start, line, col, prev) {
      var body = source.body;
      var position = start + 1;
      var chunkStart = position;
      var code = 0;
      var value = '';

      while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator
      code !== 0x000a && code !== 0x000d) {
        // Closing Quote (")
        if (code === 34) {
          value += body.slice(chunkStart, position);
          return new _ast.Token(_tokenKind.TokenKind.STRING, start, position + 1, line, col, prev, value);
        } // SourceCharacter


        if (code < 0x0020 && code !== 0x0009) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        }

        ++position;

        if (code === 92) {
          // \
          value += body.slice(chunkStart, position - 1);
          code = body.charCodeAt(position);

          switch (code) {
            case 34:
              value += '"';
              break;

            case 47:
              value += '/';
              break;

            case 92:
              value += '\\';
              break;

            case 98:
              value += '\b';
              break;

            case 102:
              value += '\f';
              break;

            case 110:
              value += '\n';
              break;

            case 114:
              value += '\r';
              break;

            case 116:
              value += '\t';
              break;

            case 117:
              {
                // uXXXX
                var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));

                if (charCode < 0) {
                  var invalidSequence = body.slice(position + 1, position + 5);
                  throw (0, _syntaxError.syntaxError)(source, position, "Invalid character escape sequence: \\u".concat(invalidSequence, "."));
                }

                value += String.fromCharCode(charCode);
                position += 4;
                break;
              }

            default:
              throw (0, _syntaxError.syntaxError)(source, position, "Invalid character escape sequence: \\".concat(String.fromCharCode(code), "."));
          }

          ++position;
          chunkStart = position;
        }
      }

      throw (0, _syntaxError.syntaxError)(source, position, 'Unterminated string.');
    }
    /**
     * Reads a block string token from the source file.
     *
     * """("?"?(\\"""|\\(?!=""")|[^"\\]))*"""
     */


    function readBlockString(source, start, line, col, prev, lexer) {
      var body = source.body;
      var position = start + 3;
      var chunkStart = position;
      var code = 0;
      var rawValue = '';

      while (position < body.length && !isNaN(code = body.charCodeAt(position))) {
        // Closing Triple-Quote (""")
        if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
          rawValue += body.slice(chunkStart, position);
          return new _ast.Token(_tokenKind.TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockString.dedentBlockStringValue)(rawValue));
        } // SourceCharacter


        if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        }

        if (code === 10) {
          // new line
          ++position;
          ++lexer.line;
          lexer.lineStart = position;
        } else if (code === 13) {
          // carriage return
          if (body.charCodeAt(position + 1) === 10) {
            position += 2;
          } else {
            ++position;
          }

          ++lexer.line;
          lexer.lineStart = position;
        } else if ( // Escape Triple-Quote (\""")
        code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
          rawValue += body.slice(chunkStart, position) + '"""';
          position += 4;
          chunkStart = position;
        } else {
          ++position;
        }
      }

      throw (0, _syntaxError.syntaxError)(source, position, 'Unterminated string.');
    }
    /**
     * Converts four hexadecimal chars to the integer that the
     * string represents. For example, uniCharCode('0','0','0','f')
     * will return 15, and uniCharCode('0','0','f','f') returns 255.
     *
     * Returns a negative number on error, if a char was invalid.
     *
     * This is implemented by noting that char2hex() returns -1 on error,
     * which means the result of ORing the char2hex() will also be negative.
     */


    function uniCharCode(a, b, c, d) {
      return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
    }
    /**
     * Converts a hex character to its integer value.
     * '0' becomes 0, '9' becomes 9
     * 'A' becomes 10, 'F' becomes 15
     * 'a' becomes 10, 'f' becomes 15
     *
     * Returns -1 on error.
     */


    function char2hex(a) {
      return a >= 48 && a <= 57 ? a - 48 // 0-9
      : a >= 65 && a <= 70 ? a - 55 // A-F
      : a >= 97 && a <= 102 ? a - 87 // a-f
      : -1;
    }
    /**
     * Reads an alphanumeric + underscore name from the source.
     *
     * [_A-Za-z][_0-9A-Za-z]*
     */


    function readName(source, start, line, col, prev) {
      var body = source.body;
      var bodyLength = body.length;
      var position = start + 1;
      var code = 0;

      while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _
      code >= 48 && code <= 57 || // 0-9
      code >= 65 && code <= 90 || // A-Z
      code >= 97 && code <= 122) // a-z
      ) {
        ++position;
      }

      return new _ast.Token(_tokenKind.TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));
    } // _ A-Z a-z


    function isNameStart(code) {
      return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;
    }
  }, {
    "../error/syntaxError.mjs": "../node_modules/graphql/error/syntaxError.mjs",
    "./ast.mjs": "../node_modules/graphql/language/ast.mjs",
    "./tokenKind.mjs": "../node_modules/graphql/language/tokenKind.mjs",
    "./blockString.mjs": "../node_modules/graphql/language/blockString.mjs"
  }],
  "../node_modules/graphql/language/parser.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parse = parse;
    exports.parseValue = parseValue;
    exports.parseType = parseType;
    exports.Parser = void 0;

    var _syntaxError = require("../error/syntaxError.mjs");

    var _kinds = require("./kinds.mjs");

    var _ast = require("./ast.mjs");

    var _tokenKind = require("./tokenKind.mjs");

    var _source = require("./source.mjs");

    var _directiveLocation = require("./directiveLocation.mjs");

    var _lexer = require("./lexer.mjs");
    /**
     * Configuration options to control parser behavior
     */

    /**
     * Given a GraphQL source, parses it into a Document.
     * Throws GraphQLError if a syntax error is encountered.
     */


    function parse(source, options) {
      var parser = new Parser(source, options);
      return parser.parseDocument();
    }
    /**
     * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
     * that value.
     * Throws GraphQLError if a syntax error is encountered.
     *
     * This is useful within tools that operate upon GraphQL Values directly and
     * in isolation of complete GraphQL documents.
     *
     * Consider providing the results to the utility function: valueFromAST().
     */


    function parseValue(source, options) {
      var parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      var value = parser.parseValueLiteral(false);
      parser.expectToken(_tokenKind.TokenKind.EOF);
      return value;
    }
    /**
     * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
     * that type.
     * Throws GraphQLError if a syntax error is encountered.
     *
     * This is useful within tools that operate upon GraphQL Types directly and
     * in isolation of complete GraphQL documents.
     *
     * Consider providing the results to the utility function: typeFromAST().
     */


    function parseType(source, options) {
      var parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      var type = parser.parseTypeReference();
      parser.expectToken(_tokenKind.TokenKind.EOF);
      return type;
    }
    /**
     * This class is exported only to assist people in implementing their own parsers
     * without duplicating too much code and should be used only as last resort for cases
     * such as experimental syntax or if certain features could not be contributed upstream.
     *
     * It is still part of the internal API and is versioned, so any changes to it are never
     * considered breaking changes. If you still need to support multiple versions of the
     * library, please use the `versionInfo` variable for version detection.
     *
     * @internal
     */


    var Parser = /*#__PURE__*/function () {
      function Parser(source, options) {
        var sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
        this._lexer = new _lexer.Lexer(sourceObj);
        this._options = options;
      }
      /**
       * Converts a name lex token into a name parse node.
       */


      var _proto = Parser.prototype;

      _proto.parseName = function parseName() {
        var token = this.expectToken(_tokenKind.TokenKind.NAME);
        return {
          kind: _kinds.Kind.NAME,
          value: token.value,
          loc: this.loc(token)
        };
      } // Implements the parsing rules in the Document section.

      /**
       * Document : Definition+
       */
      ;

      _proto.parseDocument = function parseDocument() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.DOCUMENT,
          definitions: this.many(_tokenKind.TokenKind.SOF, this.parseDefinition, _tokenKind.TokenKind.EOF),
          loc: this.loc(start)
        };
      }
      /**
       * Definition :
       *   - ExecutableDefinition
       *   - TypeSystemDefinition
       *   - TypeSystemExtension
       *
       * ExecutableDefinition :
       *   - OperationDefinition
       *   - FragmentDefinition
       */
      ;

      _proto.parseDefinition = function parseDefinition() {
        if (this.peek(_tokenKind.TokenKind.NAME)) {
          switch (this._lexer.token.value) {
            case 'query':
            case 'mutation':
            case 'subscription':
              return this.parseOperationDefinition();

            case 'fragment':
              return this.parseFragmentDefinition();

            case 'schema':
            case 'scalar':
            case 'type':
            case 'interface':
            case 'union':
            case 'enum':
            case 'input':
            case 'directive':
              return this.parseTypeSystemDefinition();

            case 'extend':
              return this.parseTypeSystemExtension();
          }
        } else if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
          return this.parseOperationDefinition();
        } else if (this.peekDescription()) {
          return this.parseTypeSystemDefinition();
        }

        throw this.unexpected();
      } // Implements the parsing rules in the Operations section.

      /**
       * OperationDefinition :
       *  - SelectionSet
       *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
       */
      ;

      _proto.parseOperationDefinition = function parseOperationDefinition() {
        var start = this._lexer.token;

        if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
          return {
            kind: _kinds.Kind.OPERATION_DEFINITION,
            operation: 'query',
            name: undefined,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }

        var operation = this.parseOperationType();
        var name;

        if (this.peek(_tokenKind.TokenKind.NAME)) {
          name = this.parseName();
        }

        return {
          kind: _kinds.Kind.OPERATION_DEFINITION,
          operation: operation,
          name: name,
          variableDefinitions: this.parseVariableDefinitions(),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      }
      /**
       * OperationType : one of query mutation subscription
       */
      ;

      _proto.parseOperationType = function parseOperationType() {
        var operationToken = this.expectToken(_tokenKind.TokenKind.NAME);

        switch (operationToken.value) {
          case 'query':
            return 'query';

          case 'mutation':
            return 'mutation';

          case 'subscription':
            return 'subscription';
        }

        throw this.unexpected(operationToken);
      }
      /**
       * VariableDefinitions : ( VariableDefinition+ )
       */
      ;

      _proto.parseVariableDefinitions = function parseVariableDefinitions() {
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKind.TokenKind.PAREN_R);
      }
      /**
       * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
       */
      ;

      _proto.parseVariableDefinition = function parseVariableDefinition() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,
          directives: this.parseDirectives(true),
          loc: this.loc(start)
        };
      }
      /**
       * Variable : $ Name
       */
      ;

      _proto.parseVariable = function parseVariable() {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.DOLLAR);
        return {
          kind: _kinds.Kind.VARIABLE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      }
      /**
       * SelectionSet : { Selection+ }
       */
      ;

      _proto.parseSelectionSet = function parseSelectionSet() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.SELECTION_SET,
          selections: this.many(_tokenKind.TokenKind.BRACE_L, this.parseSelection, _tokenKind.TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      }
      /**
       * Selection :
       *   - Field
       *   - FragmentSpread
       *   - InlineFragment
       */
      ;

      _proto.parseSelection = function parseSelection() {
        return this.peek(_tokenKind.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
      }
      /**
       * Field : Alias? Name Arguments? Directives? SelectionSet?
       *
       * Alias : Name :
       */
      ;

      _proto.parseField = function parseField() {
        var start = this._lexer.token;
        var nameOrAlias = this.parseName();
        var alias;
        var name;

        if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {
          alias = nameOrAlias;
          name = this.parseName();
        } else {
          name = nameOrAlias;
        }

        return {
          kind: _kinds.Kind.FIELD,
          alias: alias,
          name: name,
          arguments: this.parseArguments(false),
          directives: this.parseDirectives(false),
          selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,
          loc: this.loc(start)
        };
      }
      /**
       * Arguments[Const] : ( Argument[?Const]+ )
       */
      ;

      _proto.parseArguments = function parseArguments(isConst) {
        var item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, item, _tokenKind.TokenKind.PAREN_R);
      }
      /**
       * Argument[Const] : Name : Value[?Const]
       */
      ;

      _proto.parseArgument = function parseArgument() {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        return {
          kind: _kinds.Kind.ARGUMENT,
          name: name,
          value: this.parseValueLiteral(false),
          loc: this.loc(start)
        };
      };

      _proto.parseConstArgument = function parseConstArgument() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.ARGUMENT,
          name: this.parseName(),
          value: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseValueLiteral(true)),
          loc: this.loc(start)
        };
      } // Implements the parsing rules in the Fragments section.

      /**
       * Corresponds to both FragmentSpread and InlineFragment in the spec.
       *
       * FragmentSpread : ... FragmentName Directives?
       *
       * InlineFragment : ... TypeCondition? Directives? SelectionSet
       */
      ;

      _proto.parseFragment = function parseFragment() {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.SPREAD);
        var hasTypeCondition = this.expectOptionalKeyword('on');

        if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {
          return {
            kind: _kinds.Kind.FRAGMENT_SPREAD,
            name: this.parseFragmentName(),
            directives: this.parseDirectives(false),
            loc: this.loc(start)
          };
        }

        return {
          kind: _kinds.Kind.INLINE_FRAGMENT,
          typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      }
      /**
       * FragmentDefinition :
       *   - fragment FragmentName on TypeCondition Directives? SelectionSet
       *
       * TypeCondition : NamedType
       */
      ;

      _proto.parseFragmentDefinition = function parseFragmentDefinition() {
        var _this$_options;

        var start = this._lexer.token;
        this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes
        // the grammar of FragmentDefinition:
        //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

        if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {
          return {
            kind: _kinds.Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            variableDefinitions: this.parseVariableDefinitions(),
            typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }

        return {
          kind: _kinds.Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      }
      /**
       * FragmentName : Name but not `on`
       */
      ;

      _proto.parseFragmentName = function parseFragmentName() {
        if (this._lexer.token.value === 'on') {
          throw this.unexpected();
        }

        return this.parseName();
      } // Implements the parsing rules in the Values section.

      /**
       * Value[Const] :
       *   - [~Const] Variable
       *   - IntValue
       *   - FloatValue
       *   - StringValue
       *   - BooleanValue
       *   - NullValue
       *   - EnumValue
       *   - ListValue[?Const]
       *   - ObjectValue[?Const]
       *
       * BooleanValue : one of `true` `false`
       *
       * NullValue : `null`
       *
       * EnumValue : Name but not `true`, `false` or `null`
       */
      ;

      _proto.parseValueLiteral = function parseValueLiteral(isConst) {
        var token = this._lexer.token;

        switch (token.kind) {
          case _tokenKind.TokenKind.BRACKET_L:
            return this.parseList(isConst);

          case _tokenKind.TokenKind.BRACE_L:
            return this.parseObject(isConst);

          case _tokenKind.TokenKind.INT:
            this._lexer.advance();

            return {
              kind: _kinds.Kind.INT,
              value: token.value,
              loc: this.loc(token)
            };

          case _tokenKind.TokenKind.FLOAT:
            this._lexer.advance();

            return {
              kind: _kinds.Kind.FLOAT,
              value: token.value,
              loc: this.loc(token)
            };

          case _tokenKind.TokenKind.STRING:
          case _tokenKind.TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();

          case _tokenKind.TokenKind.NAME:
            this._lexer.advance();

            switch (token.value) {
              case 'true':
                return {
                  kind: _kinds.Kind.BOOLEAN,
                  value: true,
                  loc: this.loc(token)
                };

              case 'false':
                return {
                  kind: _kinds.Kind.BOOLEAN,
                  value: false,
                  loc: this.loc(token)
                };

              case 'null':
                return {
                  kind: _kinds.Kind.NULL,
                  loc: this.loc(token)
                };

              default:
                return {
                  kind: _kinds.Kind.ENUM,
                  value: token.value,
                  loc: this.loc(token)
                };
            }

          case _tokenKind.TokenKind.DOLLAR:
            if (!isConst) {
              return this.parseVariable();
            }

            break;
        }

        throw this.unexpected();
      };

      _proto.parseStringLiteral = function parseStringLiteral() {
        var token = this._lexer.token;

        this._lexer.advance();

        return {
          kind: _kinds.Kind.STRING,
          value: token.value,
          block: token.kind === _tokenKind.TokenKind.BLOCK_STRING,
          loc: this.loc(token)
        };
      }
      /**
       * ListValue[Const] :
       *   - [ ]
       *   - [ Value[?Const]+ ]
       */
      ;

      _proto.parseList = function parseList(isConst) {
        var _this = this;

        var start = this._lexer.token;

        var item = function item() {
          return _this.parseValueLiteral(isConst);
        };

        return {
          kind: _kinds.Kind.LIST,
          values: this.any(_tokenKind.TokenKind.BRACKET_L, item, _tokenKind.TokenKind.BRACKET_R),
          loc: this.loc(start)
        };
      }
      /**
       * ObjectValue[Const] :
       *   - { }
       *   - { ObjectField[?Const]+ }
       */
      ;

      _proto.parseObject = function parseObject(isConst) {
        var _this2 = this;

        var start = this._lexer.token;

        var item = function item() {
          return _this2.parseObjectField(isConst);
        };

        return {
          kind: _kinds.Kind.OBJECT,
          fields: this.any(_tokenKind.TokenKind.BRACE_L, item, _tokenKind.TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      }
      /**
       * ObjectField[Const] : Name : Value[?Const]
       */
      ;

      _proto.parseObjectField = function parseObjectField(isConst) {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        return {
          kind: _kinds.Kind.OBJECT_FIELD,
          name: name,
          value: this.parseValueLiteral(isConst),
          loc: this.loc(start)
        };
      } // Implements the parsing rules in the Directives section.

      /**
       * Directives[Const] : Directive[?Const]+
       */
      ;

      _proto.parseDirectives = function parseDirectives(isConst) {
        var directives = [];

        while (this.peek(_tokenKind.TokenKind.AT)) {
          directives.push(this.parseDirective(isConst));
        }

        return directives;
      }
      /**
       * Directive[Const] : @ Name Arguments[?Const]?
       */
      ;

      _proto.parseDirective = function parseDirective(isConst) {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.AT);
        return {
          kind: _kinds.Kind.DIRECTIVE,
          name: this.parseName(),
          arguments: this.parseArguments(isConst),
          loc: this.loc(start)
        };
      } // Implements the parsing rules in the Types section.

      /**
       * Type :
       *   - NamedType
       *   - ListType
       *   - NonNullType
       */
      ;

      _proto.parseTypeReference = function parseTypeReference() {
        var start = this._lexer.token;
        var type;

        if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {
          type = this.parseTypeReference();
          this.expectToken(_tokenKind.TokenKind.BRACKET_R);
          type = {
            kind: _kinds.Kind.LIST_TYPE,
            type: type,
            loc: this.loc(start)
          };
        } else {
          type = this.parseNamedType();
        }

        if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {
          return {
            kind: _kinds.Kind.NON_NULL_TYPE,
            type: type,
            loc: this.loc(start)
          };
        }

        return type;
      }
      /**
       * NamedType : Name
       */
      ;

      _proto.parseNamedType = function parseNamedType() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.NAMED_TYPE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      } // Implements the parsing rules in the Type Definition section.

      /**
       * TypeSystemDefinition :
       *   - SchemaDefinition
       *   - TypeDefinition
       *   - DirectiveDefinition
       *
       * TypeDefinition :
       *   - ScalarTypeDefinition
       *   - ObjectTypeDefinition
       *   - InterfaceTypeDefinition
       *   - UnionTypeDefinition
       *   - EnumTypeDefinition
       *   - InputObjectTypeDefinition
       */
      ;

      _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
        // Many definitions begin with a description and require a lookahead.
        var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;

        if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
          switch (keywordToken.value) {
            case 'schema':
              return this.parseSchemaDefinition();

            case 'scalar':
              return this.parseScalarTypeDefinition();

            case 'type':
              return this.parseObjectTypeDefinition();

            case 'interface':
              return this.parseInterfaceTypeDefinition();

            case 'union':
              return this.parseUnionTypeDefinition();

            case 'enum':
              return this.parseEnumTypeDefinition();

            case 'input':
              return this.parseInputObjectTypeDefinition();

            case 'directive':
              return this.parseDirectiveDefinition();
          }
        }

        throw this.unexpected(keywordToken);
      };

      _proto.peekDescription = function peekDescription() {
        return this.peek(_tokenKind.TokenKind.STRING) || this.peek(_tokenKind.TokenKind.BLOCK_STRING);
      }
      /**
       * Description : StringValue
       */
      ;

      _proto.parseDescription = function parseDescription() {
        if (this.peekDescription()) {
          return this.parseStringLiteral();
        }
      }
      /**
       * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
       */
      ;

      _proto.parseSchemaDefinition = function parseSchemaDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('schema');
        var directives = this.parseDirectives(true);
        var operationTypes = this.many(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
        return {
          kind: _kinds.Kind.SCHEMA_DEFINITION,
          description: description,
          directives: directives,
          operationTypes: operationTypes,
          loc: this.loc(start)
        };
      }
      /**
       * OperationTypeDefinition : OperationType : NamedType
       */
      ;

      _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
        var start = this._lexer.token;
        var operation = this.parseOperationType();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseNamedType();
        return {
          kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
          operation: operation,
          type: type,
          loc: this.loc(start)
        };
      }
      /**
       * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
       */
      ;

      _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('scalar');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
          description: description,
          name: name,
          directives: directives,
          loc: this.loc(start)
        };
      }
      /**
       * ObjectTypeDefinition :
       *   Description?
       *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
       */
      ;

      _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('type');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
          description: description,
          name: name,
          interfaces: interfaces,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * ImplementsInterfaces :
       *   - implements `&`? NamedType
       *   - ImplementsInterfaces & NamedType
       */
      ;

      _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
        var _this$_options2;

        if (!this.expectOptionalKeyword('implements')) {
          return [];
        }

        if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
          var types = []; // Optional leading ampersand

          this.expectOptionalToken(_tokenKind.TokenKind.AMP);

          do {
            types.push(this.parseNamedType());
          } while (this.expectOptionalToken(_tokenKind.TokenKind.AMP) || this.peek(_tokenKind.TokenKind.NAME));

          return types;
        }

        return this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType);
      }
      /**
       * FieldsDefinition : { FieldDefinition+ }
       */
      ;

      _proto.parseFieldsDefinition = function parseFieldsDefinition() {
        var _this$_options3; // Legacy support for the SDL?


        if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(_tokenKind.TokenKind.BRACE_L) && this._lexer.lookahead().kind === _tokenKind.TokenKind.BRACE_R) {
          this._lexer.advance();

          this._lexer.advance();

          return [];
        }

        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKind.TokenKind.BRACE_R);
      }
      /**
       * FieldDefinition :
       *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
       */
      ;

      _proto.parseFieldDefinition = function parseFieldDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseTypeReference();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.FIELD_DEFINITION,
          description: description,
          name: name,
          arguments: args,
          type: type,
          directives: directives,
          loc: this.loc(start)
        };
      }
      /**
       * ArgumentsDefinition : ( InputValueDefinition+ )
       */
      ;

      _proto.parseArgumentDefs = function parseArgumentDefs() {
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKind.TokenKind.PAREN_R);
      }
      /**
       * InputValueDefinition :
       *   - Description? Name : Type DefaultValue? Directives[Const]?
       */
      ;

      _proto.parseInputValueDef = function parseInputValueDef() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseTypeReference();
        var defaultValue;

        if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {
          defaultValue = this.parseValueLiteral(true);
        }

        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
          description: description,
          name: name,
          type: type,
          defaultValue: defaultValue,
          directives: directives,
          loc: this.loc(start)
        };
      }
      /**
       * InterfaceTypeDefinition :
       *   - Description? interface Name Directives[Const]? FieldsDefinition?
       */
      ;

      _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('interface');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
          description: description,
          name: name,
          interfaces: interfaces,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * UnionTypeDefinition :
       *   - Description? union Name Directives[Const]? UnionMemberTypes?
       */
      ;

      _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('union');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();
        return {
          kind: _kinds.Kind.UNION_TYPE_DEFINITION,
          description: description,
          name: name,
          directives: directives,
          types: types,
          loc: this.loc(start)
        };
      }
      /**
       * UnionMemberTypes :
       *   - = `|`? NamedType
       *   - UnionMemberTypes | NamedType
       */
      ;

      _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
        return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType) : [];
      }
      /**
       * EnumTypeDefinition :
       *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
       */
      ;

      _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('enum');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();
        return {
          kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
          description: description,
          name: name,
          directives: directives,
          values: values,
          loc: this.loc(start)
        };
      }
      /**
       * EnumValuesDefinition : { EnumValueDefinition+ }
       */
      ;

      _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKind.TokenKind.BRACE_R);
      }
      /**
       * EnumValueDefinition : Description? EnumValue Directives[Const]?
       *
       * EnumValue : Name
       */
      ;

      _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
          description: description,
          name: name,
          directives: directives,
          loc: this.loc(start)
        };
      }
      /**
       * InputObjectTypeDefinition :
       *   - Description? input Name Directives[Const]? InputFieldsDefinition?
       */
      ;

      _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('input');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        return {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description: description,
          name: name,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * InputFieldsDefinition : { InputValueDefinition+ }
       */
      ;

      _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKind.TokenKind.BRACE_R);
      }
      /**
       * TypeSystemExtension :
       *   - SchemaExtension
       *   - TypeExtension
       *
       * TypeExtension :
       *   - ScalarTypeExtension
       *   - ObjectTypeExtension
       *   - InterfaceTypeExtension
       *   - UnionTypeExtension
       *   - EnumTypeExtension
       *   - InputObjectTypeDefinition
       */
      ;

      _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
        var keywordToken = this._lexer.lookahead();

        if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
          switch (keywordToken.value) {
            case 'schema':
              return this.parseSchemaExtension();

            case 'scalar':
              return this.parseScalarTypeExtension();

            case 'type':
              return this.parseObjectTypeExtension();

            case 'interface':
              return this.parseInterfaceTypeExtension();

            case 'union':
              return this.parseUnionTypeExtension();

            case 'enum':
              return this.parseEnumTypeExtension();

            case 'input':
              return this.parseInputObjectTypeExtension();
          }
        }

        throw this.unexpected(keywordToken);
      }
      /**
       * SchemaExtension :
       *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
       *  - extend schema Directives[Const]
       */
      ;

      _proto.parseSchemaExtension = function parseSchemaExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('schema');
        var directives = this.parseDirectives(true);
        var operationTypes = this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);

        if (directives.length === 0 && operationTypes.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.SCHEMA_EXTENSION,
          directives: directives,
          operationTypes: operationTypes,
          loc: this.loc(start)
        };
      }
      /**
       * ScalarTypeExtension :
       *   - extend scalar Name Directives[Const]
       */
      ;

      _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('scalar');
        var name = this.parseName();
        var directives = this.parseDirectives(true);

        if (directives.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
          name: name,
          directives: directives,
          loc: this.loc(start)
        };
      }
      /**
       * ObjectTypeExtension :
       *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
       *  - extend type Name ImplementsInterfaces? Directives[Const]
       *  - extend type Name ImplementsInterfaces
       */
      ;

      _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('type');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();

        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
          name: name,
          interfaces: interfaces,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * InterfaceTypeExtension :
       *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
       *  - extend interface Name ImplementsInterfaces? Directives[Const]
       *  - extend interface Name ImplementsInterfaces
       */
      ;

      _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('interface');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();

        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
          name: name,
          interfaces: interfaces,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * UnionTypeExtension :
       *   - extend union Name Directives[Const]? UnionMemberTypes
       *   - extend union Name Directives[Const]
       */
      ;

      _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('union');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();

        if (directives.length === 0 && types.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.UNION_TYPE_EXTENSION,
          name: name,
          directives: directives,
          types: types,
          loc: this.loc(start)
        };
      }
      /**
       * EnumTypeExtension :
       *   - extend enum Name Directives[Const]? EnumValuesDefinition
       *   - extend enum Name Directives[Const]
       */
      ;

      _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('enum');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();

        if (directives.length === 0 && values.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
          name: name,
          directives: directives,
          values: values,
          loc: this.loc(start)
        };
      }
      /**
       * InputObjectTypeExtension :
       *   - extend input Name Directives[Const]? InputFieldsDefinition
       *   - extend input Name Directives[Const]
       */
      ;

      _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('input');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();

        if (directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name: name,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * DirectiveDefinition :
       *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
       */
      ;

      _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('directive');
        this.expectToken(_tokenKind.TokenKind.AT);
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        var repeatable = this.expectOptionalKeyword('repeatable');
        this.expectKeyword('on');
        var locations = this.parseDirectiveLocations();
        return {
          kind: _kinds.Kind.DIRECTIVE_DEFINITION,
          description: description,
          name: name,
          arguments: args,
          repeatable: repeatable,
          locations: locations,
          loc: this.loc(start)
        };
      }
      /**
       * DirectiveLocations :
       *   - `|`? DirectiveLocation
       *   - DirectiveLocations | DirectiveLocation
       */
      ;

      _proto.parseDirectiveLocations = function parseDirectiveLocations() {
        return this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseDirectiveLocation);
      }
      /*
       * DirectiveLocation :
       *   - ExecutableDirectiveLocation
       *   - TypeSystemDirectiveLocation
       *
       * ExecutableDirectiveLocation : one of
       *   `QUERY`
       *   `MUTATION`
       *   `SUBSCRIPTION`
       *   `FIELD`
       *   `FRAGMENT_DEFINITION`
       *   `FRAGMENT_SPREAD`
       *   `INLINE_FRAGMENT`
       *
       * TypeSystemDirectiveLocation : one of
       *   `SCHEMA`
       *   `SCALAR`
       *   `OBJECT`
       *   `FIELD_DEFINITION`
       *   `ARGUMENT_DEFINITION`
       *   `INTERFACE`
       *   `UNION`
       *   `ENUM`
       *   `ENUM_VALUE`
       *   `INPUT_OBJECT`
       *   `INPUT_FIELD_DEFINITION`
       */
      ;

      _proto.parseDirectiveLocation = function parseDirectiveLocation() {
        var start = this._lexer.token;
        var name = this.parseName();

        if (_directiveLocation.DirectiveLocation[name.value] !== undefined) {
          return name;
        }

        throw this.unexpected(start);
      } // Core parsing utility functions

      /**
       * Returns a location object, used to identify the place in the source that created a given parsed object.
       */
      ;

      _proto.loc = function loc(startToken) {
        var _this$_options4;

        if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {
          return new _ast.Location(startToken, this._lexer.lastToken, this._lexer.source);
        }
      }
      /**
       * Determines if the next token is of a given kind
       */
      ;

      _proto.peek = function peek(kind) {
        return this._lexer.token.kind === kind;
      }
      /**
       * If the next token is of the given kind, return that token after advancing the lexer.
       * Otherwise, do not change the parser state and throw an error.
       */
      ;

      _proto.expectToken = function expectToken(kind) {
        var token = this._lexer.token;

        if (token.kind === kind) {
          this._lexer.advance();

          return token;
        }

        throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
      }
      /**
       * If the next token is of the given kind, return that token after advancing the lexer.
       * Otherwise, do not change the parser state and return undefined.
       */
      ;

      _proto.expectOptionalToken = function expectOptionalToken(kind) {
        var token = this._lexer.token;

        if (token.kind === kind) {
          this._lexer.advance();

          return token;
        }

        return undefined;
      }
      /**
       * If the next token is a given keyword, advance the lexer.
       * Otherwise, do not change the parser state and throw an error.
       */
      ;

      _proto.expectKeyword = function expectKeyword(value) {
        var token = this._lexer.token;

        if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
          this._lexer.advance();
        } else {
          throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected \"".concat(value, "\", found ").concat(getTokenDesc(token), "."));
        }
      }
      /**
       * If the next token is a given keyword, return "true" after advancing the lexer.
       * Otherwise, do not change the parser state and return "false".
       */
      ;

      _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
        var token = this._lexer.token;

        if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
          this._lexer.advance();

          return true;
        }

        return false;
      }
      /**
       * Helper function for creating an error when an unexpected lexed token is encountered.
       */
      ;

      _proto.unexpected = function unexpected(atToken) {
        var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
        return (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
      }
      /**
       * Returns a possibly empty list of parse nodes, determined by the parseFn.
       * This list begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      ;

      _proto.any = function any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];

        while (!this.expectOptionalToken(closeKind)) {
          nodes.push(parseFn.call(this));
        }

        return nodes;
      }
      /**
       * Returns a list of parse nodes, determined by the parseFn.
       * It can be empty only if open token is missing otherwise it will always return non-empty list
       * that begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      ;

      _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
          var nodes = [];

          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));

          return nodes;
        }

        return [];
      }
      /**
       * Returns a non-empty list of parse nodes, determined by the parseFn.
       * This list begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      ;

      _proto.many = function many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];

        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));

        return nodes;
      }
      /**
       * Returns a non-empty list of parse nodes, determined by the parseFn.
       * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
       * Advances the parser to the next lex token after last item in the list.
       */
      ;

      _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        var nodes = [];

        do {
          nodes.push(parseFn.call(this));
        } while (this.expectOptionalToken(delimiterKind));

        return nodes;
      };

      return Parser;
    }();
    /**
     * A helper function to describe a token as a string for debugging.
     */


    exports.Parser = Parser;

    function getTokenDesc(token) {
      var value = token.value;
      return getTokenKindDesc(token.kind) + (value != null ? " \"".concat(value, "\"") : '');
    }
    /**
     * A helper function to describe a token kind as a string for debugging.
     */


    function getTokenKindDesc(kind) {
      return (0, _lexer.isPunctuatorTokenKind)(kind) ? "\"".concat(kind, "\"") : kind;
    }
  }, {
    "../error/syntaxError.mjs": "../node_modules/graphql/error/syntaxError.mjs",
    "./kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "./ast.mjs": "../node_modules/graphql/language/ast.mjs",
    "./tokenKind.mjs": "../node_modules/graphql/language/tokenKind.mjs",
    "./source.mjs": "../node_modules/graphql/language/source.mjs",
    "./directiveLocation.mjs": "../node_modules/graphql/language/directiveLocation.mjs",
    "./lexer.mjs": "../node_modules/graphql/language/lexer.mjs"
  }],
  "../node_modules/graphql/language/visitor.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.visit = visit;
    exports.visitInParallel = visitInParallel;
    exports.getVisitFn = getVisitFn;
    exports.BREAK = exports.QueryDocumentKeys = void 0;

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _ast = require("./ast.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * A visitor is provided to visit, it contains the collection of
     * relevant functions to be called during the visitor's traversal.
     */


    var QueryDocumentKeys = {
      Name: [],
      Document: ['definitions'],
      OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
      VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
      Variable: ['name'],
      SelectionSet: ['selections'],
      Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
      Argument: ['name', 'value'],
      FragmentSpread: ['name', 'directives'],
      InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
      FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ['values'],
      ObjectValue: ['fields'],
      ObjectField: ['name', 'value'],
      Directive: ['name', 'arguments'],
      NamedType: ['name'],
      ListType: ['type'],
      NonNullType: ['type'],
      SchemaDefinition: ['description', 'directives', 'operationTypes'],
      OperationTypeDefinition: ['type'],
      ScalarTypeDefinition: ['description', 'name', 'directives'],
      ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
      FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
      InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
      InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
      UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
      EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
      EnumValueDefinition: ['description', 'name', 'directives'],
      InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
      DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
      SchemaExtension: ['directives', 'operationTypes'],
      ScalarTypeExtension: ['name', 'directives'],
      ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
      InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
      UnionTypeExtension: ['name', 'directives', 'types'],
      EnumTypeExtension: ['name', 'directives', 'values'],
      InputObjectTypeExtension: ['name', 'directives', 'fields']
    };
    exports.QueryDocumentKeys = QueryDocumentKeys;
    var BREAK = Object.freeze({});
    /**
     * visit() will walk through an AST using a depth-first traversal, calling
     * the visitor's enter function at each node in the traversal, and calling the
     * leave function after visiting that node and all of its child nodes.
     *
     * By returning different values from the enter and leave functions, the
     * behavior of the visitor can be altered, including skipping over a sub-tree of
     * the AST (by returning false), editing the AST by returning a value or null
     * to remove the value, or to stop the whole traversal by returning BREAK.
     *
     * When using visit() to edit an AST, the original AST will not be modified, and
     * a new version of the AST with the changes applied will be returned from the
     * visit function.
     *
     *     const editedAST = visit(ast, {
     *       enter(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: skip visiting this node
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       },
     *       leave(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: no action
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       }
     *     });
     *
     * Alternatively to providing enter() and leave() functions, a visitor can
     * instead provide functions named the same as the kinds of AST nodes, or
     * enter/leave visitors at a named key, leading to four permutations of the
     * visitor API:
     *
     * 1) Named visitors triggered when entering a node of a specific kind.
     *
     *     visit(ast, {
     *       Kind(node) {
     *         // enter the "Kind" node
     *       }
     *     })
     *
     * 2) Named visitors that trigger upon entering and leaving a node of
     *    a specific kind.
     *
     *     visit(ast, {
     *       Kind: {
     *         enter(node) {
     *           // enter the "Kind" node
     *         }
     *         leave(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     *
     * 3) Generic visitors that trigger upon entering and leaving any node.
     *
     *     visit(ast, {
     *       enter(node) {
     *         // enter any node
     *       },
     *       leave(node) {
     *         // leave any node
     *       }
     *     })
     *
     * 4) Parallel visitors for entering and leaving nodes of a specific kind.
     *
     *     visit(ast, {
     *       enter: {
     *         Kind(node) {
     *           // enter the "Kind" node
     *         }
     *       },
     *       leave: {
     *         Kind(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     */

    exports.BREAK = BREAK;

    function visit(root, visitor) {
      var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;
      /* eslint-disable no-undef-init */

      var stack = undefined;
      var inArray = Array.isArray(root);
      var keys = [root];
      var index = -1;
      var edits = [];
      var node = undefined;
      var key = undefined;
      var parent = undefined;
      var path = [];
      var ancestors = [];
      var newRoot = root;
      /* eslint-enable no-undef-init */

      do {
        index++;
        var isLeaving = index === keys.length;
        var isEdited = isLeaving && edits.length !== 0;

        if (isLeaving) {
          key = ancestors.length === 0 ? undefined : path[path.length - 1];
          node = parent;
          parent = ancestors.pop();

          if (isEdited) {
            if (inArray) {
              node = node.slice();
            } else {
              var clone = {};

              for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
                var k = _Object$keys2[_i2];
                clone[k] = node[k];
              }

              node = clone;
            }

            var editOffset = 0;

            for (var ii = 0; ii < edits.length; ii++) {
              var editKey = edits[ii][0];
              var editValue = edits[ii][1];

              if (inArray) {
                editKey -= editOffset;
              }

              if (inArray && editValue === null) {
                node.splice(editKey, 1);
                editOffset++;
              } else {
                node[editKey] = editValue;
              }
            }
          }

          index = stack.index;
          keys = stack.keys;
          edits = stack.edits;
          inArray = stack.inArray;
          stack = stack.prev;
        } else {
          key = parent ? inArray ? index : keys[index] : undefined;
          node = parent ? parent[key] : newRoot;

          if (node === null || node === undefined) {
            continue;
          }

          if (parent) {
            path.push(key);
          }
        }

        var result = void 0;

        if (!Array.isArray(node)) {
          if (!(0, _ast.isNode)(node)) {
            throw new Error("Invalid AST Node: ".concat((0, _inspect.default)(node), "."));
          }

          var visitFn = getVisitFn(visitor, node.kind, isLeaving);

          if (visitFn) {
            result = visitFn.call(visitor, node, key, parent, path, ancestors);

            if (result === BREAK) {
              break;
            }

            if (result === false) {
              if (!isLeaving) {
                path.pop();
                continue;
              }
            } else if (result !== undefined) {
              edits.push([key, result]);

              if (!isLeaving) {
                if ((0, _ast.isNode)(result)) {
                  node = result;
                } else {
                  path.pop();
                  continue;
                }
              }
            }
          }
        }

        if (result === undefined && isEdited) {
          edits.push([key, node]);
        }

        if (isLeaving) {
          path.pop();
        } else {
          var _visitorKeys$node$kin;

          stack = {
            inArray: inArray,
            index: index,
            keys: keys,
            edits: edits,
            prev: stack
          };
          inArray = Array.isArray(node);
          keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
          index = -1;
          edits = [];

          if (parent) {
            ancestors.push(parent);
          }

          parent = node;
        }
      } while (stack !== undefined);

      if (edits.length !== 0) {
        newRoot = edits[edits.length - 1][1];
      }

      return newRoot;
    }
    /**
     * Creates a new visitor instance which delegates to many visitors to run in
     * parallel. Each visitor will be visited for each node before moving on.
     *
     * If a prior visitor edits a node, no following visitors will see that node.
     */


    function visitInParallel(visitors) {
      var skipping = new Array(visitors.length);
      return {
        enter: function enter(node) {
          for (var i = 0; i < visitors.length; i++) {
            if (skipping[i] == null) {
              var fn = getVisitFn(visitors[i], node.kind,
              /* isLeaving */
              false);

              if (fn) {
                var result = fn.apply(visitors[i], arguments);

                if (result === false) {
                  skipping[i] = node;
                } else if (result === BREAK) {
                  skipping[i] = BREAK;
                } else if (result !== undefined) {
                  return result;
                }
              }
            }
          }
        },
        leave: function leave(node) {
          for (var i = 0; i < visitors.length; i++) {
            if (skipping[i] == null) {
              var fn = getVisitFn(visitors[i], node.kind,
              /* isLeaving */
              true);

              if (fn) {
                var result = fn.apply(visitors[i], arguments);

                if (result === BREAK) {
                  skipping[i] = BREAK;
                } else if (result !== undefined && result !== false) {
                  return result;
                }
              }
            } else if (skipping[i] === node) {
              skipping[i] = null;
            }
          }
        }
      };
    }
    /**
     * Given a visitor instance, if it is leaving or not, and a node kind, return
     * the function the visitor runtime should call.
     */


    function getVisitFn(visitor, kind, isLeaving) {
      var kindVisitor = visitor[kind];

      if (kindVisitor) {
        if (!isLeaving && typeof kindVisitor === 'function') {
          // { Kind() {} }
          return kindVisitor;
        }

        var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;

        if (typeof kindSpecificVisitor === 'function') {
          // { Kind: { enter() {}, leave() {} } }
          return kindSpecificVisitor;
        }
      } else {
        var specificVisitor = isLeaving ? visitor.leave : visitor.enter;

        if (specificVisitor) {
          if (typeof specificVisitor === 'function') {
            // { enter() {}, leave() {} }
            return specificVisitor;
          }

          var specificKindVisitor = specificVisitor[kind];

          if (typeof specificKindVisitor === 'function') {
            // { enter: { Kind() {} }, leave: { Kind() {} } }
            return specificKindVisitor;
          }
        }
      }
    }
  }, {
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "./ast.mjs": "../node_modules/graphql/language/ast.mjs"
  }],
  "../node_modules/graphql/polyfills/find.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    /* eslint-disable no-redeclare */
    // $FlowFixMe[name-already-bound]

    var find = Array.prototype.find ? function (list, predicate) {
      return Array.prototype.find.call(list, predicate);
    } : function (list, predicate) {
      for (var _i2 = 0; _i2 < list.length; _i2++) {
        var value = list[_i2];

        if (predicate(value)) {
          return value;
        }
      }
    };
    var _default = find;
    exports.default = _default;
  }, {}],
  "../node_modules/graphql/polyfills/objectValues.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    /* eslint-disable no-redeclare */
    // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441

    var objectValues = Object.values || function (obj) {
      return Object.keys(obj).map(function (key) {
        return obj[key];
      });
    };

    var _default = objectValues;
    exports.default = _default;
  }, {}],
  "../node_modules/graphql/error/locatedError.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.locatedError = locatedError;

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _GraphQLError = require("./GraphQLError.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Given an arbitrary value, presumably thrown while attempting to execute a
     * GraphQL operation, produce a new GraphQLError aware of the location in the
     * document responsible for the original Error.
     */


    function locatedError(rawOriginalError, nodes, path) {
      var _nodes; // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.


      var originalError = rawOriginalError instanceof Error ? rawOriginalError : new Error('Unexpected error value: ' + (0, _inspect.default)(rawOriginalError)); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.

      if (Array.isArray(originalError.path)) {
        return originalError;
      }

      return new _GraphQLError.GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);
    }
  }, {
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "./GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/utilities/assertValidName.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.assertValidName = assertValidName;
    exports.isValidNameError = isValidNameError;

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.mjs"));

    var _GraphQLError = require("../error/GraphQLError.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
    /**
     * Upholds the spec rules about naming.
     */

    function assertValidName(name) {
      var error = isValidNameError(name);

      if (error) {
        throw error;
      }

      return name;
    }
    /**
     * Returns an Error if a name is invalid.
     */


    function isValidNameError(name) {
      typeof name === 'string' || (0, _devAssert.default)(0, 'Expected name to be a string.');

      if (name.length > 1 && name[0] === '_' && name[1] === '_') {
        return new _GraphQLError.GraphQLError("Name \"".concat(name, "\" must not begin with \"__\", which is reserved by GraphQL introspection."));
      }

      if (!NAME_RX.test(name)) {
        return new _GraphQLError.GraphQLError("Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"".concat(name, "\" does not."));
      }
    }
  }, {
    "../jsutils/devAssert.mjs": "../node_modules/graphql/jsutils/devAssert.mjs",
    "../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/polyfills/objectEntries.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    /* eslint-disable no-redeclare */
    // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441

    var objectEntries = Object.entries || function (obj) {
      return Object.keys(obj).map(function (key) {
        return [key, obj[key]];
      });
    };

    var _default = objectEntries;
    exports.default = _default;
  }, {}],
  "../node_modules/graphql/jsutils/keyMap.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = keyMap;
    /**
     * Creates a keyed JS object from an array, given a function to produce the keys
     * for each value in the array.
     *
     * This provides a convenient lookup for the array items if the key function
     * produces unique results.
     *
     *     const phoneBook = [
     *       { name: 'Jon', num: '555-1234' },
     *       { name: 'Jenny', num: '867-5309' }
     *     ]
     *
     *     // { Jon: { name: 'Jon', num: '555-1234' },
     *     //   Jenny: { name: 'Jenny', num: '867-5309' } }
     *     const entriesByName = keyMap(
     *       phoneBook,
     *       entry => entry.name
     *     )
     *
     *     // { name: 'Jenny', num: '857-6309' }
     *     const jennyEntry = entriesByName['Jenny']
     *
     */

    function keyMap(list, keyFn) {
      return list.reduce(function (map, item) {
        map[keyFn(item)] = item;
        return map;
      }, Object.create(null));
    }
  }, {}],
  "../node_modules/graphql/jsutils/mapValue.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = mapValue;

    var _objectEntries = _interopRequireDefault(require("../polyfills/objectEntries.mjs"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Creates an object map with the same keys as `map` and values generated by
     * running each value of `map` thru `fn`.
     */


    function mapValue(map, fn) {
      var result = Object.create(null);

      for (var _i2 = 0, _objectEntries2 = (0, _objectEntries.default)(map); _i2 < _objectEntries2.length; _i2++) {
        var _ref2 = _objectEntries2[_i2];
        var _key = _ref2[0];
        var _value = _ref2[1];
        result[_key] = fn(_value, _key);
      }

      return result;
    }
  }, {
    "../polyfills/objectEntries.mjs": "../node_modules/graphql/polyfills/objectEntries.mjs"
  }],
  "../node_modules/graphql/jsutils/toObjMap.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toObjMap;

    var _objectEntries = _interopRequireDefault(require("../polyfills/objectEntries.mjs"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function toObjMap(obj) {
      /* eslint-enable no-redeclare */
      if (Object.getPrototypeOf(obj) === null) {
        return obj;
      }

      var map = Object.create(null);

      for (var _i2 = 0, _objectEntries2 = (0, _objectEntries.default)(obj); _i2 < _objectEntries2.length; _i2++) {
        var _ref2 = _objectEntries2[_i2];
        var key = _ref2[0];
        var value = _ref2[1];
        map[key] = value;
      }

      return map;
    }
  }, {
    "../polyfills/objectEntries.mjs": "../node_modules/graphql/polyfills/objectEntries.mjs"
  }],
  "../node_modules/graphql/jsutils/keyValMap.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = keyValMap;
    /**
     * Creates a keyed JS object from an array, given a function to produce the keys
     * and a function to produce the values from each item in the array.
     *
     *     const phoneBook = [
     *       { name: 'Jon', num: '555-1234' },
     *       { name: 'Jenny', num: '867-5309' }
     *     ]
     *
     *     // { Jon: '555-1234', Jenny: '867-5309' }
     *     const phonesByName = keyValMap(
     *       phoneBook,
     *       entry => entry.name,
     *       entry => entry.num
     *     )
     *
     */

    function keyValMap(list, keyFn, valFn) {
      return list.reduce(function (map, item) {
        map[keyFn(item)] = valFn(item);
        return map;
      }, Object.create(null));
    }
  }, {}],
  "../node_modules/graphql/jsutils/didYouMean.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = didYouMean;
    var MAX_SUGGESTIONS = 5;
    /**
     * Given [ A, B, C ] return ' Did you mean A, B, or C?'.
     */
    // eslint-disable-next-line no-redeclare

    function didYouMean(firstArg, secondArg) {
      var _ref = typeof firstArg === 'string' ? [firstArg, secondArg] : [undefined, firstArg],
          subMessage = _ref[0],
          suggestionsArg = _ref[1];

      var message = ' Did you mean ';

      if (subMessage) {
        message += subMessage + ' ';
      }

      var suggestions = suggestionsArg.map(function (x) {
        return "\"".concat(x, "\"");
      });

      switch (suggestions.length) {
        case 0:
          return '';

        case 1:
          return message + suggestions[0] + '?';

        case 2:
          return message + suggestions[0] + ' or ' + suggestions[1] + '?';
      }

      var selected = suggestions.slice(0, MAX_SUGGESTIONS);
      var lastItem = selected.pop();
      return message + selected.join(', ') + ', or ' + lastItem + '?';
    }
  }, {}],
  "../node_modules/graphql/jsutils/identityFunc.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = identityFunc;
    /**
     * Returns the first argument it receives.
     */

    function identityFunc(x) {
      return x;
    }
  }, {}],
  "../node_modules/graphql/jsutils/suggestionList.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = suggestionList;
    /**
     * Given an invalid input string and a list of valid options, returns a filtered
     * list of valid options sorted based on their similarity with the input.
     */

    function suggestionList(input, options) {
      var optionsByDistance = Object.create(null);
      var lexicalDistance = new LexicalDistance(input);
      var threshold = Math.floor(input.length * 0.4) + 1;

      for (var _i2 = 0; _i2 < options.length; _i2++) {
        var option = options[_i2];
        var distance = lexicalDistance.measure(option, threshold);

        if (distance !== undefined) {
          optionsByDistance[option] = distance;
        }
      }

      return Object.keys(optionsByDistance).sort(function (a, b) {
        var distanceDiff = optionsByDistance[a] - optionsByDistance[b];
        return distanceDiff !== 0 ? distanceDiff : a.localeCompare(b);
      });
    }
    /**
     * Computes the lexical distance between strings A and B.
     *
     * The "distance" between two strings is given by counting the minimum number
     * of edits needed to transform string A into string B. An edit can be an
     * insertion, deletion, or substitution of a single character, or a swap of two
     * adjacent characters.
     *
     * Includes a custom alteration from Damerau-Levenshtein to treat case changes
     * as a single edit which helps identify mis-cased values with an edit distance
     * of 1.
     *
     * This distance can be useful for detecting typos in input or sorting
     */


    var LexicalDistance = /*#__PURE__*/function () {
      function LexicalDistance(input) {
        this._input = input;
        this._inputLowerCase = input.toLowerCase();
        this._inputArray = stringToArray(this._inputLowerCase);
        this._rows = [new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0)];
      }

      var _proto = LexicalDistance.prototype;

      _proto.measure = function measure(option, threshold) {
        if (this._input === option) {
          return 0;
        }

        var optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit

        if (this._inputLowerCase === optionLowerCase) {
          return 1;
        }

        var a = stringToArray(optionLowerCase);
        var b = this._inputArray;

        if (a.length < b.length) {
          var tmp = a;
          a = b;
          b = tmp;
        }

        var aLength = a.length;
        var bLength = b.length;

        if (aLength - bLength > threshold) {
          return undefined;
        }

        var rows = this._rows;

        for (var j = 0; j <= bLength; j++) {
          rows[0][j] = j;
        }

        for (var i = 1; i <= aLength; i++) {
          var upRow = rows[(i - 1) % 3];
          var currentRow = rows[i % 3];
          var smallestCell = currentRow[0] = i;

          for (var _j = 1; _j <= bLength; _j++) {
            var cost = a[i - 1] === b[_j - 1] ? 0 : 1;
            var currentCell = Math.min(upRow[_j] + 1, // delete
            currentRow[_j - 1] + 1, // insert
            upRow[_j - 1] + cost // substitute
            );

            if (i > 1 && _j > 1 && a[i - 1] === b[_j - 2] && a[i - 2] === b[_j - 1]) {
              // transposition
              var doubleDiagonalCell = rows[(i - 2) % 3][_j - 2];
              currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
            }

            if (currentCell < smallestCell) {
              smallestCell = currentCell;
            }

            currentRow[_j] = currentCell;
          } // Early exit, since distance can't go smaller than smallest element of the previous row.


          if (smallestCell > threshold) {
            return undefined;
          }
        }

        var distance = rows[aLength % 3][bLength];
        return distance <= threshold ? distance : undefined;
      };

      return LexicalDistance;
    }();

    function stringToArray(str) {
      var strLength = str.length;
      var array = new Array(strLength);

      for (var i = 0; i < strLength; ++i) {
        array[i] = str.charCodeAt(i);
      }

      return array;
    }
  }, {}],
  "../node_modules/graphql/language/printer.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.print = print;

    var _visitor = require("./visitor.mjs");

    var _blockString = require("./blockString.mjs");
    /**
     * Converts an AST into a string, using one set of reasonable
     * formatting rules.
     */


    function print(ast) {
      return (0, _visitor.visit)(ast, {
        leave: printDocASTReducer
      });
    }

    var MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future

    var printDocASTReducer = {
      Name: function Name(node) {
        return node.value;
      },
      Variable: function Variable(node) {
        return '$' + node.name;
      },
      // Document
      Document: function Document(node) {
        return join(node.definitions, '\n\n') + '\n';
      },
      OperationDefinition: function OperationDefinition(node) {
        var op = node.operation;
        var name = node.name;
        var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
        var directives = join(node.directives, ' ');
        var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use
        // the query short form.

        return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');
      },
      VariableDefinition: function VariableDefinition(_ref) {
        var variable = _ref.variable,
            type = _ref.type,
            defaultValue = _ref.defaultValue,
            directives = _ref.directives;
        return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));
      },
      SelectionSet: function SelectionSet(_ref2) {
        var selections = _ref2.selections;
        return block(selections);
      },
      Field: function Field(_ref3) {
        var alias = _ref3.alias,
            name = _ref3.name,
            args = _ref3.arguments,
            directives = _ref3.directives,
            selectionSet = _ref3.selectionSet;
        var prefix = wrap('', alias, ': ') + name;
        var argsLine = prefix + wrap('(', join(args, ', '), ')');

        if (argsLine.length > MAX_LINE_LENGTH) {
          argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
        }

        return join([argsLine, join(directives, ' '), selectionSet], ' ');
      },
      Argument: function Argument(_ref4) {
        var name = _ref4.name,
            value = _ref4.value;
        return name + ': ' + value;
      },
      // Fragments
      FragmentSpread: function FragmentSpread(_ref5) {
        var name = _ref5.name,
            directives = _ref5.directives;
        return '...' + name + wrap(' ', join(directives, ' '));
      },
      InlineFragment: function InlineFragment(_ref6) {
        var typeCondition = _ref6.typeCondition,
            directives = _ref6.directives,
            selectionSet = _ref6.selectionSet;
        return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
      },
      FragmentDefinition: function FragmentDefinition(_ref7) {
        var name = _ref7.name,
            typeCondition = _ref7.typeCondition,
            variableDefinitions = _ref7.variableDefinitions,
            directives = _ref7.directives,
            selectionSet = _ref7.selectionSet;
        return (// Note: fragment variable definitions are experimental and may be changed
          // or removed in the future.
          "fragment ".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), " ") + "on ".concat(typeCondition, " ").concat(wrap('', join(directives, ' '), ' ')) + selectionSet
        );
      },
      // Value
      IntValue: function IntValue(_ref8) {
        var value = _ref8.value;
        return value;
      },
      FloatValue: function FloatValue(_ref9) {
        var value = _ref9.value;
        return value;
      },
      StringValue: function StringValue(_ref10, key) {
        var value = _ref10.value,
            isBlockString = _ref10.block;
        return isBlockString ? (0, _blockString.printBlockString)(value, key === 'description' ? '' : '  ') : JSON.stringify(value);
      },
      BooleanValue: function BooleanValue(_ref11) {
        var value = _ref11.value;
        return value ? 'true' : 'false';
      },
      NullValue: function NullValue() {
        return 'null';
      },
      EnumValue: function EnumValue(_ref12) {
        var value = _ref12.value;
        return value;
      },
      ListValue: function ListValue(_ref13) {
        var values = _ref13.values;
        return '[' + join(values, ', ') + ']';
      },
      ObjectValue: function ObjectValue(_ref14) {
        var fields = _ref14.fields;
        return '{' + join(fields, ', ') + '}';
      },
      ObjectField: function ObjectField(_ref15) {
        var name = _ref15.name,
            value = _ref15.value;
        return name + ': ' + value;
      },
      // Directive
      Directive: function Directive(_ref16) {
        var name = _ref16.name,
            args = _ref16.arguments;
        return '@' + name + wrap('(', join(args, ', '), ')');
      },
      // Type
      NamedType: function NamedType(_ref17) {
        var name = _ref17.name;
        return name;
      },
      ListType: function ListType(_ref18) {
        var type = _ref18.type;
        return '[' + type + ']';
      },
      NonNullType: function NonNullType(_ref19) {
        var type = _ref19.type;
        return type + '!';
      },
      // Type System Definitions
      SchemaDefinition: addDescription(function (_ref20) {
        var directives = _ref20.directives,
            operationTypes = _ref20.operationTypes;
        return join(['schema', join(directives, ' '), block(operationTypes)], ' ');
      }),
      OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
        var operation = _ref21.operation,
            type = _ref21.type;
        return operation + ': ' + type;
      },
      ScalarTypeDefinition: addDescription(function (_ref22) {
        var name = _ref22.name,
            directives = _ref22.directives;
        return join(['scalar', name, join(directives, ' ')], ' ');
      }),
      ObjectTypeDefinition: addDescription(function (_ref23) {
        var name = _ref23.name,
            interfaces = _ref23.interfaces,
            directives = _ref23.directives,
            fields = _ref23.fields;
        return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      }),
      FieldDefinition: addDescription(function (_ref24) {
        var name = _ref24.name,
            args = _ref24.arguments,
            type = _ref24.type,
            directives = _ref24.directives;
        return name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));
      }),
      InputValueDefinition: addDescription(function (_ref25) {
        var name = _ref25.name,
            type = _ref25.type,
            defaultValue = _ref25.defaultValue,
            directives = _ref25.directives;
        return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');
      }),
      InterfaceTypeDefinition: addDescription(function (_ref26) {
        var name = _ref26.name,
            interfaces = _ref26.interfaces,
            directives = _ref26.directives,
            fields = _ref26.fields;
        return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      }),
      UnionTypeDefinition: addDescription(function (_ref27) {
        var name = _ref27.name,
            directives = _ref27.directives,
            types = _ref27.types;
        return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      }),
      EnumTypeDefinition: addDescription(function (_ref28) {
        var name = _ref28.name,
            directives = _ref28.directives,
            values = _ref28.values;
        return join(['enum', name, join(directives, ' '), block(values)], ' ');
      }),
      EnumValueDefinition: addDescription(function (_ref29) {
        var name = _ref29.name,
            directives = _ref29.directives;
        return join([name, join(directives, ' ')], ' ');
      }),
      InputObjectTypeDefinition: addDescription(function (_ref30) {
        var name = _ref30.name,
            directives = _ref30.directives,
            fields = _ref30.fields;
        return join(['input', name, join(directives, ' '), block(fields)], ' ');
      }),
      DirectiveDefinition: addDescription(function (_ref31) {
        var name = _ref31.name,
            args = _ref31.arguments,
            repeatable = _ref31.repeatable,
            locations = _ref31.locations;
        return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');
      }),
      SchemaExtension: function SchemaExtension(_ref32) {
        var directives = _ref32.directives,
            operationTypes = _ref32.operationTypes;
        return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');
      },
      ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
        var name = _ref33.name,
            directives = _ref33.directives;
        return join(['extend scalar', name, join(directives, ' ')], ' ');
      },
      ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
        var name = _ref34.name,
            interfaces = _ref34.interfaces,
            directives = _ref34.directives,
            fields = _ref34.fields;
        return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      },
      InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
        var name = _ref35.name,
            interfaces = _ref35.interfaces,
            directives = _ref35.directives,
            fields = _ref35.fields;
        return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      },
      UnionTypeExtension: function UnionTypeExtension(_ref36) {
        var name = _ref36.name,
            directives = _ref36.directives,
            types = _ref36.types;
        return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      },
      EnumTypeExtension: function EnumTypeExtension(_ref37) {
        var name = _ref37.name,
            directives = _ref37.directives,
            values = _ref37.values;
        return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
      },
      InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
        var name = _ref38.name,
            directives = _ref38.directives,
            fields = _ref38.fields;
        return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
      }
    };

    function addDescription(cb) {
      return function (node) {
        return join([node.description, cb(node)], '\n');
      };
    }
    /**
     * Given maybeArray, print an empty string if it is null or empty, otherwise
     * print all items together separated by separator if provided
     */


    function join(maybeArray) {
      var _maybeArray$filter$jo;

      var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {
        return x;
      }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';
    }
    /**
     * Given array, print each item on its own line, wrapped in an
     * indented "{ }" block.
     */


    function block(array) {
      return wrap('{\n', indent(join(array, '\n')), '\n}');
    }
    /**
     * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
     */


    function wrap(start, maybeString) {
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      return maybeString != null && maybeString !== '' ? start + maybeString + end : '';
    }

    function indent(str) {
      return wrap('  ', str.replace(/\n/g, '\n  '));
    }

    function isMultiline(str) {
      return str.indexOf('\n') !== -1;
    }

    function hasMultilineItems(maybeArray) {
      return maybeArray != null && maybeArray.some(isMultiline);
    }
  }, {
    "./visitor.mjs": "../node_modules/graphql/language/visitor.mjs",
    "./blockString.mjs": "../node_modules/graphql/language/blockString.mjs"
  }],
  "../node_modules/graphql/utilities/valueFromASTUntyped.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.valueFromASTUntyped = valueFromASTUntyped;

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _keyValMap = _interopRequireDefault(require("../jsutils/keyValMap.mjs"));

    var _kinds = require("../language/kinds.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Produces a JavaScript value given a GraphQL Value AST.
     *
     * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
     * will reflect the provided GraphQL value AST.
     *
     * | GraphQL Value        | JavaScript Value |
     * | -------------------- | ---------------- |
     * | Input Object         | Object           |
     * | List                 | Array            |
     * | Boolean              | Boolean          |
     * | String / Enum        | String           |
     * | Int / Float          | Number           |
     * | Null                 | null             |
     *
     */


    function valueFromASTUntyped(valueNode, variables) {
      switch (valueNode.kind) {
        case _kinds.Kind.NULL:
          return null;

        case _kinds.Kind.INT:
          return parseInt(valueNode.value, 10);

        case _kinds.Kind.FLOAT:
          return parseFloat(valueNode.value);

        case _kinds.Kind.STRING:
        case _kinds.Kind.ENUM:
        case _kinds.Kind.BOOLEAN:
          return valueNode.value;

        case _kinds.Kind.LIST:
          return valueNode.values.map(function (node) {
            return valueFromASTUntyped(node, variables);
          });

        case _kinds.Kind.OBJECT:
          return (0, _keyValMap.default)(valueNode.fields, function (field) {
            return field.name.value;
          }, function (field) {
            return valueFromASTUntyped(field.value, variables);
          });

        case _kinds.Kind.VARIABLE:
          return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
      } // istanbul ignore next (Not reachable. All possible value nodes have been considered)


      false || (0, _invariant.default)(0, 'Unexpected value node: ' + (0, _inspect.default)(valueNode));
    }
  }, {
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../jsutils/keyValMap.mjs": "../node_modules/graphql/jsutils/keyValMap.mjs",
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs"
  }],
  "../node_modules/graphql/type/definition.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isType = isType;
    exports.assertType = assertType;
    exports.isScalarType = isScalarType;
    exports.assertScalarType = assertScalarType;
    exports.isObjectType = isObjectType;
    exports.assertObjectType = assertObjectType;
    exports.isInterfaceType = isInterfaceType;
    exports.assertInterfaceType = assertInterfaceType;
    exports.isUnionType = isUnionType;
    exports.assertUnionType = assertUnionType;
    exports.isEnumType = isEnumType;
    exports.assertEnumType = assertEnumType;
    exports.isInputObjectType = isInputObjectType;
    exports.assertInputObjectType = assertInputObjectType;
    exports.isListType = isListType;
    exports.assertListType = assertListType;
    exports.isNonNullType = isNonNullType;
    exports.assertNonNullType = assertNonNullType;
    exports.isInputType = isInputType;
    exports.assertInputType = assertInputType;
    exports.isOutputType = isOutputType;
    exports.assertOutputType = assertOutputType;
    exports.isLeafType = isLeafType;
    exports.assertLeafType = assertLeafType;
    exports.isCompositeType = isCompositeType;
    exports.assertCompositeType = assertCompositeType;
    exports.isAbstractType = isAbstractType;
    exports.assertAbstractType = assertAbstractType;
    exports.GraphQLList = GraphQLList;
    exports.GraphQLNonNull = GraphQLNonNull;
    exports.isWrappingType = isWrappingType;
    exports.assertWrappingType = assertWrappingType;
    exports.isNullableType = isNullableType;
    exports.assertNullableType = assertNullableType;
    exports.getNullableType = getNullableType;
    exports.isNamedType = isNamedType;
    exports.assertNamedType = assertNamedType;
    exports.getNamedType = getNamedType;
    exports.argsToArgsConfig = argsToArgsConfig;
    exports.isRequiredArgument = isRequiredArgument;
    exports.isRequiredInputField = isRequiredInputField;
    exports.GraphQLInputObjectType = exports.GraphQLEnumType = exports.GraphQLUnionType = exports.GraphQLInterfaceType = exports.GraphQLObjectType = exports.GraphQLScalarType = void 0;

    var _objectEntries = _interopRequireDefault(require("../polyfills/objectEntries.mjs"));

    var _symbols = require("../polyfills/symbols.mjs");

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _keyMap = _interopRequireDefault(require("../jsutils/keyMap.mjs"));

    var _mapValue = _interopRequireDefault(require("../jsutils/mapValue.mjs"));

    var _toObjMap = _interopRequireDefault(require("../jsutils/toObjMap.mjs"));

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.mjs"));

    var _keyValMap = _interopRequireDefault(require("../jsutils/keyValMap.mjs"));

    var _instanceOf = _interopRequireDefault(require("../jsutils/instanceOf.mjs"));

    var _didYouMean = _interopRequireDefault(require("../jsutils/didYouMean.mjs"));

    var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.mjs"));

    var _identityFunc = _interopRequireDefault(require("../jsutils/identityFunc.mjs"));

    var _defineInspect = _interopRequireDefault(require("../jsutils/defineInspect.mjs"));

    var _suggestionList = _interopRequireDefault(require("../jsutils/suggestionList.mjs"));

    var _GraphQLError = require("../error/GraphQLError.mjs");

    var _kinds = require("../language/kinds.mjs");

    var _printer = require("../language/printer.mjs");

    var _valueFromASTUntyped = require("../utilities/valueFromASTUntyped.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function isType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
    }

    function assertType(type) {
      if (!isType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL type."));
      }

      return type;
    }
    /**
     * There are predicates for each kind of GraphQL type.
     */
    // eslint-disable-next-line no-redeclare


    function isScalarType(type) {
      return (0, _instanceOf.default)(type, GraphQLScalarType);
    }

    function assertScalarType(type) {
      if (!isScalarType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Scalar type."));
      }

      return type;
    } // eslint-disable-next-line no-redeclare


    function isObjectType(type) {
      return (0, _instanceOf.default)(type, GraphQLObjectType);
    }

    function assertObjectType(type) {
      if (!isObjectType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Object type."));
      }

      return type;
    } // eslint-disable-next-line no-redeclare


    function isInterfaceType(type) {
      return (0, _instanceOf.default)(type, GraphQLInterfaceType);
    }

    function assertInterfaceType(type) {
      if (!isInterfaceType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Interface type."));
      }

      return type;
    } // eslint-disable-next-line no-redeclare


    function isUnionType(type) {
      return (0, _instanceOf.default)(type, GraphQLUnionType);
    }

    function assertUnionType(type) {
      if (!isUnionType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Union type."));
      }

      return type;
    } // eslint-disable-next-line no-redeclare


    function isEnumType(type) {
      return (0, _instanceOf.default)(type, GraphQLEnumType);
    }

    function assertEnumType(type) {
      if (!isEnumType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Enum type."));
      }

      return type;
    } // eslint-disable-next-line no-redeclare


    function isInputObjectType(type) {
      return (0, _instanceOf.default)(type, GraphQLInputObjectType);
    }

    function assertInputObjectType(type) {
      if (!isInputObjectType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Input Object type."));
      }

      return type;
    } // eslint-disable-next-line no-redeclare


    function isListType(type) {
      return (0, _instanceOf.default)(type, GraphQLList);
    }

    function assertListType(type) {
      if (!isListType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL List type."));
      }

      return type;
    } // eslint-disable-next-line no-redeclare


    function isNonNullType(type) {
      return (0, _instanceOf.default)(type, GraphQLNonNull);
    }

    function assertNonNullType(type) {
      if (!isNonNullType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Non-Null type."));
      }

      return type;
    }
    /**
     * These types may be used as input types for arguments and directives.
     */


    function isInputType(type) {
      return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);
    }

    function assertInputType(type) {
      if (!isInputType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL input type."));
      }

      return type;
    }
    /**
     * These types may be used as output types as the result of fields.
     */


    function isOutputType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);
    }

    function assertOutputType(type) {
      if (!isOutputType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL output type."));
      }

      return type;
    }
    /**
     * These types may describe types which may be leaf values.
     */


    function isLeafType(type) {
      return isScalarType(type) || isEnumType(type);
    }

    function assertLeafType(type) {
      if (!isLeafType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL leaf type."));
      }

      return type;
    }
    /**
     * These types may describe the parent context of a selection set.
     */


    function isCompositeType(type) {
      return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
    }

    function assertCompositeType(type) {
      if (!isCompositeType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL composite type."));
      }

      return type;
    }
    /**
     * These types may describe the parent context of a selection set.
     */


    function isAbstractType(type) {
      return isInterfaceType(type) || isUnionType(type);
    }

    function assertAbstractType(type) {
      if (!isAbstractType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL abstract type."));
      }

      return type;
    }
    /**
     * List Type Wrapper
     *
     * A list is a wrapping type which points to another type.
     * Lists are often created within the context of defining the fields of
     * an object type.
     *
     * Example:
     *
     *     const PersonType = new GraphQLObjectType({
     *       name: 'Person',
     *       fields: () => ({
     *         parents: { type: new GraphQLList(PersonType) },
     *         children: { type: new GraphQLList(PersonType) },
     *       })
     *     })
     *
     */
    // FIXME: workaround to fix issue with Babel parser

    /* ::
    declare class GraphQLList<+T: GraphQLType> {
      +ofType: T;
      static <T>(ofType: T): GraphQLList<T>;
      // Note: constructors cannot be used for covariant types. Drop the "new".
      constructor(ofType: GraphQLType): void;
    }
    */


    function GraphQLList(ofType) {
      // istanbul ignore else (to be removed in v16.0.0)
      if (this instanceof GraphQLList) {
        this.ofType = assertType(ofType);
      } else {
        return new GraphQLList(ofType);
      }
    } // Need to cast through any to alter the prototype.


    GraphQLList.prototype.toString = function toString() {
      return '[' + String(this.ofType) + ']';
    };

    GraphQLList.prototype.toJSON = function toJSON() {
      return this.toString();
    };

    Object.defineProperty(GraphQLList.prototype, _symbols.SYMBOL_TO_STRING_TAG, {
      get: function get() {
        return 'GraphQLList';
      }
    }); // Print a simplified form when appearing in `inspect` and `util.inspect`.

    (0, _defineInspect.default)(GraphQLList);
    /**
     * Non-Null Type Wrapper
     *
     * A non-null is a wrapping type which points to another type.
     * Non-null types enforce that their values are never null and can ensure
     * an error is raised if this ever occurs during a request. It is useful for
     * fields which you can make a strong guarantee on non-nullability, for example
     * usually the id field of a database row will never be null.
     *
     * Example:
     *
     *     const RowType = new GraphQLObjectType({
     *       name: 'Row',
     *       fields: () => ({
     *         id: { type: new GraphQLNonNull(GraphQLString) },
     *       })
     *     })
     *
     * Note: the enforcement of non-nullability occurs within the executor.
     */
    // FIXME: workaround to fix issue with Babel parser

    /* ::
    declare class GraphQLNonNull<+T: GraphQLNullableType> {
      +ofType: T;
      static <T>(ofType: T): GraphQLNonNull<T>;
      // Note: constructors cannot be used for covariant types. Drop the "new".
      constructor(ofType: GraphQLType): void;
    }
    */

    function GraphQLNonNull(ofType) {
      // istanbul ignore else (to be removed in v16.0.0)
      if (this instanceof GraphQLNonNull) {
        this.ofType = assertNullableType(ofType);
      } else {
        return new GraphQLNonNull(ofType);
      }
    } // Need to cast through any to alter the prototype.


    GraphQLNonNull.prototype.toString = function toString() {
      return String(this.ofType) + '!';
    };

    GraphQLNonNull.prototype.toJSON = function toJSON() {
      return this.toString();
    };

    Object.defineProperty(GraphQLNonNull.prototype, _symbols.SYMBOL_TO_STRING_TAG, {
      get: function get() {
        return 'GraphQLNonNull';
      }
    }); // Print a simplified form when appearing in `inspect` and `util.inspect`.

    (0, _defineInspect.default)(GraphQLNonNull);
    /**
     * These types wrap and modify other types
     */

    function isWrappingType(type) {
      return isListType(type) || isNonNullType(type);
    }

    function assertWrappingType(type) {
      if (!isWrappingType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL wrapping type."));
      }

      return type;
    }
    /**
     * These types can all accept null as a value.
     */


    function isNullableType(type) {
      return isType(type) && !isNonNullType(type);
    }

    function assertNullableType(type) {
      if (!isNullableType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL nullable type."));
      }

      return type;
    }
    /* eslint-disable no-redeclare */


    function getNullableType(type) {
      /* eslint-enable no-redeclare */
      if (type) {
        return isNonNullType(type) ? type.ofType : type;
      }
    }
    /**
     * These named types do not include modifiers like List or NonNull.
     */


    function isNamedType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);
    }

    function assertNamedType(type) {
      if (!isNamedType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL named type."));
      }

      return type;
    }
    /* eslint-disable no-redeclare */


    function getNamedType(type) {
      /* eslint-enable no-redeclare */
      if (type) {
        var unwrappedType = type;

        while (isWrappingType(unwrappedType)) {
          unwrappedType = unwrappedType.ofType;
        }

        return unwrappedType;
      }
    }
    /**
     * Used while defining GraphQL types to allow for circular references in
     * otherwise immutable type definitions.
     */


    function resolveThunk(thunk) {
      // $FlowFixMe[incompatible-use]
      return typeof thunk === 'function' ? thunk() : thunk;
    }

    function undefineIfEmpty(arr) {
      return arr && arr.length > 0 ? arr : undefined;
    }
    /**
     * Scalar Type Definition
     *
     * The leaf values of any request and input values to arguments are
     * Scalars (or Enums) and are defined with a name and a series of functions
     * used to parse input from ast or variables and to ensure validity.
     *
     * If a type's serialize function does not return a value (i.e. it returns
     * `undefined`) then an error will be raised and a `null` value will be returned
     * in the response. If the serialize function returns `null`, then no error will
     * be included in the response.
     *
     * Example:
     *
     *     const OddType = new GraphQLScalarType({
     *       name: 'Odd',
     *       serialize(value) {
     *         if (value % 2 === 1) {
     *           return value;
     *         }
     *       }
     *     });
     *
     */


    var GraphQLScalarType = /*#__PURE__*/function () {
      function GraphQLScalarType(config) {
        var _config$parseValue, _config$serialize, _config$parseLiteral;

        var parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : _identityFunc.default;
        this.name = config.name;
        this.description = config.description;
        this.specifiedByUrl = config.specifiedByUrl;
        this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : _identityFunc.default;
        this.parseValue = parseValue;
        this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : function (node, variables) {
          return parseValue((0, _valueFromASTUntyped.valueFromASTUntyped)(node, variables));
        };
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
        config.specifiedByUrl == null || typeof config.specifiedByUrl === 'string' || (0, _devAssert.default)(0, "".concat(this.name, " must provide \"specifiedByUrl\" as a string, ") + "but got: ".concat((0, _inspect.default)(config.specifiedByUrl), "."));
        config.serialize == null || typeof config.serialize === 'function' || (0, _devAssert.default)(0, "".concat(this.name, " must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided."));

        if (config.parseLiteral) {
          typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || (0, _devAssert.default)(0, "".concat(this.name, " must provide both \"parseValue\" and \"parseLiteral\" functions."));
        }
      }

      var _proto = GraphQLScalarType.prototype;

      _proto.toConfig = function toConfig() {
        var _this$extensionASTNod;

        return {
          name: this.name,
          description: this.description,
          specifiedByUrl: this.specifiedByUrl,
          serialize: this.serialize,
          parseValue: this.parseValue,
          parseLiteral: this.parseLiteral,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : []
        };
      };

      _proto.toString = function toString() {
        return this.name;
      };

      _proto.toJSON = function toJSON() {
        return this.toString();
      } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
      ;

      _createClass(GraphQLScalarType, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'GraphQLScalarType';
        }
      }]);

      return GraphQLScalarType;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


    exports.GraphQLScalarType = GraphQLScalarType;
    (0, _defineInspect.default)(GraphQLScalarType);
    /**
     * Object Type Definition
     *
     * Almost all of the GraphQL types you define will be object types. Object types
     * have a name, but most importantly describe their fields.
     *
     * Example:
     *
     *     const AddressType = new GraphQLObjectType({
     *       name: 'Address',
     *       fields: {
     *         street: { type: GraphQLString },
     *         number: { type: GraphQLInt },
     *         formatted: {
     *           type: GraphQLString,
     *           resolve(obj) {
     *             return obj.number + ' ' + obj.street
     *           }
     *         }
     *       }
     *     });
     *
     * When two types need to refer to each other, or a type needs to refer to
     * itself in a field, you can use a function expression (aka a closure or a
     * thunk) to supply the fields lazily.
     *
     * Example:
     *
     *     const PersonType = new GraphQLObjectType({
     *       name: 'Person',
     *       fields: () => ({
     *         name: { type: GraphQLString },
     *         bestFriend: { type: PersonType },
     *       })
     *     });
     *
     */

    var GraphQLObjectType = /*#__PURE__*/function () {
      function GraphQLObjectType(config) {
        this.name = config.name;
        this.description = config.description;
        this.isTypeOf = config.isTypeOf;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._fields = defineFieldMap.bind(undefined, config);
        this._interfaces = defineInterfaces.bind(undefined, config);
        typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
        config.isTypeOf == null || typeof config.isTypeOf === 'function' || (0, _devAssert.default)(0, "".concat(this.name, " must provide \"isTypeOf\" as a function, ") + "but got: ".concat((0, _inspect.default)(config.isTypeOf), "."));
      }

      var _proto2 = GraphQLObjectType.prototype;

      _proto2.getFields = function getFields() {
        if (typeof this._fields === 'function') {
          this._fields = this._fields();
        }

        return this._fields;
      };

      _proto2.getInterfaces = function getInterfaces() {
        if (typeof this._interfaces === 'function') {
          this._interfaces = this._interfaces();
        }

        return this._interfaces;
      };

      _proto2.toConfig = function toConfig() {
        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: fieldsToFieldsConfig(this.getFields()),
          isTypeOf: this.isTypeOf,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes || []
        };
      };

      _proto2.toString = function toString() {
        return this.name;
      };

      _proto2.toJSON = function toJSON() {
        return this.toString();
      } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
      ;

      _createClass(GraphQLObjectType, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'GraphQLObjectType';
        }
      }]);

      return GraphQLObjectType;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


    exports.GraphQLObjectType = GraphQLObjectType;
    (0, _defineInspect.default)(GraphQLObjectType);

    function defineInterfaces(config) {
      var _resolveThunk;

      var interfaces = (_resolveThunk = resolveThunk(config.interfaces)) !== null && _resolveThunk !== void 0 ? _resolveThunk : [];
      Array.isArray(interfaces) || (0, _devAssert.default)(0, "".concat(config.name, " interfaces must be an Array or a function which returns an Array."));
      return interfaces;
    }

    function defineFieldMap(config) {
      var fieldMap = resolveThunk(config.fields);
      isPlainObj(fieldMap) || (0, _devAssert.default)(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
      return (0, _mapValue.default)(fieldMap, function (fieldConfig, fieldName) {
        var _fieldConfig$args;

        isPlainObj(fieldConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " field config must be an object."));
        !('isDeprecated' in fieldConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " should provide \"deprecationReason\" instead of \"isDeprecated\"."));
        fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " field resolver must be a function if ") + "provided, but got: ".concat((0, _inspect.default)(fieldConfig.resolve), "."));
        var argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
        isPlainObj(argsConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " args must be an object with argument names as keys."));
        var args = (0, _objectEntries.default)(argsConfig).map(function (_ref) {
          var argName = _ref[0],
              argConfig = _ref[1];
          return {
            name: argName,
            description: argConfig.description,
            type: argConfig.type,
            defaultValue: argConfig.defaultValue,
            deprecationReason: argConfig.deprecationReason,
            extensions: argConfig.extensions && (0, _toObjMap.default)(argConfig.extensions),
            astNode: argConfig.astNode
          };
        });
        return {
          name: fieldName,
          description: fieldConfig.description,
          type: fieldConfig.type,
          args: args,
          resolve: fieldConfig.resolve,
          subscribe: fieldConfig.subscribe,
          isDeprecated: fieldConfig.deprecationReason != null,
          deprecationReason: fieldConfig.deprecationReason,
          extensions: fieldConfig.extensions && (0, _toObjMap.default)(fieldConfig.extensions),
          astNode: fieldConfig.astNode
        };
      });
    }

    function isPlainObj(obj) {
      return (0, _isObjectLike.default)(obj) && !Array.isArray(obj);
    }

    function fieldsToFieldsConfig(fields) {
      return (0, _mapValue.default)(fields, function (field) {
        return {
          description: field.description,
          type: field.type,
          args: argsToArgsConfig(field.args),
          resolve: field.resolve,
          subscribe: field.subscribe,
          deprecationReason: field.deprecationReason,
          extensions: field.extensions,
          astNode: field.astNode
        };
      });
    }
    /**
     * @internal
     */


    function argsToArgsConfig(args) {
      return (0, _keyValMap.default)(args, function (arg) {
        return arg.name;
      }, function (arg) {
        return {
          description: arg.description,
          type: arg.type,
          defaultValue: arg.defaultValue,
          deprecationReason: arg.deprecationReason,
          extensions: arg.extensions,
          astNode: arg.astNode
        };
      });
    }

    function isRequiredArgument(arg) {
      return isNonNullType(arg.type) && arg.defaultValue === undefined;
    }
    /**
     * Interface Type Definition
     *
     * When a field can return one of a heterogeneous set of types, a Interface type
     * is used to describe what types are possible, what fields are in common across
     * all types, as well as a function to determine which type is actually used
     * when the field is resolved.
     *
     * Example:
     *
     *     const EntityType = new GraphQLInterfaceType({
     *       name: 'Entity',
     *       fields: {
     *         name: { type: GraphQLString }
     *       }
     *     });
     *
     */


    var GraphQLInterfaceType = /*#__PURE__*/function () {
      function GraphQLInterfaceType(config) {
        this.name = config.name;
        this.description = config.description;
        this.resolveType = config.resolveType;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._fields = defineFieldMap.bind(undefined, config);
        this._interfaces = defineInterfaces.bind(undefined, config);
        typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
        config.resolveType == null || typeof config.resolveType === 'function' || (0, _devAssert.default)(0, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat((0, _inspect.default)(config.resolveType), "."));
      }

      var _proto3 = GraphQLInterfaceType.prototype;

      _proto3.getFields = function getFields() {
        if (typeof this._fields === 'function') {
          this._fields = this._fields();
        }

        return this._fields;
      };

      _proto3.getInterfaces = function getInterfaces() {
        if (typeof this._interfaces === 'function') {
          this._interfaces = this._interfaces();
        }

        return this._interfaces;
      };

      _proto3.toConfig = function toConfig() {
        var _this$extensionASTNod2;

        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: fieldsToFieldsConfig(this.getFields()),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod2 = this.extensionASTNodes) !== null && _this$extensionASTNod2 !== void 0 ? _this$extensionASTNod2 : []
        };
      };

      _proto3.toString = function toString() {
        return this.name;
      };

      _proto3.toJSON = function toJSON() {
        return this.toString();
      } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
      ;

      _createClass(GraphQLInterfaceType, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'GraphQLInterfaceType';
        }
      }]);

      return GraphQLInterfaceType;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


    exports.GraphQLInterfaceType = GraphQLInterfaceType;
    (0, _defineInspect.default)(GraphQLInterfaceType);
    /**
     * Union Type Definition
     *
     * When a field can return one of a heterogeneous set of types, a Union type
     * is used to describe what types are possible as well as providing a function
     * to determine which type is actually used when the field is resolved.
     *
     * Example:
     *
     *     const PetType = new GraphQLUnionType({
     *       name: 'Pet',
     *       types: [ DogType, CatType ],
     *       resolveType(value) {
     *         if (value instanceof Dog) {
     *           return DogType;
     *         }
     *         if (value instanceof Cat) {
     *           return CatType;
     *         }
     *       }
     *     });
     *
     */

    var GraphQLUnionType = /*#__PURE__*/function () {
      function GraphQLUnionType(config) {
        this.name = config.name;
        this.description = config.description;
        this.resolveType = config.resolveType;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._types = defineTypes.bind(undefined, config);
        typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
        config.resolveType == null || typeof config.resolveType === 'function' || (0, _devAssert.default)(0, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat((0, _inspect.default)(config.resolveType), "."));
      }

      var _proto4 = GraphQLUnionType.prototype;

      _proto4.getTypes = function getTypes() {
        if (typeof this._types === 'function') {
          this._types = this._types();
        }

        return this._types;
      };

      _proto4.toConfig = function toConfig() {
        var _this$extensionASTNod3;

        return {
          name: this.name,
          description: this.description,
          types: this.getTypes(),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod3 = this.extensionASTNodes) !== null && _this$extensionASTNod3 !== void 0 ? _this$extensionASTNod3 : []
        };
      };

      _proto4.toString = function toString() {
        return this.name;
      };

      _proto4.toJSON = function toJSON() {
        return this.toString();
      } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
      ;

      _createClass(GraphQLUnionType, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'GraphQLUnionType';
        }
      }]);

      return GraphQLUnionType;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


    exports.GraphQLUnionType = GraphQLUnionType;
    (0, _defineInspect.default)(GraphQLUnionType);

    function defineTypes(config) {
      var types = resolveThunk(config.types);
      Array.isArray(types) || (0, _devAssert.default)(0, "Must provide Array of types or a function which returns such an array for Union ".concat(config.name, "."));
      return types;
    }
    /**
     * Enum Type Definition
     *
     * Some leaf values of requests and input values are Enums. GraphQL serializes
     * Enum values as strings, however internally Enums can be represented by any
     * kind of type, often integers.
     *
     * Example:
     *
     *     const RGBType = new GraphQLEnumType({
     *       name: 'RGB',
     *       values: {
     *         RED: { value: 0 },
     *         GREEN: { value: 1 },
     *         BLUE: { value: 2 }
     *       }
     *     });
     *
     * Note: If a value is not provided in a definition, the name of the enum value
     * will be used as its internal value.
     */


    var GraphQLEnumType
    /* <T> */
    =
    /*#__PURE__*/
    function () {
      function GraphQLEnumType(config) {
        this.name = config.name;
        this.description = config.description;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._values = defineEnumValues(this.name, config.values);
        this._valueLookup = new Map(this._values.map(function (enumValue) {
          return [enumValue.value, enumValue];
        }));
        this._nameLookup = (0, _keyMap.default)(this._values, function (value) {
          return value.name;
        });
        typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
      }

      var _proto5 = GraphQLEnumType.prototype;

      _proto5.getValues = function getValues() {
        return this._values;
      };

      _proto5.getValue = function getValue(name) {
        return this._nameLookup[name];
      };

      _proto5.serialize = function serialize(outputValue) {
        var enumValue = this._valueLookup.get(outputValue);

        if (enumValue === undefined) {
          throw new _GraphQLError.GraphQLError("Enum \"".concat(this.name, "\" cannot represent value: ").concat((0, _inspect.default)(outputValue)));
        }

        return enumValue.name;
      };

      _proto5.parseValue = function parseValue(inputValue)
      /* T */
      {
        if (typeof inputValue !== 'string') {
          var valueStr = (0, _inspect.default)(inputValue);
          throw new _GraphQLError.GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-string value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr));
        }

        var enumValue = this.getValue(inputValue);

        if (enumValue == null) {
          throw new _GraphQLError.GraphQLError("Value \"".concat(inputValue, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, inputValue));
        }

        return enumValue.value;
      };

      _proto5.parseLiteral = function parseLiteral(valueNode, _variables)
      /* T */
      {
        // Note: variables will be resolved to a value before calling this function.
        if (valueNode.kind !== _kinds.Kind.ENUM) {
          var valueStr = (0, _printer.print)(valueNode);
          throw new _GraphQLError.GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-enum value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr), valueNode);
        }

        var enumValue = this.getValue(valueNode.value);

        if (enumValue == null) {
          var _valueStr = (0, _printer.print)(valueNode);

          throw new _GraphQLError.GraphQLError("Value \"".concat(_valueStr, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, _valueStr), valueNode);
        }

        return enumValue.value;
      };

      _proto5.toConfig = function toConfig() {
        var _this$extensionASTNod4;

        var values = (0, _keyValMap.default)(this.getValues(), function (value) {
          return value.name;
        }, function (value) {
          return {
            description: value.description,
            value: value.value,
            deprecationReason: value.deprecationReason,
            extensions: value.extensions,
            astNode: value.astNode
          };
        });
        return {
          name: this.name,
          description: this.description,
          values: values,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod4 = this.extensionASTNodes) !== null && _this$extensionASTNod4 !== void 0 ? _this$extensionASTNod4 : []
        };
      };

      _proto5.toString = function toString() {
        return this.name;
      };

      _proto5.toJSON = function toJSON() {
        return this.toString();
      } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
      ;

      _createClass(GraphQLEnumType, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'GraphQLEnumType';
        }
      }]);

      return GraphQLEnumType;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


    exports.GraphQLEnumType = GraphQLEnumType;
    (0, _defineInspect.default)(GraphQLEnumType);

    function didYouMeanEnumValue(enumType, unknownValueStr) {
      var allNames = enumType.getValues().map(function (value) {
        return value.name;
      });
      var suggestedValues = (0, _suggestionList.default)(unknownValueStr, allNames);
      return (0, _didYouMean.default)('the enum value', suggestedValues);
    }

    function defineEnumValues(typeName, valueMap) {
      isPlainObj(valueMap) || (0, _devAssert.default)(0, "".concat(typeName, " values must be an object with value names as keys."));
      return (0, _objectEntries.default)(valueMap).map(function (_ref2) {
        var valueName = _ref2[0],
            valueConfig = _ref2[1];
        isPlainObj(valueConfig) || (0, _devAssert.default)(0, "".concat(typeName, ".").concat(valueName, " must refer to an object with a \"value\" key ") + "representing an internal value but got: ".concat((0, _inspect.default)(valueConfig), "."));
        !('isDeprecated' in valueConfig) || (0, _devAssert.default)(0, "".concat(typeName, ".").concat(valueName, " should provide \"deprecationReason\" instead of \"isDeprecated\"."));
        return {
          name: valueName,
          description: valueConfig.description,
          value: valueConfig.value !== undefined ? valueConfig.value : valueName,
          isDeprecated: valueConfig.deprecationReason != null,
          deprecationReason: valueConfig.deprecationReason,
          extensions: valueConfig.extensions && (0, _toObjMap.default)(valueConfig.extensions),
          astNode: valueConfig.astNode
        };
      });
    }
    /**
     * Input Object Type Definition
     *
     * An input object defines a structured collection of fields which may be
     * supplied to a field argument.
     *
     * Using `NonNull` will ensure that a value must be provided by the query
     *
     * Example:
     *
     *     const GeoPoint = new GraphQLInputObjectType({
     *       name: 'GeoPoint',
     *       fields: {
     *         lat: { type: new GraphQLNonNull(GraphQLFloat) },
     *         lon: { type: new GraphQLNonNull(GraphQLFloat) },
     *         alt: { type: GraphQLFloat, defaultValue: 0 },
     *       }
     *     });
     *
     */


    var GraphQLInputObjectType = /*#__PURE__*/function () {
      function GraphQLInputObjectType(config) {
        this.name = config.name;
        this.description = config.description;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._fields = defineInputFieldMap.bind(undefined, config);
        typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
      }

      var _proto6 = GraphQLInputObjectType.prototype;

      _proto6.getFields = function getFields() {
        if (typeof this._fields === 'function') {
          this._fields = this._fields();
        }

        return this._fields;
      };

      _proto6.toConfig = function toConfig() {
        var _this$extensionASTNod5;

        var fields = (0, _mapValue.default)(this.getFields(), function (field) {
          return {
            description: field.description,
            type: field.type,
            defaultValue: field.defaultValue,
            extensions: field.extensions,
            astNode: field.astNode
          };
        });
        return {
          name: this.name,
          description: this.description,
          fields: fields,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod5 = this.extensionASTNodes) !== null && _this$extensionASTNod5 !== void 0 ? _this$extensionASTNod5 : []
        };
      };

      _proto6.toString = function toString() {
        return this.name;
      };

      _proto6.toJSON = function toJSON() {
        return this.toString();
      } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
      ;

      _createClass(GraphQLInputObjectType, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'GraphQLInputObjectType';
        }
      }]);

      return GraphQLInputObjectType;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


    exports.GraphQLInputObjectType = GraphQLInputObjectType;
    (0, _defineInspect.default)(GraphQLInputObjectType);

    function defineInputFieldMap(config) {
      var fieldMap = resolveThunk(config.fields);
      isPlainObj(fieldMap) || (0, _devAssert.default)(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
      return (0, _mapValue.default)(fieldMap, function (fieldConfig, fieldName) {
        !('resolve' in fieldConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " field has a resolve property, but Input Types cannot define resolvers."));
        return {
          name: fieldName,
          description: fieldConfig.description,
          type: fieldConfig.type,
          defaultValue: fieldConfig.defaultValue,
          deprecationReason: fieldConfig.deprecationReason,
          extensions: fieldConfig.extensions && (0, _toObjMap.default)(fieldConfig.extensions),
          astNode: fieldConfig.astNode
        };
      });
    }

    function isRequiredInputField(field) {
      return isNonNullType(field.type) && field.defaultValue === undefined;
    }
  }, {
    "../polyfills/objectEntries.mjs": "../node_modules/graphql/polyfills/objectEntries.mjs",
    "../polyfills/symbols.mjs": "../node_modules/graphql/polyfills/symbols.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/keyMap.mjs": "../node_modules/graphql/jsutils/keyMap.mjs",
    "../jsutils/mapValue.mjs": "../node_modules/graphql/jsutils/mapValue.mjs",
    "../jsutils/toObjMap.mjs": "../node_modules/graphql/jsutils/toObjMap.mjs",
    "../jsutils/devAssert.mjs": "../node_modules/graphql/jsutils/devAssert.mjs",
    "../jsutils/keyValMap.mjs": "../node_modules/graphql/jsutils/keyValMap.mjs",
    "../jsutils/instanceOf.mjs": "../node_modules/graphql/jsutils/instanceOf.mjs",
    "../jsutils/didYouMean.mjs": "../node_modules/graphql/jsutils/didYouMean.mjs",
    "../jsutils/isObjectLike.mjs": "../node_modules/graphql/jsutils/isObjectLike.mjs",
    "../jsutils/identityFunc.mjs": "../node_modules/graphql/jsutils/identityFunc.mjs",
    "../jsutils/defineInspect.mjs": "../node_modules/graphql/jsutils/defineInspect.mjs",
    "../jsutils/suggestionList.mjs": "../node_modules/graphql/jsutils/suggestionList.mjs",
    "../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../language/printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "../utilities/valueFromASTUntyped.mjs": "../node_modules/graphql/utilities/valueFromASTUntyped.mjs"
  }],
  "../node_modules/graphql/utilities/typeComparators.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isEqualType = isEqualType;
    exports.isTypeSubTypeOf = isTypeSubTypeOf;
    exports.doTypesOverlap = doTypesOverlap;

    var _definition = require("../type/definition.mjs");
    /**
     * Provided two types, return true if the types are equal (invariant).
     */


    function isEqualType(typeA, typeB) {
      // Equivalent types are equal.
      if (typeA === typeB) {
        return true;
      } // If either type is non-null, the other must also be non-null.


      if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
      } // If either type is a list, the other must also be a list.


      if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
      } // Otherwise the types are not equal.


      return false;
    }
    /**
     * Provided a type and a super type, return true if the first type is either
     * equal or a subset of the second super type (covariant).
     */


    function isTypeSubTypeOf(schema, maybeSubType, superType) {
      // Equivalent type is a valid subtype
      if (maybeSubType === superType) {
        return true;
      } // If superType is non-null, maybeSubType must also be non-null.


      if ((0, _definition.isNonNullType)(superType)) {
        if ((0, _definition.isNonNullType)(maybeSubType)) {
          return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        }

        return false;
      }

      if ((0, _definition.isNonNullType)(maybeSubType)) {
        // If superType is nullable, maybeSubType may be non-null or nullable.
        return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
      } // If superType type is a list, maybeSubType type must also be a list.


      if ((0, _definition.isListType)(superType)) {
        if ((0, _definition.isListType)(maybeSubType)) {
          return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        }

        return false;
      }

      if ((0, _definition.isListType)(maybeSubType)) {
        // If superType is not a list, maybeSubType must also be not a list.
        return false;
      } // If superType type is an abstract type, check if it is super type of maybeSubType.
      // Otherwise, the child type is not a valid subtype of the parent type.


      return (0, _definition.isAbstractType)(superType) && ((0, _definition.isInterfaceType)(maybeSubType) || (0, _definition.isObjectType)(maybeSubType)) && schema.isSubType(superType, maybeSubType);
    }
    /**
     * Provided two composite types, determine if they "overlap". Two composite
     * types overlap when the Sets of possible concrete types for each intersect.
     *
     * This is often used to determine if a fragment of a given type could possibly
     * be visited in a context of another type.
     *
     * This function is commutative.
     */


    function doTypesOverlap(schema, typeA, typeB) {
      // Equivalent types overlap
      if (typeA === typeB) {
        return true;
      }

      if ((0, _definition.isAbstractType)(typeA)) {
        if ((0, _definition.isAbstractType)(typeB)) {
          // If both types are abstract, then determine if there is any intersection
          // between possible concrete types of each.
          return schema.getPossibleTypes(typeA).some(function (type) {
            return schema.isSubType(typeB, type);
          });
        } // Determine if the latter type is a possible concrete type of the former.


        return schema.isSubType(typeA, typeB);
      }

      if ((0, _definition.isAbstractType)(typeB)) {
        // Determine if the former type is a possible concrete type of the latter.
        return schema.isSubType(typeB, typeA);
      } // Otherwise the types do not overlap.


      return false;
    }
  }, {
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/polyfills/arrayFrom.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _symbols = require("./symbols.mjs");
    /* eslint-disable no-redeclare */
    // $FlowFixMe[name-already-bound]


    var arrayFrom = Array.from || function (obj, mapFn, thisArg) {
      if (obj == null) {
        throw new TypeError('Array.from requires an array-like object - not null or undefined');
      } // Is Iterable?


      var iteratorMethod = obj[_symbols.SYMBOL_ITERATOR];

      if (typeof iteratorMethod === 'function') {
        var iterator = iteratorMethod.call(obj);
        var result = [];
        var step;

        for (var i = 0; !(step = iterator.next()).done; ++i) {
          result.push(mapFn.call(thisArg, step.value, i)); // Infinite Iterators could cause forEach to run forever.
          // After a very large number of iterations, produce an error.
          // istanbul ignore if (Too big to actually test)

          if (i > 9999999) {
            throw new TypeError('Near-infinite iteration.');
          }
        }

        return result;
      } // Is Array like?


      var length = obj.length;

      if (typeof length === 'number' && length >= 0 && length % 1 === 0) {
        var _result = [];

        for (var _i = 0; _i < length; ++_i) {
          if (Object.prototype.hasOwnProperty.call(obj, _i)) {
            _result.push(mapFn.call(thisArg, obj[_i], _i));
          }
        }

        return _result;
      }

      return [];
    };

    var _default = arrayFrom;
    exports.default = _default;
  }, {
    "./symbols.mjs": "../node_modules/graphql/polyfills/symbols.mjs"
  }],
  "../node_modules/graphql/polyfills/isFinite.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    /* eslint-disable no-redeclare */
    // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441

    var isFinitePolyfill = Number.isFinite || function (value) {
      return typeof value === 'number' && isFinite(value);
    };

    var _default = isFinitePolyfill;
    exports.default = _default;
  }, {}],
  "../node_modules/graphql/jsutils/isCollection.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isCollection;

    var _symbols = require("../polyfills/symbols.mjs");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }
    /**
     * Returns true if the provided object is an Object (i.e. not a string literal)
     * and is either Iterable or Array-like.
     *
     * This may be used in place of [Array.isArray()][isArray] to determine if an
     * object should be iterated-over. It always excludes string literals and
     * includes Arrays (regardless of if it is Iterable). It also includes other
     * Array-like objects such as NodeList, TypedArray, and Buffer.
     *
     * @example
     *
     * isCollection([ 1, 2, 3 ]) // true
     * isCollection('ABC') // false
     * isCollection({ length: 1, 0: 'Alpha' }) // true
     * isCollection({ key: 'value' }) // false
     * isCollection(new Map()) // true
     *
     * @param obj
     *   An Object value which might implement the Iterable or Array-like protocols.
     * @return {boolean} true if Iterable or Array-like Object.
     */


    function isCollection(obj) {
      if (obj == null || _typeof(obj) !== 'object') {
        return false;
      } // Is Array like?


      var length = obj.length;

      if (typeof length === 'number' && length >= 0 && length % 1 === 0) {
        return true;
      } // Is Iterable?


      return typeof obj[_symbols.SYMBOL_ITERATOR] === 'function';
    }
  }, {
    "../polyfills/symbols.mjs": "../node_modules/graphql/polyfills/symbols.mjs"
  }],
  "../node_modules/graphql/polyfills/isInteger.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    /* eslint-disable no-redeclare */
    // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441

    var isInteger = Number.isInteger || function (value) {
      return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
    };

    var _default = isInteger;
    exports.default = _default;
  }, {}],
  "../node_modules/graphql/type/scalars.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isSpecifiedScalarType = isSpecifiedScalarType;
    exports.specifiedScalarTypes = exports.GraphQLID = exports.GraphQLBoolean = exports.GraphQLString = exports.GraphQLFloat = exports.GraphQLInt = void 0;

    var _isFinite = _interopRequireDefault(require("../polyfills/isFinite.mjs"));

    var _isInteger = _interopRequireDefault(require("../polyfills/isInteger.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.mjs"));

    var _kinds = require("../language/kinds.mjs");

    var _printer = require("../language/printer.mjs");

    var _GraphQLError = require("../error/GraphQLError.mjs");

    var _definition = require("./definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    } // As per the GraphQL Spec, Integers are only treated as valid when a valid
    // 32-bit signed integer, providing the broadest support across platforms.
    //
    // n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because
    // they are internally represented as IEEE 754 doubles.


    var MAX_INT = 2147483647;
    var MIN_INT = -2147483648;

    function serializeInt(outputValue) {
      var coercedValue = serializeObject(outputValue);

      if (typeof coercedValue === 'boolean') {
        return coercedValue ? 1 : 0;
      }

      var num = coercedValue;

      if (typeof coercedValue === 'string' && coercedValue !== '') {
        num = Number(coercedValue);
      }

      if (!(0, _isInteger.default)(num)) {
        throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _inspect.default)(coercedValue)));
      }

      if (num > MAX_INT || num < MIN_INT) {
        throw new _GraphQLError.GraphQLError('Int cannot represent non 32-bit signed integer value: ' + (0, _inspect.default)(coercedValue));
      }

      return num;
    }

    function coerceInt(inputValue) {
      if (!(0, _isInteger.default)(inputValue)) {
        throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _inspect.default)(inputValue)));
      }

      if (inputValue > MAX_INT || inputValue < MIN_INT) {
        throw new _GraphQLError.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(inputValue));
      }

      return inputValue;
    }

    var GraphQLInt = new _definition.GraphQLScalarType({
      name: 'Int',
      description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',
      serialize: serializeInt,
      parseValue: coerceInt,
      parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.INT) {
          throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _printer.print)(valueNode)), valueNode);
        }

        var num = parseInt(valueNode.value, 10);

        if (num > MAX_INT || num < MIN_INT) {
          throw new _GraphQLError.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(valueNode.value), valueNode);
        }

        return num;
      }
    });
    exports.GraphQLInt = GraphQLInt;

    function serializeFloat(outputValue) {
      var coercedValue = serializeObject(outputValue);

      if (typeof coercedValue === 'boolean') {
        return coercedValue ? 1 : 0;
      }

      var num = coercedValue;

      if (typeof coercedValue === 'string' && coercedValue !== '') {
        num = Number(coercedValue);
      }

      if (!(0, _isFinite.default)(num)) {
        throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _inspect.default)(coercedValue)));
      }

      return num;
    }

    function coerceFloat(inputValue) {
      if (!(0, _isFinite.default)(inputValue)) {
        throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _inspect.default)(inputValue)));
      }

      return inputValue;
    }

    var GraphQLFloat = new _definition.GraphQLScalarType({
      name: 'Float',
      description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',
      serialize: serializeFloat,
      parseValue: coerceFloat,
      parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.FLOAT && valueNode.kind !== _kinds.Kind.INT) {
          throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _printer.print)(valueNode)), valueNode);
        }

        return parseFloat(valueNode.value);
      }
    }); // Support serializing objects with custom valueOf() or toJSON() functions -
    // a common way to represent a complex value which can be represented as
    // a string (ex: MongoDB id objects).

    exports.GraphQLFloat = GraphQLFloat;

    function serializeObject(outputValue) {
      if ((0, _isObjectLike.default)(outputValue)) {
        if (typeof outputValue.valueOf === 'function') {
          var valueOfResult = outputValue.valueOf();

          if (!(0, _isObjectLike.default)(valueOfResult)) {
            return valueOfResult;
          }
        }

        if (typeof outputValue.toJSON === 'function') {
          // $FlowFixMe[incompatible-use]
          return outputValue.toJSON();
        }
      }

      return outputValue;
    }

    function serializeString(outputValue) {
      var coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not
      // attempt to coerce object, function, symbol, or other types as strings.

      if (typeof coercedValue === 'string') {
        return coercedValue;
      }

      if (typeof coercedValue === 'boolean') {
        return coercedValue ? 'true' : 'false';
      }

      if ((0, _isFinite.default)(coercedValue)) {
        return coercedValue.toString();
      }

      throw new _GraphQLError.GraphQLError("String cannot represent value: ".concat((0, _inspect.default)(outputValue)));
    }

    function coerceString(inputValue) {
      if (typeof inputValue !== 'string') {
        throw new _GraphQLError.GraphQLError("String cannot represent a non string value: ".concat((0, _inspect.default)(inputValue)));
      }

      return inputValue;
    }

    var GraphQLString = new _definition.GraphQLScalarType({
      name: 'String',
      description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',
      serialize: serializeString,
      parseValue: coerceString,
      parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.STRING) {
          throw new _GraphQLError.GraphQLError("String cannot represent a non string value: ".concat((0, _printer.print)(valueNode)), valueNode);
        }

        return valueNode.value;
      }
    });
    exports.GraphQLString = GraphQLString;

    function serializeBoolean(outputValue) {
      var coercedValue = serializeObject(outputValue);

      if (typeof coercedValue === 'boolean') {
        return coercedValue;
      }

      if ((0, _isFinite.default)(coercedValue)) {
        return coercedValue !== 0;
      }

      throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _inspect.default)(coercedValue)));
    }

    function coerceBoolean(inputValue) {
      if (typeof inputValue !== 'boolean') {
        throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _inspect.default)(inputValue)));
      }

      return inputValue;
    }

    var GraphQLBoolean = new _definition.GraphQLScalarType({
      name: 'Boolean',
      description: 'The `Boolean` scalar type represents `true` or `false`.',
      serialize: serializeBoolean,
      parseValue: coerceBoolean,
      parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.BOOLEAN) {
          throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _printer.print)(valueNode)), valueNode);
        }

        return valueNode.value;
      }
    });
    exports.GraphQLBoolean = GraphQLBoolean;

    function serializeID(outputValue) {
      var coercedValue = serializeObject(outputValue);

      if (typeof coercedValue === 'string') {
        return coercedValue;
      }

      if ((0, _isInteger.default)(coercedValue)) {
        return String(coercedValue);
      }

      throw new _GraphQLError.GraphQLError("ID cannot represent value: ".concat((0, _inspect.default)(outputValue)));
    }

    function coerceID(inputValue) {
      if (typeof inputValue === 'string') {
        return inputValue;
      }

      if ((0, _isInteger.default)(inputValue)) {
        return inputValue.toString();
      }

      throw new _GraphQLError.GraphQLError("ID cannot represent value: ".concat((0, _inspect.default)(inputValue)));
    }

    var GraphQLID = new _definition.GraphQLScalarType({
      name: 'ID',
      description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
      serialize: serializeID,
      parseValue: coerceID,
      parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.STRING && valueNode.kind !== _kinds.Kind.INT) {
          throw new _GraphQLError.GraphQLError('ID cannot represent a non-string and non-integer value: ' + (0, _printer.print)(valueNode), valueNode);
        }

        return valueNode.value;
      }
    });
    exports.GraphQLID = GraphQLID;
    var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);
    exports.specifiedScalarTypes = specifiedScalarTypes;

    function isSpecifiedScalarType(type) {
      return specifiedScalarTypes.some(function (_ref) {
        var name = _ref.name;
        return type.name === name;
      });
    }
  }, {
    "../polyfills/isFinite.mjs": "../node_modules/graphql/polyfills/isFinite.mjs",
    "../polyfills/isInteger.mjs": "../node_modules/graphql/polyfills/isInteger.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/isObjectLike.mjs": "../node_modules/graphql/jsutils/isObjectLike.mjs",
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../language/printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "./definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/utilities/astFromValue.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.astFromValue = astFromValue;

    var _isFinite = _interopRequireDefault(require("../polyfills/isFinite.mjs"));

    var _arrayFrom = _interopRequireDefault(require("../polyfills/arrayFrom.mjs"));

    var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.mjs"));

    var _isCollection = _interopRequireDefault(require("../jsutils/isCollection.mjs"));

    var _kinds = require("../language/kinds.mjs");

    var _scalars = require("../type/scalars.mjs");

    var _definition = require("../type/definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Produces a GraphQL Value AST given a JavaScript object.
     * Function will match JavaScript/JSON values to GraphQL AST schema format
     * by using suggested GraphQLInputType. For example:
     *
     *     astFromValue("value", GraphQLString)
     *
     * A GraphQL type must be provided, which will be used to interpret different
     * JavaScript values.
     *
     * | JSON Value    | GraphQL Value        |
     * | ------------- | -------------------- |
     * | Object        | Input Object         |
     * | Array         | List                 |
     * | Boolean       | Boolean              |
     * | String        | String / Enum Value  |
     * | Number        | Int / Float          |
     * | Mixed         | Enum Value           |
     * | null          | NullValue            |
     *
     */


    function astFromValue(value, type) {
      if ((0, _definition.isNonNullType)(type)) {
        var astValue = astFromValue(value, type.ofType);

        if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === _kinds.Kind.NULL) {
          return null;
        }

        return astValue;
      } // only explicit null, not undefined, NaN


      if (value === null) {
        return {
          kind: _kinds.Kind.NULL
        };
      } // undefined


      if (value === undefined) {
        return null;
      } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
      // the value is not an array, convert the value using the list's item type.


      if ((0, _definition.isListType)(type)) {
        var itemType = type.ofType;

        if ((0, _isCollection.default)(value)) {
          var valuesNodes = []; // Since we transpile for-of in loose mode it doesn't support iterators
          // and it's required to first convert iteratable into array

          for (var _i2 = 0, _arrayFrom2 = (0, _arrayFrom.default)(value); _i2 < _arrayFrom2.length; _i2++) {
            var item = _arrayFrom2[_i2];
            var itemNode = astFromValue(item, itemType);

            if (itemNode != null) {
              valuesNodes.push(itemNode);
            }
          }

          return {
            kind: _kinds.Kind.LIST,
            values: valuesNodes
          };
        }

        return astFromValue(value, itemType);
      } // Populate the fields of the input object by creating ASTs from each value
      // in the JavaScript object according to the fields in the input type.


      if ((0, _definition.isInputObjectType)(type)) {
        if (!(0, _isObjectLike.default)(value)) {
          return null;
        }

        var fieldNodes = [];

        for (var _i4 = 0, _objectValues2 = (0, _objectValues.default)(type.getFields()); _i4 < _objectValues2.length; _i4++) {
          var field = _objectValues2[_i4];
          var fieldValue = astFromValue(value[field.name], field.type);

          if (fieldValue) {
            fieldNodes.push({
              kind: _kinds.Kind.OBJECT_FIELD,
              name: {
                kind: _kinds.Kind.NAME,
                value: field.name
              },
              value: fieldValue
            });
          }
        }

        return {
          kind: _kinds.Kind.OBJECT,
          fields: fieldNodes
        };
      } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


      if ((0, _definition.isLeafType)(type)) {
        // Since value is an internally represented value, it must be serialized
        // to an externally represented value before converting into an AST.
        var serialized = type.serialize(value);

        if (serialized == null) {
          return null;
        } // Others serialize based on their corresponding JavaScript scalar types.


        if (typeof serialized === 'boolean') {
          return {
            kind: _kinds.Kind.BOOLEAN,
            value: serialized
          };
        } // JavaScript numbers can be Int or Float values.


        if (typeof serialized === 'number' && (0, _isFinite.default)(serialized)) {
          var stringNum = String(serialized);
          return integerStringRegExp.test(stringNum) ? {
            kind: _kinds.Kind.INT,
            value: stringNum
          } : {
            kind: _kinds.Kind.FLOAT,
            value: stringNum
          };
        }

        if (typeof serialized === 'string') {
          // Enum types use Enum literals.
          if ((0, _definition.isEnumType)(type)) {
            return {
              kind: _kinds.Kind.ENUM,
              value: serialized
            };
          } // ID types can use Int literals.


          if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {
            return {
              kind: _kinds.Kind.INT,
              value: serialized
            };
          }

          return {
            kind: _kinds.Kind.STRING,
            value: serialized
          };
        }

        throw new TypeError("Cannot convert value to AST: ".concat((0, _inspect.default)(serialized), "."));
      } // istanbul ignore next (Not reachable. All possible input types have been considered)


      false || (0, _invariant.default)(0, 'Unexpected input type: ' + (0, _inspect.default)(type));
    }
    /**
     * IntValue:
     *   - NegativeSign? 0
     *   - NegativeSign? NonZeroDigit ( Digit+ )?
     */


    var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;
  }, {
    "../polyfills/isFinite.mjs": "../node_modules/graphql/polyfills/isFinite.mjs",
    "../polyfills/arrayFrom.mjs": "../node_modules/graphql/polyfills/arrayFrom.mjs",
    "../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../jsutils/isObjectLike.mjs": "../node_modules/graphql/jsutils/isObjectLike.mjs",
    "../jsutils/isCollection.mjs": "../node_modules/graphql/jsutils/isCollection.mjs",
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../type/scalars.mjs": "../node_modules/graphql/type/scalars.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/type/introspection.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isIntrospectionType = isIntrospectionType;
    exports.introspectionTypes = exports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.SchemaMetaFieldDef = exports.__TypeKind = exports.TypeKind = exports.__EnumValue = exports.__InputValue = exports.__Field = exports.__Type = exports.__DirectiveLocation = exports.__Directive = exports.__Schema = void 0;

    var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _printer = require("../language/printer.mjs");

    var _directiveLocation = require("../language/directiveLocation.mjs");

    var _astFromValue = require("../utilities/astFromValue.mjs");

    var _scalars = require("./scalars.mjs");

    var _definition = require("./definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var __Schema = new _definition.GraphQLObjectType({
      name: '__Schema',
      description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',
      fields: function fields() {
        return {
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(schema) {
              return schema.description;
            }
          },
          types: {
            description: 'A list of all types supported by this server.',
            type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type))),
            resolve: function resolve(schema) {
              return (0, _objectValues.default)(schema.getTypeMap());
            }
          },
          queryType: {
            description: 'The type that query operations will be rooted at.',
            type: new _definition.GraphQLNonNull(__Type),
            resolve: function resolve(schema) {
              return schema.getQueryType();
            }
          },
          mutationType: {
            description: 'If this server supports mutation, the type that mutation operations will be rooted at.',
            type: __Type,
            resolve: function resolve(schema) {
              return schema.getMutationType();
            }
          },
          subscriptionType: {
            description: 'If this server support subscription, the type that subscription operations will be rooted at.',
            type: __Type,
            resolve: function resolve(schema) {
              return schema.getSubscriptionType();
            }
          },
          directives: {
            description: 'A list of all directives supported by this server.',
            type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Directive))),
            resolve: function resolve(schema) {
              return schema.getDirectives();
            }
          }
        };
      }
    });

    exports.__Schema = __Schema;

    var __Directive = new _definition.GraphQLObjectType({
      name: '__Directive',
      description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
      fields: function fields() {
        return {
          name: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
            resolve: function resolve(directive) {
              return directive.name;
            }
          },
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(directive) {
              return directive.description;
            }
          },
          isRepeatable: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
            resolve: function resolve(directive) {
              return directive.isRepeatable;
            }
          },
          locations: {
            type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__DirectiveLocation))),
            resolve: function resolve(directive) {
              return directive.locations;
            }
          },
          args: {
            type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),
            resolve: function resolve(directive) {
              return directive.args;
            }
          }
        };
      }
    });

    exports.__Directive = __Directive;

    var __DirectiveLocation = new _definition.GraphQLEnumType({
      name: '__DirectiveLocation',
      description: 'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',
      values: {
        QUERY: {
          value: _directiveLocation.DirectiveLocation.QUERY,
          description: 'Location adjacent to a query operation.'
        },
        MUTATION: {
          value: _directiveLocation.DirectiveLocation.MUTATION,
          description: 'Location adjacent to a mutation operation.'
        },
        SUBSCRIPTION: {
          value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,
          description: 'Location adjacent to a subscription operation.'
        },
        FIELD: {
          value: _directiveLocation.DirectiveLocation.FIELD,
          description: 'Location adjacent to a field.'
        },
        FRAGMENT_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,
          description: 'Location adjacent to a fragment definition.'
        },
        FRAGMENT_SPREAD: {
          value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
          description: 'Location adjacent to a fragment spread.'
        },
        INLINE_FRAGMENT: {
          value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,
          description: 'Location adjacent to an inline fragment.'
        },
        VARIABLE_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION,
          description: 'Location adjacent to a variable definition.'
        },
        SCHEMA: {
          value: _directiveLocation.DirectiveLocation.SCHEMA,
          description: 'Location adjacent to a schema definition.'
        },
        SCALAR: {
          value: _directiveLocation.DirectiveLocation.SCALAR,
          description: 'Location adjacent to a scalar definition.'
        },
        OBJECT: {
          value: _directiveLocation.DirectiveLocation.OBJECT,
          description: 'Location adjacent to an object type definition.'
        },
        FIELD_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
          description: 'Location adjacent to a field definition.'
        },
        ARGUMENT_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
          description: 'Location adjacent to an argument definition.'
        },
        INTERFACE: {
          value: _directiveLocation.DirectiveLocation.INTERFACE,
          description: 'Location adjacent to an interface definition.'
        },
        UNION: {
          value: _directiveLocation.DirectiveLocation.UNION,
          description: 'Location adjacent to a union definition.'
        },
        ENUM: {
          value: _directiveLocation.DirectiveLocation.ENUM,
          description: 'Location adjacent to an enum definition.'
        },
        ENUM_VALUE: {
          value: _directiveLocation.DirectiveLocation.ENUM_VALUE,
          description: 'Location adjacent to an enum value definition.'
        },
        INPUT_OBJECT: {
          value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,
          description: 'Location adjacent to an input object type definition.'
        },
        INPUT_FIELD_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
          description: 'Location adjacent to an input object field definition.'
        }
      }
    });

    exports.__DirectiveLocation = __DirectiveLocation;

    var __Type = new _definition.GraphQLObjectType({
      name: '__Type',
      description: 'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',
      fields: function fields() {
        return {
          kind: {
            type: new _definition.GraphQLNonNull(__TypeKind),
            resolve: function resolve(type) {
              if ((0, _definition.isScalarType)(type)) {
                return TypeKind.SCALAR;
              }

              if ((0, _definition.isObjectType)(type)) {
                return TypeKind.OBJECT;
              }

              if ((0, _definition.isInterfaceType)(type)) {
                return TypeKind.INTERFACE;
              }

              if ((0, _definition.isUnionType)(type)) {
                return TypeKind.UNION;
              }

              if ((0, _definition.isEnumType)(type)) {
                return TypeKind.ENUM;
              }

              if ((0, _definition.isInputObjectType)(type)) {
                return TypeKind.INPUT_OBJECT;
              }

              if ((0, _definition.isListType)(type)) {
                return TypeKind.LIST;
              } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


              if ((0, _definition.isNonNullType)(type)) {
                return TypeKind.NON_NULL;
              } // istanbul ignore next (Not reachable. All possible types have been considered)


              false || (0, _invariant.default)(0, "Unexpected type: \"".concat((0, _inspect.default)(type), "\"."));
            }
          },
          name: {
            type: _scalars.GraphQLString,
            resolve: function resolve(type) {
              return type.name !== undefined ? type.name : undefined;
            }
          },
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(type) {
              return type.description !== undefined ? type.description : undefined;
            }
          },
          specifiedByUrl: {
            type: _scalars.GraphQLString,
            resolve: function resolve(obj) {
              return obj.specifiedByUrl !== undefined ? obj.specifiedByUrl : undefined;
            }
          },
          fields: {
            type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Field)),
            args: {
              includeDeprecated: {
                type: _scalars.GraphQLBoolean,
                defaultValue: false
              }
            },
            resolve: function resolve(type, _ref) {
              var includeDeprecated = _ref.includeDeprecated;

              if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
                var fields = (0, _objectValues.default)(type.getFields());
                return includeDeprecated ? fields : fields.filter(function (field) {
                  return field.deprecationReason == null;
                });
              }
            }
          },
          interfaces: {
            type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
            resolve: function resolve(type) {
              if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
                return type.getInterfaces();
              }
            }
          },
          possibleTypes: {
            type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
            resolve: function resolve(type, _args, _context, _ref2) {
              var schema = _ref2.schema;

              if ((0, _definition.isAbstractType)(type)) {
                return schema.getPossibleTypes(type);
              }
            }
          },
          enumValues: {
            type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__EnumValue)),
            args: {
              includeDeprecated: {
                type: _scalars.GraphQLBoolean,
                defaultValue: false
              }
            },
            resolve: function resolve(type, _ref3) {
              var includeDeprecated = _ref3.includeDeprecated;

              if ((0, _definition.isEnumType)(type)) {
                var values = type.getValues();
                return includeDeprecated ? values : values.filter(function (field) {
                  return field.deprecationReason == null;
                });
              }
            }
          },
          inputFields: {
            type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue)),
            args: {
              includeDeprecated: {
                type: _scalars.GraphQLBoolean,
                defaultValue: false
              }
            },
            resolve: function resolve(type, _ref4) {
              var includeDeprecated = _ref4.includeDeprecated;

              if ((0, _definition.isInputObjectType)(type)) {
                var values = (0, _objectValues.default)(type.getFields());
                return includeDeprecated ? values : values.filter(function (field) {
                  return field.deprecationReason == null;
                });
              }
            }
          },
          ofType: {
            type: __Type,
            resolve: function resolve(type) {
              return type.ofType !== undefined ? type.ofType : undefined;
            }
          }
        };
      }
    });

    exports.__Type = __Type;

    var __Field = new _definition.GraphQLObjectType({
      name: '__Field',
      description: 'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',
      fields: function fields() {
        return {
          name: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
            resolve: function resolve(field) {
              return field.name;
            }
          },
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(field) {
              return field.description;
            }
          },
          args: {
            type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),
            args: {
              includeDeprecated: {
                type: _scalars.GraphQLBoolean,
                defaultValue: false
              }
            },
            resolve: function resolve(field, _ref5) {
              var includeDeprecated = _ref5.includeDeprecated;
              return includeDeprecated ? field.args : field.args.filter(function (arg) {
                return arg.deprecationReason == null;
              });
            }
          },
          type: {
            type: new _definition.GraphQLNonNull(__Type),
            resolve: function resolve(field) {
              return field.type;
            }
          },
          isDeprecated: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
            resolve: function resolve(field) {
              return field.deprecationReason != null;
            }
          },
          deprecationReason: {
            type: _scalars.GraphQLString,
            resolve: function resolve(field) {
              return field.deprecationReason;
            }
          }
        };
      }
    });

    exports.__Field = __Field;

    var __InputValue = new _definition.GraphQLObjectType({
      name: '__InputValue',
      description: 'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',
      fields: function fields() {
        return {
          name: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
            resolve: function resolve(inputValue) {
              return inputValue.name;
            }
          },
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(inputValue) {
              return inputValue.description;
            }
          },
          type: {
            type: new _definition.GraphQLNonNull(__Type),
            resolve: function resolve(inputValue) {
              return inputValue.type;
            }
          },
          defaultValue: {
            type: _scalars.GraphQLString,
            description: 'A GraphQL-formatted string representing the default value for this input value.',
            resolve: function resolve(inputValue) {
              var type = inputValue.type,
                  defaultValue = inputValue.defaultValue;
              var valueAST = (0, _astFromValue.astFromValue)(defaultValue, type);
              return valueAST ? (0, _printer.print)(valueAST) : null;
            }
          },
          isDeprecated: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
            resolve: function resolve(field) {
              return field.deprecationReason != null;
            }
          },
          deprecationReason: {
            type: _scalars.GraphQLString,
            resolve: function resolve(obj) {
              return obj.deprecationReason;
            }
          }
        };
      }
    });

    exports.__InputValue = __InputValue;

    var __EnumValue = new _definition.GraphQLObjectType({
      name: '__EnumValue',
      description: 'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',
      fields: function fields() {
        return {
          name: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
            resolve: function resolve(enumValue) {
              return enumValue.name;
            }
          },
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(enumValue) {
              return enumValue.description;
            }
          },
          isDeprecated: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
            resolve: function resolve(enumValue) {
              return enumValue.deprecationReason != null;
            }
          },
          deprecationReason: {
            type: _scalars.GraphQLString,
            resolve: function resolve(enumValue) {
              return enumValue.deprecationReason;
            }
          }
        };
      }
    });

    exports.__EnumValue = __EnumValue;
    var TypeKind = Object.freeze({
      SCALAR: 'SCALAR',
      OBJECT: 'OBJECT',
      INTERFACE: 'INTERFACE',
      UNION: 'UNION',
      ENUM: 'ENUM',
      INPUT_OBJECT: 'INPUT_OBJECT',
      LIST: 'LIST',
      NON_NULL: 'NON_NULL'
    });
    exports.TypeKind = TypeKind;

    var __TypeKind = new _definition.GraphQLEnumType({
      name: '__TypeKind',
      description: 'An enum describing what kind of type a given `__Type` is.',
      values: {
        SCALAR: {
          value: TypeKind.SCALAR,
          description: 'Indicates this type is a scalar.'
        },
        OBJECT: {
          value: TypeKind.OBJECT,
          description: 'Indicates this type is an object. `fields` and `interfaces` are valid fields.'
        },
        INTERFACE: {
          value: TypeKind.INTERFACE,
          description: 'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.'
        },
        UNION: {
          value: TypeKind.UNION,
          description: 'Indicates this type is a union. `possibleTypes` is a valid field.'
        },
        ENUM: {
          value: TypeKind.ENUM,
          description: 'Indicates this type is an enum. `enumValues` is a valid field.'
        },
        INPUT_OBJECT: {
          value: TypeKind.INPUT_OBJECT,
          description: 'Indicates this type is an input object. `inputFields` is a valid field.'
        },
        LIST: {
          value: TypeKind.LIST,
          description: 'Indicates this type is a list. `ofType` is a valid field.'
        },
        NON_NULL: {
          value: TypeKind.NON_NULL,
          description: 'Indicates this type is a non-null. `ofType` is a valid field.'
        }
      }
    });
    /**
     * Note that these are GraphQLField and not GraphQLFieldConfig,
     * so the format for args is different.
     */


    exports.__TypeKind = __TypeKind;
    var SchemaMetaFieldDef = {
      name: '__schema',
      type: new _definition.GraphQLNonNull(__Schema),
      description: 'Access the current type schema of this server.',
      args: [],
      resolve: function resolve(_source, _args, _context, _ref6) {
        var schema = _ref6.schema;
        return schema;
      },
      isDeprecated: false,
      deprecationReason: undefined,
      extensions: undefined,
      astNode: undefined
    };
    exports.SchemaMetaFieldDef = SchemaMetaFieldDef;
    var TypeMetaFieldDef = {
      name: '__type',
      type: __Type,
      description: 'Request the type information of a single type.',
      args: [{
        name: 'name',
        description: undefined,
        type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
        defaultValue: undefined,
        deprecationReason: undefined,
        extensions: undefined,
        astNode: undefined
      }],
      resolve: function resolve(_source, _ref7, _context, _ref8) {
        var name = _ref7.name;
        var schema = _ref8.schema;
        return schema.getType(name);
      },
      isDeprecated: false,
      deprecationReason: undefined,
      extensions: undefined,
      astNode: undefined
    };
    exports.TypeMetaFieldDef = TypeMetaFieldDef;
    var TypeNameMetaFieldDef = {
      name: '__typename',
      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
      description: 'The name of the current Object type at runtime.',
      args: [],
      resolve: function resolve(_source, _args, _context, _ref9) {
        var parentType = _ref9.parentType;
        return parentType.name;
      },
      isDeprecated: false,
      deprecationReason: undefined,
      extensions: undefined,
      astNode: undefined
    };
    exports.TypeNameMetaFieldDef = TypeNameMetaFieldDef;
    var introspectionTypes = Object.freeze([__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind]);
    exports.introspectionTypes = introspectionTypes;

    function isIntrospectionType(type) {
      return introspectionTypes.some(function (_ref10) {
        var name = _ref10.name;
        return type.name === name;
      });
    }
  }, {
    "../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../language/printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "../language/directiveLocation.mjs": "../node_modules/graphql/language/directiveLocation.mjs",
    "../utilities/astFromValue.mjs": "../node_modules/graphql/utilities/astFromValue.mjs",
    "./scalars.mjs": "../node_modules/graphql/type/scalars.mjs",
    "./definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/type/directives.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isDirective = isDirective;
    exports.assertDirective = assertDirective;
    exports.isSpecifiedDirective = isSpecifiedDirective;
    exports.specifiedDirectives = exports.GraphQLSpecifiedByDirective = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = void 0;

    var _objectEntries = _interopRequireDefault(require("../polyfills/objectEntries.mjs"));

    var _symbols = require("../polyfills/symbols.mjs");

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _toObjMap = _interopRequireDefault(require("../jsutils/toObjMap.mjs"));

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.mjs"));

    var _instanceOf = _interopRequireDefault(require("../jsutils/instanceOf.mjs"));

    var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.mjs"));

    var _defineInspect = _interopRequireDefault(require("../jsutils/defineInspect.mjs"));

    var _directiveLocation = require("../language/directiveLocation.mjs");

    var _scalars = require("./scalars.mjs");

    var _definition = require("./definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    /**
     * Test if the given value is a GraphQL directive.
     */
    // eslint-disable-next-line no-redeclare


    function isDirective(directive) {
      return (0, _instanceOf.default)(directive, GraphQLDirective);
    }

    function assertDirective(directive) {
      if (!isDirective(directive)) {
        throw new Error("Expected ".concat((0, _inspect.default)(directive), " to be a GraphQL directive."));
      }

      return directive;
    }
    /**
     * Directives are used by the GraphQL runtime as a way of modifying execution
     * behavior. Type system creators will usually not create these directly.
     */


    var GraphQLDirective = /*#__PURE__*/function () {
      function GraphQLDirective(config) {
        var _config$isRepeatable, _config$args;

        this.name = config.name;
        this.description = config.description;
        this.locations = config.locations;
        this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        config.name || (0, _devAssert.default)(0, 'Directive must be named.');
        Array.isArray(config.locations) || (0, _devAssert.default)(0, "@".concat(config.name, " locations must be an Array."));
        var args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};
        (0, _isObjectLike.default)(args) && !Array.isArray(args) || (0, _devAssert.default)(0, "@".concat(config.name, " args must be an object with argument names as keys."));
        this.args = (0, _objectEntries.default)(args).map(function (_ref) {
          var argName = _ref[0],
              argConfig = _ref[1];
          return {
            name: argName,
            description: argConfig.description,
            type: argConfig.type,
            defaultValue: argConfig.defaultValue,
            deprecationReason: argConfig.deprecationReason,
            extensions: argConfig.extensions && (0, _toObjMap.default)(argConfig.extensions),
            astNode: argConfig.astNode
          };
        });
      }

      var _proto = GraphQLDirective.prototype;

      _proto.toConfig = function toConfig() {
        return {
          name: this.name,
          description: this.description,
          locations: this.locations,
          args: (0, _definition.argsToArgsConfig)(this.args),
          isRepeatable: this.isRepeatable,
          extensions: this.extensions,
          astNode: this.astNode
        };
      };

      _proto.toString = function toString() {
        return '@' + this.name;
      };

      _proto.toJSON = function toJSON() {
        return this.toString();
      } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
      ;

      _createClass(GraphQLDirective, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'GraphQLDirective';
        }
      }]);

      return GraphQLDirective;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


    exports.GraphQLDirective = GraphQLDirective;
    (0, _defineInspect.default)(GraphQLDirective);
    /**
     * Used to conditionally include fields or fragments.
     */

    var GraphQLIncludeDirective = new GraphQLDirective({
      name: 'include',
      description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',
      locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
      args: {
        if: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          description: 'Included when true.'
        }
      }
    });
    /**
     * Used to conditionally skip (exclude) fields or fragments.
     */

    exports.GraphQLIncludeDirective = GraphQLIncludeDirective;
    var GraphQLSkipDirective = new GraphQLDirective({
      name: 'skip',
      description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',
      locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
      args: {
        if: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          description: 'Skipped when true.'
        }
      }
    });
    /**
     * Constant string used for default reason for a deprecation.
     */

    exports.GraphQLSkipDirective = GraphQLSkipDirective;
    var DEFAULT_DEPRECATION_REASON = 'No longer supported';
    /**
     * Used to declare element of a GraphQL schema as deprecated.
     */

    exports.DEFAULT_DEPRECATION_REASON = DEFAULT_DEPRECATION_REASON;
    var GraphQLDeprecatedDirective = new GraphQLDirective({
      name: 'deprecated',
      description: 'Marks an element of a GraphQL schema as no longer supported.',
      locations: [_directiveLocation.DirectiveLocation.FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION, _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ENUM_VALUE],
      args: {
        reason: {
          type: _scalars.GraphQLString,
          description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',
          defaultValue: DEFAULT_DEPRECATION_REASON
        }
      }
    });
    /**
     * Used to provide a URL for specifying the behaviour of custom scalar definitions.
     */

    exports.GraphQLDeprecatedDirective = GraphQLDeprecatedDirective;
    var GraphQLSpecifiedByDirective = new GraphQLDirective({
      name: 'specifiedBy',
      description: 'Exposes a URL that specifies the behaviour of this scalar.',
      locations: [_directiveLocation.DirectiveLocation.SCALAR],
      args: {
        url: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          description: 'The URL that specifies the behaviour of this scalar.'
        }
      }
    });
    /**
     * The full list of specified directives.
     */

    exports.GraphQLSpecifiedByDirective = GraphQLSpecifiedByDirective;
    var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);
    exports.specifiedDirectives = specifiedDirectives;

    function isSpecifiedDirective(directive) {
      return specifiedDirectives.some(function (_ref2) {
        var name = _ref2.name;
        return name === directive.name;
      });
    }
  }, {
    "../polyfills/objectEntries.mjs": "../node_modules/graphql/polyfills/objectEntries.mjs",
    "../polyfills/symbols.mjs": "../node_modules/graphql/polyfills/symbols.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/toObjMap.mjs": "../node_modules/graphql/jsutils/toObjMap.mjs",
    "../jsutils/devAssert.mjs": "../node_modules/graphql/jsutils/devAssert.mjs",
    "../jsutils/instanceOf.mjs": "../node_modules/graphql/jsutils/instanceOf.mjs",
    "../jsutils/isObjectLike.mjs": "../node_modules/graphql/jsutils/isObjectLike.mjs",
    "../jsutils/defineInspect.mjs": "../node_modules/graphql/jsutils/defineInspect.mjs",
    "../language/directiveLocation.mjs": "../node_modules/graphql/language/directiveLocation.mjs",
    "./scalars.mjs": "../node_modules/graphql/type/scalars.mjs",
    "./definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/type/schema.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isSchema = isSchema;
    exports.assertSchema = assertSchema;
    exports.GraphQLSchema = void 0;

    var _find = _interopRequireDefault(require("../polyfills/find.mjs"));

    var _arrayFrom = _interopRequireDefault(require("../polyfills/arrayFrom.mjs"));

    var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.mjs"));

    var _symbols = require("../polyfills/symbols.mjs");

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _toObjMap = _interopRequireDefault(require("../jsutils/toObjMap.mjs"));

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.mjs"));

    var _instanceOf = _interopRequireDefault(require("../jsutils/instanceOf.mjs"));

    var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.mjs"));

    var _introspection = require("./introspection.mjs");

    var _directives = require("./directives.mjs");

    var _definition = require("./definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    /**
     * Test if the given value is a GraphQL schema.
     */
    // eslint-disable-next-line no-redeclare


    function isSchema(schema) {
      return (0, _instanceOf.default)(schema, GraphQLSchema);
    }

    function assertSchema(schema) {
      if (!isSchema(schema)) {
        throw new Error("Expected ".concat((0, _inspect.default)(schema), " to be a GraphQL schema."));
      }

      return schema;
    }
    /**
     * Schema Definition
     *
     * A Schema is created by supplying the root types of each type of operation,
     * query and mutation (optional). A schema definition is then supplied to the
     * validator and executor.
     *
     * Example:
     *
     *     const MyAppSchema = new GraphQLSchema({
     *       query: MyAppQueryRootType,
     *       mutation: MyAppMutationRootType,
     *     })
     *
     * Note: When the schema is constructed, by default only the types that are
     * reachable by traversing the root types are included, other types must be
     * explicitly referenced.
     *
     * Example:
     *
     *     const characterInterface = new GraphQLInterfaceType({
     *       name: 'Character',
     *       ...
     *     });
     *
     *     const humanType = new GraphQLObjectType({
     *       name: 'Human',
     *       interfaces: [characterInterface],
     *       ...
     *     });
     *
     *     const droidType = new GraphQLObjectType({
     *       name: 'Droid',
     *       interfaces: [characterInterface],
     *       ...
     *     });
     *
     *     const schema = new GraphQLSchema({
     *       query: new GraphQLObjectType({
     *         name: 'Query',
     *         fields: {
     *           hero: { type: characterInterface, ... },
     *         }
     *       }),
     *       ...
     *       // Since this schema references only the `Character` interface it's
     *       // necessary to explicitly list the types that implement it if
     *       // you want them to be included in the final schema.
     *       types: [humanType, droidType],
     *     })
     *
     * Note: If an array of `directives` are provided to GraphQLSchema, that will be
     * the exact list of directives represented and allowed. If `directives` is not
     * provided then a default set of the specified directives (e.g. @include and
     * @skip) will be used. If you wish to provide *additional* directives to these
     * specified directives, you must explicitly declare them. Example:
     *
     *     const MyAppSchema = new GraphQLSchema({
     *       ...
     *       directives: specifiedDirectives.concat([ myCustomDirective ]),
     *     })
     *
     */


    var GraphQLSchema = /*#__PURE__*/function () {
      // Used as a cache for validateSchema().
      function GraphQLSchema(config) {
        var _config$directives; // If this schema was built from a source known to be valid, then it may be
        // marked with assumeValid to avoid an additional type system validation.


        this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.

        (0, _isObjectLike.default)(config) || (0, _devAssert.default)(0, 'Must provide configuration object.');
        !config.types || Array.isArray(config.types) || (0, _devAssert.default)(0, "\"types\" must be Array if provided but got: ".concat((0, _inspect.default)(config.types), "."));
        !config.directives || Array.isArray(config.directives) || (0, _devAssert.default)(0, '"directives" must be Array if provided but got: ' + "".concat((0, _inspect.default)(config.directives), "."));
        this.description = config.description;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = config.extensionASTNodes;
        this._queryType = config.query;
        this._mutationType = config.mutation;
        this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.

        this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : _directives.specifiedDirectives; // To preserve order of user-provided types, we add first to add them to
        // the set of "collected" types, so `collectReferencedTypes` ignore them.

        var allReferencedTypes = new Set(config.types);

        if (config.types != null) {
          for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {
            var type = _config$types2[_i2]; // When we ready to process this type, we remove it from "collected" types
            // and then add it together with all dependent types in the correct position.

            allReferencedTypes.delete(type);
            collectReferencedTypes(type, allReferencedTypes);
          }
        }

        if (this._queryType != null) {
          collectReferencedTypes(this._queryType, allReferencedTypes);
        }

        if (this._mutationType != null) {
          collectReferencedTypes(this._mutationType, allReferencedTypes);
        }

        if (this._subscriptionType != null) {
          collectReferencedTypes(this._subscriptionType, allReferencedTypes);
        }

        for (var _i4 = 0, _this$_directives2 = this._directives; _i4 < _this$_directives2.length; _i4++) {
          var directive = _this$_directives2[_i4]; // Directives are not validated until validateSchema() is called.

          if ((0, _directives.isDirective)(directive)) {
            for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {
              var arg = _directive$args2[_i6];
              collectReferencedTypes(arg.type, allReferencedTypes);
            }
          }
        }

        collectReferencedTypes(_introspection.__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.

        this._typeMap = Object.create(null);
        this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.

        this._implementationsMap = Object.create(null);

        for (var _i8 = 0, _arrayFrom2 = (0, _arrayFrom.default)(allReferencedTypes); _i8 < _arrayFrom2.length; _i8++) {
          var namedType = _arrayFrom2[_i8];

          if (namedType == null) {
            continue;
          }

          var typeName = namedType.name;
          typeName || (0, _devAssert.default)(0, 'One of the provided types for building the Schema is missing a name.');

          if (this._typeMap[typeName] !== undefined) {
            throw new Error("Schema must contain uniquely named types but contains multiple types named \"".concat(typeName, "\"."));
          }

          this._typeMap[typeName] = namedType;

          if ((0, _definition.isInterfaceType)(namedType)) {
            // Store implementations by interface.
            for (var _i10 = 0, _namedType$getInterfa2 = namedType.getInterfaces(); _i10 < _namedType$getInterfa2.length; _i10++) {
              var iface = _namedType$getInterfa2[_i10];

              if ((0, _definition.isInterfaceType)(iface)) {
                var implementations = this._implementationsMap[iface.name];

                if (implementations === undefined) {
                  implementations = this._implementationsMap[iface.name] = {
                    objects: [],
                    interfaces: []
                  };
                }

                implementations.interfaces.push(namedType);
              }
            }
          } else if ((0, _definition.isObjectType)(namedType)) {
            // Store implementations by objects.
            for (var _i12 = 0, _namedType$getInterfa4 = namedType.getInterfaces(); _i12 < _namedType$getInterfa4.length; _i12++) {
              var _iface = _namedType$getInterfa4[_i12];

              if ((0, _definition.isInterfaceType)(_iface)) {
                var _implementations = this._implementationsMap[_iface.name];

                if (_implementations === undefined) {
                  _implementations = this._implementationsMap[_iface.name] = {
                    objects: [],
                    interfaces: []
                  };
                }

                _implementations.objects.push(namedType);
              }
            }
          }
        }
      }

      var _proto = GraphQLSchema.prototype;

      _proto.getQueryType = function getQueryType() {
        return this._queryType;
      };

      _proto.getMutationType = function getMutationType() {
        return this._mutationType;
      };

      _proto.getSubscriptionType = function getSubscriptionType() {
        return this._subscriptionType;
      };

      _proto.getTypeMap = function getTypeMap() {
        return this._typeMap;
      };

      _proto.getType = function getType(name) {
        return this.getTypeMap()[name];
      };

      _proto.getPossibleTypes = function getPossibleTypes(abstractType) {
        return (0, _definition.isUnionType)(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;
      };

      _proto.getImplementations = function getImplementations(interfaceType) {
        var implementations = this._implementationsMap[interfaceType.name];
        return implementations !== null && implementations !== void 0 ? implementations : {
          objects: [],
          interfaces: []
        };
      } // @deprecated: use isSubType instead - will be removed in v16.
      ;

      _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {
        return this.isSubType(abstractType, possibleType);
      };

      _proto.isSubType = function isSubType(abstractType, maybeSubType) {
        var map = this._subTypeMap[abstractType.name];

        if (map === undefined) {
          map = Object.create(null);

          if ((0, _definition.isUnionType)(abstractType)) {
            for (var _i14 = 0, _abstractType$getType2 = abstractType.getTypes(); _i14 < _abstractType$getType2.length; _i14++) {
              var type = _abstractType$getType2[_i14];
              map[type.name] = true;
            }
          } else {
            var implementations = this.getImplementations(abstractType);

            for (var _i16 = 0, _implementations$obje2 = implementations.objects; _i16 < _implementations$obje2.length; _i16++) {
              var _type = _implementations$obje2[_i16];
              map[_type.name] = true;
            }

            for (var _i18 = 0, _implementations$inte2 = implementations.interfaces; _i18 < _implementations$inte2.length; _i18++) {
              var _type2 = _implementations$inte2[_i18];
              map[_type2.name] = true;
            }
          }

          this._subTypeMap[abstractType.name] = map;
        }

        return map[maybeSubType.name] !== undefined;
      };

      _proto.getDirectives = function getDirectives() {
        return this._directives;
      };

      _proto.getDirective = function getDirective(name) {
        return (0, _find.default)(this.getDirectives(), function (directive) {
          return directive.name === name;
        });
      };

      _proto.toConfig = function toConfig() {
        var _this$extensionASTNod;

        return {
          description: this.description,
          query: this.getQueryType(),
          mutation: this.getMutationType(),
          subscription: this.getSubscriptionType(),
          types: (0, _objectValues.default)(this.getTypeMap()),
          directives: this.getDirectives().slice(),
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : [],
          assumeValid: this.__validationErrors !== undefined
        };
      } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
      ;

      _createClass(GraphQLSchema, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'GraphQLSchema';
        }
      }]);

      return GraphQLSchema;
    }();

    exports.GraphQLSchema = GraphQLSchema;

    function collectReferencedTypes(type, typeSet) {
      var namedType = (0, _definition.getNamedType)(type);

      if (!typeSet.has(namedType)) {
        typeSet.add(namedType);

        if ((0, _definition.isUnionType)(namedType)) {
          for (var _i20 = 0, _namedType$getTypes2 = namedType.getTypes(); _i20 < _namedType$getTypes2.length; _i20++) {
            var memberType = _namedType$getTypes2[_i20];
            collectReferencedTypes(memberType, typeSet);
          }
        } else if ((0, _definition.isObjectType)(namedType) || (0, _definition.isInterfaceType)(namedType)) {
          for (var _i22 = 0, _namedType$getInterfa6 = namedType.getInterfaces(); _i22 < _namedType$getInterfa6.length; _i22++) {
            var interfaceType = _namedType$getInterfa6[_i22];
            collectReferencedTypes(interfaceType, typeSet);
          }

          for (var _i24 = 0, _objectValues2 = (0, _objectValues.default)(namedType.getFields()); _i24 < _objectValues2.length; _i24++) {
            var field = _objectValues2[_i24];
            collectReferencedTypes(field.type, typeSet);

            for (var _i26 = 0, _field$args2 = field.args; _i26 < _field$args2.length; _i26++) {
              var arg = _field$args2[_i26];
              collectReferencedTypes(arg.type, typeSet);
            }
          }
        } else if ((0, _definition.isInputObjectType)(namedType)) {
          for (var _i28 = 0, _objectValues4 = (0, _objectValues.default)(namedType.getFields()); _i28 < _objectValues4.length; _i28++) {
            var _field = _objectValues4[_i28];
            collectReferencedTypes(_field.type, typeSet);
          }
        }
      }

      return typeSet;
    }
  }, {
    "../polyfills/find.mjs": "../node_modules/graphql/polyfills/find.mjs",
    "../polyfills/arrayFrom.mjs": "../node_modules/graphql/polyfills/arrayFrom.mjs",
    "../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../polyfills/symbols.mjs": "../node_modules/graphql/polyfills/symbols.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/toObjMap.mjs": "../node_modules/graphql/jsutils/toObjMap.mjs",
    "../jsutils/devAssert.mjs": "../node_modules/graphql/jsutils/devAssert.mjs",
    "../jsutils/instanceOf.mjs": "../node_modules/graphql/jsutils/instanceOf.mjs",
    "../jsutils/isObjectLike.mjs": "../node_modules/graphql/jsutils/isObjectLike.mjs",
    "./introspection.mjs": "../node_modules/graphql/type/introspection.mjs",
    "./directives.mjs": "../node_modules/graphql/type/directives.mjs",
    "./definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/type/validate.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.validateSchema = validateSchema;
    exports.assertValidSchema = assertValidSchema;

    var _find = _interopRequireDefault(require("../polyfills/find.mjs"));

    var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _GraphQLError = require("../error/GraphQLError.mjs");

    var _locatedError = require("../error/locatedError.mjs");

    var _assertValidName = require("../utilities/assertValidName.mjs");

    var _typeComparators = require("../utilities/typeComparators.mjs");

    var _schema = require("./schema.mjs");

    var _introspection = require("./introspection.mjs");

    var _directives = require("./directives.mjs");

    var _definition = require("./definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Implements the "Type Validation" sub-sections of the specification's
     * "Type System" section.
     *
     * Validation runs synchronously, returning an array of encountered errors, or
     * an empty array if no errors were encountered and the Schema is valid.
     */


    function validateSchema(schema) {
      // First check to ensure the provided value is in fact a GraphQLSchema.
      (0, _schema.assertSchema)(schema); // If this Schema has already been validated, return the previous results.

      if (schema.__validationErrors) {
        return schema.__validationErrors;
      } // Validate the schema, producing a list of errors.


      var context = new SchemaValidationContext(schema);
      validateRootTypes(context);
      validateDirectives(context);
      validateTypes(context); // Persist the results of validation before returning to ensure validation
      // does not run multiple times for this schema.

      var errors = context.getErrors();
      schema.__validationErrors = errors;
      return errors;
    }
    /**
     * Utility function which asserts a schema is valid by throwing an error if
     * it is invalid.
     */


    function assertValidSchema(schema) {
      var errors = validateSchema(schema);

      if (errors.length !== 0) {
        throw new Error(errors.map(function (error) {
          return error.message;
        }).join('\n\n'));
      }
    }

    var SchemaValidationContext = /*#__PURE__*/function () {
      function SchemaValidationContext(schema) {
        this._errors = [];
        this.schema = schema;
      }

      var _proto = SchemaValidationContext.prototype;

      _proto.reportError = function reportError(message, nodes) {
        var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;

        this.addError(new _GraphQLError.GraphQLError(message, _nodes));
      };

      _proto.addError = function addError(error) {
        this._errors.push(error);
      };

      _proto.getErrors = function getErrors() {
        return this._errors;
      };

      return SchemaValidationContext;
    }();

    function validateRootTypes(context) {
      var schema = context.schema;
      var queryType = schema.getQueryType();

      if (!queryType) {
        context.reportError('Query root type must be provided.', schema.astNode);
      } else if (!(0, _definition.isObjectType)(queryType)) {
        var _getOperationTypeNode;

        context.reportError("Query root type must be Object type, it cannot be ".concat((0, _inspect.default)(queryType), "."), (_getOperationTypeNode = getOperationTypeNode(schema, 'query')) !== null && _getOperationTypeNode !== void 0 ? _getOperationTypeNode : queryType.astNode);
      }

      var mutationType = schema.getMutationType();

      if (mutationType && !(0, _definition.isObjectType)(mutationType)) {
        var _getOperationTypeNode2;

        context.reportError('Mutation root type must be Object type if provided, it cannot be ' + "".concat((0, _inspect.default)(mutationType), "."), (_getOperationTypeNode2 = getOperationTypeNode(schema, 'mutation')) !== null && _getOperationTypeNode2 !== void 0 ? _getOperationTypeNode2 : mutationType.astNode);
      }

      var subscriptionType = schema.getSubscriptionType();

      if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {
        var _getOperationTypeNode3;

        context.reportError('Subscription root type must be Object type if provided, it cannot be ' + "".concat((0, _inspect.default)(subscriptionType), "."), (_getOperationTypeNode3 = getOperationTypeNode(schema, 'subscription')) !== null && _getOperationTypeNode3 !== void 0 ? _getOperationTypeNode3 : subscriptionType.astNode);
      }
    }

    function getOperationTypeNode(schema, operation) {
      var operationNodes = getAllSubNodes(schema, function (node) {
        return node.operationTypes;
      });

      for (var _i2 = 0; _i2 < operationNodes.length; _i2++) {
        var node = operationNodes[_i2];

        if (node.operation === operation) {
          return node.type;
        }
      }

      return undefined;
    }

    function validateDirectives(context) {
      for (var _i4 = 0, _context$schema$getDi2 = context.schema.getDirectives(); _i4 < _context$schema$getDi2.length; _i4++) {
        var directive = _context$schema$getDi2[_i4]; // Ensure all directives are in fact GraphQL directives.

        if (!(0, _directives.isDirective)(directive)) {
          context.reportError("Expected directive but got: ".concat((0, _inspect.default)(directive), "."), directive === null || directive === void 0 ? void 0 : directive.astNode);
          continue;
        } // Ensure they are named correctly.


        validateName(context, directive); // TODO: Ensure proper locations.
        // Ensure the arguments are valid.

        for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {
          var arg = _directive$args2[_i6]; // Ensure they are named correctly.

          validateName(context, arg); // Ensure the type is an input type.

          if (!(0, _definition.isInputType)(arg.type)) {
            context.reportError("The type of @".concat(directive.name, "(").concat(arg.name, ":) must be Input Type ") + "but got: ".concat((0, _inspect.default)(arg.type), "."), arg.astNode);
          }

          if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
            var _arg$astNode;

            context.reportError("Required argument @".concat(directive.name, "(").concat(arg.name, ":) cannot be deprecated."), [getDeprecatedDirectiveNode(arg.astNode), // istanbul ignore next (TODO need to write coverage tests)
            (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type]);
          }
        }
      }
    }

    function validateName(context, node) {
      // Ensure names are valid, however introspection types opt out.
      var error = (0, _assertValidName.isValidNameError)(node.name);

      if (error) {
        context.addError((0, _locatedError.locatedError)(error, node.astNode));
      }
    }

    function validateTypes(context) {
      var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);
      var typeMap = context.schema.getTypeMap();

      for (var _i8 = 0, _objectValues2 = (0, _objectValues.default)(typeMap); _i8 < _objectValues2.length; _i8++) {
        var type = _objectValues2[_i8]; // Ensure all provided types are in fact GraphQL type.

        if (!(0, _definition.isNamedType)(type)) {
          context.reportError("Expected GraphQL named type but got: ".concat((0, _inspect.default)(type), "."), type.astNode);
          continue;
        } // Ensure it is named correctly (excluding introspection types).


        if (!(0, _introspection.isIntrospectionType)(type)) {
          validateName(context, type);
        }

        if ((0, _definition.isObjectType)(type)) {
          // Ensure fields are valid
          validateFields(context, type); // Ensure objects implement the interfaces they claim to.

          validateInterfaces(context, type);
        } else if ((0, _definition.isInterfaceType)(type)) {
          // Ensure fields are valid.
          validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.

          validateInterfaces(context, type);
        } else if ((0, _definition.isUnionType)(type)) {
          // Ensure Unions include valid member types.
          validateUnionMembers(context, type);
        } else if ((0, _definition.isEnumType)(type)) {
          // Ensure Enums have valid values.
          validateEnumValues(context, type);
        } else if ((0, _definition.isInputObjectType)(type)) {
          // Ensure Input Object fields are valid.
          validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references

          validateInputObjectCircularRefs(type);
        }
      }
    }

    function validateFields(context, type) {
      var fields = (0, _objectValues.default)(type.getFields()); // Objects and Interfaces both must define one or more fields.

      if (fields.length === 0) {
        context.reportError("Type ".concat(type.name, " must define one or more fields."), getAllNodes(type));
      }

      for (var _i10 = 0; _i10 < fields.length; _i10++) {
        var field = fields[_i10]; // Ensure they are named correctly.

        validateName(context, field); // Ensure the type is an output type

        if (!(0, _definition.isOutputType)(field.type)) {
          var _field$astNode;

          context.reportError("The type of ".concat(type.name, ".").concat(field.name, " must be Output Type ") + "but got: ".concat((0, _inspect.default)(field.type), "."), (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type);
        } // Ensure the arguments are valid


        for (var _i12 = 0, _field$args2 = field.args; _i12 < _field$args2.length; _i12++) {
          var arg = _field$args2[_i12];
          var argName = arg.name; // Ensure they are named correctly.

          validateName(context, arg); // Ensure the type is an input type

          if (!(0, _definition.isInputType)(arg.type)) {
            var _arg$astNode2;

            context.reportError("The type of ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) must be Input ") + "Type but got: ".concat((0, _inspect.default)(arg.type), "."), (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0 ? void 0 : _arg$astNode2.type);
          }

          if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
            var _arg$astNode3;

            context.reportError("Required argument ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) cannot be deprecated."), [getDeprecatedDirectiveNode(arg.astNode), // istanbul ignore next (TODO need to write coverage tests)
            (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0 ? void 0 : _arg$astNode3.type]);
          }
        }
      }
    }

    function validateInterfaces(context, type) {
      var ifaceTypeNames = Object.create(null);

      for (var _i14 = 0, _type$getInterfaces2 = type.getInterfaces(); _i14 < _type$getInterfaces2.length; _i14++) {
        var iface = _type$getInterfaces2[_i14];

        if (!(0, _definition.isInterfaceType)(iface)) {
          context.reportError("Type ".concat((0, _inspect.default)(type), " must only implement Interface types, ") + "it cannot implement ".concat((0, _inspect.default)(iface), "."), getAllImplementsInterfaceNodes(type, iface));
          continue;
        }

        if (type === iface) {
          context.reportError("Type ".concat(type.name, " cannot implement itself because it would create a circular reference."), getAllImplementsInterfaceNodes(type, iface));
          continue;
        }

        if (ifaceTypeNames[iface.name]) {
          context.reportError("Type ".concat(type.name, " can only implement ").concat(iface.name, " once."), getAllImplementsInterfaceNodes(type, iface));
          continue;
        }

        ifaceTypeNames[iface.name] = true;
        validateTypeImplementsAncestors(context, type, iface);
        validateTypeImplementsInterface(context, type, iface);
      }
    }

    function validateTypeImplementsInterface(context, type, iface) {
      var typeFieldMap = type.getFields(); // Assert each interface field is implemented.

      for (var _i16 = 0, _objectValues4 = (0, _objectValues.default)(iface.getFields()); _i16 < _objectValues4.length; _i16++) {
        var ifaceField = _objectValues4[_i16];
        var fieldName = ifaceField.name;
        var typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.

        if (!typeField) {
          context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expected but ").concat(type.name, " does not provide it."), [ifaceField.astNode].concat(getAllNodes(type)));
          continue;
        } // Assert interface field type is satisfied by type field type, by being
        // a valid subtype. (covariant)


        if (!(0, _typeComparators.isTypeSubTypeOf)(context.schema, typeField.type, ifaceField.type)) {
          var _ifaceField$astNode, _typeField$astNode;

          context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expects type ") + "".concat((0, _inspect.default)(ifaceField.type), " but ").concat(type.name, ".").concat(fieldName, " ") + "is type ".concat((0, _inspect.default)(typeField.type), "."), [// istanbul ignore next (TODO need to write coverage tests)
          (_ifaceField$astNode = ifaceField.astNode) === null || _ifaceField$astNode === void 0 ? void 0 : _ifaceField$astNode.type, // istanbul ignore next (TODO need to write coverage tests)
          (_typeField$astNode = typeField.astNode) === null || _typeField$astNode === void 0 ? void 0 : _typeField$astNode.type]);
        } // Assert each interface field arg is implemented.


        var _loop = function _loop(_i18, _ifaceField$args2) {
          var ifaceArg = _ifaceField$args2[_i18];
          var argName = ifaceArg.name;
          var typeArg = (0, _find.default)(typeField.args, function (arg) {
            return arg.name === argName;
          }); // Assert interface field arg exists on object field.

          if (!typeArg) {
            context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) expected but ").concat(type.name, ".").concat(fieldName, " does not provide it."), [ifaceArg.astNode, typeField.astNode]);
            return "continue";
          } // Assert interface field arg type matches object field arg type.
          // (invariant)
          // TODO: change to contravariant?


          if (!(0, _typeComparators.isEqualType)(ifaceArg.type, typeArg.type)) {
            var _ifaceArg$astNode, _typeArg$astNode;

            context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) ") + "expects type ".concat((0, _inspect.default)(ifaceArg.type), " but ") + "".concat(type.name, ".").concat(fieldName, "(").concat(argName, ":) is type ") + "".concat((0, _inspect.default)(typeArg.type), "."), [// istanbul ignore next (TODO need to write coverage tests)
            (_ifaceArg$astNode = ifaceArg.astNode) === null || _ifaceArg$astNode === void 0 ? void 0 : _ifaceArg$astNode.type, // istanbul ignore next (TODO need to write coverage tests)
            (_typeArg$astNode = typeArg.astNode) === null || _typeArg$astNode === void 0 ? void 0 : _typeArg$astNode.type]);
          } // TODO: validate default values?

        };

        for (var _i18 = 0, _ifaceField$args2 = ifaceField.args; _i18 < _ifaceField$args2.length; _i18++) {
          var _ret = _loop(_i18, _ifaceField$args2);

          if (_ret === "continue") continue;
        } // Assert additional arguments must not be required.


        var _loop2 = function _loop2(_i20, _typeField$args2) {
          var typeArg = _typeField$args2[_i20];
          var argName = typeArg.name;
          var ifaceArg = (0, _find.default)(ifaceField.args, function (arg) {
            return arg.name === argName;
          });

          if (!ifaceArg && (0, _definition.isRequiredArgument)(typeArg)) {
            context.reportError("Object field ".concat(type.name, ".").concat(fieldName, " includes required argument ").concat(argName, " that is missing from the Interface field ").concat(iface.name, ".").concat(fieldName, "."), [typeArg.astNode, ifaceField.astNode]);
          }
        };

        for (var _i20 = 0, _typeField$args2 = typeField.args; _i20 < _typeField$args2.length; _i20++) {
          _loop2(_i20, _typeField$args2);
        }
      }
    }

    function validateTypeImplementsAncestors(context, type, iface) {
      var ifaceInterfaces = type.getInterfaces();

      for (var _i22 = 0, _iface$getInterfaces2 = iface.getInterfaces(); _i22 < _iface$getInterfaces2.length; _i22++) {
        var transitive = _iface$getInterfaces2[_i22];

        if (ifaceInterfaces.indexOf(transitive) === -1) {
          context.reportError(transitive === type ? "Type ".concat(type.name, " cannot implement ").concat(iface.name, " because it would create a circular reference.") : "Type ".concat(type.name, " must implement ").concat(transitive.name, " because it is implemented by ").concat(iface.name, "."), [].concat(getAllImplementsInterfaceNodes(iface, transitive), getAllImplementsInterfaceNodes(type, iface)));
        }
      }
    }

    function validateUnionMembers(context, union) {
      var memberTypes = union.getTypes();

      if (memberTypes.length === 0) {
        context.reportError("Union type ".concat(union.name, " must define one or more member types."), getAllNodes(union));
      }

      var includedTypeNames = Object.create(null);

      for (var _i24 = 0; _i24 < memberTypes.length; _i24++) {
        var memberType = memberTypes[_i24];

        if (includedTypeNames[memberType.name]) {
          context.reportError("Union type ".concat(union.name, " can only include type ").concat(memberType.name, " once."), getUnionMemberTypeNodes(union, memberType.name));
          continue;
        }

        includedTypeNames[memberType.name] = true;

        if (!(0, _definition.isObjectType)(memberType)) {
          context.reportError("Union type ".concat(union.name, " can only include Object types, ") + "it cannot include ".concat((0, _inspect.default)(memberType), "."), getUnionMemberTypeNodes(union, String(memberType)));
        }
      }
    }

    function validateEnumValues(context, enumType) {
      var enumValues = enumType.getValues();

      if (enumValues.length === 0) {
        context.reportError("Enum type ".concat(enumType.name, " must define one or more values."), getAllNodes(enumType));
      }

      for (var _i26 = 0; _i26 < enumValues.length; _i26++) {
        var enumValue = enumValues[_i26];
        var valueName = enumValue.name; // Ensure valid name.

        validateName(context, enumValue);

        if (valueName === 'true' || valueName === 'false' || valueName === 'null') {
          context.reportError("Enum type ".concat(enumType.name, " cannot include value: ").concat(valueName, "."), enumValue.astNode);
        }
      }
    }

    function validateInputFields(context, inputObj) {
      var fields = (0, _objectValues.default)(inputObj.getFields());

      if (fields.length === 0) {
        context.reportError("Input Object type ".concat(inputObj.name, " must define one or more fields."), getAllNodes(inputObj));
      } // Ensure the arguments are valid


      for (var _i28 = 0; _i28 < fields.length; _i28++) {
        var field = fields[_i28]; // Ensure they are named correctly.

        validateName(context, field); // Ensure the type is an input type

        if (!(0, _definition.isInputType)(field.type)) {
          var _field$astNode2;

          context.reportError("The type of ".concat(inputObj.name, ".").concat(field.name, " must be Input Type ") + "but got: ".concat((0, _inspect.default)(field.type), "."), (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type);
        }

        if ((0, _definition.isRequiredInputField)(field) && field.deprecationReason != null) {
          var _field$astNode3;

          context.reportError("Required input field ".concat(inputObj.name, ".").concat(field.name, " cannot be deprecated."), [getDeprecatedDirectiveNode(field.astNode), // istanbul ignore next (TODO need to write coverage tests)
          (_field$astNode3 = field.astNode) === null || _field$astNode3 === void 0 ? void 0 : _field$astNode3.type]);
        }
      }
    }

    function createInputObjectCircularRefsValidator(context) {
      // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.
      // Tracks already visited types to maintain O(N) and to ensure that cycles
      // are not redundantly reported.
      var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors

      var fieldPath = []; // Position in the type path

      var fieldPathIndexByTypeName = Object.create(null);
      return detectCycleRecursive; // This does a straight-forward DFS to find cycles.
      // It does not terminate when a cycle was found but continues to explore
      // the graph to find all possible cycles.

      function detectCycleRecursive(inputObj) {
        if (visitedTypes[inputObj.name]) {
          return;
        }

        visitedTypes[inputObj.name] = true;
        fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
        var fields = (0, _objectValues.default)(inputObj.getFields());

        for (var _i30 = 0; _i30 < fields.length; _i30++) {
          var field = fields[_i30];

          if ((0, _definition.isNonNullType)(field.type) && (0, _definition.isInputObjectType)(field.type.ofType)) {
            var fieldType = field.type.ofType;
            var cycleIndex = fieldPathIndexByTypeName[fieldType.name];
            fieldPath.push(field);

            if (cycleIndex === undefined) {
              detectCycleRecursive(fieldType);
            } else {
              var cyclePath = fieldPath.slice(cycleIndex);
              var pathStr = cyclePath.map(function (fieldObj) {
                return fieldObj.name;
              }).join('.');
              context.reportError("Cannot reference Input Object \"".concat(fieldType.name, "\" within itself through a series of non-null fields: \"").concat(pathStr, "\"."), cyclePath.map(function (fieldObj) {
                return fieldObj.astNode;
              }));
            }

            fieldPath.pop();
          }
        }

        fieldPathIndexByTypeName[inputObj.name] = undefined;
      }
    }

    function getAllNodes(object) {
      var astNode = object.astNode,
          extensionASTNodes = object.extensionASTNodes;
      return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes !== null && extensionASTNodes !== void 0 ? extensionASTNodes : [];
    }

    function getAllSubNodes(object, getter) {
      var subNodes = [];

      for (var _i32 = 0, _getAllNodes2 = getAllNodes(object); _i32 < _getAllNodes2.length; _i32++) {
        var _getter;

        var node = _getAllNodes2[_i32]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

        subNodes = subNodes.concat((_getter = getter(node)) !== null && _getter !== void 0 ? _getter : []);
      }

      return subNodes;
    }

    function getAllImplementsInterfaceNodes(type, iface) {
      return getAllSubNodes(type, function (typeNode) {
        return typeNode.interfaces;
      }).filter(function (ifaceNode) {
        return ifaceNode.name.value === iface.name;
      });
    }

    function getUnionMemberTypeNodes(union, typeName) {
      return getAllSubNodes(union, function (unionNode) {
        return unionNode.types;
      }).filter(function (typeNode) {
        return typeNode.name.value === typeName;
      });
    }

    function getDeprecatedDirectiveNode(definitionNode) {
      var _definitionNode$direc; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


      return definitionNode === null || definitionNode === void 0 ? void 0 : (_definitionNode$direc = definitionNode.directives) === null || _definitionNode$direc === void 0 ? void 0 : _definitionNode$direc.find(function (node) {
        return node.name.value === _directives.GraphQLDeprecatedDirective.name;
      });
    }
  }, {
    "../polyfills/find.mjs": "../node_modules/graphql/polyfills/find.mjs",
    "../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../error/locatedError.mjs": "../node_modules/graphql/error/locatedError.mjs",
    "../utilities/assertValidName.mjs": "../node_modules/graphql/utilities/assertValidName.mjs",
    "../utilities/typeComparators.mjs": "../node_modules/graphql/utilities/typeComparators.mjs",
    "./schema.mjs": "../node_modules/graphql/type/schema.mjs",
    "./introspection.mjs": "../node_modules/graphql/type/introspection.mjs",
    "./directives.mjs": "../node_modules/graphql/type/directives.mjs",
    "./definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/utilities/typeFromAST.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.typeFromAST = typeFromAST;

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _kinds = require("../language/kinds.mjs");

    var _definition = require("../type/definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Given a Schema and an AST node describing a type, return a GraphQLType
     * definition which applies to that type. For example, if provided the parsed
     * AST node for `[User]`, a GraphQLList instance will be returned, containing
     * the type called "User" found in the schema. If a type called "User" is not
     * found in the schema, then undefined will be returned.
     */

    /* eslint-disable no-redeclare */


    function typeFromAST(schema, typeNode) {
      /* eslint-enable no-redeclare */
      var innerType;

      if (typeNode.kind === _kinds.Kind.LIST_TYPE) {
        innerType = typeFromAST(schema, typeNode.type);
        return innerType && new _definition.GraphQLList(innerType);
      }

      if (typeNode.kind === _kinds.Kind.NON_NULL_TYPE) {
        innerType = typeFromAST(schema, typeNode.type);
        return innerType && new _definition.GraphQLNonNull(innerType);
      } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


      if (typeNode.kind === _kinds.Kind.NAMED_TYPE) {
        return schema.getType(typeNode.name.value);
      } // istanbul ignore next (Not reachable. All possible type nodes have been considered)


      false || (0, _invariant.default)(0, 'Unexpected type node: ' + (0, _inspect.default)(typeNode));
    }
  }, {
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/utilities/TypeInfo.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.visitWithTypeInfo = visitWithTypeInfo;
    exports.TypeInfo = void 0;

    var _find = _interopRequireDefault(require("../polyfills/find.mjs"));

    var _kinds = require("../language/kinds.mjs");

    var _ast = require("../language/ast.mjs");

    var _visitor = require("../language/visitor.mjs");

    var _definition = require("../type/definition.mjs");

    var _introspection = require("../type/introspection.mjs");

    var _typeFromAST = require("./typeFromAST.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * TypeInfo is a utility class which, given a GraphQL schema, can keep track
     * of the current field and type definitions at any point in a GraphQL document
     * AST during a recursive descent by calling `enter(node)` and `leave(node)`.
     */


    var TypeInfo = /*#__PURE__*/function () {
      function TypeInfo(schema, // NOTE: this experimental optional second parameter is only needed in order
      // to support non-spec-compliant code bases. You should never need to use it.
      // It may disappear in the future.
      getFieldDefFn, // Initial type may be provided in rare cases to facilitate traversals
      // beginning somewhere other than documents.
      initialType) {
        this._schema = schema;
        this._typeStack = [];
        this._parentTypeStack = [];
        this._inputTypeStack = [];
        this._fieldDefStack = [];
        this._defaultValueStack = [];
        this._directive = null;
        this._argument = null;
        this._enumValue = null;
        this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;

        if (initialType) {
          if ((0, _definition.isInputType)(initialType)) {
            this._inputTypeStack.push(initialType);
          }

          if ((0, _definition.isCompositeType)(initialType)) {
            this._parentTypeStack.push(initialType);
          }

          if ((0, _definition.isOutputType)(initialType)) {
            this._typeStack.push(initialType);
          }
        }
      }

      var _proto = TypeInfo.prototype;

      _proto.getType = function getType() {
        if (this._typeStack.length > 0) {
          return this._typeStack[this._typeStack.length - 1];
        }
      };

      _proto.getParentType = function getParentType() {
        if (this._parentTypeStack.length > 0) {
          return this._parentTypeStack[this._parentTypeStack.length - 1];
        }
      };

      _proto.getInputType = function getInputType() {
        if (this._inputTypeStack.length > 0) {
          return this._inputTypeStack[this._inputTypeStack.length - 1];
        }
      };

      _proto.getParentInputType = function getParentInputType() {
        if (this._inputTypeStack.length > 1) {
          return this._inputTypeStack[this._inputTypeStack.length - 2];
        }
      };

      _proto.getFieldDef = function getFieldDef() {
        if (this._fieldDefStack.length > 0) {
          return this._fieldDefStack[this._fieldDefStack.length - 1];
        }
      };

      _proto.getDefaultValue = function getDefaultValue() {
        if (this._defaultValueStack.length > 0) {
          return this._defaultValueStack[this._defaultValueStack.length - 1];
        }
      };

      _proto.getDirective = function getDirective() {
        return this._directive;
      };

      _proto.getArgument = function getArgument() {
        return this._argument;
      };

      _proto.getEnumValue = function getEnumValue() {
        return this._enumValue;
      };

      _proto.enter = function enter(node) {
        var schema = this._schema; // Note: many of the types below are explicitly typed as "mixed" to drop
        // any assumptions of a valid schema to ensure runtime types are properly
        // checked before continuing since TypeInfo is used as part of validation
        // which occurs before guarantees of schema and document validity.

        switch (node.kind) {
          case _kinds.Kind.SELECTION_SET:
            {
              var namedType = (0, _definition.getNamedType)(this.getType());

              this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : undefined);

              break;
            }

          case _kinds.Kind.FIELD:
            {
              var parentType = this.getParentType();
              var fieldDef;
              var fieldType;

              if (parentType) {
                fieldDef = this._getFieldDef(schema, parentType, node);

                if (fieldDef) {
                  fieldType = fieldDef.type;
                }
              }

              this._fieldDefStack.push(fieldDef);

              this._typeStack.push((0, _definition.isOutputType)(fieldType) ? fieldType : undefined);

              break;
            }

          case _kinds.Kind.DIRECTIVE:
            this._directive = schema.getDirective(node.name.value);
            break;

          case _kinds.Kind.OPERATION_DEFINITION:
            {
              var type;

              switch (node.operation) {
                case 'query':
                  type = schema.getQueryType();
                  break;

                case 'mutation':
                  type = schema.getMutationType();
                  break;

                case 'subscription':
                  type = schema.getSubscriptionType();
                  break;
              }

              this._typeStack.push((0, _definition.isObjectType)(type) ? type : undefined);

              break;
            }

          case _kinds.Kind.INLINE_FRAGMENT:
          case _kinds.Kind.FRAGMENT_DEFINITION:
            {
              var typeConditionAST = node.typeCondition;
              var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : (0, _definition.getNamedType)(this.getType());

              this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : undefined);

              break;
            }

          case _kinds.Kind.VARIABLE_DEFINITION:
            {
              var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);

              this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : undefined);

              break;
            }

          case _kinds.Kind.ARGUMENT:
            {
              var _this$getDirective;

              var argDef;
              var argType;
              var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();

              if (fieldOrDirective) {
                argDef = (0, _find.default)(fieldOrDirective.args, function (arg) {
                  return arg.name === node.name.value;
                });

                if (argDef) {
                  argType = argDef.type;
                }
              }

              this._argument = argDef;

              this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);

              this._inputTypeStack.push((0, _definition.isInputType)(argType) ? argType : undefined);

              break;
            }

          case _kinds.Kind.LIST:
            {
              var listType = (0, _definition.getNullableType)(this.getInputType());
              var itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType; // List positions never have a default value.

              this._defaultValueStack.push(undefined);

              this._inputTypeStack.push((0, _definition.isInputType)(itemType) ? itemType : undefined);

              break;
            }

          case _kinds.Kind.OBJECT_FIELD:
            {
              var objectType = (0, _definition.getNamedType)(this.getInputType());
              var inputFieldType;
              var inputField;

              if ((0, _definition.isInputObjectType)(objectType)) {
                inputField = objectType.getFields()[node.name.value];

                if (inputField) {
                  inputFieldType = inputField.type;
                }
              }

              this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);

              this._inputTypeStack.push((0, _definition.isInputType)(inputFieldType) ? inputFieldType : undefined);

              break;
            }

          case _kinds.Kind.ENUM:
            {
              var enumType = (0, _definition.getNamedType)(this.getInputType());
              var enumValue;

              if ((0, _definition.isEnumType)(enumType)) {
                enumValue = enumType.getValue(node.value);
              }

              this._enumValue = enumValue;
              break;
            }
        }
      };

      _proto.leave = function leave(node) {
        switch (node.kind) {
          case _kinds.Kind.SELECTION_SET:
            this._parentTypeStack.pop();

            break;

          case _kinds.Kind.FIELD:
            this._fieldDefStack.pop();

            this._typeStack.pop();

            break;

          case _kinds.Kind.DIRECTIVE:
            this._directive = null;
            break;

          case _kinds.Kind.OPERATION_DEFINITION:
          case _kinds.Kind.INLINE_FRAGMENT:
          case _kinds.Kind.FRAGMENT_DEFINITION:
            this._typeStack.pop();

            break;

          case _kinds.Kind.VARIABLE_DEFINITION:
            this._inputTypeStack.pop();

            break;

          case _kinds.Kind.ARGUMENT:
            this._argument = null;

            this._defaultValueStack.pop();

            this._inputTypeStack.pop();

            break;

          case _kinds.Kind.LIST:
          case _kinds.Kind.OBJECT_FIELD:
            this._defaultValueStack.pop();

            this._inputTypeStack.pop();

            break;

          case _kinds.Kind.ENUM:
            this._enumValue = null;
            break;
        }
      };

      return TypeInfo;
    }();
    /**
     * Not exactly the same as the executor's definition of getFieldDef, in this
     * statically evaluated environment we do not always have an Object type,
     * and need to handle Interface and Union types.
     */


    exports.TypeInfo = TypeInfo;

    function getFieldDef(schema, parentType, fieldNode) {
      var name = fieldNode.name.value;

      if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
        return _introspection.SchemaMetaFieldDef;
      }

      if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
        return _introspection.TypeMetaFieldDef;
      }

      if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {
        return _introspection.TypeNameMetaFieldDef;
      }

      if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
        return parentType.getFields()[name];
      }
    }
    /**
     * Creates a new visitor instance which maintains a provided TypeInfo instance
     * along with visiting visitor.
     */


    function visitWithTypeInfo(typeInfo, visitor) {
      return {
        enter: function enter(node) {
          typeInfo.enter(node);
          var fn = (0, _visitor.getVisitFn)(visitor, node.kind,
          /* isLeaving */
          false);

          if (fn) {
            var result = fn.apply(visitor, arguments);

            if (result !== undefined) {
              typeInfo.leave(node);

              if ((0, _ast.isNode)(result)) {
                typeInfo.enter(result);
              }
            }

            return result;
          }
        },
        leave: function leave(node) {
          var fn = (0, _visitor.getVisitFn)(visitor, node.kind,
          /* isLeaving */
          true);
          var result;

          if (fn) {
            result = fn.apply(visitor, arguments);
          }

          typeInfo.leave(node);
          return result;
        }
      };
    }
  }, {
    "../polyfills/find.mjs": "../node_modules/graphql/polyfills/find.mjs",
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../language/ast.mjs": "../node_modules/graphql/language/ast.mjs",
    "../language/visitor.mjs": "../node_modules/graphql/language/visitor.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "../type/introspection.mjs": "../node_modules/graphql/type/introspection.mjs",
    "./typeFromAST.mjs": "../node_modules/graphql/utilities/typeFromAST.mjs"
  }],
  "../node_modules/graphql/language/predicates.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isDefinitionNode = isDefinitionNode;
    exports.isExecutableDefinitionNode = isExecutableDefinitionNode;
    exports.isSelectionNode = isSelectionNode;
    exports.isValueNode = isValueNode;
    exports.isTypeNode = isTypeNode;
    exports.isTypeSystemDefinitionNode = isTypeSystemDefinitionNode;
    exports.isTypeDefinitionNode = isTypeDefinitionNode;
    exports.isTypeSystemExtensionNode = isTypeSystemExtensionNode;
    exports.isTypeExtensionNode = isTypeExtensionNode;

    var _kinds = require("./kinds.mjs");

    function isDefinitionNode(node) {
      return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
    }

    function isExecutableDefinitionNode(node) {
      return node.kind === _kinds.Kind.OPERATION_DEFINITION || node.kind === _kinds.Kind.FRAGMENT_DEFINITION;
    }

    function isSelectionNode(node) {
      return node.kind === _kinds.Kind.FIELD || node.kind === _kinds.Kind.FRAGMENT_SPREAD || node.kind === _kinds.Kind.INLINE_FRAGMENT;
    }

    function isValueNode(node) {
      return node.kind === _kinds.Kind.VARIABLE || node.kind === _kinds.Kind.INT || node.kind === _kinds.Kind.FLOAT || node.kind === _kinds.Kind.STRING || node.kind === _kinds.Kind.BOOLEAN || node.kind === _kinds.Kind.NULL || node.kind === _kinds.Kind.ENUM || node.kind === _kinds.Kind.LIST || node.kind === _kinds.Kind.OBJECT;
    }

    function isTypeNode(node) {
      return node.kind === _kinds.Kind.NAMED_TYPE || node.kind === _kinds.Kind.LIST_TYPE || node.kind === _kinds.Kind.NON_NULL_TYPE;
    }

    function isTypeSystemDefinitionNode(node) {
      return node.kind === _kinds.Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === _kinds.Kind.DIRECTIVE_DEFINITION;
    }

    function isTypeDefinitionNode(node) {
      return node.kind === _kinds.Kind.SCALAR_TYPE_DEFINITION || node.kind === _kinds.Kind.OBJECT_TYPE_DEFINITION || node.kind === _kinds.Kind.INTERFACE_TYPE_DEFINITION || node.kind === _kinds.Kind.UNION_TYPE_DEFINITION || node.kind === _kinds.Kind.ENUM_TYPE_DEFINITION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION;
    }

    function isTypeSystemExtensionNode(node) {
      return node.kind === _kinds.Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
    }

    function isTypeExtensionNode(node) {
      return node.kind === _kinds.Kind.SCALAR_TYPE_EXTENSION || node.kind === _kinds.Kind.OBJECT_TYPE_EXTENSION || node.kind === _kinds.Kind.INTERFACE_TYPE_EXTENSION || node.kind === _kinds.Kind.UNION_TYPE_EXTENSION || node.kind === _kinds.Kind.ENUM_TYPE_EXTENSION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
    }
  }, {
    "./kinds.mjs": "../node_modules/graphql/language/kinds.mjs"
  }],
  "../node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ExecutableDefinitionsRule = ExecutableDefinitionsRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _kinds = require("../../language/kinds.mjs");

    var _predicates = require("../../language/predicates.mjs");
    /**
     * Executable definitions
     *
     * A GraphQL document is only valid for execution if all definitions are either
     * operation or fragment definitions.
     */


    function ExecutableDefinitionsRule(context) {
      return {
        Document: function Document(node) {
          for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {
            var definition = _node$definitions2[_i2];

            if (!(0, _predicates.isExecutableDefinitionNode)(definition)) {
              var defName = definition.kind === _kinds.Kind.SCHEMA_DEFINITION || definition.kind === _kinds.Kind.SCHEMA_EXTENSION ? 'schema' : '"' + definition.name.value + '"';
              context.reportError(new _GraphQLError.GraphQLError("The ".concat(defName, " definition is not executable."), definition));
            }
          }

          return false;
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../../language/predicates.mjs": "../node_modules/graphql/language/predicates.mjs"
  }],
  "../node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueOperationNamesRule = UniqueOperationNamesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * Unique operation names
     *
     * A GraphQL document is only valid if all defined operations have unique names.
     */


    function UniqueOperationNamesRule(context) {
      var knownOperationNames = Object.create(null);
      return {
        OperationDefinition: function OperationDefinition(node) {
          var operationName = node.name;

          if (operationName) {
            if (knownOperationNames[operationName.value]) {
              context.reportError(new _GraphQLError.GraphQLError("There can be only one operation named \"".concat(operationName.value, "\"."), [knownOperationNames[operationName.value], operationName]));
            } else {
              knownOperationNames[operationName.value] = operationName;
            }
          }

          return false;
        },
        FragmentDefinition: function FragmentDefinition() {
          return false;
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LoneAnonymousOperationRule = LoneAnonymousOperationRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _kinds = require("../../language/kinds.mjs");
    /**
     * Lone anonymous operation
     *
     * A GraphQL document is only valid if when it contains an anonymous operation
     * (the query short-hand) that it contains only that one operation definition.
     */


    function LoneAnonymousOperationRule(context) {
      var operationCount = 0;
      return {
        Document: function Document(node) {
          operationCount = node.definitions.filter(function (definition) {
            return definition.kind === _kinds.Kind.OPERATION_DEFINITION;
          }).length;
        },
        OperationDefinition: function OperationDefinition(node) {
          if (!node.name && operationCount > 1) {
            context.reportError(new _GraphQLError.GraphQLError('This anonymous operation must be the only defined operation.', node));
          }
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs"
  }],
  "../node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * Subscriptions must only include one field.
     *
     * A GraphQL subscription is valid only if it contains a single root field.
     */


    function SingleFieldSubscriptionsRule(context) {
      return {
        OperationDefinition: function OperationDefinition(node) {
          if (node.operation === 'subscription') {
            if (node.selectionSet.selections.length !== 1) {
              context.reportError(new _GraphQLError.GraphQLError(node.name ? "Subscription \"".concat(node.name.value, "\" must select only one top level field.") : 'Anonymous Subscription must select only one top level field.', node.selectionSet.selections.slice(1)));
            }
          }
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KnownTypeNamesRule = KnownTypeNamesRule;

    var _didYouMean = _interopRequireDefault(require("../../jsutils/didYouMean.mjs"));

    var _suggestionList = _interopRequireDefault(require("../../jsutils/suggestionList.mjs"));

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _predicates = require("../../language/predicates.mjs");

    var _scalars = require("../../type/scalars.mjs");

    var _introspection = require("../../type/introspection.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Known type names
     *
     * A GraphQL document is only valid if referenced types (specifically
     * variable definitions and fragment conditions) are defined by the type schema.
     */


    function KnownTypeNamesRule(context) {
      var schema = context.getSchema();
      var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);
      var definedTypes = Object.create(null);

      for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {
        var def = _context$getDocument$2[_i2];

        if ((0, _predicates.isTypeDefinitionNode)(def)) {
          definedTypes[def.name.value] = true;
        }
      }

      var typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));
      return {
        NamedType: function NamedType(node, _1, parent, _2, ancestors) {
          var typeName = node.name.value;

          if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
            var _ancestors$;

            var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;
            var isSDL = definitionNode != null && isSDLNode(definitionNode);

            if (isSDL && isStandardTypeName(typeName)) {
              return;
            }

            var suggestedTypes = (0, _suggestionList.default)(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);
            context.reportError(new _GraphQLError.GraphQLError("Unknown type \"".concat(typeName, "\".") + (0, _didYouMean.default)(suggestedTypes), node));
          }
        }
      };
    }

    var standardTypeNames = [].concat(_scalars.specifiedScalarTypes, _introspection.introspectionTypes).map(function (type) {
      return type.name;
    });

    function isStandardTypeName(typeName) {
      return standardTypeNames.indexOf(typeName) !== -1;
    }

    function isSDLNode(value) {
      return !Array.isArray(value) && ((0, _predicates.isTypeSystemDefinitionNode)(value) || (0, _predicates.isTypeSystemExtensionNode)(value));
    }
  }, {
    "../../jsutils/didYouMean.mjs": "../node_modules/graphql/jsutils/didYouMean.mjs",
    "../../jsutils/suggestionList.mjs": "../node_modules/graphql/jsutils/suggestionList.mjs",
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/predicates.mjs": "../node_modules/graphql/language/predicates.mjs",
    "../../type/scalars.mjs": "../node_modules/graphql/type/scalars.mjs",
    "../../type/introspection.mjs": "../node_modules/graphql/type/introspection.mjs"
  }],
  "../node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _printer = require("../../language/printer.mjs");

    var _definition = require("../../type/definition.mjs");

    var _typeFromAST = require("../../utilities/typeFromAST.mjs");
    /**
     * Fragments on composite type
     *
     * Fragments use a type condition to determine if they apply, since fragments
     * can only be spread into a composite type (object, interface, or union), the
     * type condition must also be a composite type.
     */


    function FragmentsOnCompositeTypesRule(context) {
      return {
        InlineFragment: function InlineFragment(node) {
          var typeCondition = node.typeCondition;

          if (typeCondition) {
            var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);

            if (type && !(0, _definition.isCompositeType)(type)) {
              var typeStr = (0, _printer.print)(typeCondition);
              context.reportError(new _GraphQLError.GraphQLError("Fragment cannot condition on non composite type \"".concat(typeStr, "\"."), typeCondition));
            }
          }
        },
        FragmentDefinition: function FragmentDefinition(node) {
          var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);

          if (type && !(0, _definition.isCompositeType)(type)) {
            var typeStr = (0, _printer.print)(node.typeCondition);
            context.reportError(new _GraphQLError.GraphQLError("Fragment \"".concat(node.name.value, "\" cannot condition on non composite type \"").concat(typeStr, "\"."), node.typeCondition));
          }
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "../../utilities/typeFromAST.mjs": "../node_modules/graphql/utilities/typeFromAST.mjs"
  }],
  "../node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _printer = require("../../language/printer.mjs");

    var _definition = require("../../type/definition.mjs");

    var _typeFromAST = require("../../utilities/typeFromAST.mjs");
    /**
     * Variables are input types
     *
     * A GraphQL operation is only valid if all the variables it defines are of
     * input types (scalar, enum, or input object).
     */


    function VariablesAreInputTypesRule(context) {
      return {
        VariableDefinition: function VariableDefinition(node) {
          var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);

          if (type && !(0, _definition.isInputType)(type)) {
            var variableName = node.variable.name.value;
            var typeName = (0, _printer.print)(node.type);
            context.reportError(new _GraphQLError.GraphQLError("Variable \"$".concat(variableName, "\" cannot be non-input type \"").concat(typeName, "\"."), node.type));
          }
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "../../utilities/typeFromAST.mjs": "../node_modules/graphql/utilities/typeFromAST.mjs"
  }],
  "../node_modules/graphql/validation/rules/ScalarLeafsRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ScalarLeafsRule = ScalarLeafsRule;

    var _inspect = _interopRequireDefault(require("../../jsutils/inspect.mjs"));

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _definition = require("../../type/definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Scalar leafs
     *
     * A GraphQL document is valid only if all leaf fields (fields without
     * sub selections) are of scalar or enum types.
     */


    function ScalarLeafsRule(context) {
      return {
        Field: function Field(node) {
          var type = context.getType();
          var selectionSet = node.selectionSet;

          if (type) {
            if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {
              if (selectionSet) {
                var fieldName = node.name.value;
                var typeStr = (0, _inspect.default)(type);
                context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(fieldName, "\" must not have a selection since type \"").concat(typeStr, "\" has no subfields."), selectionSet));
              }
            } else if (!selectionSet) {
              var _fieldName = node.name.value;

              var _typeStr = (0, _inspect.default)(type);

              context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(_fieldName, "\" of type \"").concat(_typeStr, "\" must have a selection of subfields. Did you mean \"").concat(_fieldName, " { ... }\"?"), node));
            }
          }
        }
      };
    }
  }, {
    "../../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;

    var _arrayFrom = _interopRequireDefault(require("../../polyfills/arrayFrom.mjs"));

    var _didYouMean = _interopRequireDefault(require("../../jsutils/didYouMean.mjs"));

    var _suggestionList = _interopRequireDefault(require("../../jsutils/suggestionList.mjs"));

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _definition = require("../../type/definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Fields on correct type
     *
     * A GraphQL document is only valid if all fields selected are defined by the
     * parent type, or are an allowed meta field such as __typename.
     */


    function FieldsOnCorrectTypeRule(context) {
      return {
        Field: function Field(node) {
          var type = context.getParentType();

          if (type) {
            var fieldDef = context.getFieldDef();

            if (!fieldDef) {
              // This field doesn't exist, lets look for suggestions.
              var schema = context.getSchema();
              var fieldName = node.name.value; // First determine if there are any suggested types to condition on.

              var suggestion = (0, _didYouMean.default)('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?

              if (suggestion === '') {
                suggestion = (0, _didYouMean.default)(getSuggestedFieldNames(type, fieldName));
              } // Report an error, including helpful suggestions.


              context.reportError(new _GraphQLError.GraphQLError("Cannot query field \"".concat(fieldName, "\" on type \"").concat(type.name, "\".") + suggestion, node));
            }
          }
        }
      };
    }
    /**
     * Go through all of the implementations of type, as well as the interfaces that
     * they implement. If any of those types include the provided field, suggest them,
     * sorted by how often the type is referenced.
     */


    function getSuggestedTypeNames(schema, type, fieldName) {
      if (!(0, _definition.isAbstractType)(type)) {
        // Must be an Object type, which does not have possible fields.
        return [];
      }

      var suggestedTypes = new Set();
      var usageCount = Object.create(null);

      for (var _i2 = 0, _schema$getPossibleTy2 = schema.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++) {
        var possibleType = _schema$getPossibleTy2[_i2];

        if (!possibleType.getFields()[fieldName]) {
          continue;
        } // This object type defines this field.


        suggestedTypes.add(possibleType);
        usageCount[possibleType.name] = 1;

        for (var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++) {
          var _usageCount$possibleI;

          var possibleInterface = _possibleType$getInte2[_i4];

          if (!possibleInterface.getFields()[fieldName]) {
            continue;
          } // This interface type defines this field.


          suggestedTypes.add(possibleInterface);
          usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;
        }
      }

      return (0, _arrayFrom.default)(suggestedTypes).sort(function (typeA, typeB) {
        // Suggest both interface and object types based on how common they are.
        var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];

        if (usageCountDiff !== 0) {
          return usageCountDiff;
        } // Suggest super types first followed by subtypes


        if ((0, _definition.isInterfaceType)(typeA) && schema.isSubType(typeA, typeB)) {
          return -1;
        }

        if ((0, _definition.isInterfaceType)(typeB) && schema.isSubType(typeB, typeA)) {
          return 1;
        }

        return typeA.name.localeCompare(typeB.name);
      }).map(function (x) {
        return x.name;
      });
    }
    /**
     * For the field name provided, determine if there are any similar field names
     * that may be the result of a typo.
     */


    function getSuggestedFieldNames(type, fieldName) {
      if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
        var possibleFieldNames = Object.keys(type.getFields());
        return (0, _suggestionList.default)(fieldName, possibleFieldNames);
      } // Otherwise, must be a Union type, which does not define fields.


      return [];
    }
  }, {
    "../../polyfills/arrayFrom.mjs": "../node_modules/graphql/polyfills/arrayFrom.mjs",
    "../../jsutils/didYouMean.mjs": "../node_modules/graphql/jsutils/didYouMean.mjs",
    "../../jsutils/suggestionList.mjs": "../node_modules/graphql/jsutils/suggestionList.mjs",
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueFragmentNamesRule = UniqueFragmentNamesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * Unique fragment names
     *
     * A GraphQL document is only valid if all defined fragments have unique names.
     */


    function UniqueFragmentNamesRule(context) {
      var knownFragmentNames = Object.create(null);
      return {
        OperationDefinition: function OperationDefinition() {
          return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
          var fragmentName = node.name.value;

          if (knownFragmentNames[fragmentName]) {
            context.reportError(new _GraphQLError.GraphQLError("There can be only one fragment named \"".concat(fragmentName, "\"."), [knownFragmentNames[fragmentName], node.name]));
          } else {
            knownFragmentNames[fragmentName] = node.name;
          }

          return false;
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KnownFragmentNamesRule = KnownFragmentNamesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * Known fragment names
     *
     * A GraphQL document is only valid if all `...Fragment` fragment spreads refer
     * to fragments defined in the same document.
     */


    function KnownFragmentNamesRule(context) {
      return {
        FragmentSpread: function FragmentSpread(node) {
          var fragmentName = node.name.value;
          var fragment = context.getFragment(fragmentName);

          if (!fragment) {
            context.reportError(new _GraphQLError.GraphQLError("Unknown fragment \"".concat(fragmentName, "\"."), node.name));
          }
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoUnusedFragmentsRule = NoUnusedFragmentsRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * No unused fragments
     *
     * A GraphQL document is only valid if all fragment definitions are spread
     * within operations, or spread within other fragments spread within operations.
     */


    function NoUnusedFragmentsRule(context) {
      var operationDefs = [];
      var fragmentDefs = [];
      return {
        OperationDefinition: function OperationDefinition(node) {
          operationDefs.push(node);
          return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
          fragmentDefs.push(node);
          return false;
        },
        Document: {
          leave: function leave() {
            var fragmentNameUsed = Object.create(null);

            for (var _i2 = 0; _i2 < operationDefs.length; _i2++) {
              var operation = operationDefs[_i2];

              for (var _i4 = 0, _context$getRecursive2 = context.getRecursivelyReferencedFragments(operation); _i4 < _context$getRecursive2.length; _i4++) {
                var fragment = _context$getRecursive2[_i4];
                fragmentNameUsed[fragment.name.value] = true;
              }
            }

            for (var _i6 = 0; _i6 < fragmentDefs.length; _i6++) {
              var fragmentDef = fragmentDefs[_i6];
              var fragName = fragmentDef.name.value;

              if (fragmentNameUsed[fragName] !== true) {
                context.reportError(new _GraphQLError.GraphQLError("Fragment \"".concat(fragName, "\" is never used."), fragmentDef));
              }
            }
          }
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule;

    var _inspect = _interopRequireDefault(require("../../jsutils/inspect.mjs"));

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _definition = require("../../type/definition.mjs");

    var _typeFromAST = require("../../utilities/typeFromAST.mjs");

    var _typeComparators = require("../../utilities/typeComparators.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Possible fragment spread
     *
     * A fragment spread is only valid if the type condition could ever possibly
     * be true: if there is a non-empty intersection of the possible parent types,
     * and possible types which pass the type condition.
     */


    function PossibleFragmentSpreadsRule(context) {
      return {
        InlineFragment: function InlineFragment(node) {
          var fragType = context.getType();
          var parentType = context.getParentType();

          if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
            var parentTypeStr = (0, _inspect.default)(parentType);
            var fragTypeStr = (0, _inspect.default)(fragType);
            context.reportError(new _GraphQLError.GraphQLError("Fragment cannot be spread here as objects of type \"".concat(parentTypeStr, "\" can never be of type \"").concat(fragTypeStr, "\"."), node));
          }
        },
        FragmentSpread: function FragmentSpread(node) {
          var fragName = node.name.value;
          var fragType = getFragmentType(context, fragName);
          var parentType = context.getParentType();

          if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
            var parentTypeStr = (0, _inspect.default)(parentType);
            var fragTypeStr = (0, _inspect.default)(fragType);
            context.reportError(new _GraphQLError.GraphQLError("Fragment \"".concat(fragName, "\" cannot be spread here as objects of type \"").concat(parentTypeStr, "\" can never be of type \"").concat(fragTypeStr, "\"."), node));
          }
        }
      };
    }

    function getFragmentType(context, name) {
      var frag = context.getFragment(name);

      if (frag) {
        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);

        if ((0, _definition.isCompositeType)(type)) {
          return type;
        }
      }
    }
  }, {
    "../../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "../../utilities/typeFromAST.mjs": "../node_modules/graphql/utilities/typeFromAST.mjs",
    "../../utilities/typeComparators.mjs": "../node_modules/graphql/utilities/typeComparators.mjs"
  }],
  "../node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoFragmentCyclesRule = NoFragmentCyclesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    function NoFragmentCyclesRule(context) {
      // Tracks already visited fragments to maintain O(N) and to ensure that cycles
      // are not redundantly reported.
      var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors

      var spreadPath = []; // Position in the spread path

      var spreadPathIndexByName = Object.create(null);
      return {
        OperationDefinition: function OperationDefinition() {
          return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
          detectCycleRecursive(node);
          return false;
        }
      }; // This does a straight-forward DFS to find cycles.
      // It does not terminate when a cycle was found but continues to explore
      // the graph to find all possible cycles.

      function detectCycleRecursive(fragment) {
        if (visitedFrags[fragment.name.value]) {
          return;
        }

        var fragmentName = fragment.name.value;
        visitedFrags[fragmentName] = true;
        var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);

        if (spreadNodes.length === 0) {
          return;
        }

        spreadPathIndexByName[fragmentName] = spreadPath.length;

        for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {
          var spreadNode = spreadNodes[_i2];
          var spreadName = spreadNode.name.value;
          var cycleIndex = spreadPathIndexByName[spreadName];
          spreadPath.push(spreadNode);

          if (cycleIndex === undefined) {
            var spreadFragment = context.getFragment(spreadName);

            if (spreadFragment) {
              detectCycleRecursive(spreadFragment);
            }
          } else {
            var cyclePath = spreadPath.slice(cycleIndex);
            var viaPath = cyclePath.slice(0, -1).map(function (s) {
              return '"' + s.name.value + '"';
            }).join(', ');
            context.reportError(new _GraphQLError.GraphQLError("Cannot spread fragment \"".concat(spreadName, "\" within itself") + (viaPath !== '' ? " via ".concat(viaPath, ".") : '.'), cyclePath));
          }

          spreadPath.pop();
        }

        spreadPathIndexByName[fragmentName] = undefined;
      }
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueVariableNamesRule = UniqueVariableNamesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * Unique variable names
     *
     * A GraphQL operation is only valid if all its variables are uniquely named.
     */


    function UniqueVariableNamesRule(context) {
      var knownVariableNames = Object.create(null);
      return {
        OperationDefinition: function OperationDefinition() {
          knownVariableNames = Object.create(null);
        },
        VariableDefinition: function VariableDefinition(node) {
          var variableName = node.variable.name.value;

          if (knownVariableNames[variableName]) {
            context.reportError(new _GraphQLError.GraphQLError("There can be only one variable named \"$".concat(variableName, "\"."), [knownVariableNames[variableName], node.variable.name]));
          } else {
            knownVariableNames[variableName] = node.variable.name;
          }
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoUndefinedVariablesRule = NoUndefinedVariablesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * No undefined variables
     *
     * A GraphQL operation is only valid if all variables encountered, both directly
     * and via fragment spreads, are defined by that operation.
     */


    function NoUndefinedVariablesRule(context) {
      var variableNameDefined = Object.create(null);
      return {
        OperationDefinition: {
          enter: function enter() {
            variableNameDefined = Object.create(null);
          },
          leave: function leave(operation) {
            var usages = context.getRecursiveVariableUsages(operation);

            for (var _i2 = 0; _i2 < usages.length; _i2++) {
              var _ref2 = usages[_i2];
              var node = _ref2.node;
              var varName = node.name.value;

              if (variableNameDefined[varName] !== true) {
                context.reportError(new _GraphQLError.GraphQLError(operation.name ? "Variable \"$".concat(varName, "\" is not defined by operation \"").concat(operation.name.value, "\".") : "Variable \"$".concat(varName, "\" is not defined."), [node, operation]));
              }
            }
          }
        },
        VariableDefinition: function VariableDefinition(node) {
          variableNameDefined[node.variable.name.value] = true;
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoUnusedVariablesRule = NoUnusedVariablesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * No unused variables
     *
     * A GraphQL operation is only valid if all variables defined by an operation
     * are used, either directly or within a spread fragment.
     */


    function NoUnusedVariablesRule(context) {
      var variableDefs = [];
      return {
        OperationDefinition: {
          enter: function enter() {
            variableDefs = [];
          },
          leave: function leave(operation) {
            var variableNameUsed = Object.create(null);
            var usages = context.getRecursiveVariableUsages(operation);

            for (var _i2 = 0; _i2 < usages.length; _i2++) {
              var _ref2 = usages[_i2];
              var node = _ref2.node;
              variableNameUsed[node.name.value] = true;
            }

            for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {
              var variableDef = _variableDefs2[_i4];
              var variableName = variableDef.variable.name.value;

              if (variableNameUsed[variableName] !== true) {
                context.reportError(new _GraphQLError.GraphQLError(operation.name ? "Variable \"$".concat(variableName, "\" is never used in operation \"").concat(operation.name.value, "\".") : "Variable \"$".concat(variableName, "\" is never used."), variableDef));
              }
            }
          }
        },
        VariableDefinition: function VariableDefinition(def) {
          variableDefs.push(def);
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/KnownDirectivesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KnownDirectivesRule = KnownDirectivesRule;

    var _inspect = _interopRequireDefault(require("../../jsutils/inspect.mjs"));

    var _invariant = _interopRequireDefault(require("../../jsutils/invariant.mjs"));

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _kinds = require("../../language/kinds.mjs");

    var _directiveLocation = require("../../language/directiveLocation.mjs");

    var _directives = require("../../type/directives.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Known directives
     *
     * A GraphQL document is only valid if all `@directives` are known by the
     * schema and legally positioned.
     */


    function KnownDirectivesRule(context) {
      var locationsMap = Object.create(null);
      var schema = context.getSchema();
      var definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;

      for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
        var directive = definedDirectives[_i2];
        locationsMap[directive.name] = directive.locations;
      }

      var astDefinitions = context.getDocument().definitions;

      for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
        var def = astDefinitions[_i4];

        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          locationsMap[def.name.value] = def.locations.map(function (name) {
            return name.value;
          });
        }
      }

      return {
        Directive: function Directive(node, _key, _parent, _path, ancestors) {
          var name = node.name.value;
          var locations = locationsMap[name];

          if (!locations) {
            context.reportError(new _GraphQLError.GraphQLError("Unknown directive \"@".concat(name, "\"."), node));
            return;
          }

          var candidateLocation = getDirectiveLocationForASTPath(ancestors);

          if (candidateLocation && locations.indexOf(candidateLocation) === -1) {
            context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(name, "\" may not be used on ").concat(candidateLocation, "."), node));
          }
        }
      };
    }

    function getDirectiveLocationForASTPath(ancestors) {
      var appliedTo = ancestors[ancestors.length - 1];
      !Array.isArray(appliedTo) || (0, _invariant.default)(0);

      switch (appliedTo.kind) {
        case _kinds.Kind.OPERATION_DEFINITION:
          return getDirectiveLocationForOperation(appliedTo.operation);

        case _kinds.Kind.FIELD:
          return _directiveLocation.DirectiveLocation.FIELD;

        case _kinds.Kind.FRAGMENT_SPREAD:
          return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;

        case _kinds.Kind.INLINE_FRAGMENT:
          return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;

        case _kinds.Kind.FRAGMENT_DEFINITION:
          return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;

        case _kinds.Kind.VARIABLE_DEFINITION:
          return _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION;

        case _kinds.Kind.SCHEMA_DEFINITION:
        case _kinds.Kind.SCHEMA_EXTENSION:
          return _directiveLocation.DirectiveLocation.SCHEMA;

        case _kinds.Kind.SCALAR_TYPE_DEFINITION:
        case _kinds.Kind.SCALAR_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.SCALAR;

        case _kinds.Kind.OBJECT_TYPE_DEFINITION:
        case _kinds.Kind.OBJECT_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.OBJECT;

        case _kinds.Kind.FIELD_DEFINITION:
          return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;

        case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
        case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.INTERFACE;

        case _kinds.Kind.UNION_TYPE_DEFINITION:
        case _kinds.Kind.UNION_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.UNION;

        case _kinds.Kind.ENUM_TYPE_DEFINITION:
        case _kinds.Kind.ENUM_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.ENUM;

        case _kinds.Kind.ENUM_VALUE_DEFINITION:
          return _directiveLocation.DirectiveLocation.ENUM_VALUE;

        case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.INPUT_OBJECT;

        case _kinds.Kind.INPUT_VALUE_DEFINITION:
          {
            var parentNode = ancestors[ancestors.length - 3];
            return parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;
          }
      }
    }

    function getDirectiveLocationForOperation(operation) {
      switch (operation) {
        case 'query':
          return _directiveLocation.DirectiveLocation.QUERY;

        case 'mutation':
          return _directiveLocation.DirectiveLocation.MUTATION;

        case 'subscription':
          return _directiveLocation.DirectiveLocation.SUBSCRIPTION;
      } // istanbul ignore next (Not reachable. All possible types have been considered)


      false || (0, _invariant.default)(0, 'Unexpected operation: ' + (0, _inspect.default)(operation));
    }
  }, {
    "../../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../../language/directiveLocation.mjs": "../node_modules/graphql/language/directiveLocation.mjs",
    "../../type/directives.mjs": "../node_modules/graphql/type/directives.mjs"
  }],
  "../node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _kinds = require("../../language/kinds.mjs");

    var _predicates = require("../../language/predicates.mjs");

    var _directives = require("../../type/directives.mjs");
    /**
     * Unique directive names per location
     *
     * A GraphQL document is only valid if all non-repeatable directives at
     * a given location are uniquely named.
     */


    function UniqueDirectivesPerLocationRule(context) {
      var uniqueDirectiveMap = Object.create(null);
      var schema = context.getSchema();
      var definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;

      for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
        var directive = definedDirectives[_i2];
        uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
      }

      var astDefinitions = context.getDocument().definitions;

      for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
        var def = astDefinitions[_i4];

        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          uniqueDirectiveMap[def.name.value] = !def.repeatable;
        }
      }

      var schemaDirectives = Object.create(null);
      var typeDirectivesMap = Object.create(null);
      return {
        // Many different AST nodes may contain directives. Rather than listing
        // them all, just listen for entering any node, and check to see if it
        // defines any directives.
        enter: function enter(node) {
          if (node.directives == null) {
            return;
          }

          var seenDirectives;

          if (node.kind === _kinds.Kind.SCHEMA_DEFINITION || node.kind === _kinds.Kind.SCHEMA_EXTENSION) {
            seenDirectives = schemaDirectives;
          } else if ((0, _predicates.isTypeDefinitionNode)(node) || (0, _predicates.isTypeExtensionNode)(node)) {
            var typeName = node.name.value;
            seenDirectives = typeDirectivesMap[typeName];

            if (seenDirectives === undefined) {
              typeDirectivesMap[typeName] = seenDirectives = Object.create(null);
            }
          } else {
            seenDirectives = Object.create(null);
          }

          for (var _i6 = 0, _node$directives2 = node.directives; _i6 < _node$directives2.length; _i6++) {
            var _directive = _node$directives2[_i6];
            var directiveName = _directive.name.value;

            if (uniqueDirectiveMap[directiveName]) {
              if (seenDirectives[directiveName]) {
                context.reportError(new _GraphQLError.GraphQLError("The directive \"@".concat(directiveName, "\" can only be used once at this location."), [seenDirectives[directiveName], _directive]));
              } else {
                seenDirectives[directiveName] = _directive;
              }
            }
          }
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../../language/predicates.mjs": "../node_modules/graphql/language/predicates.mjs",
    "../../type/directives.mjs": "../node_modules/graphql/type/directives.mjs"
  }],
  "../node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KnownArgumentNamesRule = KnownArgumentNamesRule;
    exports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;

    var _didYouMean = _interopRequireDefault(require("../../jsutils/didYouMean.mjs"));

    var _suggestionList = _interopRequireDefault(require("../../jsutils/suggestionList.mjs"));

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _kinds = require("../../language/kinds.mjs");

    var _directives = require("../../type/directives.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }
    /**
     * Known argument names
     *
     * A GraphQL field is only valid if all supplied arguments are defined by
     * that field.
     */


    function KnownArgumentNamesRule(context) {
      return _objectSpread(_objectSpread({}, KnownArgumentNamesOnDirectivesRule(context)), {}, {
        Argument: function Argument(argNode) {
          var argDef = context.getArgument();
          var fieldDef = context.getFieldDef();
          var parentType = context.getParentType();

          if (!argDef && fieldDef && parentType) {
            var argName = argNode.name.value;
            var knownArgsNames = fieldDef.args.map(function (arg) {
              return arg.name;
            });
            var suggestions = (0, _suggestionList.default)(argName, knownArgsNames);
            context.reportError(new _GraphQLError.GraphQLError("Unknown argument \"".concat(argName, "\" on field \"").concat(parentType.name, ".").concat(fieldDef.name, "\".") + (0, _didYouMean.default)(suggestions), argNode));
          }
        }
      });
    }
    /**
     * @internal
     */


    function KnownArgumentNamesOnDirectivesRule(context) {
      var directiveArgs = Object.create(null);
      var schema = context.getSchema();
      var definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;

      for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
        var directive = definedDirectives[_i2];
        directiveArgs[directive.name] = directive.args.map(function (arg) {
          return arg.name;
        });
      }

      var astDefinitions = context.getDocument().definitions;

      for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
        var def = astDefinitions[_i4];

        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          var _def$arguments; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


          var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
          directiveArgs[def.name.value] = argsNodes.map(function (arg) {
            return arg.name.value;
          });
        }
      }

      return {
        Directive: function Directive(directiveNode) {
          var directiveName = directiveNode.name.value;
          var knownArgs = directiveArgs[directiveName];

          if (directiveNode.arguments && knownArgs) {
            for (var _i6 = 0, _directiveNode$argume2 = directiveNode.arguments; _i6 < _directiveNode$argume2.length; _i6++) {
              var argNode = _directiveNode$argume2[_i6];
              var argName = argNode.name.value;

              if (knownArgs.indexOf(argName) === -1) {
                var suggestions = (0, _suggestionList.default)(argName, knownArgs);
                context.reportError(new _GraphQLError.GraphQLError("Unknown argument \"".concat(argName, "\" on directive \"@").concat(directiveName, "\".") + (0, _didYouMean.default)(suggestions), argNode));
              }
            }
          }

          return false;
        }
      };
    }
  }, {
    "../../jsutils/didYouMean.mjs": "../node_modules/graphql/jsutils/didYouMean.mjs",
    "../../jsutils/suggestionList.mjs": "../node_modules/graphql/jsutils/suggestionList.mjs",
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../../type/directives.mjs": "../node_modules/graphql/type/directives.mjs"
  }],
  "../node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueArgumentNamesRule = UniqueArgumentNamesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * Unique argument names
     *
     * A GraphQL field or directive is only valid if all supplied arguments are
     * uniquely named.
     */


    function UniqueArgumentNamesRule(context) {
      var knownArgNames = Object.create(null);
      return {
        Field: function Field() {
          knownArgNames = Object.create(null);
        },
        Directive: function Directive() {
          knownArgNames = Object.create(null);
        },
        Argument: function Argument(node) {
          var argName = node.name.value;

          if (knownArgNames[argName]) {
            context.reportError(new _GraphQLError.GraphQLError("There can be only one argument named \"".concat(argName, "\"."), [knownArgNames[argName], node.name]));
          } else {
            knownArgNames[argName] = node.name;
          }

          return false;
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;

    var _objectValues = _interopRequireDefault(require("../../polyfills/objectValues.mjs"));

    var _keyMap = _interopRequireDefault(require("../../jsutils/keyMap.mjs"));

    var _inspect = _interopRequireDefault(require("../../jsutils/inspect.mjs"));

    var _didYouMean = _interopRequireDefault(require("../../jsutils/didYouMean.mjs"));

    var _suggestionList = _interopRequireDefault(require("../../jsutils/suggestionList.mjs"));

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _printer = require("../../language/printer.mjs");

    var _definition = require("../../type/definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Value literals of correct type
     *
     * A GraphQL document is only valid if all value literals are of the type
     * expected at their position.
     */


    function ValuesOfCorrectTypeRule(context) {
      return {
        ListValue: function ListValue(node) {
          // Note: TypeInfo will traverse into a list's item type, so look to the
          // parent input type to check if it is a list.
          var type = (0, _definition.getNullableType)(context.getParentInputType());

          if (!(0, _definition.isListType)(type)) {
            isValidValueNode(context, node);
            return false; // Don't traverse further.
          }
        },
        ObjectValue: function ObjectValue(node) {
          var type = (0, _definition.getNamedType)(context.getInputType());

          if (!(0, _definition.isInputObjectType)(type)) {
            isValidValueNode(context, node);
            return false; // Don't traverse further.
          } // Ensure every required field exists.


          var fieldNodeMap = (0, _keyMap.default)(node.fields, function (field) {
            return field.name.value;
          });

          for (var _i2 = 0, _objectValues2 = (0, _objectValues.default)(type.getFields()); _i2 < _objectValues2.length; _i2++) {
            var fieldDef = _objectValues2[_i2];
            var fieldNode = fieldNodeMap[fieldDef.name];

            if (!fieldNode && (0, _definition.isRequiredInputField)(fieldDef)) {
              var typeStr = (0, _inspect.default)(fieldDef.type);
              context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(type.name, ".").concat(fieldDef.name, "\" of required type \"").concat(typeStr, "\" was not provided."), node));
            }
          }
        },
        ObjectField: function ObjectField(node) {
          var parentType = (0, _definition.getNamedType)(context.getParentInputType());
          var fieldType = context.getInputType();

          if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {
            var suggestions = (0, _suggestionList.default)(node.name.value, Object.keys(parentType.getFields()));
            context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(node.name.value, "\" is not defined by type \"").concat(parentType.name, "\".") + (0, _didYouMean.default)(suggestions), node));
          }
        },
        NullValue: function NullValue(node) {
          var type = context.getInputType();

          if ((0, _definition.isNonNullType)(type)) {
            context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat((0, _inspect.default)(type), "\", found ").concat((0, _printer.print)(node), "."), node));
          }
        },
        EnumValue: function EnumValue(node) {
          return isValidValueNode(context, node);
        },
        IntValue: function IntValue(node) {
          return isValidValueNode(context, node);
        },
        FloatValue: function FloatValue(node) {
          return isValidValueNode(context, node);
        },
        StringValue: function StringValue(node) {
          return isValidValueNode(context, node);
        },
        BooleanValue: function BooleanValue(node) {
          return isValidValueNode(context, node);
        }
      };
    }
    /**
     * Any value literal may be a valid representation of a Scalar, depending on
     * that scalar type.
     */


    function isValidValueNode(context, node) {
      // Report any error at the full type expected by the location.
      var locationType = context.getInputType();

      if (!locationType) {
        return;
      }

      var type = (0, _definition.getNamedType)(locationType);

      if (!(0, _definition.isLeafType)(type)) {
        var typeStr = (0, _inspect.default)(locationType);
        context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat(typeStr, "\", found ").concat((0, _printer.print)(node), "."), node));
        return;
      } // Scalars and Enums determine if a literal value is valid via parseLiteral(),
      // which may throw or return an invalid value to indicate failure.


      try {
        var parseResult = type.parseLiteral(node, undefined
        /* variables */
        );

        if (parseResult === undefined) {
          var _typeStr = (0, _inspect.default)(locationType);

          context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat(_typeStr, "\", found ").concat((0, _printer.print)(node), "."), node));
        }
      } catch (error) {
        var _typeStr2 = (0, _inspect.default)(locationType);

        if (error instanceof _GraphQLError.GraphQLError) {
          context.reportError(error);
        } else {
          context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat(_typeStr2, "\", found ").concat((0, _printer.print)(node), "; ") + error.message, node, undefined, undefined, undefined, error));
        }
      }
    }
  }, {
    "../../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../../jsutils/keyMap.mjs": "../node_modules/graphql/jsutils/keyMap.mjs",
    "../../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../../jsutils/didYouMean.mjs": "../node_modules/graphql/jsutils/didYouMean.mjs",
    "../../jsutils/suggestionList.mjs": "../node_modules/graphql/jsutils/suggestionList.mjs",
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule;
    exports.ProvidedRequiredArgumentsOnDirectivesRule = ProvidedRequiredArgumentsOnDirectivesRule;

    var _inspect = _interopRequireDefault(require("../../jsutils/inspect.mjs"));

    var _keyMap = _interopRequireDefault(require("../../jsutils/keyMap.mjs"));

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _kinds = require("../../language/kinds.mjs");

    var _printer = require("../../language/printer.mjs");

    var _directives = require("../../type/directives.mjs");

    var _definition = require("../../type/definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }
    /**
     * Provided required arguments
     *
     * A field or directive is only valid if all required (non-null without a
     * default value) field arguments have been provided.
     */


    function ProvidedRequiredArgumentsRule(context) {
      return _objectSpread(_objectSpread({}, ProvidedRequiredArgumentsOnDirectivesRule(context)), {}, {
        Field: {
          // Validate on leave to allow for deeper errors to appear first.
          leave: function leave(fieldNode) {
            var _fieldNode$arguments;

            var fieldDef = context.getFieldDef();

            if (!fieldDef) {
              return false;
            } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


            var argNodes = (_fieldNode$arguments = fieldNode.arguments) !== null && _fieldNode$arguments !== void 0 ? _fieldNode$arguments : [];
            var argNodeMap = (0, _keyMap.default)(argNodes, function (arg) {
              return arg.name.value;
            });

            for (var _i2 = 0, _fieldDef$args2 = fieldDef.args; _i2 < _fieldDef$args2.length; _i2++) {
              var argDef = _fieldDef$args2[_i2];
              var argNode = argNodeMap[argDef.name];

              if (!argNode && (0, _definition.isRequiredArgument)(argDef)) {
                var argTypeStr = (0, _inspect.default)(argDef.type);
                context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(fieldDef.name, "\" argument \"").concat(argDef.name, "\" of type \"").concat(argTypeStr, "\" is required, but it was not provided."), fieldNode));
              }
            }
          }
        }
      });
    }
    /**
     * @internal
     */


    function ProvidedRequiredArgumentsOnDirectivesRule(context) {
      var requiredArgsMap = Object.create(null);
      var schema = context.getSchema();
      var definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;

      for (var _i4 = 0; _i4 < definedDirectives.length; _i4++) {
        var directive = definedDirectives[_i4];
        requiredArgsMap[directive.name] = (0, _keyMap.default)(directive.args.filter(_definition.isRequiredArgument), function (arg) {
          return arg.name;
        });
      }

      var astDefinitions = context.getDocument().definitions;

      for (var _i6 = 0; _i6 < astDefinitions.length; _i6++) {
        var def = astDefinitions[_i6];

        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          var _def$arguments; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


          var argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
          requiredArgsMap[def.name.value] = (0, _keyMap.default)(argNodes.filter(isRequiredArgumentNode), function (arg) {
            return arg.name.value;
          });
        }
      }

      return {
        Directive: {
          // Validate on leave to allow for deeper errors to appear first.
          leave: function leave(directiveNode) {
            var directiveName = directiveNode.name.value;
            var requiredArgs = requiredArgsMap[directiveName];

            if (requiredArgs) {
              var _directiveNode$argume; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


              var _argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];

              var argNodeMap = (0, _keyMap.default)(_argNodes, function (arg) {
                return arg.name.value;
              });

              for (var _i8 = 0, _Object$keys2 = Object.keys(requiredArgs); _i8 < _Object$keys2.length; _i8++) {
                var argName = _Object$keys2[_i8];

                if (!argNodeMap[argName]) {
                  var argType = requiredArgs[argName].type;
                  var argTypeStr = (0, _definition.isType)(argType) ? (0, _inspect.default)(argType) : (0, _printer.print)(argType);
                  context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(directiveName, "\" argument \"").concat(argName, "\" of type \"").concat(argTypeStr, "\" is required, but it was not provided."), directiveNode));
                }
              }
            }
          }
        }
      };
    }

    function isRequiredArgumentNode(arg) {
      return arg.type.kind === _kinds.Kind.NON_NULL_TYPE && arg.defaultValue == null;
    }
  }, {
    "../../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../../jsutils/keyMap.mjs": "../node_modules/graphql/jsutils/keyMap.mjs",
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../../language/printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "../../type/directives.mjs": "../node_modules/graphql/type/directives.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;

    var _inspect = _interopRequireDefault(require("../../jsutils/inspect.mjs"));

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _kinds = require("../../language/kinds.mjs");

    var _definition = require("../../type/definition.mjs");

    var _typeFromAST = require("../../utilities/typeFromAST.mjs");

    var _typeComparators = require("../../utilities/typeComparators.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Variables passed to field arguments conform to type
     */


    function VariablesInAllowedPositionRule(context) {
      var varDefMap = Object.create(null);
      return {
        OperationDefinition: {
          enter: function enter() {
            varDefMap = Object.create(null);
          },
          leave: function leave(operation) {
            var usages = context.getRecursiveVariableUsages(operation);

            for (var _i2 = 0; _i2 < usages.length; _i2++) {
              var _ref2 = usages[_i2];
              var node = _ref2.node;
              var type = _ref2.type;
              var defaultValue = _ref2.defaultValue;
              var varName = node.name.value;
              var varDef = varDefMap[varName];

              if (varDef && type) {
                // A var type is allowed if it is the same or more strict (e.g. is
                // a subtype of) than the expected type. It can be more strict if
                // the variable type is non-null when the expected type is nullable.
                // If both are list types, the variable item type can be more strict
                // than the expected item type (contravariant).
                var schema = context.getSchema();
                var varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);

                if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {
                  var varTypeStr = (0, _inspect.default)(varType);
                  var typeStr = (0, _inspect.default)(type);
                  context.reportError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" of type \"").concat(varTypeStr, "\" used in position expecting type \"").concat(typeStr, "\"."), [varDef, node]));
                }
              }
            }
          }
        },
        VariableDefinition: function VariableDefinition(node) {
          varDefMap[node.variable.name.value] = node;
        }
      };
    }
    /**
     * Returns true if the variable is allowed in the location it was found,
     * which includes considering if default values exist for either the variable
     * or the location at which it is located.
     */


    function allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {
      if ((0, _definition.isNonNullType)(locationType) && !(0, _definition.isNonNullType)(varType)) {
        var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== _kinds.Kind.NULL;
        var hasLocationDefaultValue = locationDefaultValue !== undefined;

        if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
          return false;
        }

        var nullableLocationType = locationType.ofType;
        return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, nullableLocationType);
      }

      return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, locationType);
    }
  }, {
    "../../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "../../utilities/typeFromAST.mjs": "../node_modules/graphql/utilities/typeFromAST.mjs",
    "../../utilities/typeComparators.mjs": "../node_modules/graphql/utilities/typeComparators.mjs"
  }],
  "../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;

    var _find = _interopRequireDefault(require("../../polyfills/find.mjs"));

    var _objectEntries = _interopRequireDefault(require("../../polyfills/objectEntries.mjs"));

    var _inspect = _interopRequireDefault(require("../../jsutils/inspect.mjs"));

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _kinds = require("../../language/kinds.mjs");

    var _printer = require("../../language/printer.mjs");

    var _definition = require("../../type/definition.mjs");

    var _typeFromAST = require("../../utilities/typeFromAST.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function reasonMessage(reason) {
      if (Array.isArray(reason)) {
        return reason.map(function (_ref) {
          var responseName = _ref[0],
              subReason = _ref[1];
          return "subfields \"".concat(responseName, "\" conflict because ") + reasonMessage(subReason);
        }).join(' and ');
      }

      return reason;
    }
    /**
     * Overlapping fields can be merged
     *
     * A selection set is only valid if all fields (including spreading any
     * fragments) either correspond to distinct response names or can be merged
     * without ambiguity.
     */


    function OverlappingFieldsCanBeMergedRule(context) {
      // A memoization for when two fragments are compared "between" each other for
      // conflicts. Two fragments may be compared many times, so memoizing this can
      // dramatically improve the performance of this validator.
      var comparedFragmentPairs = new PairSet(); // A cache for the "field map" and list of fragment names found in any given
      // selection set. Selection sets may be asked for this information multiple
      // times, so this improves the performance of this validator.

      var cachedFieldsAndFragmentNames = new Map();
      return {
        SelectionSet: function SelectionSet(selectionSet) {
          var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);

          for (var _i2 = 0; _i2 < conflicts.length; _i2++) {
            var _ref3 = conflicts[_i2];
            var _ref2$ = _ref3[0];
            var responseName = _ref2$[0];
            var reason = _ref2$[1];
            var fields1 = _ref3[1];
            var fields2 = _ref3[2];
            var reasonMsg = reasonMessage(reason);
            context.reportError(new _GraphQLError.GraphQLError("Fields \"".concat(responseName, "\" conflict because ").concat(reasonMsg, ". Use different aliases on the fields to fetch both if this was intentional."), fields1.concat(fields2)));
          }
        }
      };
    }
    /**
     * Algorithm:
     *
     * Conflicts occur when two fields exist in a query which will produce the same
     * response name, but represent differing values, thus creating a conflict.
     * The algorithm below finds all conflicts via making a series of comparisons
     * between fields. In order to compare as few fields as possible, this makes
     * a series of comparisons "within" sets of fields and "between" sets of fields.
     *
     * Given any selection set, a collection produces both a set of fields by
     * also including all inline fragments, as well as a list of fragments
     * referenced by fragment spreads.
     *
     * A) Each selection set represented in the document first compares "within" its
     * collected set of fields, finding any conflicts between every pair of
     * overlapping fields.
     * Note: This is the *only time* that a the fields "within" a set are compared
     * to each other. After this only fields "between" sets are compared.
     *
     * B) Also, if any fragment is referenced in a selection set, then a
     * comparison is made "between" the original set of fields and the
     * referenced fragment.
     *
     * C) Also, if multiple fragments are referenced, then comparisons
     * are made "between" each referenced fragment.
     *
     * D) When comparing "between" a set of fields and a referenced fragment, first
     * a comparison is made between each field in the original set of fields and
     * each field in the the referenced set of fields.
     *
     * E) Also, if any fragment is referenced in the referenced selection set,
     * then a comparison is made "between" the original set of fields and the
     * referenced fragment (recursively referring to step D).
     *
     * F) When comparing "between" two fragments, first a comparison is made between
     * each field in the first referenced set of fields and each field in the the
     * second referenced set of fields.
     *
     * G) Also, any fragments referenced by the first must be compared to the
     * second, and any fragments referenced by the second must be compared to the
     * first (recursively referring to step F).
     *
     * H) When comparing two fields, if both have selection sets, then a comparison
     * is made "between" both selection sets, first comparing the set of fields in
     * the first selection set with the set of fields in the second.
     *
     * I) Also, if any fragment is referenced in either selection set, then a
     * comparison is made "between" the other set of fields and the
     * referenced fragment.
     *
     * J) Also, if two fragments are referenced in both selection sets, then a
     * comparison is made "between" the two fragments.
     *
     */
    // Find all conflicts found "within" a selection set, including those found
    // via spreading in fragments. Called when visiting each SelectionSet in the
    // GraphQL Document.


    function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
      var conflicts = [];

      var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),
          fieldMap = _getFieldsAndFragment[0],
          fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts "within" the fields of this selection set.
      // Note: this is the *only place* `collectConflictsWithin` is called.


      collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);

      if (fragmentNames.length !== 0) {
        // (B) Then collect conflicts between these fields and those represented by
        // each spread fragment name found.
        for (var i = 0; i < fragmentNames.length; i++) {
          collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this
          // selection set to collect conflicts between fragments spread together.
          // This compares each item in the list of fragment names to every other
          // item in that same list (except for itself).

          for (var j = i + 1; j < fragmentNames.length; j++) {
            collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);
          }
        }
      }

      return conflicts;
    } // Collect all conflicts found between a set of fields and a fragment reference
    // including via spreading in any nested fragments.


    function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
      var fragment = context.getFragment(fragmentName);

      if (!fragment) {
        return;
      }

      var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),
          fieldMap2 = _getReferencedFieldsA[0],
          fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.


      if (fieldMap === fieldMap2) {
        return;
      } // (D) First collect any conflicts between the provided collection of fields
      // and the collection of fields represented by the given fragment.


      collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields
      // and any fragment names found in the given fragment.

      for (var i = 0; i < fragmentNames2.length; i++) {
        collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);
      }
    } // Collect all conflicts found between two fragments, including via spreading in
    // any nested fragments.


    function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
      // No need to compare a fragment to itself.
      if (fragmentName1 === fragmentName2) {
        return;
      } // Memoize so two fragments are not compared for conflicts more than once.


      if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {
        return;
      }

      comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
      var fragment1 = context.getFragment(fragmentName1);
      var fragment2 = context.getFragment(fragmentName2);

      if (!fragment1 || !fragment2) {
        return;
      }

      var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),
          fieldMap1 = _getReferencedFieldsA2[0],
          fragmentNames1 = _getReferencedFieldsA2[1];

      var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),
          fieldMap2 = _getReferencedFieldsA3[0],
          fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields
      // (not including any nested fragments).


      collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested
      // fragments spread in the second fragment.

      for (var j = 0; j < fragmentNames2.length; j++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);
      } // (G) Then collect conflicts between the second fragment and any nested
      // fragments spread in the first fragment.


      for (var i = 0; i < fragmentNames1.length; i++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);
      }
    } // Find all conflicts found between two selection sets, including those found
    // via spreading in fragments. Called when determining if conflicts exist
    // between the sub-fields of two overlapping fields.


    function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
      var conflicts = [];

      var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),
          fieldMap1 = _getFieldsAndFragment2[0],
          fragmentNames1 = _getFieldsAndFragment2[1];

      var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),
          fieldMap2 = _getFieldsAndFragment3[0],
          fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.


      collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and
      // those referenced by each fragment name associated with the second.

      if (fragmentNames2.length !== 0) {
        for (var j = 0; j < fragmentNames2.length; j++) {
          collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);
        }
      } // (I) Then collect conflicts between the second collection of fields and
      // those referenced by each fragment name associated with the first.


      if (fragmentNames1.length !== 0) {
        for (var i = 0; i < fragmentNames1.length; i++) {
          collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);
        }
      } // (J) Also collect conflicts between any fragment names by the first and
      // fragment names by the second. This compares each item in the first set of
      // names to each item in the second set of names.


      for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {
        for (var _j = 0; _j < fragmentNames2.length; _j++) {
          collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);
        }
      }

      return conflicts;
    } // Collect all Conflicts "within" one collection of fields.


    function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
      // A field map is a keyed collection, where each key represents a response
      // name and the value at that key is a list of all fields which provide that
      // response name. For every response name, if there are multiple fields, they
      // must be compared to find a potential conflict.
      for (var _i5 = 0, _objectEntries2 = (0, _objectEntries.default)(fieldMap); _i5 < _objectEntries2.length; _i5++) {
        var _ref5 = _objectEntries2[_i5];
        var responseName = _ref5[0];
        var fields = _ref5[1]; // This compares every field in the list to every other field in this list
        // (except to itself). If the list only has one item, nothing needs to
        // be compared.

        if (fields.length > 1) {
          for (var i = 0; i < fields.length; i++) {
            for (var j = i + 1; j < fields.length; j++) {
              var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive
              responseName, fields[i], fields[j]);

              if (conflict) {
                conflicts.push(conflict);
              }
            }
          }
        }
      }
    } // Collect all Conflicts between two collections of fields. This is similar to,
    // but different from the `collectConflictsWithin` function above. This check
    // assumes that `collectConflictsWithin` has already been called on each
    // provided collection of fields. This is true because this validator traverses
    // each individual selection set.


    function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
      // A field map is a keyed collection, where each key represents a response
      // name and the value at that key is a list of all fields which provide that
      // response name. For any response name which appears in both provided field
      // maps, each field from the first field map must be compared to every field
      // in the second field map to find potential conflicts.
      for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {
        var responseName = _Object$keys2[_i7];
        var fields2 = fieldMap2[responseName];

        if (fields2) {
          var fields1 = fieldMap1[responseName];

          for (var i = 0; i < fields1.length; i++) {
            for (var j = 0; j < fields2.length; j++) {
              var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);

              if (conflict) {
                conflicts.push(conflict);
              }
            }
          }
        }
      }
    } // Determines if there is a conflict between two particular fields, including
    // comparing their sub-fields.


    function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
      var parentType1 = field1[0],
          node1 = field1[1],
          def1 = field1[2];
      var parentType2 = field2[0],
          node2 = field2[1],
          def2 = field2[2]; // If it is known that two fields could not possibly apply at the same
      // time, due to the parent types, then it is safe to permit them to diverge
      // in aliased field or arguments used as they will not present any ambiguity
      // by differing.
      // It is known that two parent types could never overlap if they are
      // different Object types. Interface or Union types might overlap - if not
      // in the current state of the schema, then perhaps in some future version,
      // thus may not safely diverge.

      var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition.isObjectType)(parentType1) && (0, _definition.isObjectType)(parentType2);

      if (!areMutuallyExclusive) {
        var _node1$arguments, _node2$arguments; // Two aliases must refer to the same field.


        var name1 = node1.name.value;
        var name2 = node2.name.value;

        if (name1 !== name2) {
          return [[responseName, "\"".concat(name1, "\" and \"").concat(name2, "\" are different fields")], [node1], [node2]];
        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


        var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

        var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : []; // Two field calls must have the same arguments.

        if (!sameArguments(args1, args2)) {
          return [[responseName, 'they have differing arguments'], [node1], [node2]];
        }
      } // The return type for each field.


      var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
      var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;

      if (type1 && type2 && doTypesConflict(type1, type2)) {
        return [[responseName, "they return conflicting types \"".concat((0, _inspect.default)(type1), "\" and \"").concat((0, _inspect.default)(type2), "\"")], [node1], [node2]];
      } // Collect and compare sub-fields. Use the same "visited fragment names" list
      // for both collections so fields in a fragment reference are never
      // compared to themselves.


      var selectionSet1 = node1.selectionSet;
      var selectionSet2 = node2.selectionSet;

      if (selectionSet1 && selectionSet2) {
        var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);
        return subfieldConflicts(conflicts, responseName, node1, node2);
      }
    }

    function sameArguments(arguments1, arguments2) {
      if (arguments1.length !== arguments2.length) {
        return false;
      }

      return arguments1.every(function (argument1) {
        var argument2 = (0, _find.default)(arguments2, function (argument) {
          return argument.name.value === argument1.name.value;
        });

        if (!argument2) {
          return false;
        }

        return sameValue(argument1.value, argument2.value);
      });
    }

    function sameValue(value1, value2) {
      return (0, _printer.print)(value1) === (0, _printer.print)(value2);
    } // Two types conflict if both types could not apply to a value simultaneously.
    // Composite types are ignored as their individual field types will be compared
    // later recursively. However List and Non-Null types must match.


    function doTypesConflict(type1, type2) {
      if ((0, _definition.isListType)(type1)) {
        return (0, _definition.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
      }

      if ((0, _definition.isListType)(type2)) {
        return true;
      }

      if ((0, _definition.isNonNullType)(type1)) {
        return (0, _definition.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
      }

      if ((0, _definition.isNonNullType)(type2)) {
        return true;
      }

      if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {
        return type1 !== type2;
      }

      return false;
    } // Given a selection set, return the collection of fields (a mapping of response
    // name to field nodes and definitions) as well as a list of fragment names
    // referenced via fragment spreads.


    function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
      var cached = cachedFieldsAndFragmentNames.get(selectionSet);

      if (!cached) {
        var nodeAndDefs = Object.create(null);
        var fragmentNames = Object.create(null);

        _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);

        cached = [nodeAndDefs, Object.keys(fragmentNames)];
        cachedFieldsAndFragmentNames.set(selectionSet, cached);
      }

      return cached;
    } // Given a reference to a fragment, return the represented collection of fields
    // as well as a list of nested fragment names referenced via fragment spreads.


    function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
      // Short-circuit building a type from the node if possible.
      var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);

      if (cached) {
        return cached;
      }

      var fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);
      return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
    }

    function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
      for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {
        var selection = _selectionSet$selecti2[_i9];

        switch (selection.kind) {
          case _kinds.Kind.FIELD:
            {
              var fieldName = selection.name.value;
              var fieldDef = void 0;

              if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
                fieldDef = parentType.getFields()[fieldName];
              }

              var responseName = selection.alias ? selection.alias.value : fieldName;

              if (!nodeAndDefs[responseName]) {
                nodeAndDefs[responseName] = [];
              }

              nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
              break;
            }

          case _kinds.Kind.FRAGMENT_SPREAD:
            fragmentNames[selection.name.value] = true;
            break;

          case _kinds.Kind.INLINE_FRAGMENT:
            {
              var typeCondition = selection.typeCondition;
              var inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;

              _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);

              break;
            }
        }
      }
    } // Given a series of Conflicts which occurred between two sub-fields, generate
    // a single Conflict.


    function subfieldConflicts(conflicts, responseName, node1, node2) {
      if (conflicts.length > 0) {
        return [[responseName, conflicts.map(function (_ref6) {
          var reason = _ref6[0];
          return reason;
        })], conflicts.reduce(function (allFields, _ref7) {
          var fields1 = _ref7[1];
          return allFields.concat(fields1);
        }, [node1]), conflicts.reduce(function (allFields, _ref8) {
          var fields2 = _ref8[2];
          return allFields.concat(fields2);
        }, [node2])];
      }
    }
    /**
     * A way to keep track of pairs of things when the ordering of the pair does
     * not matter. We do this by maintaining a sort of double adjacency sets.
     */


    var PairSet = /*#__PURE__*/function () {
      function PairSet() {
        this._data = Object.create(null);
      }

      var _proto = PairSet.prototype;

      _proto.has = function has(a, b, areMutuallyExclusive) {
        var first = this._data[a];
        var result = first && first[b];

        if (result === undefined) {
          return false;
        } // areMutuallyExclusive being false is a superset of being true,
        // hence if we want to know if this PairSet "has" these two with no
        // exclusivity, we have to ensure it was added as such.


        if (areMutuallyExclusive === false) {
          return result === false;
        }

        return true;
      };

      _proto.add = function add(a, b, areMutuallyExclusive) {
        this._pairSetAdd(a, b, areMutuallyExclusive);

        this._pairSetAdd(b, a, areMutuallyExclusive);
      };

      _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {
        var map = this._data[a];

        if (!map) {
          map = Object.create(null);
          this._data[a] = map;
        }

        map[b] = areMutuallyExclusive;
      };

      return PairSet;
    }();
  }, {
    "../../polyfills/find.mjs": "../node_modules/graphql/polyfills/find.mjs",
    "../../polyfills/objectEntries.mjs": "../node_modules/graphql/polyfills/objectEntries.mjs",
    "../../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../../language/printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "../../utilities/typeFromAST.mjs": "../node_modules/graphql/utilities/typeFromAST.mjs"
  }],
  "../node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * Unique input field names
     *
     * A GraphQL input object value is only valid if all supplied fields are
     * uniquely named.
     */


    function UniqueInputFieldNamesRule(context) {
      var knownNameStack = [];
      var knownNames = Object.create(null);
      return {
        ObjectValue: {
          enter: function enter() {
            knownNameStack.push(knownNames);
            knownNames = Object.create(null);
          },
          leave: function leave() {
            knownNames = knownNameStack.pop();
          }
        },
        ObjectField: function ObjectField(node) {
          var fieldName = node.name.value;

          if (knownNames[fieldName]) {
            context.reportError(new _GraphQLError.GraphQLError("There can be only one input field named \"".concat(fieldName, "\"."), [knownNames[fieldName], node.name]));
          } else {
            knownNames[fieldName] = node.name;
          }
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LoneSchemaDefinitionRule = LoneSchemaDefinitionRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * Lone Schema definition
     *
     * A GraphQL document is only valid if it contains only one schema definition.
     */


    function LoneSchemaDefinitionRule(context) {
      var _ref, _ref2, _oldSchema$astNode;

      var oldSchema = context.getSchema();
      var alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();
      var schemaDefinitionsCount = 0;
      return {
        SchemaDefinition: function SchemaDefinition(node) {
          if (alreadyDefined) {
            context.reportError(new _GraphQLError.GraphQLError('Cannot define a new schema within a schema extension.', node));
            return;
          }

          if (schemaDefinitionsCount > 0) {
            context.reportError(new _GraphQLError.GraphQLError('Must provide only one schema definition.', node));
          }

          ++schemaDefinitionsCount;
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueOperationTypesRule = UniqueOperationTypesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * Unique operation types
     *
     * A GraphQL document is only valid if it has only one type per operation.
     */


    function UniqueOperationTypesRule(context) {
      var schema = context.getSchema();
      var definedOperationTypes = Object.create(null);
      var existingOperationTypes = schema ? {
        query: schema.getQueryType(),
        mutation: schema.getMutationType(),
        subscription: schema.getSubscriptionType()
      } : {};
      return {
        SchemaDefinition: checkOperationTypes,
        SchemaExtension: checkOperationTypes
      };

      function checkOperationTypes(node) {
        var _node$operationTypes; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


        var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];

        for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {
          var operationType = operationTypesNodes[_i2];
          var operation = operationType.operation;
          var alreadyDefinedOperationType = definedOperationTypes[operation];

          if (existingOperationTypes[operation]) {
            context.reportError(new _GraphQLError.GraphQLError("Type for ".concat(operation, " already defined in the schema. It cannot be redefined."), operationType));
          } else if (alreadyDefinedOperationType) {
            context.reportError(new _GraphQLError.GraphQLError("There can be only one ".concat(operation, " type in schema."), [alreadyDefinedOperationType, operationType]));
          } else {
            definedOperationTypes[operation] = operationType;
          }
        }

        return false;
      }
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueTypeNamesRule = UniqueTypeNamesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * Unique type names
     *
     * A GraphQL document is only valid if all defined types have unique names.
     */


    function UniqueTypeNamesRule(context) {
      var knownTypeNames = Object.create(null);
      var schema = context.getSchema();
      return {
        ScalarTypeDefinition: checkTypeName,
        ObjectTypeDefinition: checkTypeName,
        InterfaceTypeDefinition: checkTypeName,
        UnionTypeDefinition: checkTypeName,
        EnumTypeDefinition: checkTypeName,
        InputObjectTypeDefinition: checkTypeName
      };

      function checkTypeName(node) {
        var typeName = node.name.value;

        if (schema === null || schema === void 0 ? void 0 : schema.getType(typeName)) {
          context.reportError(new _GraphQLError.GraphQLError("Type \"".concat(typeName, "\" already exists in the schema. It cannot also be defined in this type definition."), node.name));
          return;
        }

        if (knownTypeNames[typeName]) {
          context.reportError(new _GraphQLError.GraphQLError("There can be only one type named \"".concat(typeName, "\"."), [knownTypeNames[typeName], node.name]));
        } else {
          knownTypeNames[typeName] = node.name;
        }

        return false;
      }
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _definition = require("../../type/definition.mjs");
    /**
     * Unique enum value names
     *
     * A GraphQL enum type is only valid if all its values are uniquely named.
     */


    function UniqueEnumValueNamesRule(context) {
      var schema = context.getSchema();
      var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
      var knownValueNames = Object.create(null);
      return {
        EnumTypeDefinition: checkValueUniqueness,
        EnumTypeExtension: checkValueUniqueness
      };

      function checkValueUniqueness(node) {
        var _node$values;

        var typeName = node.name.value;

        if (!knownValueNames[typeName]) {
          knownValueNames[typeName] = Object.create(null);
        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


        var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
        var valueNames = knownValueNames[typeName];

        for (var _i2 = 0; _i2 < valueNodes.length; _i2++) {
          var valueDef = valueNodes[_i2];
          var valueName = valueDef.name.value;
          var existingType = existingTypeMap[typeName];

          if ((0, _definition.isEnumType)(existingType) && existingType.getValue(valueName)) {
            context.reportError(new _GraphQLError.GraphQLError("Enum value \"".concat(typeName, ".").concat(valueName, "\" already exists in the schema. It cannot also be defined in this type extension."), valueDef.name));
          } else if (valueNames[valueName]) {
            context.reportError(new _GraphQLError.GraphQLError("Enum value \"".concat(typeName, ".").concat(valueName, "\" can only be defined once."), [valueNames[valueName], valueDef.name]));
          } else {
            valueNames[valueName] = valueDef.name;
          }
        }

        return false;
      }
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _definition = require("../../type/definition.mjs");
    /**
     * Unique field definition names
     *
     * A GraphQL complex type is only valid if all its fields are uniquely named.
     */


    function UniqueFieldDefinitionNamesRule(context) {
      var schema = context.getSchema();
      var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
      var knownFieldNames = Object.create(null);
      return {
        InputObjectTypeDefinition: checkFieldUniqueness,
        InputObjectTypeExtension: checkFieldUniqueness,
        InterfaceTypeDefinition: checkFieldUniqueness,
        InterfaceTypeExtension: checkFieldUniqueness,
        ObjectTypeDefinition: checkFieldUniqueness,
        ObjectTypeExtension: checkFieldUniqueness
      };

      function checkFieldUniqueness(node) {
        var _node$fields;

        var typeName = node.name.value;

        if (!knownFieldNames[typeName]) {
          knownFieldNames[typeName] = Object.create(null);
        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


        var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
        var fieldNames = knownFieldNames[typeName];

        for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {
          var fieldDef = fieldNodes[_i2];
          var fieldName = fieldDef.name.value;

          if (hasField(existingTypeMap[typeName], fieldName)) {
            context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(typeName, ".").concat(fieldName, "\" already exists in the schema. It cannot also be defined in this type extension."), fieldDef.name));
          } else if (fieldNames[fieldName]) {
            context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(typeName, ".").concat(fieldName, "\" can only be defined once."), [fieldNames[fieldName], fieldDef.name]));
          } else {
            fieldNames[fieldName] = fieldDef.name;
          }
        }

        return false;
      }
    }

    function hasField(type, fieldName) {
      if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type) || (0, _definition.isInputObjectType)(type)) {
        return type.getFields()[fieldName] != null;
      }

      return false;
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;

    var _GraphQLError = require("../../error/GraphQLError.mjs");
    /**
     * Unique directive names
     *
     * A GraphQL document is only valid if all defined directives have unique names.
     */


    function UniqueDirectiveNamesRule(context) {
      var knownDirectiveNames = Object.create(null);
      var schema = context.getSchema();
      return {
        DirectiveDefinition: function DirectiveDefinition(node) {
          var directiveName = node.name.value;

          if (schema === null || schema === void 0 ? void 0 : schema.getDirective(directiveName)) {
            context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(directiveName, "\" already exists in the schema. It cannot be redefined."), node.name));
            return;
          }

          if (knownDirectiveNames[directiveName]) {
            context.reportError(new _GraphQLError.GraphQLError("There can be only one directive named \"@".concat(directiveName, "\"."), [knownDirectiveNames[directiveName], node.name]));
          } else {
            knownDirectiveNames[directiveName] = node.name;
          }

          return false;
        }
      };
    }
  }, {
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;

    var _inspect = _interopRequireDefault(require("../../jsutils/inspect.mjs"));

    var _invariant = _interopRequireDefault(require("../../jsutils/invariant.mjs"));

    var _didYouMean = _interopRequireDefault(require("../../jsutils/didYouMean.mjs"));

    var _suggestionList = _interopRequireDefault(require("../../jsutils/suggestionList.mjs"));

    var _GraphQLError = require("../../error/GraphQLError.mjs");

    var _kinds = require("../../language/kinds.mjs");

    var _predicates = require("../../language/predicates.mjs");

    var _definition = require("../../type/definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var _defKindToExtKind;

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }
    /**
     * Possible type extension
     *
     * A type extension is only valid if the type is defined and has the same kind.
     */


    function PossibleTypeExtensionsRule(context) {
      var schema = context.getSchema();
      var definedTypes = Object.create(null);

      for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {
        var def = _context$getDocument$2[_i2];

        if ((0, _predicates.isTypeDefinitionNode)(def)) {
          definedTypes[def.name.value] = def;
        }
      }

      return {
        ScalarTypeExtension: checkExtension,
        ObjectTypeExtension: checkExtension,
        InterfaceTypeExtension: checkExtension,
        UnionTypeExtension: checkExtension,
        EnumTypeExtension: checkExtension,
        InputObjectTypeExtension: checkExtension
      };

      function checkExtension(node) {
        var typeName = node.name.value;
        var defNode = definedTypes[typeName];
        var existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);
        var expectedKind;

        if (defNode) {
          expectedKind = defKindToExtKind[defNode.kind];
        } else if (existingType) {
          expectedKind = typeToExtKind(existingType);
        }

        if (expectedKind) {
          if (expectedKind !== node.kind) {
            var kindStr = extensionKindToTypeName(node.kind);
            context.reportError(new _GraphQLError.GraphQLError("Cannot extend non-".concat(kindStr, " type \"").concat(typeName, "\"."), defNode ? [defNode, node] : node));
          }
        } else {
          var allTypeNames = Object.keys(definedTypes);

          if (schema) {
            allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));
          }

          var suggestedTypes = (0, _suggestionList.default)(typeName, allTypeNames);
          context.reportError(new _GraphQLError.GraphQLError("Cannot extend type \"".concat(typeName, "\" because it is not defined.") + (0, _didYouMean.default)(suggestedTypes), node.name));
        }
      }
    }

    var defKindToExtKind = (_defKindToExtKind = {}, _defineProperty(_defKindToExtKind, _kinds.Kind.SCALAR_TYPE_DEFINITION, _kinds.Kind.SCALAR_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.OBJECT_TYPE_DEFINITION, _kinds.Kind.OBJECT_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.INTERFACE_TYPE_DEFINITION, _kinds.Kind.INTERFACE_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.UNION_TYPE_DEFINITION, _kinds.Kind.UNION_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.ENUM_TYPE_DEFINITION, _kinds.Kind.ENUM_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION, _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);

    function typeToExtKind(type) {
      if ((0, _definition.isScalarType)(type)) {
        return _kinds.Kind.SCALAR_TYPE_EXTENSION;
      }

      if ((0, _definition.isObjectType)(type)) {
        return _kinds.Kind.OBJECT_TYPE_EXTENSION;
      }

      if ((0, _definition.isInterfaceType)(type)) {
        return _kinds.Kind.INTERFACE_TYPE_EXTENSION;
      }

      if ((0, _definition.isUnionType)(type)) {
        return _kinds.Kind.UNION_TYPE_EXTENSION;
      }

      if ((0, _definition.isEnumType)(type)) {
        return _kinds.Kind.ENUM_TYPE_EXTENSION;
      } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


      if ((0, _definition.isInputObjectType)(type)) {
        return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
      } // istanbul ignore next (Not reachable. All possible types have been considered)


      false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
    }

    function extensionKindToTypeName(kind) {
      switch (kind) {
        case _kinds.Kind.SCALAR_TYPE_EXTENSION:
          return 'scalar';

        case _kinds.Kind.OBJECT_TYPE_EXTENSION:
          return 'object';

        case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
          return 'interface';

        case _kinds.Kind.UNION_TYPE_EXTENSION:
          return 'union';

        case _kinds.Kind.ENUM_TYPE_EXTENSION:
          return 'enum';

        case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          return 'input object';
      } // istanbul ignore next (Not reachable. All possible types have been considered)


      false || (0, _invariant.default)(0, 'Unexpected kind: ' + (0, _inspect.default)(kind));
    }
  }, {
    "../../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../../jsutils/didYouMean.mjs": "../node_modules/graphql/jsutils/didYouMean.mjs",
    "../../jsutils/suggestionList.mjs": "../node_modules/graphql/jsutils/suggestionList.mjs",
    "../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../../language/predicates.mjs": "../node_modules/graphql/language/predicates.mjs",
    "../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/validation/specifiedRules.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.specifiedSDLRules = exports.specifiedRules = void 0;

    var _ExecutableDefinitionsRule = require("./rules/ExecutableDefinitionsRule.mjs");

    var _UniqueOperationNamesRule = require("./rules/UniqueOperationNamesRule.mjs");

    var _LoneAnonymousOperationRule = require("./rules/LoneAnonymousOperationRule.mjs");

    var _SingleFieldSubscriptionsRule = require("./rules/SingleFieldSubscriptionsRule.mjs");

    var _KnownTypeNamesRule = require("./rules/KnownTypeNamesRule.mjs");

    var _FragmentsOnCompositeTypesRule = require("./rules/FragmentsOnCompositeTypesRule.mjs");

    var _VariablesAreInputTypesRule = require("./rules/VariablesAreInputTypesRule.mjs");

    var _ScalarLeafsRule = require("./rules/ScalarLeafsRule.mjs");

    var _FieldsOnCorrectTypeRule = require("./rules/FieldsOnCorrectTypeRule.mjs");

    var _UniqueFragmentNamesRule = require("./rules/UniqueFragmentNamesRule.mjs");

    var _KnownFragmentNamesRule = require("./rules/KnownFragmentNamesRule.mjs");

    var _NoUnusedFragmentsRule = require("./rules/NoUnusedFragmentsRule.mjs");

    var _PossibleFragmentSpreadsRule = require("./rules/PossibleFragmentSpreadsRule.mjs");

    var _NoFragmentCyclesRule = require("./rules/NoFragmentCyclesRule.mjs");

    var _UniqueVariableNamesRule = require("./rules/UniqueVariableNamesRule.mjs");

    var _NoUndefinedVariablesRule = require("./rules/NoUndefinedVariablesRule.mjs");

    var _NoUnusedVariablesRule = require("./rules/NoUnusedVariablesRule.mjs");

    var _KnownDirectivesRule = require("./rules/KnownDirectivesRule.mjs");

    var _UniqueDirectivesPerLocationRule = require("./rules/UniqueDirectivesPerLocationRule.mjs");

    var _KnownArgumentNamesRule = require("./rules/KnownArgumentNamesRule.mjs");

    var _UniqueArgumentNamesRule = require("./rules/UniqueArgumentNamesRule.mjs");

    var _ValuesOfCorrectTypeRule = require("./rules/ValuesOfCorrectTypeRule.mjs");

    var _ProvidedRequiredArgumentsRule = require("./rules/ProvidedRequiredArgumentsRule.mjs");

    var _VariablesInAllowedPositionRule = require("./rules/VariablesInAllowedPositionRule.mjs");

    var _OverlappingFieldsCanBeMergedRule = require("./rules/OverlappingFieldsCanBeMergedRule.mjs");

    var _UniqueInputFieldNamesRule = require("./rules/UniqueInputFieldNamesRule.mjs");

    var _LoneSchemaDefinitionRule = require("./rules/LoneSchemaDefinitionRule.mjs");

    var _UniqueOperationTypesRule = require("./rules/UniqueOperationTypesRule.mjs");

    var _UniqueTypeNamesRule = require("./rules/UniqueTypeNamesRule.mjs");

    var _UniqueEnumValueNamesRule = require("./rules/UniqueEnumValueNamesRule.mjs");

    var _UniqueFieldDefinitionNamesRule = require("./rules/UniqueFieldDefinitionNamesRule.mjs");

    var _UniqueDirectiveNamesRule = require("./rules/UniqueDirectiveNamesRule.mjs");

    var _PossibleTypeExtensionsRule = require("./rules/PossibleTypeExtensionsRule.mjs"); // Spec Section: "Executable Definitions"
    // Spec Section: "Operation Name Uniqueness"
    // Spec Section: "Lone Anonymous Operation"
    // Spec Section: "Subscriptions with Single Root Field"
    // Spec Section: "Fragment Spread Type Existence"
    // Spec Section: "Fragments on Composite Types"
    // Spec Section: "Variables are Input Types"
    // Spec Section: "Leaf Field Selections"
    // Spec Section: "Field Selections on Objects, Interfaces, and Unions Types"
    // Spec Section: "Fragment Name Uniqueness"
    // Spec Section: "Fragment spread target defined"
    // Spec Section: "Fragments must be used"
    // Spec Section: "Fragment spread is possible"
    // Spec Section: "Fragments must not form cycles"
    // Spec Section: "Variable Uniqueness"
    // Spec Section: "All Variable Used Defined"
    // Spec Section: "All Variables Used"
    // Spec Section: "Directives Are Defined"
    // Spec Section: "Directives Are Unique Per Location"
    // Spec Section: "Argument Names"
    // Spec Section: "Argument Uniqueness"
    // Spec Section: "Value Type Correctness"
    // Spec Section: "Argument Optionality"
    // Spec Section: "All Variable Usages Are Allowed"
    // Spec Section: "Field Selection Merging"
    // Spec Section: "Input Object Field Uniqueness"
    // SDL-specific validation rules

    /**
     * This set includes all validation rules defined by the GraphQL spec.
     *
     * The order of the rules in this list has been adjusted to lead to the
     * most clear output when encountering multiple validation errors.
     */


    var specifiedRules = Object.freeze([_ExecutableDefinitionsRule.ExecutableDefinitionsRule, _UniqueOperationNamesRule.UniqueOperationNamesRule, _LoneAnonymousOperationRule.LoneAnonymousOperationRule, _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule, _KnownTypeNamesRule.KnownTypeNamesRule, _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule, _VariablesAreInputTypesRule.VariablesAreInputTypesRule, _ScalarLeafsRule.ScalarLeafsRule, _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule, _UniqueFragmentNamesRule.UniqueFragmentNamesRule, _KnownFragmentNamesRule.KnownFragmentNamesRule, _NoUnusedFragmentsRule.NoUnusedFragmentsRule, _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule, _NoFragmentCyclesRule.NoFragmentCyclesRule, _UniqueVariableNamesRule.UniqueVariableNamesRule, _NoUndefinedVariablesRule.NoUndefinedVariablesRule, _NoUnusedVariablesRule.NoUnusedVariablesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _KnownArgumentNamesRule.KnownArgumentNamesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule, _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule, _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule]);
    /**
     * @internal
     */

    exports.specifiedRules = specifiedRules;
    var specifiedSDLRules = Object.freeze([_LoneSchemaDefinitionRule.LoneSchemaDefinitionRule, _UniqueOperationTypesRule.UniqueOperationTypesRule, _UniqueTypeNamesRule.UniqueTypeNamesRule, _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule, _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule, _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule, _KnownTypeNamesRule.KnownTypeNamesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule, _KnownArgumentNamesRule.KnownArgumentNamesOnDirectivesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsOnDirectivesRule]);
    exports.specifiedSDLRules = specifiedSDLRules;
  }, {
    "./rules/ExecutableDefinitionsRule.mjs": "../node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs",
    "./rules/UniqueOperationNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs",
    "./rules/LoneAnonymousOperationRule.mjs": "../node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs",
    "./rules/SingleFieldSubscriptionsRule.mjs": "../node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs",
    "./rules/KnownTypeNamesRule.mjs": "../node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs",
    "./rules/FragmentsOnCompositeTypesRule.mjs": "../node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs",
    "./rules/VariablesAreInputTypesRule.mjs": "../node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs",
    "./rules/ScalarLeafsRule.mjs": "../node_modules/graphql/validation/rules/ScalarLeafsRule.mjs",
    "./rules/FieldsOnCorrectTypeRule.mjs": "../node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs",
    "./rules/UniqueFragmentNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs",
    "./rules/KnownFragmentNamesRule.mjs": "../node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs",
    "./rules/NoUnusedFragmentsRule.mjs": "../node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs",
    "./rules/PossibleFragmentSpreadsRule.mjs": "../node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs",
    "./rules/NoFragmentCyclesRule.mjs": "../node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs",
    "./rules/UniqueVariableNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs",
    "./rules/NoUndefinedVariablesRule.mjs": "../node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs",
    "./rules/NoUnusedVariablesRule.mjs": "../node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs",
    "./rules/KnownDirectivesRule.mjs": "../node_modules/graphql/validation/rules/KnownDirectivesRule.mjs",
    "./rules/UniqueDirectivesPerLocationRule.mjs": "../node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs",
    "./rules/KnownArgumentNamesRule.mjs": "../node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs",
    "./rules/UniqueArgumentNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs",
    "./rules/ValuesOfCorrectTypeRule.mjs": "../node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs",
    "./rules/ProvidedRequiredArgumentsRule.mjs": "../node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs",
    "./rules/VariablesInAllowedPositionRule.mjs": "../node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs",
    "./rules/OverlappingFieldsCanBeMergedRule.mjs": "../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs",
    "./rules/UniqueInputFieldNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs",
    "./rules/LoneSchemaDefinitionRule.mjs": "../node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs",
    "./rules/UniqueOperationTypesRule.mjs": "../node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs",
    "./rules/UniqueTypeNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs",
    "./rules/UniqueEnumValueNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs",
    "./rules/UniqueFieldDefinitionNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs",
    "./rules/UniqueDirectiveNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs",
    "./rules/PossibleTypeExtensionsRule.mjs": "../node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs"
  }],
  "../node_modules/graphql/validation/ValidationContext.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ValidationContext = exports.SDLValidationContext = exports.ASTValidationContext = void 0;

    var _kinds = require("../language/kinds.mjs");

    var _visitor = require("../language/visitor.mjs");

    var _TypeInfo = require("../utilities/TypeInfo.mjs");

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    /**
     * An instance of this class is passed as the "this" context to all validators,
     * allowing access to commonly useful contextual information from within a
     * validation rule.
     */


    var ASTValidationContext = /*#__PURE__*/function () {
      function ASTValidationContext(ast, onError) {
        this._ast = ast;
        this._fragments = undefined;
        this._fragmentSpreads = new Map();
        this._recursivelyReferencedFragments = new Map();
        this._onError = onError;
      }

      var _proto = ASTValidationContext.prototype;

      _proto.reportError = function reportError(error) {
        this._onError(error);
      };

      _proto.getDocument = function getDocument() {
        return this._ast;
      };

      _proto.getFragment = function getFragment(name) {
        var fragments = this._fragments;

        if (!fragments) {
          this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {
            if (statement.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
              frags[statement.name.value] = statement;
            }

            return frags;
          }, Object.create(null));
        }

        return fragments[name];
      };

      _proto.getFragmentSpreads = function getFragmentSpreads(node) {
        var spreads = this._fragmentSpreads.get(node);

        if (!spreads) {
          spreads = [];
          var setsToVisit = [node];

          while (setsToVisit.length !== 0) {
            var set = setsToVisit.pop();

            for (var _i2 = 0, _set$selections2 = set.selections; _i2 < _set$selections2.length; _i2++) {
              var selection = _set$selections2[_i2];

              if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {
                spreads.push(selection);
              } else if (selection.selectionSet) {
                setsToVisit.push(selection.selectionSet);
              }
            }
          }

          this._fragmentSpreads.set(node, spreads);
        }

        return spreads;
      };

      _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {
        var fragments = this._recursivelyReferencedFragments.get(operation);

        if (!fragments) {
          fragments = [];
          var collectedNames = Object.create(null);
          var nodesToVisit = [operation.selectionSet];

          while (nodesToVisit.length !== 0) {
            var node = nodesToVisit.pop();

            for (var _i4 = 0, _this$getFragmentSpre2 = this.getFragmentSpreads(node); _i4 < _this$getFragmentSpre2.length; _i4++) {
              var spread = _this$getFragmentSpre2[_i4];
              var fragName = spread.name.value;

              if (collectedNames[fragName] !== true) {
                collectedNames[fragName] = true;
                var fragment = this.getFragment(fragName);

                if (fragment) {
                  fragments.push(fragment);
                  nodesToVisit.push(fragment.selectionSet);
                }
              }
            }
          }

          this._recursivelyReferencedFragments.set(operation, fragments);
        }

        return fragments;
      };

      return ASTValidationContext;
    }();

    exports.ASTValidationContext = ASTValidationContext;

    var SDLValidationContext = /*#__PURE__*/function (_ASTValidationContext) {
      _inheritsLoose(SDLValidationContext, _ASTValidationContext);

      function SDLValidationContext(ast, schema, onError) {
        var _this;

        _this = _ASTValidationContext.call(this, ast, onError) || this;
        _this._schema = schema;
        return _this;
      }

      var _proto2 = SDLValidationContext.prototype;

      _proto2.getSchema = function getSchema() {
        return this._schema;
      };

      return SDLValidationContext;
    }(ASTValidationContext);

    exports.SDLValidationContext = SDLValidationContext;

    var ValidationContext = /*#__PURE__*/function (_ASTValidationContext2) {
      _inheritsLoose(ValidationContext, _ASTValidationContext2);

      function ValidationContext(schema, ast, typeInfo, onError) {
        var _this2;

        _this2 = _ASTValidationContext2.call(this, ast, onError) || this;
        _this2._schema = schema;
        _this2._typeInfo = typeInfo;
        _this2._variableUsages = new Map();
        _this2._recursiveVariableUsages = new Map();
        return _this2;
      }

      var _proto3 = ValidationContext.prototype;

      _proto3.getSchema = function getSchema() {
        return this._schema;
      };

      _proto3.getVariableUsages = function getVariableUsages(node) {
        var usages = this._variableUsages.get(node);

        if (!usages) {
          var newUsages = [];
          var typeInfo = new _TypeInfo.TypeInfo(this._schema);
          (0, _visitor.visit)(node, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, {
            VariableDefinition: function VariableDefinition() {
              return false;
            },
            Variable: function Variable(variable) {
              newUsages.push({
                node: variable,
                type: typeInfo.getInputType(),
                defaultValue: typeInfo.getDefaultValue()
              });
            }
          }));
          usages = newUsages;

          this._variableUsages.set(node, usages);
        }

        return usages;
      };

      _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {
        var usages = this._recursiveVariableUsages.get(operation);

        if (!usages) {
          usages = this.getVariableUsages(operation);

          for (var _i6 = 0, _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(operation); _i6 < _this$getRecursivelyR2.length; _i6++) {
            var frag = _this$getRecursivelyR2[_i6];
            usages = usages.concat(this.getVariableUsages(frag));
          }

          this._recursiveVariableUsages.set(operation, usages);
        }

        return usages;
      };

      _proto3.getType = function getType() {
        return this._typeInfo.getType();
      };

      _proto3.getParentType = function getParentType() {
        return this._typeInfo.getParentType();
      };

      _proto3.getInputType = function getInputType() {
        return this._typeInfo.getInputType();
      };

      _proto3.getParentInputType = function getParentInputType() {
        return this._typeInfo.getParentInputType();
      };

      _proto3.getFieldDef = function getFieldDef() {
        return this._typeInfo.getFieldDef();
      };

      _proto3.getDirective = function getDirective() {
        return this._typeInfo.getDirective();
      };

      _proto3.getArgument = function getArgument() {
        return this._typeInfo.getArgument();
      };

      _proto3.getEnumValue = function getEnumValue() {
        return this._typeInfo.getEnumValue();
      };

      return ValidationContext;
    }(ASTValidationContext);

    exports.ValidationContext = ValidationContext;
  }, {
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../language/visitor.mjs": "../node_modules/graphql/language/visitor.mjs",
    "../utilities/TypeInfo.mjs": "../node_modules/graphql/utilities/TypeInfo.mjs"
  }],
  "../node_modules/graphql/validation/validate.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.validate = validate;
    exports.validateSDL = validateSDL;
    exports.assertValidSDL = assertValidSDL;
    exports.assertValidSDLExtension = assertValidSDLExtension;

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.mjs"));

    var _GraphQLError = require("../error/GraphQLError.mjs");

    var _visitor = require("../language/visitor.mjs");

    var _validate = require("../type/validate.mjs");

    var _TypeInfo = require("../utilities/TypeInfo.mjs");

    var _specifiedRules = require("./specifiedRules.mjs");

    var _ValidationContext = require("./ValidationContext.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Implements the "Validation" section of the spec.
     *
     * Validation runs synchronously, returning an array of encountered errors, or
     * an empty array if no errors were encountered and the document is valid.
     *
     * A list of specific validation rules may be provided. If not provided, the
     * default list of rules defined by the GraphQL specification will be used.
     *
     * Each validation rules is a function which returns a visitor
     * (see the language/visitor API). Visitor methods are expected to return
     * GraphQLErrors, or Arrays of GraphQLErrors when invalid.
     *
     * Optionally a custom TypeInfo instance may be provided. If not provided, one
     * will be created from the provided schema.
     */


    function validate(schema, documentAST) {
      var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedRules;
      var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _TypeInfo.TypeInfo(schema);
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
        maxErrors: undefined
      };
      documentAST || (0, _devAssert.default)(0, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.

      (0, _validate.assertValidSchema)(schema);
      var abortObj = Object.freeze({});
      var errors = [];
      var context = new _ValidationContext.ValidationContext(schema, documentAST, typeInfo, function (error) {
        if (options.maxErrors != null && errors.length >= options.maxErrors) {
          errors.push(new _GraphQLError.GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));
          throw abortObj;
        }

        errors.push(error);
      }); // This uses a specialized visitor which runs multiple visitors in parallel,
      // while maintaining the visitor skip and break API.

      var visitor = (0, _visitor.visitInParallel)(rules.map(function (rule) {
        return rule(context);
      })); // Visit the whole document with each instance of all provided rules.

      try {
        (0, _visitor.visit)(documentAST, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor));
      } catch (e) {
        if (e !== abortObj) {
          throw e;
        }
      }

      return errors;
    }
    /**
     * @internal
     */


    function validateSDL(documentAST, schemaToExtend) {
      var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedSDLRules;
      var errors = [];
      var context = new _ValidationContext.SDLValidationContext(documentAST, schemaToExtend, function (error) {
        errors.push(error);
      });
      var visitors = rules.map(function (rule) {
        return rule(context);
      });
      (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));
      return errors;
    }
    /**
     * Utility function which asserts a SDL document is valid by throwing an error
     * if it is invalid.
     *
     * @internal
     */


    function assertValidSDL(documentAST) {
      var errors = validateSDL(documentAST);

      if (errors.length !== 0) {
        throw new Error(errors.map(function (error) {
          return error.message;
        }).join('\n\n'));
      }
    }
    /**
     * Utility function which asserts a SDL document is valid by throwing an error
     * if it is invalid.
     *
     * @internal
     */


    function assertValidSDLExtension(documentAST, schema) {
      var errors = validateSDL(documentAST, schema);

      if (errors.length !== 0) {
        throw new Error(errors.map(function (error) {
          return error.message;
        }).join('\n\n'));
      }
    }
  }, {
    "../jsutils/devAssert.mjs": "../node_modules/graphql/jsutils/devAssert.mjs",
    "../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../language/visitor.mjs": "../node_modules/graphql/language/visitor.mjs",
    "../type/validate.mjs": "../node_modules/graphql/type/validate.mjs",
    "../utilities/TypeInfo.mjs": "../node_modules/graphql/utilities/TypeInfo.mjs",
    "./specifiedRules.mjs": "../node_modules/graphql/validation/specifiedRules.mjs",
    "./ValidationContext.mjs": "../node_modules/graphql/validation/ValidationContext.mjs"
  }],
  "../node_modules/graphql/jsutils/memoize3.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = memoize3;
    /**
     * Memoizes the provided three-argument function.
     */

    function memoize3(fn) {
      var cache0;
      return function memoized(a1, a2, a3) {
        if (!cache0) {
          cache0 = new WeakMap();
        }

        var cache1 = cache0.get(a1);
        var cache2;

        if (cache1) {
          cache2 = cache1.get(a2);

          if (cache2) {
            var cachedValue = cache2.get(a3);

            if (cachedValue !== undefined) {
              return cachedValue;
            }
          }
        } else {
          cache1 = new WeakMap();
          cache0.set(a1, cache1);
        }

        if (!cache2) {
          cache2 = new WeakMap();
          cache1.set(a2, cache2);
        }

        var newValue = fn(a1, a2, a3);
        cache2.set(a3, newValue);
        return newValue;
      };
    }
  }, {}],
  "../node_modules/graphql/jsutils/promiseReduce.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = promiseReduce;

    var _isPromise = _interopRequireDefault(require("./isPromise.mjs"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Similar to Array.prototype.reduce(), however the reducing callback may return
     * a Promise, in which case reduction will continue after each promise resolves.
     *
     * If the callback does not return a Promise, then this function will also not
     * return a Promise.
     */


    function promiseReduce(values, callback, initialValue) {
      return values.reduce(function (previous, value) {
        return (0, _isPromise.default)(previous) ? previous.then(function (resolved) {
          return callback(resolved, value);
        }) : callback(previous, value);
      }, initialValue);
    }
  }, {
    "./isPromise.mjs": "../node_modules/graphql/jsutils/isPromise.mjs"
  }],
  "../node_modules/graphql/jsutils/promiseForObject.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = promiseForObject;
    /**
     * This function transforms a JS object `ObjMap<Promise<T>>` into
     * a `Promise<ObjMap<T>>`
     *
     * This is akin to bluebird's `Promise.props`, but implemented only using
     * `Promise.all` so it will work with any implementation of ES6 promises.
     */

    function promiseForObject(object) {
      var keys = Object.keys(object);
      var valuesAndPromises = keys.map(function (name) {
        return object[name];
      });
      return Promise.all(valuesAndPromises).then(function (values) {
        return values.reduce(function (resolvedObject, value, i) {
          resolvedObject[keys[i]] = value;
          return resolvedObject;
        }, Object.create(null));
      });
    }
  }, {}],
  "../node_modules/graphql/jsutils/Path.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.addPath = addPath;
    exports.pathToArray = pathToArray;
    /**
     * Given a Path and a key, return a new Path containing the new key.
     */

    function addPath(prev, key, typename) {
      return {
        prev: prev,
        key: key,
        typename: typename
      };
    }
    /**
     * Given a Path, return an Array of the path keys.
     */


    function pathToArray(path) {
      var flattened = [];
      var curr = path;

      while (curr) {
        flattened.push(curr.key);
        curr = curr.prev;
      }

      return flattened.reverse();
    }
  }, {}],
  "../node_modules/graphql/utilities/getOperationRootType.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getOperationRootType = getOperationRootType;

    var _GraphQLError = require("../error/GraphQLError.mjs");
    /**
     * Extracts the root type of the operation from the schema.
     */


    function getOperationRootType(schema, operation) {
      if (operation.operation === 'query') {
        var queryType = schema.getQueryType();

        if (!queryType) {
          throw new _GraphQLError.GraphQLError('Schema does not define the required query root type.', operation);
        }

        return queryType;
      }

      if (operation.operation === 'mutation') {
        var mutationType = schema.getMutationType();

        if (!mutationType) {
          throw new _GraphQLError.GraphQLError('Schema is not configured for mutations.', operation);
        }

        return mutationType;
      }

      if (operation.operation === 'subscription') {
        var subscriptionType = schema.getSubscriptionType();

        if (!subscriptionType) {
          throw new _GraphQLError.GraphQLError('Schema is not configured for subscriptions.', operation);
        }

        return subscriptionType;
      }

      throw new _GraphQLError.GraphQLError('Can only have query, mutation and subscription operations.', operation);
    }
  }, {
    "../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs"
  }],
  "../node_modules/graphql/jsutils/printPathArray.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = printPathArray;
    /**
     * Build a string describing the path.
     */

    function printPathArray(path) {
      return path.map(function (key) {
        return typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key;
      }).join('');
    }
  }, {}],
  "../node_modules/graphql/utilities/valueFromAST.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.valueFromAST = valueFromAST;

    var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.mjs"));

    var _keyMap = _interopRequireDefault(require("../jsutils/keyMap.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _kinds = require("../language/kinds.mjs");

    var _definition = require("../type/definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Produces a JavaScript value given a GraphQL Value AST.
     *
     * A GraphQL type must be provided, which will be used to interpret different
     * GraphQL Value literals.
     *
     * Returns `undefined` when the value could not be validly coerced according to
     * the provided type.
     *
     * | GraphQL Value        | JSON Value    |
     * | -------------------- | ------------- |
     * | Input Object         | Object        |
     * | List                 | Array         |
     * | Boolean              | Boolean       |
     * | String               | String        |
     * | Int / Float          | Number        |
     * | Enum Value           | Mixed         |
     * | NullValue            | null          |
     *
     */


    function valueFromAST(valueNode, type, variables) {
      if (!valueNode) {
        // When there is no node, then there is also no value.
        // Importantly, this is different from returning the value null.
        return;
      }

      if (valueNode.kind === _kinds.Kind.VARIABLE) {
        var variableName = valueNode.name.value;

        if (variables == null || variables[variableName] === undefined) {
          // No valid return value.
          return;
        }

        var variableValue = variables[variableName];

        if (variableValue === null && (0, _definition.isNonNullType)(type)) {
          return; // Invalid: intentionally return no value.
        } // Note: This does no further checking that this variable is correct.
        // This assumes that this query has been validated and the variable
        // usage here is of the correct type.


        return variableValue;
      }

      if ((0, _definition.isNonNullType)(type)) {
        if (valueNode.kind === _kinds.Kind.NULL) {
          return; // Invalid: intentionally return no value.
        }

        return valueFromAST(valueNode, type.ofType, variables);
      }

      if (valueNode.kind === _kinds.Kind.NULL) {
        // This is explicitly returning the value null.
        return null;
      }

      if ((0, _definition.isListType)(type)) {
        var itemType = type.ofType;

        if (valueNode.kind === _kinds.Kind.LIST) {
          var coercedValues = [];

          for (var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++) {
            var itemNode = _valueNode$values2[_i2];

            if (isMissingVariable(itemNode, variables)) {
              // If an array contains a missing variable, it is either coerced to
              // null or if the item type is non-null, it considered invalid.
              if ((0, _definition.isNonNullType)(itemType)) {
                return; // Invalid: intentionally return no value.
              }

              coercedValues.push(null);
            } else {
              var itemValue = valueFromAST(itemNode, itemType, variables);

              if (itemValue === undefined) {
                return; // Invalid: intentionally return no value.
              }

              coercedValues.push(itemValue);
            }
          }

          return coercedValues;
        }

        var coercedValue = valueFromAST(valueNode, itemType, variables);

        if (coercedValue === undefined) {
          return; // Invalid: intentionally return no value.
        }

        return [coercedValue];
      }

      if ((0, _definition.isInputObjectType)(type)) {
        if (valueNode.kind !== _kinds.Kind.OBJECT) {
          return; // Invalid: intentionally return no value.
        }

        var coercedObj = Object.create(null);
        var fieldNodes = (0, _keyMap.default)(valueNode.fields, function (field) {
          return field.name.value;
        });

        for (var _i4 = 0, _objectValues2 = (0, _objectValues.default)(type.getFields()); _i4 < _objectValues2.length; _i4++) {
          var field = _objectValues2[_i4];
          var fieldNode = fieldNodes[field.name];

          if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
            if (field.defaultValue !== undefined) {
              coercedObj[field.name] = field.defaultValue;
            } else if ((0, _definition.isNonNullType)(field.type)) {
              return; // Invalid: intentionally return no value.
            }

            continue;
          }

          var fieldValue = valueFromAST(fieldNode.value, field.type, variables);

          if (fieldValue === undefined) {
            return; // Invalid: intentionally return no value.
          }

          coercedObj[field.name] = fieldValue;
        }

        return coercedObj;
      } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


      if ((0, _definition.isLeafType)(type)) {
        // Scalars and Enums fulfill parsing a literal value via parseLiteral().
        // Invalid values represent a failure to parse correctly, in which case
        // no value is returned.
        var result;

        try {
          result = type.parseLiteral(valueNode, variables);
        } catch (_error) {
          return; // Invalid: intentionally return no value.
        }

        if (result === undefined) {
          return; // Invalid: intentionally return no value.
        }

        return result;
      } // istanbul ignore next (Not reachable. All possible input types have been considered)


      false || (0, _invariant.default)(0, 'Unexpected input type: ' + (0, _inspect.default)(type));
    } // Returns true if the provided valueNode is a variable which is not defined
    // in the set of variables.


    function isMissingVariable(valueNode, variables) {
      return valueNode.kind === _kinds.Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);
    }
  }, {
    "../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../jsutils/keyMap.mjs": "../node_modules/graphql/jsutils/keyMap.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/utilities/coerceInputValue.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.coerceInputValue = coerceInputValue;

    var _arrayFrom = _interopRequireDefault(require("../polyfills/arrayFrom.mjs"));

    var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _didYouMean = _interopRequireDefault(require("../jsutils/didYouMean.mjs"));

    var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.mjs"));

    var _isCollection = _interopRequireDefault(require("../jsutils/isCollection.mjs"));

    var _suggestionList = _interopRequireDefault(require("../jsutils/suggestionList.mjs"));

    var _printPathArray = _interopRequireDefault(require("../jsutils/printPathArray.mjs"));

    var _Path = require("../jsutils/Path.mjs");

    var _GraphQLError = require("../error/GraphQLError.mjs");

    var _definition = require("../type/definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Coerces a JavaScript value given a GraphQL Input Type.
     */


    function coerceInputValue(inputValue, type) {
      var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;
      return coerceInputValueImpl(inputValue, type, onError);
    }

    function defaultOnError(path, invalidValue, error) {
      var errorPrefix = 'Invalid value ' + (0, _inspect.default)(invalidValue);

      if (path.length > 0) {
        errorPrefix += " at \"value".concat((0, _printPathArray.default)(path), "\"");
      }

      error.message = errorPrefix + ': ' + error.message;
      throw error;
    }

    function coerceInputValueImpl(inputValue, type, onError, path) {
      if ((0, _definition.isNonNullType)(type)) {
        if (inputValue != null) {
          return coerceInputValueImpl(inputValue, type.ofType, onError, path);
        }

        onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected non-nullable type \"".concat((0, _inspect.default)(type), "\" not to be null.")));
        return;
      }

      if (inputValue == null) {
        // Explicitly return the value null.
        return null;
      }

      if ((0, _definition.isListType)(type)) {
        var itemType = type.ofType;

        if ((0, _isCollection.default)(inputValue)) {
          return (0, _arrayFrom.default)(inputValue, function (itemValue, index) {
            var itemPath = (0, _Path.addPath)(path, index, undefined);
            return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
          });
        } // Lists accept a non-list value as a list of one.


        return [coerceInputValueImpl(inputValue, itemType, onError, path)];
      }

      if ((0, _definition.isInputObjectType)(type)) {
        if (!(0, _isObjectLike.default)(inputValue)) {
          onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\" to be an object.")));
          return;
        }

        var coercedValue = {};
        var fieldDefs = type.getFields();

        for (var _i2 = 0, _objectValues2 = (0, _objectValues.default)(fieldDefs); _i2 < _objectValues2.length; _i2++) {
          var field = _objectValues2[_i2];
          var fieldValue = inputValue[field.name];

          if (fieldValue === undefined) {
            if (field.defaultValue !== undefined) {
              coercedValue[field.name] = field.defaultValue;
            } else if ((0, _definition.isNonNullType)(field.type)) {
              var typeStr = (0, _inspect.default)(field.type);
              onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Field \"".concat(field.name, "\" of required type \"").concat(typeStr, "\" was not provided.")));
            }

            continue;
          }

          coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, (0, _Path.addPath)(path, field.name, type.name));
        } // Ensure every provided field is defined.


        for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {
          var fieldName = _Object$keys2[_i4];

          if (!fieldDefs[fieldName]) {
            var suggestions = (0, _suggestionList.default)(fieldName, Object.keys(type.getFields()));
            onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Field \"".concat(fieldName, "\" is not defined by type \"").concat(type.name, "\".") + (0, _didYouMean.default)(suggestions)));
          }
        }

        return coercedValue;
      } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


      if ((0, _definition.isLeafType)(type)) {
        var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),
        // which can throw to indicate failure. If it throws, maintain a reference
        // to the original error.

        try {
          parseResult = type.parseValue(inputValue);
        } catch (error) {
          if (error instanceof _GraphQLError.GraphQLError) {
            onError((0, _Path.pathToArray)(path), inputValue, error);
          } else {
            onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\". ") + error.message, undefined, undefined, undefined, undefined, error));
          }

          return;
        }

        if (parseResult === undefined) {
          onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\".")));
        }

        return parseResult;
      } // istanbul ignore next (Not reachable. All possible input types have been considered)


      false || (0, _invariant.default)(0, 'Unexpected input type: ' + (0, _inspect.default)(type));
    }
  }, {
    "../polyfills/arrayFrom.mjs": "../node_modules/graphql/polyfills/arrayFrom.mjs",
    "../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../jsutils/didYouMean.mjs": "../node_modules/graphql/jsutils/didYouMean.mjs",
    "../jsutils/isObjectLike.mjs": "../node_modules/graphql/jsutils/isObjectLike.mjs",
    "../jsutils/isCollection.mjs": "../node_modules/graphql/jsutils/isCollection.mjs",
    "../jsutils/suggestionList.mjs": "../node_modules/graphql/jsutils/suggestionList.mjs",
    "../jsutils/printPathArray.mjs": "../node_modules/graphql/jsutils/printPathArray.mjs",
    "../jsutils/Path.mjs": "../node_modules/graphql/jsutils/Path.mjs",
    "../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/execution/values.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getVariableValues = getVariableValues;
    exports.getArgumentValues = getArgumentValues;
    exports.getDirectiveValues = getDirectiveValues;

    var _find = _interopRequireDefault(require("../polyfills/find.mjs"));

    var _keyMap = _interopRequireDefault(require("../jsutils/keyMap.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _printPathArray = _interopRequireDefault(require("../jsutils/printPathArray.mjs"));

    var _GraphQLError = require("../error/GraphQLError.mjs");

    var _kinds = require("../language/kinds.mjs");

    var _printer = require("../language/printer.mjs");

    var _definition = require("../type/definition.mjs");

    var _typeFromAST = require("../utilities/typeFromAST.mjs");

    var _valueFromAST = require("../utilities/valueFromAST.mjs");

    var _coerceInputValue = require("../utilities/coerceInputValue.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Prepares an object map of variableValues of the correct type based on the
     * provided variable definitions and arbitrary input. If the input cannot be
     * parsed to match the variable definitions, a GraphQLError will be thrown.
     *
     * Note: The returned value is a plain Object with a prototype, since it is
     * exposed to user code. Care should be taken to not pull values from the
     * Object prototype.
     *
     * @internal
     */


    function getVariableValues(schema, varDefNodes, inputs, options) {
      var errors = [];
      var maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;

      try {
        var coerced = coerceVariableValues(schema, varDefNodes, inputs, function (error) {
          if (maxErrors != null && errors.length >= maxErrors) {
            throw new _GraphQLError.GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');
          }

          errors.push(error);
        });

        if (errors.length === 0) {
          return {
            coerced: coerced
          };
        }
      } catch (error) {
        errors.push(error);
      }

      return {
        errors: errors
      };
    }

    function coerceVariableValues(schema, varDefNodes, inputs, onError) {
      var coercedValues = {};

      var _loop = function _loop(_i2) {
        var varDefNode = varDefNodes[_i2];
        var varName = varDefNode.variable.name.value;
        var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);

        if (!(0, _definition.isInputType)(varType)) {
          // Must use input types for variables. This should be caught during
          // validation, however is checked again here for safety.
          var varTypeStr = (0, _printer.print)(varDefNode.type);
          onError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" expected value of type \"").concat(varTypeStr, "\" which cannot be used as an input type."), varDefNode.type));
          return "continue";
        }

        if (!hasOwnProperty(inputs, varName)) {
          if (varDefNode.defaultValue) {
            coercedValues[varName] = (0, _valueFromAST.valueFromAST)(varDefNode.defaultValue, varType);
          } else if ((0, _definition.isNonNullType)(varType)) {
            var _varTypeStr = (0, _inspect.default)(varType);

            onError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" of required type \"").concat(_varTypeStr, "\" was not provided."), varDefNode));
          }

          return "continue";
        }

        var value = inputs[varName];

        if (value === null && (0, _definition.isNonNullType)(varType)) {
          var _varTypeStr2 = (0, _inspect.default)(varType);

          onError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" of non-null type \"").concat(_varTypeStr2, "\" must not be null."), varDefNode));
          return "continue";
        }

        coercedValues[varName] = (0, _coerceInputValue.coerceInputValue)(value, varType, function (path, invalidValue, error) {
          var prefix = "Variable \"$".concat(varName, "\" got invalid value ") + (0, _inspect.default)(invalidValue);

          if (path.length > 0) {
            prefix += " at \"".concat(varName).concat((0, _printPathArray.default)(path), "\"");
          }

          onError(new _GraphQLError.GraphQLError(prefix + '; ' + error.message, varDefNode, undefined, undefined, undefined, error.originalError));
        });
      };

      for (var _i2 = 0; _i2 < varDefNodes.length; _i2++) {
        var _ret = _loop(_i2);

        if (_ret === "continue") continue;
      }

      return coercedValues;
    }
    /**
     * Prepares an object map of argument values given a list of argument
     * definitions and list of argument AST nodes.
     *
     * Note: The returned value is a plain Object with a prototype, since it is
     * exposed to user code. Care should be taken to not pull values from the
     * Object prototype.
     *
     * @internal
     */


    function getArgumentValues(def, node, variableValues) {
      var _node$arguments;

      var coercedValues = {}; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

      var argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
      var argNodeMap = (0, _keyMap.default)(argumentNodes, function (arg) {
        return arg.name.value;
      });

      for (var _i4 = 0, _def$args2 = def.args; _i4 < _def$args2.length; _i4++) {
        var argDef = _def$args2[_i4];
        var name = argDef.name;
        var argType = argDef.type;
        var argumentNode = argNodeMap[name];

        if (!argumentNode) {
          if (argDef.defaultValue !== undefined) {
            coercedValues[name] = argDef.defaultValue;
          } else if ((0, _definition.isNonNullType)(argType)) {
            throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" of required type \"").concat((0, _inspect.default)(argType), "\" ") + 'was not provided.', node);
          }

          continue;
        }

        var valueNode = argumentNode.value;
        var isNull = valueNode.kind === _kinds.Kind.NULL;

        if (valueNode.kind === _kinds.Kind.VARIABLE) {
          var variableName = valueNode.name.value;

          if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
            if (argDef.defaultValue !== undefined) {
              coercedValues[name] = argDef.defaultValue;
            } else if ((0, _definition.isNonNullType)(argType)) {
              throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" of required type \"").concat((0, _inspect.default)(argType), "\" ") + "was provided the variable \"$".concat(variableName, "\" which was not provided a runtime value."), valueNode);
            }

            continue;
          }

          isNull = variableValues[variableName] == null;
        }

        if (isNull && (0, _definition.isNonNullType)(argType)) {
          throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" of non-null type \"").concat((0, _inspect.default)(argType), "\" ") + 'must not be null.', valueNode);
        }

        var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);

        if (coercedValue === undefined) {
          // Note: ValuesOfCorrectTypeRule validation should catch this before
          // execution. This is a runtime check to ensure execution does not
          // continue with an invalid argument value.
          throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" has invalid value ").concat((0, _printer.print)(valueNode), "."), valueNode);
        }

        coercedValues[name] = coercedValue;
      }

      return coercedValues;
    }
    /**
     * Prepares an object map of argument values given a directive definition
     * and a AST node which may contain directives. Optionally also accepts a map
     * of variable values.
     *
     * If the directive does not exist on the node, returns undefined.
     *
     * Note: The returned value is a plain Object with a prototype, since it is
     * exposed to user code. Care should be taken to not pull values from the
     * Object prototype.
     */


    function getDirectiveValues(directiveDef, node, variableValues) {
      var directiveNode = node.directives && (0, _find.default)(node.directives, function (directive) {
        return directive.name.value === directiveDef.name;
      });

      if (directiveNode) {
        return getArgumentValues(directiveDef, directiveNode, variableValues);
      }
    }

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
  }, {
    "../polyfills/find.mjs": "../node_modules/graphql/polyfills/find.mjs",
    "../jsutils/keyMap.mjs": "../node_modules/graphql/jsutils/keyMap.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/printPathArray.mjs": "../node_modules/graphql/jsutils/printPathArray.mjs",
    "../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../language/printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "../utilities/typeFromAST.mjs": "../node_modules/graphql/utilities/typeFromAST.mjs",
    "../utilities/valueFromAST.mjs": "../node_modules/graphql/utilities/valueFromAST.mjs",
    "../utilities/coerceInputValue.mjs": "../node_modules/graphql/utilities/coerceInputValue.mjs"
  }],
  "../node_modules/graphql/execution/execute.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.execute = execute;
    exports.executeSync = executeSync;
    exports.assertValidExecutionArguments = assertValidExecutionArguments;
    exports.buildExecutionContext = buildExecutionContext;
    exports.collectFields = collectFields;
    exports.buildResolveInfo = buildResolveInfo;
    exports.getFieldDef = getFieldDef;
    exports.defaultFieldResolver = exports.defaultTypeResolver = void 0;

    var _arrayFrom = _interopRequireDefault(require("../polyfills/arrayFrom.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _memoize = _interopRequireDefault(require("../jsutils/memoize3.mjs"));

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.mjs"));

    var _isPromise = _interopRequireDefault(require("../jsutils/isPromise.mjs"));

    var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.mjs"));

    var _isCollection = _interopRequireDefault(require("../jsutils/isCollection.mjs"));

    var _promiseReduce = _interopRequireDefault(require("../jsutils/promiseReduce.mjs"));

    var _promiseForObject = _interopRequireDefault(require("../jsutils/promiseForObject.mjs"));

    var _Path = require("../jsutils/Path.mjs");

    var _GraphQLError = require("../error/GraphQLError.mjs");

    var _locatedError = require("../error/locatedError.mjs");

    var _kinds = require("../language/kinds.mjs");

    var _validate = require("../type/validate.mjs");

    var _introspection = require("../type/introspection.mjs");

    var _directives = require("../type/directives.mjs");

    var _definition = require("../type/definition.mjs");

    var _typeFromAST = require("../utilities/typeFromAST.mjs");

    var _getOperationRootType = require("../utilities/getOperationRootType.mjs");

    var _values = require("./values.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Terminology
     *
     * "Definitions" are the generic name for top-level statements in the document.
     * Examples of this include:
     * 1) Operations (such as a query)
     * 2) Fragments
     *
     * "Operations" are a generic name for requests in the document.
     * Examples of this include:
     * 1) query,
     * 2) mutation
     *
     * "Selections" are the definitions that can appear legally and at
     * single level of the query. These include:
     * 1) field references e.g "a"
     * 2) fragment "spreads" e.g. "...c"
     * 3) inline fragment "spreads" e.g. "...on Type { a }"
     */

    /**
     * Data that must be available at all points during query execution.
     *
     * Namely, schema of the type system that is currently executing,
     * and the fragments defined in the query document
     */


    function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
      /* eslint-enable no-redeclare */
      // Extract arguments from object args if provided.
      return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({
        schema: argsOrSchema,
        document: document,
        rootValue: rootValue,
        contextValue: contextValue,
        variableValues: variableValues,
        operationName: operationName,
        fieldResolver: fieldResolver,
        typeResolver: typeResolver
      });
    }
    /**
     * Also implements the "Evaluating requests" section of the GraphQL specification.
     * However, it guarantees to complete synchronously (or throw an error) assuming
     * that all field resolvers are also synchronous.
     */


    function executeSync(args) {
      var result = executeImpl(args); // Assert that the execution was synchronous.

      if ((0, _isPromise.default)(result)) {
        throw new Error('GraphQL execution failed to complete synchronously.');
      }

      return result;
    }

    function executeImpl(args) {
      var schema = args.schema,
          document = args.document,
          rootValue = args.rootValue,
          contextValue = args.contextValue,
          variableValues = args.variableValues,
          operationName = args.operationName,
          fieldResolver = args.fieldResolver,
          typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.

      assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,
      // a "Response" with only errors is returned.

      var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.

      if (Array.isArray(exeContext)) {
        return {
          errors: exeContext
        };
      } // Return a Promise that will eventually resolve to the data described by
      // The "Response" section of the GraphQL specification.
      //
      // If errors are encountered while executing a GraphQL field, only that
      // field and its descendants will be omitted, and sibling fields will still
      // be executed. An execution which encounters errors will still result in a
      // resolved Promise.


      var data = executeOperation(exeContext, exeContext.operation, rootValue);
      return buildResponse(exeContext, data);
    }
    /**
     * Given a completed execution context and data, build the { errors, data }
     * response defined by the "Response" section of the GraphQL specification.
     */


    function buildResponse(exeContext, data) {
      if ((0, _isPromise.default)(data)) {
        return data.then(function (resolved) {
          return buildResponse(exeContext, resolved);
        });
      }

      return exeContext.errors.length === 0 ? {
        data: data
      } : {
        errors: exeContext.errors,
        data: data
      };
    }
    /**
     * Essential assertions before executing to provide developer feedback for
     * improper use of the GraphQL library.
     *
     * @internal
     */


    function assertValidExecutionArguments(schema, document, rawVariableValues) {
      document || (0, _devAssert.default)(0, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.

      (0, _validate.assertValidSchema)(schema); // Variables, if provided, must be an object.

      rawVariableValues == null || (0, _isObjectLike.default)(rawVariableValues) || (0, _devAssert.default)(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');
    }
    /**
     * Constructs a ExecutionContext object from the arguments passed to
     * execute, which we will pass throughout the other execution methods.
     *
     * Throws a GraphQLError if a valid execution context cannot be created.
     *
     * @internal
     */


    function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {
      var _definition$name, _operation$variableDe;

      var operation;
      var fragments = Object.create(null);

      for (var _i2 = 0, _document$definitions2 = document.definitions; _i2 < _document$definitions2.length; _i2++) {
        var definition = _document$definitions2[_i2];

        switch (definition.kind) {
          case _kinds.Kind.OPERATION_DEFINITION:
            if (operationName == null) {
              if (operation !== undefined) {
                return [new _GraphQLError.GraphQLError('Must provide operation name if query contains multiple operations.')];
              }

              operation = definition;
            } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
              operation = definition;
            }

            break;

          case _kinds.Kind.FRAGMENT_DEFINITION:
            fragments[definition.name.value] = definition;
            break;
        }
      }

      if (!operation) {
        if (operationName != null) {
          return [new _GraphQLError.GraphQLError("Unknown operation named \"".concat(operationName, "\"."))];
        }

        return [new _GraphQLError.GraphQLError('Must provide an operation.')];
      } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


      var variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];
      var coercedVariableValues = (0, _values.getVariableValues)(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {
        maxErrors: 50
      });

      if (coercedVariableValues.errors) {
        return coercedVariableValues.errors;
      }

      return {
        schema: schema,
        fragments: fragments,
        rootValue: rootValue,
        contextValue: contextValue,
        operation: operation,
        variableValues: coercedVariableValues.coerced,
        fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,
        typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,
        errors: []
      };
    }
    /**
     * Implements the "Evaluating operations" section of the spec.
     */


    function executeOperation(exeContext, operation, rootValue) {
      var type = (0, _getOperationRootType.getOperationRootType)(exeContext.schema, operation);
      var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));
      var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,
      // at which point we still log the error and null the parent field, which
      // in this case is the entire response.

      try {
        var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);

        if ((0, _isPromise.default)(result)) {
          return result.then(undefined, function (error) {
            exeContext.errors.push(error);
            return Promise.resolve(null);
          });
        }

        return result;
      } catch (error) {
        exeContext.errors.push(error);
        return null;
      }
    }
    /**
     * Implements the "Evaluating selection sets" section of the spec
     * for "write" mode.
     */


    function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {
      return (0, _promiseReduce.default)(Object.keys(fields), function (results, responseName) {
        var fieldNodes = fields[responseName];
        var fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);
        var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);

        if (result === undefined) {
          return results;
        }

        if ((0, _isPromise.default)(result)) {
          return result.then(function (resolvedResult) {
            results[responseName] = resolvedResult;
            return results;
          });
        }

        results[responseName] = result;
        return results;
      }, Object.create(null));
    }
    /**
     * Implements the "Evaluating selection sets" section of the spec
     * for "read" mode.
     */


    function executeFields(exeContext, parentType, sourceValue, path, fields) {
      var results = Object.create(null);
      var containsPromise = false;

      for (var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++) {
        var responseName = _Object$keys2[_i4];
        var fieldNodes = fields[responseName];
        var fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);
        var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);

        if (result !== undefined) {
          results[responseName] = result;

          if ((0, _isPromise.default)(result)) {
            containsPromise = true;
          }
        }
      } // If there are no promises, we can just return the object


      if (!containsPromise) {
        return results;
      } // Otherwise, results is a map from field name to the result of resolving that
      // field, which is possibly a promise. Return a promise that will return this
      // same map, but with any promises replaced with the values they resolved to.


      return (0, _promiseForObject.default)(results);
    }
    /**
     * Given a selectionSet, adds all of the fields in that selection to
     * the passed in map of fields, and returns it at the end.
     *
     * CollectFields requires the "runtime type" of an object. For a field which
     * returns an Interface or Union type, the "runtime type" will be the actual
     * Object type returned by that field.
     *
     * @internal
     */


    function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {
      for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {
        var selection = _selectionSet$selecti2[_i6];

        switch (selection.kind) {
          case _kinds.Kind.FIELD:
            {
              if (!shouldIncludeNode(exeContext, selection)) {
                continue;
              }

              var name = getFieldEntryKey(selection);

              if (!fields[name]) {
                fields[name] = [];
              }

              fields[name].push(selection);
              break;
            }

          case _kinds.Kind.INLINE_FRAGMENT:
            {
              if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {
                continue;
              }

              collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
              break;
            }

          case _kinds.Kind.FRAGMENT_SPREAD:
            {
              var fragName = selection.name.value;

              if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {
                continue;
              }

              visitedFragmentNames[fragName] = true;
              var fragment = exeContext.fragments[fragName];

              if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {
                continue;
              }

              collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
              break;
            }
        }
      }

      return fields;
    }
    /**
     * Determines if a field should be included based on the @include and @skip
     * directives, where @skip has higher precedence than @include.
     */


    function shouldIncludeNode(exeContext, node) {
      var skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, exeContext.variableValues);

      if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
        return false;
      }

      var include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, exeContext.variableValues);

      if ((include === null || include === void 0 ? void 0 : include.if) === false) {
        return false;
      }

      return true;
    }
    /**
     * Determines if a fragment is applicable to the given type.
     */


    function doesFragmentConditionMatch(exeContext, fragment, type) {
      var typeConditionNode = fragment.typeCondition;

      if (!typeConditionNode) {
        return true;
      }

      var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);

      if (conditionalType === type) {
        return true;
      }

      if ((0, _definition.isAbstractType)(conditionalType)) {
        return exeContext.schema.isSubType(conditionalType, type);
      }

      return false;
    }
    /**
     * Implements the logic to compute the key of a given field's entry
     */


    function getFieldEntryKey(node) {
      return node.alias ? node.alias.value : node.name.value;
    }
    /**
     * Resolves the field on the given source object. In particular, this
     * figures out the value that the field returns by calling its resolve function,
     * then calls completeValue to complete promises, serialize scalars, or execute
     * the sub-selection-set for objects.
     */


    function resolveField(exeContext, parentType, source, fieldNodes, path) {
      var _fieldDef$resolve;

      var fieldNode = fieldNodes[0];
      var fieldName = fieldNode.name.value;
      var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);

      if (!fieldDef) {
        return;
      }

      var returnType = fieldDef.type;
      var resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;
      var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal or abrupt (error).

      try {
        // Build a JS object of arguments from the field.arguments AST, using the
        // variables scope to fulfill any variable references.
        // TODO: find a way to memoize, in case this field is within a List type.
        var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that
        // is provided to every resolve function within an execution. It is commonly
        // used to represent an authenticated user, or request-specific caches.

        var _contextValue = exeContext.contextValue;
        var result = resolveFn(source, args, _contextValue, info);
        var completed;

        if ((0, _isPromise.default)(result)) {
          completed = result.then(function (resolved) {
            return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);
          });
        } else {
          completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);
        }

        if ((0, _isPromise.default)(completed)) {
          // Note: we don't rely on a `catch` method, but we do expect "thenable"
          // to take a second callback for the error case.
          return completed.then(undefined, function (rawError) {
            var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));
            return handleFieldError(error, returnType, exeContext);
          });
        }

        return completed;
      } catch (rawError) {
        var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));
        return handleFieldError(error, returnType, exeContext);
      }
    }
    /**
     * @internal
     */


    function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {
      // The resolve function's optional fourth argument is a collection of
      // information about the current execution state.
      return {
        fieldName: fieldDef.name,
        fieldNodes: fieldNodes,
        returnType: fieldDef.type,
        parentType: parentType,
        path: path,
        schema: exeContext.schema,
        fragments: exeContext.fragments,
        rootValue: exeContext.rootValue,
        operation: exeContext.operation,
        variableValues: exeContext.variableValues
      };
    }

    function handleFieldError(error, returnType, exeContext) {
      // If the field type is non-nullable, then it is resolved without any
      // protection from errors, however it still properly locates the error.
      if ((0, _definition.isNonNullType)(returnType)) {
        throw error;
      } // Otherwise, error protection is applied, logging the error and resolving
      // a null value for this field if one is encountered.


      exeContext.errors.push(error);
      return null;
    }
    /**
     * Implements the instructions for completeValue as defined in the
     * "Field entries" section of the spec.
     *
     * If the field type is Non-Null, then this recursively completes the value
     * for the inner type. It throws a field error if that completion returns null,
     * as per the "Nullability" section of the spec.
     *
     * If the field type is a List, then this recursively completes the value
     * for the inner type on each item in the list.
     *
     * If the field type is a Scalar or Enum, ensures the completed value is a legal
     * value of the type by calling the `serialize` method of GraphQL type
     * definition.
     *
     * If the field is an abstract type, determine the runtime type of the value
     * and then complete based on that type
     *
     * Otherwise, the field type expects a sub-selection set, and will complete the
     * value by evaluating all sub-selections.
     */


    function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
      // If result is an Error, throw a located error.
      if (result instanceof Error) {
        throw result;
      } // If field type is NonNull, complete for inner type, and throw field error
      // if result is null.


      if ((0, _definition.isNonNullType)(returnType)) {
        var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);

        if (completed === null) {
          throw new Error("Cannot return null for non-nullable field ".concat(info.parentType.name, ".").concat(info.fieldName, "."));
        }

        return completed;
      } // If result value is null or undefined then return null.


      if (result == null) {
        return null;
      } // If field type is List, complete each item in the list with the inner type


      if ((0, _definition.isListType)(returnType)) {
        return completeListValue(exeContext, returnType, fieldNodes, info, path, result);
      } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,
      // returning null if serialization is not possible.


      if ((0, _definition.isLeafType)(returnType)) {
        return completeLeafValue(returnType, result);
      } // If field type is an abstract type, Interface or Union, determine the
      // runtime Object type and complete for that type.


      if ((0, _definition.isAbstractType)(returnType)) {
        return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);
      } // If field type is Object, execute and complete all sub-selections.
      // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


      if ((0, _definition.isObjectType)(returnType)) {
        return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);
      } // istanbul ignore next (Not reachable. All possible output types have been considered)


      false || (0, _invariant.default)(0, 'Cannot complete value of unexpected output type: ' + (0, _inspect.default)(returnType));
    }
    /**
     * Complete a list value by completing each item in the list with the
     * inner type
     */


    function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {
      if (!(0, _isCollection.default)(result)) {
        throw new _GraphQLError.GraphQLError("Expected Iterable, but did not find one for field \"".concat(info.parentType.name, ".").concat(info.fieldName, "\"."));
      } // This is specified as a simple map, however we're optimizing the path
      // where the list contains no Promises by avoiding creating another Promise.


      var itemType = returnType.ofType;
      var containsPromise = false;
      var completedResults = (0, _arrayFrom.default)(result, function (item, index) {
        // No need to modify the info object containing the path,
        // since from here on it is not ever accessed by resolver functions.
        var itemPath = (0, _Path.addPath)(path, index, undefined);

        try {
          var completedItem;

          if ((0, _isPromise.default)(item)) {
            completedItem = item.then(function (resolved) {
              return completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved);
            });
          } else {
            completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);
          }

          if ((0, _isPromise.default)(completedItem)) {
            containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect "thenable"
            // to take a second callback for the error case.

            return completedItem.then(undefined, function (rawError) {
              var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));
              return handleFieldError(error, itemType, exeContext);
            });
          }

          return completedItem;
        } catch (rawError) {
          var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));
          return handleFieldError(error, itemType, exeContext);
        }
      });
      return containsPromise ? Promise.all(completedResults) : completedResults;
    }
    /**
     * Complete a Scalar or Enum by serializing to a valid value, returning
     * null if serialization is not possible.
     */


    function completeLeafValue(returnType, result) {
      var serializedResult = returnType.serialize(result);

      if (serializedResult === undefined) {
        throw new Error("Expected a value of type \"".concat((0, _inspect.default)(returnType), "\" but ") + "received: ".concat((0, _inspect.default)(result)));
      }

      return serializedResult;
    }
    /**
     * Complete a value of an abstract type by determining the runtime object type
     * of that value, then complete the value for that type.
     */


    function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {
      var _returnType$resolveTy;

      var resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;
      var contextValue = exeContext.contextValue;
      var runtimeType = resolveTypeFn(result, contextValue, info, returnType);

      if ((0, _isPromise.default)(runtimeType)) {
        return runtimeType.then(function (resolvedRuntimeType) {
          return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
        });
      }

      return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
    }

    function ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {
      if (runtimeTypeOrName == null) {
        throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" must resolve to an Object type at runtime for field \"").concat(info.parentType.name, ".").concat(info.fieldName, "\". Either the \"").concat(returnType.name, "\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function."), fieldNodes);
      } // FIXME: temporary workaround until support for passing object types would be removed in v16.0.0


      var runtimeTypeName = (0, _definition.isNamedType)(runtimeTypeOrName) ? runtimeTypeOrName.name : runtimeTypeOrName;

      if (typeof runtimeTypeName !== 'string') {
        throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" must resolve to an Object type at runtime for field \"").concat(info.parentType.name, ".").concat(info.fieldName, "\" with ") + "value ".concat((0, _inspect.default)(result), ", received \"").concat((0, _inspect.default)(runtimeTypeOrName), "\"."));
      }

      var runtimeType = exeContext.schema.getType(runtimeTypeName);

      if (runtimeType == null) {
        throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" was resolve to a type \"").concat(runtimeTypeName, "\" that does not exist inside schema."), fieldNodes);
      }

      if (!(0, _definition.isObjectType)(runtimeType)) {
        throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" was resolve to a non-object type \"").concat(runtimeTypeName, "\"."), fieldNodes);
      }

      if (!exeContext.schema.isSubType(returnType, runtimeType)) {
        throw new _GraphQLError.GraphQLError("Runtime Object type \"".concat(runtimeType.name, "\" is not a possible type for \"").concat(returnType.name, "\"."), fieldNodes);
      }

      return runtimeType;
    }
    /**
     * Complete an Object value by executing all sub-selections.
     */


    function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {
      // If there is an isTypeOf predicate function, call it with the
      // current result. If isTypeOf returns false, then raise an error rather
      // than continuing execution.
      if (returnType.isTypeOf) {
        var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);

        if ((0, _isPromise.default)(isTypeOf)) {
          return isTypeOf.then(function (resolvedIsTypeOf) {
            if (!resolvedIsTypeOf) {
              throw invalidReturnTypeError(returnType, result, fieldNodes);
            }

            return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);
          });
        }

        if (!isTypeOf) {
          throw invalidReturnTypeError(returnType, result, fieldNodes);
        }
      }

      return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);
    }

    function invalidReturnTypeError(returnType, result, fieldNodes) {
      return new _GraphQLError.GraphQLError("Expected value of type \"".concat(returnType.name, "\" but got: ").concat((0, _inspect.default)(result), "."), fieldNodes);
    }

    function collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {
      // Collect sub-fields to execute to complete this value.
      var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);
      return executeFields(exeContext, returnType, result, path, subFieldNodes);
    }
    /**
     * A memoized collection of relevant subfields with regard to the return
     * type. Memoizing ensures the subfields are not repeatedly calculated, which
     * saves overhead when resolving lists of values.
     */


    var collectSubfields = (0, _memoize.default)(_collectSubfields);

    function _collectSubfields(exeContext, returnType, fieldNodes) {
      var subFieldNodes = Object.create(null);
      var visitedFragmentNames = Object.create(null);

      for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {
        var node = fieldNodes[_i8];

        if (node.selectionSet) {
          subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);
        }
      }

      return subFieldNodes;
    }
    /**
     * If a resolveType function is not given, then a default resolve behavior is
     * used which attempts two strategies:
     *
     * First, See if the provided value has a `__typename` field defined, if so, use
     * that value as name of the resolved type.
     *
     * Otherwise, test each possible type for the abstract type by calling
     * isTypeOf for the object being coerced, returning the first type that matches.
     */


    var defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {
      // First, look for `__typename`.
      if ((0, _isObjectLike.default)(value) && typeof value.__typename === 'string') {
        return value.__typename;
      } // Otherwise, test each possible type.


      var possibleTypes = info.schema.getPossibleTypes(abstractType);
      var promisedIsTypeOfResults = [];

      for (var i = 0; i < possibleTypes.length; i++) {
        var type = possibleTypes[i];

        if (type.isTypeOf) {
          var isTypeOfResult = type.isTypeOf(value, contextValue, info);

          if ((0, _isPromise.default)(isTypeOfResult)) {
            promisedIsTypeOfResults[i] = isTypeOfResult;
          } else if (isTypeOfResult) {
            return type.name;
          }
        }
      }

      if (promisedIsTypeOfResults.length) {
        return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {
          for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {
            if (isTypeOfResults[_i9]) {
              return possibleTypes[_i9].name;
            }
          }
        });
      }
    };
    /**
     * If a resolve function is not given, then a default resolve behavior is used
     * which takes the property of the source object of the same name as the field
     * and returns it as the result, or if it's a function, returns the result
     * of calling that function while passing along args and context value.
     */


    exports.defaultTypeResolver = defaultTypeResolver;

    var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {
      // ensure source is a value for which property access is acceptable.
      if ((0, _isObjectLike.default)(source) || typeof source === 'function') {
        var property = source[info.fieldName];

        if (typeof property === 'function') {
          return source[info.fieldName](args, contextValue, info);
        }

        return property;
      }
    };
    /**
     * This method looks up the field on the given type definition.
     * It has special casing for the three introspection fields,
     * __schema, __type and __typename. __typename is special because
     * it can always be queried as a field, even in situations where no
     * other fields are allowed, like on a Union. __schema and __type
     * could get automatically added to the query type, but that would
     * require mutating type definitions, which would cause issues.
     *
     * @internal
     */


    exports.defaultFieldResolver = defaultFieldResolver;

    function getFieldDef(schema, parentType, fieldName) {
      if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
        return _introspection.SchemaMetaFieldDef;
      } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
        return _introspection.TypeMetaFieldDef;
      } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {
        return _introspection.TypeNameMetaFieldDef;
      }

      return parentType.getFields()[fieldName];
    }
  }, {
    "../polyfills/arrayFrom.mjs": "../node_modules/graphql/polyfills/arrayFrom.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/memoize3.mjs": "../node_modules/graphql/jsutils/memoize3.mjs",
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../jsutils/devAssert.mjs": "../node_modules/graphql/jsutils/devAssert.mjs",
    "../jsutils/isPromise.mjs": "../node_modules/graphql/jsutils/isPromise.mjs",
    "../jsutils/isObjectLike.mjs": "../node_modules/graphql/jsutils/isObjectLike.mjs",
    "../jsutils/isCollection.mjs": "../node_modules/graphql/jsutils/isCollection.mjs",
    "../jsutils/promiseReduce.mjs": "../node_modules/graphql/jsutils/promiseReduce.mjs",
    "../jsutils/promiseForObject.mjs": "../node_modules/graphql/jsutils/promiseForObject.mjs",
    "../jsutils/Path.mjs": "../node_modules/graphql/jsutils/Path.mjs",
    "../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../error/locatedError.mjs": "../node_modules/graphql/error/locatedError.mjs",
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../type/validate.mjs": "../node_modules/graphql/type/validate.mjs",
    "../type/introspection.mjs": "../node_modules/graphql/type/introspection.mjs",
    "../type/directives.mjs": "../node_modules/graphql/type/directives.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "../utilities/typeFromAST.mjs": "../node_modules/graphql/utilities/typeFromAST.mjs",
    "../utilities/getOperationRootType.mjs": "../node_modules/graphql/utilities/getOperationRootType.mjs",
    "./values.mjs": "../node_modules/graphql/execution/values.mjs"
  }],
  "../node_modules/graphql/graphql.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.graphql = graphql;
    exports.graphqlSync = graphqlSync;

    var _isPromise = _interopRequireDefault(require("./jsutils/isPromise.mjs"));

    var _parser = require("./language/parser.mjs");

    var _validate = require("./validation/validate.mjs");

    var _validate2 = require("./type/validate.mjs");

    var _execute = require("./execution/execute.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * This is the primary entry point function for fulfilling GraphQL operations
     * by parsing, validating, and executing a GraphQL document along side a
     * GraphQL schema.
     *
     * More sophisticated GraphQL servers, such as those which persist queries,
     * may wish to separate the validation and execution phases to a static time
     * tooling step, and a server runtime step.
     *
     * Accepts either an object with named arguments, or individual arguments:
     *
     * schema:
     *    The GraphQL type system to use when validating and executing a query.
     * source:
     *    A GraphQL language formatted string representing the requested operation.
     * rootValue:
     *    The value provided as the first argument to resolver functions on the top
     *    level type (e.g. the query object type).
     * contextValue:
     *    The context value is provided as an argument to resolver functions after
     *    field arguments. It is used to pass shared information useful at any point
     *    during executing this query, for example the currently logged in user and
     *    connections to databases or other services.
     * variableValues:
     *    A mapping of variable name to runtime value to use for all variables
     *    defined in the requestString.
     * operationName:
     *    The name of the operation to use if requestString contains multiple
     *    possible operations. Can be omitted if requestString contains only
     *    one operation.
     * fieldResolver:
     *    A resolver function to use when one is not provided by the schema.
     *    If not provided, the default field resolver is used (which looks for a
     *    value or method on the source value with the field's name).
     * typeResolver:
     *    A type resolver function to use when none is provided by the schema.
     *    If not provided, the default type resolver is used (which looks for a
     *    `__typename` field or alternatively calls the `isTypeOf` method).
     */


    function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
      var _arguments = arguments;
      /* eslint-enable no-redeclare */
      // Always return a Promise for a consistent API.

      return new Promise(function (resolve) {
        return resolve( // Extract arguments from object args if provided.
        _arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({
          schema: argsOrSchema,
          source: source,
          rootValue: rootValue,
          contextValue: contextValue,
          variableValues: variableValues,
          operationName: operationName,
          fieldResolver: fieldResolver,
          typeResolver: typeResolver
        }));
      });
    }
    /**
     * The graphqlSync function also fulfills GraphQL operations by parsing,
     * validating, and executing a GraphQL document along side a GraphQL schema.
     * However, it guarantees to complete synchronously (or throw an error) assuming
     * that all field resolvers are also synchronous.
     */


    function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
      /* eslint-enable no-redeclare */
      // Extract arguments from object args if provided.
      var result = arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({
        schema: argsOrSchema,
        source: source,
        rootValue: rootValue,
        contextValue: contextValue,
        variableValues: variableValues,
        operationName: operationName,
        fieldResolver: fieldResolver,
        typeResolver: typeResolver
      }); // Assert that the execution was synchronous.

      if ((0, _isPromise.default)(result)) {
        throw new Error('GraphQL execution failed to complete synchronously.');
      }

      return result;
    }

    function graphqlImpl(args) {
      var schema = args.schema,
          source = args.source,
          rootValue = args.rootValue,
          contextValue = args.contextValue,
          variableValues = args.variableValues,
          operationName = args.operationName,
          fieldResolver = args.fieldResolver,
          typeResolver = args.typeResolver; // Validate Schema

      var schemaValidationErrors = (0, _validate2.validateSchema)(schema);

      if (schemaValidationErrors.length > 0) {
        return {
          errors: schemaValidationErrors
        };
      } // Parse


      var document;

      try {
        document = (0, _parser.parse)(source);
      } catch (syntaxError) {
        return {
          errors: [syntaxError]
        };
      } // Validate


      var validationErrors = (0, _validate.validate)(schema, document);

      if (validationErrors.length > 0) {
        return {
          errors: validationErrors
        };
      } // Execute


      return (0, _execute.execute)({
        schema: schema,
        document: document,
        rootValue: rootValue,
        contextValue: contextValue,
        variableValues: variableValues,
        operationName: operationName,
        fieldResolver: fieldResolver,
        typeResolver: typeResolver
      });
    }
  }, {
    "./jsutils/isPromise.mjs": "../node_modules/graphql/jsutils/isPromise.mjs",
    "./language/parser.mjs": "../node_modules/graphql/language/parser.mjs",
    "./validation/validate.mjs": "../node_modules/graphql/validation/validate.mjs",
    "./type/validate.mjs": "../node_modules/graphql/type/validate.mjs",
    "./execution/execute.mjs": "../node_modules/graphql/execution/execute.mjs"
  }],
  "../node_modules/graphql/type/index.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "isSchema", {
      enumerable: true,
      get: function get() {
        return _schema.isSchema;
      }
    });
    Object.defineProperty(exports, "assertSchema", {
      enumerable: true,
      get: function get() {
        return _schema.assertSchema;
      }
    });
    Object.defineProperty(exports, "GraphQLSchema", {
      enumerable: true,
      get: function get() {
        return _schema.GraphQLSchema;
      }
    });
    Object.defineProperty(exports, "isType", {
      enumerable: true,
      get: function get() {
        return _definition.isType;
      }
    });
    Object.defineProperty(exports, "isScalarType", {
      enumerable: true,
      get: function get() {
        return _definition.isScalarType;
      }
    });
    Object.defineProperty(exports, "isObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.isObjectType;
      }
    });
    Object.defineProperty(exports, "isInterfaceType", {
      enumerable: true,
      get: function get() {
        return _definition.isInterfaceType;
      }
    });
    Object.defineProperty(exports, "isUnionType", {
      enumerable: true,
      get: function get() {
        return _definition.isUnionType;
      }
    });
    Object.defineProperty(exports, "isEnumType", {
      enumerable: true,
      get: function get() {
        return _definition.isEnumType;
      }
    });
    Object.defineProperty(exports, "isInputObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.isInputObjectType;
      }
    });
    Object.defineProperty(exports, "isListType", {
      enumerable: true,
      get: function get() {
        return _definition.isListType;
      }
    });
    Object.defineProperty(exports, "isNonNullType", {
      enumerable: true,
      get: function get() {
        return _definition.isNonNullType;
      }
    });
    Object.defineProperty(exports, "isInputType", {
      enumerable: true,
      get: function get() {
        return _definition.isInputType;
      }
    });
    Object.defineProperty(exports, "isOutputType", {
      enumerable: true,
      get: function get() {
        return _definition.isOutputType;
      }
    });
    Object.defineProperty(exports, "isLeafType", {
      enumerable: true,
      get: function get() {
        return _definition.isLeafType;
      }
    });
    Object.defineProperty(exports, "isCompositeType", {
      enumerable: true,
      get: function get() {
        return _definition.isCompositeType;
      }
    });
    Object.defineProperty(exports, "isAbstractType", {
      enumerable: true,
      get: function get() {
        return _definition.isAbstractType;
      }
    });
    Object.defineProperty(exports, "isWrappingType", {
      enumerable: true,
      get: function get() {
        return _definition.isWrappingType;
      }
    });
    Object.defineProperty(exports, "isNullableType", {
      enumerable: true,
      get: function get() {
        return _definition.isNullableType;
      }
    });
    Object.defineProperty(exports, "isNamedType", {
      enumerable: true,
      get: function get() {
        return _definition.isNamedType;
      }
    });
    Object.defineProperty(exports, "isRequiredArgument", {
      enumerable: true,
      get: function get() {
        return _definition.isRequiredArgument;
      }
    });
    Object.defineProperty(exports, "isRequiredInputField", {
      enumerable: true,
      get: function get() {
        return _definition.isRequiredInputField;
      }
    });
    Object.defineProperty(exports, "assertType", {
      enumerable: true,
      get: function get() {
        return _definition.assertType;
      }
    });
    Object.defineProperty(exports, "assertScalarType", {
      enumerable: true,
      get: function get() {
        return _definition.assertScalarType;
      }
    });
    Object.defineProperty(exports, "assertObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.assertObjectType;
      }
    });
    Object.defineProperty(exports, "assertInterfaceType", {
      enumerable: true,
      get: function get() {
        return _definition.assertInterfaceType;
      }
    });
    Object.defineProperty(exports, "assertUnionType", {
      enumerable: true,
      get: function get() {
        return _definition.assertUnionType;
      }
    });
    Object.defineProperty(exports, "assertEnumType", {
      enumerable: true,
      get: function get() {
        return _definition.assertEnumType;
      }
    });
    Object.defineProperty(exports, "assertInputObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.assertInputObjectType;
      }
    });
    Object.defineProperty(exports, "assertListType", {
      enumerable: true,
      get: function get() {
        return _definition.assertListType;
      }
    });
    Object.defineProperty(exports, "assertNonNullType", {
      enumerable: true,
      get: function get() {
        return _definition.assertNonNullType;
      }
    });
    Object.defineProperty(exports, "assertInputType", {
      enumerable: true,
      get: function get() {
        return _definition.assertInputType;
      }
    });
    Object.defineProperty(exports, "assertOutputType", {
      enumerable: true,
      get: function get() {
        return _definition.assertOutputType;
      }
    });
    Object.defineProperty(exports, "assertLeafType", {
      enumerable: true,
      get: function get() {
        return _definition.assertLeafType;
      }
    });
    Object.defineProperty(exports, "assertCompositeType", {
      enumerable: true,
      get: function get() {
        return _definition.assertCompositeType;
      }
    });
    Object.defineProperty(exports, "assertAbstractType", {
      enumerable: true,
      get: function get() {
        return _definition.assertAbstractType;
      }
    });
    Object.defineProperty(exports, "assertWrappingType", {
      enumerable: true,
      get: function get() {
        return _definition.assertWrappingType;
      }
    });
    Object.defineProperty(exports, "assertNullableType", {
      enumerable: true,
      get: function get() {
        return _definition.assertNullableType;
      }
    });
    Object.defineProperty(exports, "assertNamedType", {
      enumerable: true,
      get: function get() {
        return _definition.assertNamedType;
      }
    });
    Object.defineProperty(exports, "getNullableType", {
      enumerable: true,
      get: function get() {
        return _definition.getNullableType;
      }
    });
    Object.defineProperty(exports, "getNamedType", {
      enumerable: true,
      get: function get() {
        return _definition.getNamedType;
      }
    });
    Object.defineProperty(exports, "GraphQLScalarType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLScalarType;
      }
    });
    Object.defineProperty(exports, "GraphQLObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLInterfaceType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLInterfaceType;
      }
    });
    Object.defineProperty(exports, "GraphQLUnionType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLUnionType;
      }
    });
    Object.defineProperty(exports, "GraphQLEnumType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLEnumType;
      }
    });
    Object.defineProperty(exports, "GraphQLInputObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLInputObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLList", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLList;
      }
    });
    Object.defineProperty(exports, "GraphQLNonNull", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLNonNull;
      }
    });
    Object.defineProperty(exports, "isDirective", {
      enumerable: true,
      get: function get() {
        return _directives.isDirective;
      }
    });
    Object.defineProperty(exports, "assertDirective", {
      enumerable: true,
      get: function get() {
        return _directives.assertDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLDirective", {
      enumerable: true,
      get: function get() {
        return _directives.GraphQLDirective;
      }
    });
    Object.defineProperty(exports, "isSpecifiedDirective", {
      enumerable: true,
      get: function get() {
        return _directives.isSpecifiedDirective;
      }
    });
    Object.defineProperty(exports, "specifiedDirectives", {
      enumerable: true,
      get: function get() {
        return _directives.specifiedDirectives;
      }
    });
    Object.defineProperty(exports, "GraphQLIncludeDirective", {
      enumerable: true,
      get: function get() {
        return _directives.GraphQLIncludeDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLSkipDirective", {
      enumerable: true,
      get: function get() {
        return _directives.GraphQLSkipDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
      enumerable: true,
      get: function get() {
        return _directives.GraphQLDeprecatedDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
      enumerable: true,
      get: function get() {
        return _directives.GraphQLSpecifiedByDirective;
      }
    });
    Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
      enumerable: true,
      get: function get() {
        return _directives.DEFAULT_DEPRECATION_REASON;
      }
    });
    Object.defineProperty(exports, "isSpecifiedScalarType", {
      enumerable: true,
      get: function get() {
        return _scalars.isSpecifiedScalarType;
      }
    });
    Object.defineProperty(exports, "specifiedScalarTypes", {
      enumerable: true,
      get: function get() {
        return _scalars.specifiedScalarTypes;
      }
    });
    Object.defineProperty(exports, "GraphQLInt", {
      enumerable: true,
      get: function get() {
        return _scalars.GraphQLInt;
      }
    });
    Object.defineProperty(exports, "GraphQLFloat", {
      enumerable: true,
      get: function get() {
        return _scalars.GraphQLFloat;
      }
    });
    Object.defineProperty(exports, "GraphQLString", {
      enumerable: true,
      get: function get() {
        return _scalars.GraphQLString;
      }
    });
    Object.defineProperty(exports, "GraphQLBoolean", {
      enumerable: true,
      get: function get() {
        return _scalars.GraphQLBoolean;
      }
    });
    Object.defineProperty(exports, "GraphQLID", {
      enumerable: true,
      get: function get() {
        return _scalars.GraphQLID;
      }
    });
    Object.defineProperty(exports, "isIntrospectionType", {
      enumerable: true,
      get: function get() {
        return _introspection.isIntrospectionType;
      }
    });
    Object.defineProperty(exports, "introspectionTypes", {
      enumerable: true,
      get: function get() {
        return _introspection.introspectionTypes;
      }
    });
    Object.defineProperty(exports, "__Schema", {
      enumerable: true,
      get: function get() {
        return _introspection.__Schema;
      }
    });
    Object.defineProperty(exports, "__Directive", {
      enumerable: true,
      get: function get() {
        return _introspection.__Directive;
      }
    });
    Object.defineProperty(exports, "__DirectiveLocation", {
      enumerable: true,
      get: function get() {
        return _introspection.__DirectiveLocation;
      }
    });
    Object.defineProperty(exports, "__Type", {
      enumerable: true,
      get: function get() {
        return _introspection.__Type;
      }
    });
    Object.defineProperty(exports, "__Field", {
      enumerable: true,
      get: function get() {
        return _introspection.__Field;
      }
    });
    Object.defineProperty(exports, "__InputValue", {
      enumerable: true,
      get: function get() {
        return _introspection.__InputValue;
      }
    });
    Object.defineProperty(exports, "__EnumValue", {
      enumerable: true,
      get: function get() {
        return _introspection.__EnumValue;
      }
    });
    Object.defineProperty(exports, "__TypeKind", {
      enumerable: true,
      get: function get() {
        return _introspection.__TypeKind;
      }
    });
    Object.defineProperty(exports, "TypeKind", {
      enumerable: true,
      get: function get() {
        return _introspection.TypeKind;
      }
    });
    Object.defineProperty(exports, "SchemaMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _introspection.SchemaMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "TypeMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _introspection.TypeMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "TypeNameMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _introspection.TypeNameMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "validateSchema", {
      enumerable: true,
      get: function get() {
        return _validate.validateSchema;
      }
    });
    Object.defineProperty(exports, "assertValidSchema", {
      enumerable: true,
      get: function get() {
        return _validate.assertValidSchema;
      }
    });

    var _schema = require("./schema.mjs");

    var _definition = require("./definition.mjs");

    var _directives = require("./directives.mjs");

    var _scalars = require("./scalars.mjs");

    var _introspection = require("./introspection.mjs");

    var _validate = require("./validate.mjs");
  }, {
    "./schema.mjs": "../node_modules/graphql/type/schema.mjs",
    "./definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "./directives.mjs": "../node_modules/graphql/type/directives.mjs",
    "./scalars.mjs": "../node_modules/graphql/type/scalars.mjs",
    "./introspection.mjs": "../node_modules/graphql/type/introspection.mjs",
    "./validate.mjs": "../node_modules/graphql/type/validate.mjs"
  }],
  "../node_modules/graphql/language/index.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Source", {
      enumerable: true,
      get: function get() {
        return _source.Source;
      }
    });
    Object.defineProperty(exports, "getLocation", {
      enumerable: true,
      get: function get() {
        return _location.getLocation;
      }
    });
    Object.defineProperty(exports, "printLocation", {
      enumerable: true,
      get: function get() {
        return _printLocation.printLocation;
      }
    });
    Object.defineProperty(exports, "printSourceLocation", {
      enumerable: true,
      get: function get() {
        return _printLocation.printSourceLocation;
      }
    });
    Object.defineProperty(exports, "Kind", {
      enumerable: true,
      get: function get() {
        return _kinds.Kind;
      }
    });
    Object.defineProperty(exports, "TokenKind", {
      enumerable: true,
      get: function get() {
        return _tokenKind.TokenKind;
      }
    });
    Object.defineProperty(exports, "Lexer", {
      enumerable: true,
      get: function get() {
        return _lexer.Lexer;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function get() {
        return _parser.parse;
      }
    });
    Object.defineProperty(exports, "parseValue", {
      enumerable: true,
      get: function get() {
        return _parser.parseValue;
      }
    });
    Object.defineProperty(exports, "parseType", {
      enumerable: true,
      get: function get() {
        return _parser.parseType;
      }
    });
    Object.defineProperty(exports, "print", {
      enumerable: true,
      get: function get() {
        return _printer.print;
      }
    });
    Object.defineProperty(exports, "visit", {
      enumerable: true,
      get: function get() {
        return _visitor.visit;
      }
    });
    Object.defineProperty(exports, "visitInParallel", {
      enumerable: true,
      get: function get() {
        return _visitor.visitInParallel;
      }
    });
    Object.defineProperty(exports, "getVisitFn", {
      enumerable: true,
      get: function get() {
        return _visitor.getVisitFn;
      }
    });
    Object.defineProperty(exports, "BREAK", {
      enumerable: true,
      get: function get() {
        return _visitor.BREAK;
      }
    });
    Object.defineProperty(exports, "Location", {
      enumerable: true,
      get: function get() {
        return _ast.Location;
      }
    });
    Object.defineProperty(exports, "Token", {
      enumerable: true,
      get: function get() {
        return _ast.Token;
      }
    });
    Object.defineProperty(exports, "isDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isExecutableDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isExecutableDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isSelectionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isSelectionNode;
      }
    });
    Object.defineProperty(exports, "isValueNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isValueNode;
      }
    });
    Object.defineProperty(exports, "isTypeNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeSystemDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemExtensionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeSystemExtensionNode;
      }
    });
    Object.defineProperty(exports, "isTypeExtensionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeExtensionNode;
      }
    });
    Object.defineProperty(exports, "DirectiveLocation", {
      enumerable: true,
      get: function get() {
        return _directiveLocation.DirectiveLocation;
      }
    });

    var _source = require("./source.mjs");

    var _location = require("./location.mjs");

    var _printLocation = require("./printLocation.mjs");

    var _kinds = require("./kinds.mjs");

    var _tokenKind = require("./tokenKind.mjs");

    var _lexer = require("./lexer.mjs");

    var _parser = require("./parser.mjs");

    var _printer = require("./printer.mjs");

    var _visitor = require("./visitor.mjs");

    var _ast = require("./ast.mjs");

    var _predicates = require("./predicates.mjs");

    var _directiveLocation = require("./directiveLocation.mjs");
  }, {
    "./source.mjs": "../node_modules/graphql/language/source.mjs",
    "./location.mjs": "../node_modules/graphql/language/location.mjs",
    "./printLocation.mjs": "../node_modules/graphql/language/printLocation.mjs",
    "./kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "./tokenKind.mjs": "../node_modules/graphql/language/tokenKind.mjs",
    "./lexer.mjs": "../node_modules/graphql/language/lexer.mjs",
    "./parser.mjs": "../node_modules/graphql/language/parser.mjs",
    "./printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "./visitor.mjs": "../node_modules/graphql/language/visitor.mjs",
    "./ast.mjs": "../node_modules/graphql/language/ast.mjs",
    "./predicates.mjs": "../node_modules/graphql/language/predicates.mjs",
    "./directiveLocation.mjs": "../node_modules/graphql/language/directiveLocation.mjs"
  }],
  "../node_modules/graphql/execution/index.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "responsePathAsArray", {
      enumerable: true,
      get: function get() {
        return _Path.pathToArray;
      }
    });
    Object.defineProperty(exports, "execute", {
      enumerable: true,
      get: function get() {
        return _execute.execute;
      }
    });
    Object.defineProperty(exports, "executeSync", {
      enumerable: true,
      get: function get() {
        return _execute.executeSync;
      }
    });
    Object.defineProperty(exports, "defaultFieldResolver", {
      enumerable: true,
      get: function get() {
        return _execute.defaultFieldResolver;
      }
    });
    Object.defineProperty(exports, "defaultTypeResolver", {
      enumerable: true,
      get: function get() {
        return _execute.defaultTypeResolver;
      }
    });
    Object.defineProperty(exports, "getDirectiveValues", {
      enumerable: true,
      get: function get() {
        return _values.getDirectiveValues;
      }
    });

    var _Path = require("../jsutils/Path.mjs");

    var _execute = require("./execute.mjs");

    var _values = require("./values.mjs");
  }, {
    "../jsutils/Path.mjs": "../node_modules/graphql/jsutils/Path.mjs",
    "./execute.mjs": "../node_modules/graphql/execution/execute.mjs",
    "./values.mjs": "../node_modules/graphql/execution/values.mjs"
  }],
  "../node_modules/graphql/jsutils/isAsyncIterable.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAsyncIterable;

    var _symbols = require("../polyfills/symbols.mjs");

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }
    /**
     * Returns true if the provided object implements the AsyncIterator protocol via
     * either implementing a `Symbol.asyncIterator` or `"@@asyncIterator"` method.
     */
    // eslint-disable-next-line no-redeclare


    function isAsyncIterable(maybeAsyncIterable) {
      if (maybeAsyncIterable == null || _typeof(maybeAsyncIterable) !== 'object') {
        return false;
      }

      return typeof maybeAsyncIterable[_symbols.SYMBOL_ASYNC_ITERATOR] === 'function';
    }
  }, {
    "../polyfills/symbols.mjs": "../node_modules/graphql/polyfills/symbols.mjs"
  }],
  "../node_modules/graphql/subscription/mapAsyncIterator.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = mapAsyncIterator;

    var _symbols = require("../polyfills/symbols.mjs");

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }
    /**
     * Given an AsyncIterable and a callback function, return an AsyncIterator
     * which produces values mapped via calling the callback function.
     */


    function mapAsyncIterator(iterable, callback, rejectCallback) {
      // $FlowFixMe[prop-missing]
      var iteratorMethod = iterable[_symbols.SYMBOL_ASYNC_ITERATOR];
      var iterator = iteratorMethod.call(iterable);
      var $return;
      var abruptClose;

      if (typeof iterator.return === 'function') {
        $return = iterator.return;

        abruptClose = function abruptClose(error) {
          var rethrow = function rethrow() {
            return Promise.reject(error);
          };

          return $return.call(iterator).then(rethrow, rethrow);
        };
      }

      function mapResult(result) {
        return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);
      }

      var mapReject;

      if (rejectCallback) {
        // Capture rejectCallback to ensure it cannot be null.
        var reject = rejectCallback;

        mapReject = function mapReject(error) {
          return asyncMapValue(error, reject).then(iteratorResult, abruptClose);
        };
      }
      /* TODO: Flow doesn't support symbols as keys:
         https://github.com/facebook/flow/issues/3258 */


      return _defineProperty({
        next: function next() {
          return iterator.next().then(mapResult, mapReject);
        },
        return: function _return() {
          return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({
            value: undefined,
            done: true
          });
        },
        throw: function _throw(error) {
          if (typeof iterator.throw === 'function') {
            return iterator.throw(error).then(mapResult, mapReject);
          }

          return Promise.reject(error).catch(abruptClose);
        }
      }, _symbols.SYMBOL_ASYNC_ITERATOR, function () {
        return this;
      });
    }

    function asyncMapValue(value, callback) {
      return new Promise(function (resolve) {
        return resolve(callback(value));
      });
    }

    function iteratorResult(value) {
      return {
        value: value,
        done: false
      };
    }
  }, {
    "../polyfills/symbols.mjs": "../node_modules/graphql/polyfills/symbols.mjs"
  }],
  "../node_modules/graphql/subscription/subscribe.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.subscribe = subscribe;
    exports.createSourceEventStream = createSourceEventStream;

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _isAsyncIterable = _interopRequireDefault(require("../jsutils/isAsyncIterable.mjs"));

    var _Path = require("../jsutils/Path.mjs");

    var _GraphQLError = require("../error/GraphQLError.mjs");

    var _locatedError = require("../error/locatedError.mjs");

    var _values = require("../execution/values.mjs");

    var _execute = require("../execution/execute.mjs");

    var _getOperationRootType = require("../utilities/getOperationRootType.mjs");

    var _mapAsyncIterator = _interopRequireDefault(require("./mapAsyncIterator.mjs"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
      /* eslint-enable no-redeclare */
      // Extract arguments from object args if provided.
      return arguments.length === 1 ? subscribeImpl(argsOrSchema) : subscribeImpl({
        schema: argsOrSchema,
        document: document,
        rootValue: rootValue,
        contextValue: contextValue,
        variableValues: variableValues,
        operationName: operationName,
        fieldResolver: fieldResolver,
        subscribeFieldResolver: subscribeFieldResolver
      });
    }
    /**
     * This function checks if the error is a GraphQLError. If it is, report it as
     * an ExecutionResult, containing only errors and no data. Otherwise treat the
     * error as a system-class error and re-throw it.
     */


    function reportGraphQLError(error) {
      if (error instanceof _GraphQLError.GraphQLError) {
        return {
          errors: [error]
        };
      }

      throw error;
    }

    function subscribeImpl(args) {
      var schema = args.schema,
          document = args.document,
          rootValue = args.rootValue,
          contextValue = args.contextValue,
          variableValues = args.variableValues,
          operationName = args.operationName,
          fieldResolver = args.fieldResolver,
          subscribeFieldResolver = args.subscribeFieldResolver;
      var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal
      // GraphQL `execute` function, with `payload` as the rootValue.
      // This implements the "MapSourceToResponseEvent" algorithm described in
      // the GraphQL specification. The `execute` function provides the
      // "ExecuteSubscriptionEvent" algorithm, as it is nearly identical to the
      // "ExecuteQuery" algorithm, for which `execute` is also used.

      var mapSourceToResponse = function mapSourceToResponse(payload) {
        return (0, _execute.execute)({
          schema: schema,
          document: document,
          rootValue: payload,
          contextValue: contextValue,
          variableValues: variableValues,
          operationName: operationName,
          fieldResolver: fieldResolver
        });
      }; // Resolve the Source Stream, then map every source value to a
      // ExecutionResult value as described above.


      return sourcePromise.then(function (resultOrStream) {
        return (// Note: Flow can't refine isAsyncIterable, so explicit casts are used.
          (0, _isAsyncIterable.default)(resultOrStream) ? (0, _mapAsyncIterator.default)(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream
        );
      });
    }
    /**
     * Implements the "CreateSourceEventStream" algorithm described in the
     * GraphQL specification, resolving the subscription source event stream.
     *
     * Returns a Promise which resolves to either an AsyncIterable (if successful)
     * or an ExecutionResult (error). The promise will be rejected if the schema or
     * other arguments to this function are invalid, or if the resolved event stream
     * is not an async iterable.
     *
     * If the client-provided arguments to this function do not result in a
     * compliant subscription, a GraphQL Response (ExecutionResult) with
     * descriptive errors and no data will be returned.
     *
     * If the the source stream could not be created due to faulty subscription
     * resolver logic or underlying systems, the promise will resolve to a single
     * ExecutionResult containing `errors` and no `data`.
     *
     * If the operation succeeded, the promise resolves to the AsyncIterable for the
     * event stream returned by the resolver.
     *
     * A Source Event Stream represents a sequence of events, each of which triggers
     * a GraphQL execution for that event.
     *
     * This may be useful when hosting the stateful subscription service in a
     * different process or machine than the stateless GraphQL execution engine,
     * or otherwise separating these two steps. For more on this, see the
     * "Supporting Subscriptions at Scale" information in the GraphQL specification.
     */


    function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {
      // If arguments are missing or incorrectly typed, this is an internal
      // developer mistake which should throw an early error.
      (0, _execute.assertValidExecutionArguments)(schema, document, variableValues);
      return new Promise(function (resolve) {
        // If a valid context cannot be created due to incorrect arguments,
        // this will throw an error.
        var exeContext = (0, _execute.buildExecutionContext)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);
        resolve( // Return early errors if execution context failed.
        Array.isArray(exeContext) ? {
          errors: exeContext
        } : executeSubscription(exeContext));
      }).catch(reportGraphQLError);
    }

    function executeSubscription(exeContext) {
      var schema = exeContext.schema,
          operation = exeContext.operation,
          variableValues = exeContext.variableValues,
          rootValue = exeContext.rootValue;
      var type = (0, _getOperationRootType.getOperationRootType)(schema, operation);
      var fields = (0, _execute.collectFields)(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));
      var responseNames = Object.keys(fields);
      var responseName = responseNames[0];
      var fieldNodes = fields[responseName];
      var fieldNode = fieldNodes[0];
      var fieldName = fieldNode.name.value;
      var fieldDef = (0, _execute.getFieldDef)(schema, type, fieldName);

      if (!fieldDef) {
        throw new _GraphQLError.GraphQLError("The subscription field \"".concat(fieldName, "\" is not defined."), fieldNodes);
      }

      var path = (0, _Path.addPath)(undefined, responseName, type.name);
      var info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, type, path); // Coerce to Promise for easier error handling and consistent return type.

      return new Promise(function (resolveResult) {
        var _fieldDef$subscribe; // Implements the "ResolveFieldEventStream" algorithm from GraphQL specification.
        // It differs from "ResolveFieldValue" due to providing a different `resolveFn`.
        // Build a JS object of arguments from the field.arguments AST, using the
        // variables scope to fulfill any variable references.


        var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that
        // is provided to every resolve function within an execution. It is commonly
        // used to represent an authenticated user, or request-specific caches.

        var contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an
        // AsyncIterable yielding raw payloads.

        var resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.fieldResolver;
        resolveResult(resolveFn(rootValue, args, contextValue, info));
      }).then(function (eventStream) {
        if (eventStream instanceof Error) {
          throw (0, _locatedError.locatedError)(eventStream, fieldNodes, (0, _Path.pathToArray)(path));
        } // Assert field returned an event stream, otherwise yield an error.


        if (!(0, _isAsyncIterable.default)(eventStream)) {
          throw new Error('Subscription field must return Async Iterable. ' + "Received: ".concat((0, _inspect.default)(eventStream), "."));
        }

        return eventStream;
      }, function (error) {
        throw (0, _locatedError.locatedError)(error, fieldNodes, (0, _Path.pathToArray)(path));
      });
    }
  }, {
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/isAsyncIterable.mjs": "../node_modules/graphql/jsutils/isAsyncIterable.mjs",
    "../jsutils/Path.mjs": "../node_modules/graphql/jsutils/Path.mjs",
    "../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../error/locatedError.mjs": "../node_modules/graphql/error/locatedError.mjs",
    "../execution/values.mjs": "../node_modules/graphql/execution/values.mjs",
    "../execution/execute.mjs": "../node_modules/graphql/execution/execute.mjs",
    "../utilities/getOperationRootType.mjs": "../node_modules/graphql/utilities/getOperationRootType.mjs",
    "./mapAsyncIterator.mjs": "../node_modules/graphql/subscription/mapAsyncIterator.mjs"
  }],
  "../node_modules/graphql/subscription/index.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "subscribe", {
      enumerable: true,
      get: function get() {
        return _subscribe.subscribe;
      }
    });
    Object.defineProperty(exports, "createSourceEventStream", {
      enumerable: true,
      get: function get() {
        return _subscribe.createSourceEventStream;
      }
    });

    var _subscribe = require("./subscribe.mjs");
  }, {
    "./subscribe.mjs": "../node_modules/graphql/subscription/subscribe.mjs"
  }],
  "../node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoDeprecatedCustomRule = NoDeprecatedCustomRule;

    var _invariant = _interopRequireDefault(require("../../../jsutils/invariant.mjs"));

    var _GraphQLError = require("../../../error/GraphQLError.mjs");

    var _definition = require("../../../type/definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * No deprecated
     *
     * A GraphQL document is only valid if all selected fields and all used enum values have not been
     * deprecated.
     *
     * Note: This rule is optional and is not part of the Validation section of the GraphQL
     * Specification. The main purpose of this rule is detection of deprecated usages and not
     * necessarily to forbid their use when querying a service.
     */


    function NoDeprecatedCustomRule(context) {
      return {
        Field: function Field(node) {
          var fieldDef = context.getFieldDef();
          var deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;

          if (fieldDef && deprecationReason != null) {
            var parentType = context.getParentType();
            parentType != null || (0, _invariant.default)(0);
            context.reportError(new _GraphQLError.GraphQLError("The field ".concat(parentType.name, ".").concat(fieldDef.name, " is deprecated. ").concat(deprecationReason), node));
          }
        },
        Argument: function Argument(node) {
          var argDef = context.getArgument();
          var deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;

          if (argDef && deprecationReason != null) {
            var directiveDef = context.getDirective();

            if (directiveDef != null) {
              context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(directiveDef.name, "\" argument \"").concat(argDef.name, "\" is deprecated. ").concat(deprecationReason), node));
            } else {
              var parentType = context.getParentType();
              var fieldDef = context.getFieldDef();
              parentType != null && fieldDef != null || (0, _invariant.default)(0);
              context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(parentType.name, ".").concat(fieldDef.name, "\" argument \"").concat(argDef.name, "\" is deprecated. ").concat(deprecationReason), node));
            }
          }
        },
        ObjectField: function ObjectField(node) {
          var inputObjectDef = (0, _definition.getNamedType)(context.getParentInputType());

          if ((0, _definition.isInputObjectType)(inputObjectDef)) {
            var inputFieldDef = inputObjectDef.getFields()[node.name.value]; // flowlint-next-line unnecessary-optional-chain:off

            var deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;

            if (deprecationReason != null) {
              context.reportError(new _GraphQLError.GraphQLError("The input field ".concat(inputObjectDef.name, ".").concat(inputFieldDef.name, " is deprecated. ").concat(deprecationReason), node));
            }
          }
        },
        EnumValue: function EnumValue(node) {
          var enumValueDef = context.getEnumValue();
          var deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;

          if (enumValueDef && deprecationReason != null) {
            var enumTypeDef = (0, _definition.getNamedType)(context.getInputType());
            enumTypeDef != null || (0, _invariant.default)(0);
            context.reportError(new _GraphQLError.GraphQLError("The enum value \"".concat(enumTypeDef.name, ".").concat(enumValueDef.name, "\" is deprecated. ").concat(deprecationReason), node));
          }
        }
      };
    }
  }, {
    "../../../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;

    var _GraphQLError = require("../../../error/GraphQLError.mjs");

    var _definition = require("../../../type/definition.mjs");

    var _introspection = require("../../../type/introspection.mjs");
    /**
     * Prohibit introspection queries
     *
     * A GraphQL document is only valid if all fields selected are not fields that
     * return an introspection type.
     *
     * Note: This rule is optional and is not part of the Validation section of the
     * GraphQL Specification. This rule effectively disables introspection, which
     * does not reflect best practices and should only be done if absolutely necessary.
     */


    function NoSchemaIntrospectionCustomRule(context) {
      return {
        Field: function Field(node) {
          var type = (0, _definition.getNamedType)(context.getType());

          if (type && (0, _introspection.isIntrospectionType)(type)) {
            context.reportError(new _GraphQLError.GraphQLError("GraphQL introspection has been disabled, but the requested query contained the field \"".concat(node.name.value, "\"."), node));
          }
        }
      };
    }
  }, {
    "../../../error/GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "../../../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "../../../type/introspection.mjs": "../node_modules/graphql/type/introspection.mjs"
  }],
  "../node_modules/graphql/validation/index.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function get() {
        return _validate.validate;
      }
    });
    Object.defineProperty(exports, "ValidationContext", {
      enumerable: true,
      get: function get() {
        return _ValidationContext.ValidationContext;
      }
    });
    Object.defineProperty(exports, "specifiedRules", {
      enumerable: true,
      get: function get() {
        return _specifiedRules.specifiedRules;
      }
    });
    Object.defineProperty(exports, "ExecutableDefinitionsRule", {
      enumerable: true,
      get: function get() {
        return _ExecutableDefinitionsRule.ExecutableDefinitionsRule;
      }
    });
    Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
      enumerable: true,
      get: function get() {
        return _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
      enumerable: true,
      get: function get() {
        return _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule;
      }
    });
    Object.defineProperty(exports, "KnownArgumentNamesRule", {
      enumerable: true,
      get: function get() {
        return _KnownArgumentNamesRule.KnownArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownDirectivesRule", {
      enumerable: true,
      get: function get() {
        return _KnownDirectivesRule.KnownDirectivesRule;
      }
    });
    Object.defineProperty(exports, "KnownFragmentNamesRule", {
      enumerable: true,
      get: function get() {
        return _KnownFragmentNamesRule.KnownFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownTypeNamesRule", {
      enumerable: true,
      get: function get() {
        return _KnownTypeNamesRule.KnownTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "LoneAnonymousOperationRule", {
      enumerable: true,
      get: function get() {
        return _LoneAnonymousOperationRule.LoneAnonymousOperationRule;
      }
    });
    Object.defineProperty(exports, "NoFragmentCyclesRule", {
      enumerable: true,
      get: function get() {
        return _NoFragmentCyclesRule.NoFragmentCyclesRule;
      }
    });
    Object.defineProperty(exports, "NoUndefinedVariablesRule", {
      enumerable: true,
      get: function get() {
        return _NoUndefinedVariablesRule.NoUndefinedVariablesRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedFragmentsRule", {
      enumerable: true,
      get: function get() {
        return _NoUnusedFragmentsRule.NoUnusedFragmentsRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedVariablesRule", {
      enumerable: true,
      get: function get() {
        return _NoUnusedVariablesRule.NoUnusedVariablesRule;
      }
    });
    Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
      enumerable: true,
      get: function get() {
        return _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule;
      }
    });
    Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
      enumerable: true,
      get: function get() {
        return _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule;
      }
    });
    Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
      enumerable: true,
      get: function get() {
        return _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule;
      }
    });
    Object.defineProperty(exports, "ScalarLeafsRule", {
      enumerable: true,
      get: function get() {
        return _ScalarLeafsRule.ScalarLeafsRule;
      }
    });
    Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
      enumerable: true,
      get: function get() {
        return _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule;
      }
    });
    Object.defineProperty(exports, "UniqueArgumentNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueArgumentNamesRule.UniqueArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
      enumerable: true,
      get: function get() {
        return _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule;
      }
    });
    Object.defineProperty(exports, "UniqueFragmentNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueFragmentNamesRule.UniqueFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueOperationNamesRule.UniqueOperationNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueVariableNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueVariableNamesRule.UniqueVariableNamesRule;
      }
    });
    Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
      enumerable: true,
      get: function get() {
        return _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "VariablesAreInputTypesRule", {
      enumerable: true,
      get: function get() {
        return _VariablesAreInputTypesRule.VariablesAreInputTypesRule;
      }
    });
    Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
      enumerable: true,
      get: function get() {
        return _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule;
      }
    });
    Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
      enumerable: true,
      get: function get() {
        return _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationTypesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueOperationTypesRule.UniqueOperationTypesRule;
      }
    });
    Object.defineProperty(exports, "UniqueTypeNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueTypeNamesRule.UniqueTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule;
      }
    });
    Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
      enumerable: true,
      get: function get() {
        return _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule;
      }
    });
    Object.defineProperty(exports, "NoDeprecatedCustomRule", {
      enumerable: true,
      get: function get() {
        return _NoDeprecatedCustomRule.NoDeprecatedCustomRule;
      }
    });
    Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
      enumerable: true,
      get: function get() {
        return _NoSchemaIntrospectionCustomRule.NoSchemaIntrospectionCustomRule;
      }
    });

    var _validate = require("./validate.mjs");

    var _ValidationContext = require("./ValidationContext.mjs");

    var _specifiedRules = require("./specifiedRules.mjs");

    var _ExecutableDefinitionsRule = require("./rules/ExecutableDefinitionsRule.mjs");

    var _FieldsOnCorrectTypeRule = require("./rules/FieldsOnCorrectTypeRule.mjs");

    var _FragmentsOnCompositeTypesRule = require("./rules/FragmentsOnCompositeTypesRule.mjs");

    var _KnownArgumentNamesRule = require("./rules/KnownArgumentNamesRule.mjs");

    var _KnownDirectivesRule = require("./rules/KnownDirectivesRule.mjs");

    var _KnownFragmentNamesRule = require("./rules/KnownFragmentNamesRule.mjs");

    var _KnownTypeNamesRule = require("./rules/KnownTypeNamesRule.mjs");

    var _LoneAnonymousOperationRule = require("./rules/LoneAnonymousOperationRule.mjs");

    var _NoFragmentCyclesRule = require("./rules/NoFragmentCyclesRule.mjs");

    var _NoUndefinedVariablesRule = require("./rules/NoUndefinedVariablesRule.mjs");

    var _NoUnusedFragmentsRule = require("./rules/NoUnusedFragmentsRule.mjs");

    var _NoUnusedVariablesRule = require("./rules/NoUnusedVariablesRule.mjs");

    var _OverlappingFieldsCanBeMergedRule = require("./rules/OverlappingFieldsCanBeMergedRule.mjs");

    var _PossibleFragmentSpreadsRule = require("./rules/PossibleFragmentSpreadsRule.mjs");

    var _ProvidedRequiredArgumentsRule = require("./rules/ProvidedRequiredArgumentsRule.mjs");

    var _ScalarLeafsRule = require("./rules/ScalarLeafsRule.mjs");

    var _SingleFieldSubscriptionsRule = require("./rules/SingleFieldSubscriptionsRule.mjs");

    var _UniqueArgumentNamesRule = require("./rules/UniqueArgumentNamesRule.mjs");

    var _UniqueDirectivesPerLocationRule = require("./rules/UniqueDirectivesPerLocationRule.mjs");

    var _UniqueFragmentNamesRule = require("./rules/UniqueFragmentNamesRule.mjs");

    var _UniqueInputFieldNamesRule = require("./rules/UniqueInputFieldNamesRule.mjs");

    var _UniqueOperationNamesRule = require("./rules/UniqueOperationNamesRule.mjs");

    var _UniqueVariableNamesRule = require("./rules/UniqueVariableNamesRule.mjs");

    var _ValuesOfCorrectTypeRule = require("./rules/ValuesOfCorrectTypeRule.mjs");

    var _VariablesAreInputTypesRule = require("./rules/VariablesAreInputTypesRule.mjs");

    var _VariablesInAllowedPositionRule = require("./rules/VariablesInAllowedPositionRule.mjs");

    var _LoneSchemaDefinitionRule = require("./rules/LoneSchemaDefinitionRule.mjs");

    var _UniqueOperationTypesRule = require("./rules/UniqueOperationTypesRule.mjs");

    var _UniqueTypeNamesRule = require("./rules/UniqueTypeNamesRule.mjs");

    var _UniqueEnumValueNamesRule = require("./rules/UniqueEnumValueNamesRule.mjs");

    var _UniqueFieldDefinitionNamesRule = require("./rules/UniqueFieldDefinitionNamesRule.mjs");

    var _UniqueDirectiveNamesRule = require("./rules/UniqueDirectiveNamesRule.mjs");

    var _PossibleTypeExtensionsRule = require("./rules/PossibleTypeExtensionsRule.mjs");

    var _NoDeprecatedCustomRule = require("./rules/custom/NoDeprecatedCustomRule.mjs");

    var _NoSchemaIntrospectionCustomRule = require("./rules/custom/NoSchemaIntrospectionCustomRule.mjs");
  }, {
    "./validate.mjs": "../node_modules/graphql/validation/validate.mjs",
    "./ValidationContext.mjs": "../node_modules/graphql/validation/ValidationContext.mjs",
    "./specifiedRules.mjs": "../node_modules/graphql/validation/specifiedRules.mjs",
    "./rules/ExecutableDefinitionsRule.mjs": "../node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs",
    "./rules/FieldsOnCorrectTypeRule.mjs": "../node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs",
    "./rules/FragmentsOnCompositeTypesRule.mjs": "../node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs",
    "./rules/KnownArgumentNamesRule.mjs": "../node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs",
    "./rules/KnownDirectivesRule.mjs": "../node_modules/graphql/validation/rules/KnownDirectivesRule.mjs",
    "./rules/KnownFragmentNamesRule.mjs": "../node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs",
    "./rules/KnownTypeNamesRule.mjs": "../node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs",
    "./rules/LoneAnonymousOperationRule.mjs": "../node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs",
    "./rules/NoFragmentCyclesRule.mjs": "../node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs",
    "./rules/NoUndefinedVariablesRule.mjs": "../node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs",
    "./rules/NoUnusedFragmentsRule.mjs": "../node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs",
    "./rules/NoUnusedVariablesRule.mjs": "../node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs",
    "./rules/OverlappingFieldsCanBeMergedRule.mjs": "../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs",
    "./rules/PossibleFragmentSpreadsRule.mjs": "../node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs",
    "./rules/ProvidedRequiredArgumentsRule.mjs": "../node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs",
    "./rules/ScalarLeafsRule.mjs": "../node_modules/graphql/validation/rules/ScalarLeafsRule.mjs",
    "./rules/SingleFieldSubscriptionsRule.mjs": "../node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs",
    "./rules/UniqueArgumentNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs",
    "./rules/UniqueDirectivesPerLocationRule.mjs": "../node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs",
    "./rules/UniqueFragmentNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs",
    "./rules/UniqueInputFieldNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs",
    "./rules/UniqueOperationNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs",
    "./rules/UniqueVariableNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs",
    "./rules/ValuesOfCorrectTypeRule.mjs": "../node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs",
    "./rules/VariablesAreInputTypesRule.mjs": "../node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs",
    "./rules/VariablesInAllowedPositionRule.mjs": "../node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs",
    "./rules/LoneSchemaDefinitionRule.mjs": "../node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs",
    "./rules/UniqueOperationTypesRule.mjs": "../node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs",
    "./rules/UniqueTypeNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs",
    "./rules/UniqueEnumValueNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs",
    "./rules/UniqueFieldDefinitionNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs",
    "./rules/UniqueDirectiveNamesRule.mjs": "../node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs",
    "./rules/PossibleTypeExtensionsRule.mjs": "../node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs",
    "./rules/custom/NoDeprecatedCustomRule.mjs": "../node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs",
    "./rules/custom/NoSchemaIntrospectionCustomRule.mjs": "../node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.mjs"
  }],
  "../node_modules/graphql/error/formatError.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.formatError = formatError;

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.mjs"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Given a GraphQLError, format it according to the rules described by the
     * Response Format, Errors section of the GraphQL Specification.
     */


    function formatError(error) {
      var _error$message;

      error || (0, _devAssert.default)(0, 'Received null or undefined error.');
      var message = (_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : 'An unknown error occurred.';
      var locations = error.locations;
      var path = error.path;
      var extensions = error.extensions;
      return extensions ? {
        message: message,
        locations: locations,
        path: path,
        extensions: extensions
      } : {
        message: message,
        locations: locations,
        path: path
      };
    }
    /**
     * @see https://github.com/graphql/graphql-spec/blob/master/spec/Section%207%20--%20Response.md#errors
     */

  }, {
    "../jsutils/devAssert.mjs": "../node_modules/graphql/jsutils/devAssert.mjs"
  }],
  "../node_modules/graphql/error/index.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "GraphQLError", {
      enumerable: true,
      get: function get() {
        return _GraphQLError.GraphQLError;
      }
    });
    Object.defineProperty(exports, "printError", {
      enumerable: true,
      get: function get() {
        return _GraphQLError.printError;
      }
    });
    Object.defineProperty(exports, "syntaxError", {
      enumerable: true,
      get: function get() {
        return _syntaxError.syntaxError;
      }
    });
    Object.defineProperty(exports, "locatedError", {
      enumerable: true,
      get: function get() {
        return _locatedError.locatedError;
      }
    });
    Object.defineProperty(exports, "formatError", {
      enumerable: true,
      get: function get() {
        return _formatError.formatError;
      }
    });

    var _GraphQLError = require("./GraphQLError.mjs");

    var _syntaxError = require("./syntaxError.mjs");

    var _locatedError = require("./locatedError.mjs");

    var _formatError = require("./formatError.mjs");
  }, {
    "./GraphQLError.mjs": "../node_modules/graphql/error/GraphQLError.mjs",
    "./syntaxError.mjs": "../node_modules/graphql/error/syntaxError.mjs",
    "./locatedError.mjs": "../node_modules/graphql/error/locatedError.mjs",
    "./formatError.mjs": "../node_modules/graphql/error/formatError.mjs"
  }],
  "../node_modules/graphql/utilities/getIntrospectionQuery.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getIntrospectionQuery = getIntrospectionQuery;

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function getIntrospectionQuery(options) {
      var optionsWithDefault = _objectSpread({
        descriptions: true,
        specifiedByUrl: false,
        directiveIsRepeatable: false,
        schemaDescription: false
      }, options);

      var descriptions = optionsWithDefault.descriptions ? 'description' : '';
      var specifiedByUrl = optionsWithDefault.specifiedByUrl ? 'specifiedByUrl' : '';
      var directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? 'isRepeatable' : '';
      var schemaDescription = optionsWithDefault.schemaDescription ? descriptions : '';
      return "\n    query IntrospectionQuery {\n      __schema {\n        ".concat(schemaDescription, "\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ").concat(descriptions, "\n          ").concat(directiveIsRepeatable, "\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ").concat(descriptions, "\n      ").concat(specifiedByUrl, "\n      fields(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ").concat(descriptions, "\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ");
    }
  }, {}],
  "../node_modules/graphql/utilities/getOperationAST.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getOperationAST = getOperationAST;

    var _kinds = require("../language/kinds.mjs");
    /**
     * Returns an operation AST given a document AST and optionally an operation
     * name. If a name is not provided, an operation is only returned if only one is
     * provided in the document.
     */


    function getOperationAST(documentAST, operationName) {
      var operation = null;

      for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
        var definition = _documentAST$definiti2[_i2];

        if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {
          var _definition$name;

          if (operationName == null) {
            // If no operation name was provided, only return an Operation if there
            // is one defined in the document. Upon encountering the second, return
            // null.
            if (operation) {
              return null;
            }

            operation = definition;
          } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
            return definition;
          }
        }
      }

      return operation;
    }
  }, {
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs"
  }],
  "../node_modules/graphql/utilities/introspectionFromSchema.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.introspectionFromSchema = introspectionFromSchema;

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _parser = require("../language/parser.mjs");

    var _execute = require("../execution/execute.mjs");

    var _getIntrospectionQuery = require("./getIntrospectionQuery.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }
    /**
     * Build an IntrospectionQuery from a GraphQLSchema
     *
     * IntrospectionQuery is useful for utilities that care about type and field
     * relationships, but do not need to traverse through those relationships.
     *
     * This is the inverse of buildClientSchema. The primary use case is outside
     * of the server context, for instance when doing schema comparisons.
     */


    function introspectionFromSchema(schema, options) {
      var optionsWithDefaults = _objectSpread({
        directiveIsRepeatable: true,
        schemaDescription: true
      }, options);

      var document = (0, _parser.parse)((0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults));
      var result = (0, _execute.executeSync)({
        schema: schema,
        document: document
      });
      !result.errors && result.data || (0, _invariant.default)(0);
      return result.data;
    }
  }, {
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../language/parser.mjs": "../node_modules/graphql/language/parser.mjs",
    "../execution/execute.mjs": "../node_modules/graphql/execution/execute.mjs",
    "./getIntrospectionQuery.mjs": "../node_modules/graphql/utilities/getIntrospectionQuery.mjs"
  }],
  "../node_modules/graphql/utilities/buildClientSchema.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.buildClientSchema = buildClientSchema;

    var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.mjs"));

    var _keyValMap = _interopRequireDefault(require("../jsutils/keyValMap.mjs"));

    var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.mjs"));

    var _parser = require("../language/parser.mjs");

    var _schema = require("../type/schema.mjs");

    var _directives = require("../type/directives.mjs");

    var _scalars = require("../type/scalars.mjs");

    var _introspection = require("../type/introspection.mjs");

    var _definition = require("../type/definition.mjs");

    var _valueFromAST = require("./valueFromAST.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Build a GraphQLSchema for use by client tools.
     *
     * Given the result of a client running the introspection query, creates and
     * returns a GraphQLSchema instance which can be then used with all graphql-js
     * tools, but cannot be used to execute a query, as introspection does not
     * represent the "resolver", "parse" or "serialize" functions or any other
     * server-internal mechanisms.
     *
     * This function expects a complete introspection result. Don't forget to check
     * the "errors" field of a server response before calling this function.
     */


    function buildClientSchema(introspection, options) {
      (0, _isObjectLike.default)(introspection) && (0, _isObjectLike.default)(introspection.__schema) || (0, _devAssert.default)(0, "Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ".concat((0, _inspect.default)(introspection), ".")); // Get the schema from the introspection result.

      var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.

      var typeMap = (0, _keyValMap.default)(schemaIntrospection.types, function (typeIntrospection) {
        return typeIntrospection.name;
      }, function (typeIntrospection) {
        return buildType(typeIntrospection);
      }); // Include standard types only if they are used.

      for (var _i2 = 0, _ref2 = [].concat(_scalars.specifiedScalarTypes, _introspection.introspectionTypes); _i2 < _ref2.length; _i2++) {
        var stdType = _ref2[_i2];

        if (typeMap[stdType.name]) {
          typeMap[stdType.name] = stdType;
        }
      } // Get the root Query, Mutation, and Subscription types.


      var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
      var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
      var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if
      // directives were not queried for.

      var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.

      return new _schema.GraphQLSchema({
        description: schemaIntrospection.description,
        query: queryType,
        mutation: mutationType,
        subscription: subscriptionType,
        types: (0, _objectValues.default)(typeMap),
        directives: directives,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
      }); // Given a type reference in introspection, return the GraphQLType instance.
      // preferring cached instances before building new instances.

      function getType(typeRef) {
        if (typeRef.kind === _introspection.TypeKind.LIST) {
          var itemRef = typeRef.ofType;

          if (!itemRef) {
            throw new Error('Decorated type deeper than introspection query.');
          }

          return new _definition.GraphQLList(getType(itemRef));
        }

        if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
          var nullableRef = typeRef.ofType;

          if (!nullableRef) {
            throw new Error('Decorated type deeper than introspection query.');
          }

          var nullableType = getType(nullableRef);
          return new _definition.GraphQLNonNull((0, _definition.assertNullableType)(nullableType));
        }

        return getNamedType(typeRef);
      }

      function getNamedType(typeRef) {
        var typeName = typeRef.name;

        if (!typeName) {
          throw new Error("Unknown type reference: ".concat((0, _inspect.default)(typeRef), "."));
        }

        var type = typeMap[typeName];

        if (!type) {
          throw new Error("Invalid or incomplete schema, unknown type: ".concat(typeName, ". Ensure that a full introspection query is used in order to build a client schema."));
        }

        return type;
      }

      function getObjectType(typeRef) {
        return (0, _definition.assertObjectType)(getNamedType(typeRef));
      }

      function getInterfaceType(typeRef) {
        return (0, _definition.assertInterfaceType)(getNamedType(typeRef));
      } // Given a type's introspection result, construct the correct
      // GraphQLType instance.


      function buildType(type) {
        if (type != null && type.name != null && type.kind != null) {
          switch (type.kind) {
            case _introspection.TypeKind.SCALAR:
              return buildScalarDef(type);

            case _introspection.TypeKind.OBJECT:
              return buildObjectDef(type);

            case _introspection.TypeKind.INTERFACE:
              return buildInterfaceDef(type);

            case _introspection.TypeKind.UNION:
              return buildUnionDef(type);

            case _introspection.TypeKind.ENUM:
              return buildEnumDef(type);

            case _introspection.TypeKind.INPUT_OBJECT:
              return buildInputObjectDef(type);
          }
        }

        var typeStr = (0, _inspect.default)(type);
        throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(typeStr, "."));
      }

      function buildScalarDef(scalarIntrospection) {
        return new _definition.GraphQLScalarType({
          name: scalarIntrospection.name,
          description: scalarIntrospection.description,
          specifiedByUrl: scalarIntrospection.specifiedByUrl
        });
      }

      function buildImplementationsList(implementingIntrospection) {
        // TODO: Temporary workaround until GraphQL ecosystem will fully support
        // 'interfaces' on interface types.
        if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === _introspection.TypeKind.INTERFACE) {
          return [];
        }

        if (!implementingIntrospection.interfaces) {
          var implementingIntrospectionStr = (0, _inspect.default)(implementingIntrospection);
          throw new Error("Introspection result missing interfaces: ".concat(implementingIntrospectionStr, "."));
        }

        return implementingIntrospection.interfaces.map(getInterfaceType);
      }

      function buildObjectDef(objectIntrospection) {
        return new _definition.GraphQLObjectType({
          name: objectIntrospection.name,
          description: objectIntrospection.description,
          interfaces: function interfaces() {
            return buildImplementationsList(objectIntrospection);
          },
          fields: function fields() {
            return buildFieldDefMap(objectIntrospection);
          }
        });
      }

      function buildInterfaceDef(interfaceIntrospection) {
        return new _definition.GraphQLInterfaceType({
          name: interfaceIntrospection.name,
          description: interfaceIntrospection.description,
          interfaces: function interfaces() {
            return buildImplementationsList(interfaceIntrospection);
          },
          fields: function fields() {
            return buildFieldDefMap(interfaceIntrospection);
          }
        });
      }

      function buildUnionDef(unionIntrospection) {
        if (!unionIntrospection.possibleTypes) {
          var unionIntrospectionStr = (0, _inspect.default)(unionIntrospection);
          throw new Error("Introspection result missing possibleTypes: ".concat(unionIntrospectionStr, "."));
        }

        return new _definition.GraphQLUnionType({
          name: unionIntrospection.name,
          description: unionIntrospection.description,
          types: function types() {
            return unionIntrospection.possibleTypes.map(getObjectType);
          }
        });
      }

      function buildEnumDef(enumIntrospection) {
        if (!enumIntrospection.enumValues) {
          var enumIntrospectionStr = (0, _inspect.default)(enumIntrospection);
          throw new Error("Introspection result missing enumValues: ".concat(enumIntrospectionStr, "."));
        }

        return new _definition.GraphQLEnumType({
          name: enumIntrospection.name,
          description: enumIntrospection.description,
          values: (0, _keyValMap.default)(enumIntrospection.enumValues, function (valueIntrospection) {
            return valueIntrospection.name;
          }, function (valueIntrospection) {
            return {
              description: valueIntrospection.description,
              deprecationReason: valueIntrospection.deprecationReason
            };
          })
        });
      }

      function buildInputObjectDef(inputObjectIntrospection) {
        if (!inputObjectIntrospection.inputFields) {
          var inputObjectIntrospectionStr = (0, _inspect.default)(inputObjectIntrospection);
          throw new Error("Introspection result missing inputFields: ".concat(inputObjectIntrospectionStr, "."));
        }

        return new _definition.GraphQLInputObjectType({
          name: inputObjectIntrospection.name,
          description: inputObjectIntrospection.description,
          fields: function fields() {
            return buildInputValueDefMap(inputObjectIntrospection.inputFields);
          }
        });
      }

      function buildFieldDefMap(typeIntrospection) {
        if (!typeIntrospection.fields) {
          throw new Error("Introspection result missing fields: ".concat((0, _inspect.default)(typeIntrospection), "."));
        }

        return (0, _keyValMap.default)(typeIntrospection.fields, function (fieldIntrospection) {
          return fieldIntrospection.name;
        }, buildField);
      }

      function buildField(fieldIntrospection) {
        var type = getType(fieldIntrospection.type);

        if (!(0, _definition.isOutputType)(type)) {
          var typeStr = (0, _inspect.default)(type);
          throw new Error("Introspection must provide output type for fields, but received: ".concat(typeStr, "."));
        }

        if (!fieldIntrospection.args) {
          var fieldIntrospectionStr = (0, _inspect.default)(fieldIntrospection);
          throw new Error("Introspection result missing field args: ".concat(fieldIntrospectionStr, "."));
        }

        return {
          description: fieldIntrospection.description,
          deprecationReason: fieldIntrospection.deprecationReason,
          type: type,
          args: buildInputValueDefMap(fieldIntrospection.args)
        };
      }

      function buildInputValueDefMap(inputValueIntrospections) {
        return (0, _keyValMap.default)(inputValueIntrospections, function (inputValue) {
          return inputValue.name;
        }, buildInputValue);
      }

      function buildInputValue(inputValueIntrospection) {
        var type = getType(inputValueIntrospection.type);

        if (!(0, _definition.isInputType)(type)) {
          var typeStr = (0, _inspect.default)(type);
          throw new Error("Introspection must provide input type for arguments, but received: ".concat(typeStr, "."));
        }

        var defaultValue = inputValueIntrospection.defaultValue != null ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;
        return {
          description: inputValueIntrospection.description,
          type: type,
          defaultValue: defaultValue
        };
      }

      function buildDirective(directiveIntrospection) {
        if (!directiveIntrospection.args) {
          var directiveIntrospectionStr = (0, _inspect.default)(directiveIntrospection);
          throw new Error("Introspection result missing directive args: ".concat(directiveIntrospectionStr, "."));
        }

        if (!directiveIntrospection.locations) {
          var _directiveIntrospectionStr = (0, _inspect.default)(directiveIntrospection);

          throw new Error("Introspection result missing directive locations: ".concat(_directiveIntrospectionStr, "."));
        }

        return new _directives.GraphQLDirective({
          name: directiveIntrospection.name,
          description: directiveIntrospection.description,
          isRepeatable: directiveIntrospection.isRepeatable,
          locations: directiveIntrospection.locations.slice(),
          args: buildInputValueDefMap(directiveIntrospection.args)
        });
      }
    }
  }, {
    "../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/devAssert.mjs": "../node_modules/graphql/jsutils/devAssert.mjs",
    "../jsutils/keyValMap.mjs": "../node_modules/graphql/jsutils/keyValMap.mjs",
    "../jsutils/isObjectLike.mjs": "../node_modules/graphql/jsutils/isObjectLike.mjs",
    "../language/parser.mjs": "../node_modules/graphql/language/parser.mjs",
    "../type/schema.mjs": "../node_modules/graphql/type/schema.mjs",
    "../type/directives.mjs": "../node_modules/graphql/type/directives.mjs",
    "../type/scalars.mjs": "../node_modules/graphql/type/scalars.mjs",
    "../type/introspection.mjs": "../node_modules/graphql/type/introspection.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "./valueFromAST.mjs": "../node_modules/graphql/utilities/valueFromAST.mjs"
  }],
  "../node_modules/graphql/utilities/extendSchema.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.extendSchema = extendSchema;
    exports.extendSchemaImpl = extendSchemaImpl;
    exports.getDescription = getDescription;

    var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.mjs"));

    var _keyMap = _interopRequireDefault(require("../jsutils/keyMap.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _mapValue = _interopRequireDefault(require("../jsutils/mapValue.mjs"));

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.mjs"));

    var _kinds = require("../language/kinds.mjs");

    var _tokenKind = require("../language/tokenKind.mjs");

    var _blockString = require("../language/blockString.mjs");

    var _predicates = require("../language/predicates.mjs");

    var _validate = require("../validation/validate.mjs");

    var _values = require("../execution/values.mjs");

    var _schema = require("../type/schema.mjs");

    var _scalars = require("../type/scalars.mjs");

    var _introspection = require("../type/introspection.mjs");

    var _directives = require("../type/directives.mjs");

    var _definition = require("../type/definition.mjs");

    var _valueFromAST = require("./valueFromAST.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }
    /**
     * Produces a new schema given an existing schema and a document which may
     * contain GraphQL type extensions and definitions. The original schema will
     * remain unaltered.
     *
     * Because a schema represents a graph of references, a schema cannot be
     * extended without effectively making an entire copy. We do not know until it's
     * too late if subgraphs remain unchanged.
     *
     * This algorithm copies the provided schema, applying extensions while
     * producing the copy. The original schema remains unaltered.
     *
     * Accepts options as a third argument:
     *
     *    - commentDescriptions:
     *        Provide true to use preceding comments as the description.
     *
     */


    function extendSchema(schema, documentAST, options) {
      (0, _schema.assertSchema)(schema);
      documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.default)(0, 'Must provide valid Document AST.');

      if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
        (0, _validate.assertValidSDLExtension)(documentAST, schema);
      }

      var schemaConfig = schema.toConfig();
      var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
      return schemaConfig === extendedConfig ? schema : new _schema.GraphQLSchema(extendedConfig);
    }
    /**
     * @internal
     */


    function extendSchemaImpl(schemaConfig, documentAST, options) {
      var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid; // Collect the type definitions and extensions found in the document.


      var typeDefs = [];
      var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can
      // have the same name. For example, a type named "skip".

      var directiveDefs = [];
      var schemaDef; // Schema extensions are collected which may add additional operation types.

      var schemaExtensions = [];

      for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
        var def = _documentAST$definiti2[_i2];

        if (def.kind === _kinds.Kind.SCHEMA_DEFINITION) {
          schemaDef = def;
        } else if (def.kind === _kinds.Kind.SCHEMA_EXTENSION) {
          schemaExtensions.push(def);
        } else if ((0, _predicates.isTypeDefinitionNode)(def)) {
          typeDefs.push(def);
        } else if ((0, _predicates.isTypeExtensionNode)(def)) {
          var extendedTypeName = def.name.value;
          var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
          typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
        } else if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          directiveDefs.push(def);
        }
      } // If this document contains no new types, extensions, or directives then
      // return the same unmodified GraphQLSchema instance.


      if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {
        return schemaConfig;
      }

      var typeMap = Object.create(null);

      for (var _i4 = 0, _schemaConfig$types2 = schemaConfig.types; _i4 < _schemaConfig$types2.length; _i4++) {
        var existingType = _schemaConfig$types2[_i4];
        typeMap[existingType.name] = extendNamedType(existingType);
      }

      for (var _i6 = 0; _i6 < typeDefs.length; _i6++) {
        var _stdTypeMap$name;

        var typeNode = typeDefs[_i6];
        var name = typeNode.name.value;
        typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
      }

      var operationTypes = _objectSpread(_objectSpread({
        // Get the extended root operation types.
        query: schemaConfig.query && replaceNamedType(schemaConfig.query),
        mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
        subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)
      }, schemaDef && getOperationTypes([schemaDef])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.


      return _objectSpread(_objectSpread({
        description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value
      }, operationTypes), {}, {
        types: (0, _objectValues.default)(typeMap),
        directives: [].concat(schemaConfig.directives.map(replaceDirective), directiveDefs.map(buildDirective)),
        extensions: undefined,
        astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
        extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
        assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false
      }); // Below are functions used for producing this schema that have closed over
      // this scope and have access to the schema, cache, and newly defined types.

      function replaceType(type) {
        if ((0, _definition.isListType)(type)) {
          // $FlowFixMe[incompatible-return]
          return new _definition.GraphQLList(replaceType(type.ofType));
        }

        if ((0, _definition.isNonNullType)(type)) {
          // $FlowFixMe[incompatible-return]
          return new _definition.GraphQLNonNull(replaceType(type.ofType));
        }

        return replaceNamedType(type);
      }

      function replaceNamedType(type) {
        // Note: While this could make early assertions to get the correctly
        // typed values, that would throw immediately while type system
        // validation with validateSchema() will produce more actionable results.
        return typeMap[type.name];
      }

      function replaceDirective(directive) {
        var config = directive.toConfig();
        return new _directives.GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {
          args: (0, _mapValue.default)(config.args, extendArg)
        }));
      }

      function extendNamedType(type) {
        if ((0, _introspection.isIntrospectionType)(type) || (0, _scalars.isSpecifiedScalarType)(type)) {
          // Builtin types are not extended.
          return type;
        }

        if ((0, _definition.isScalarType)(type)) {
          return extendScalarType(type);
        }

        if ((0, _definition.isObjectType)(type)) {
          return extendObjectType(type);
        }

        if ((0, _definition.isInterfaceType)(type)) {
          return extendInterfaceType(type);
        }

        if ((0, _definition.isUnionType)(type)) {
          return extendUnionType(type);
        }

        if ((0, _definition.isEnumType)(type)) {
          return extendEnumType(type);
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


        if ((0, _definition.isInputObjectType)(type)) {
          return extendInputObjectType(type);
        } // istanbul ignore next (Not reachable. All possible types have been considered)


        false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
      }

      function extendInputObjectType(type) {
        var _typeExtensionsMap$co;

        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
        return new _definition.GraphQLInputObjectType(_objectSpread(_objectSpread({}, config), {}, {
          fields: function fields() {
            return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, function (field) {
              return _objectSpread(_objectSpread({}, field), {}, {
                type: replaceType(field.type)
              });
            })), buildInputFieldMap(extensions));
          },
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }

      function extendEnumType(type) {
        var _typeExtensionsMap$ty;

        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
        return new _definition.GraphQLEnumType(_objectSpread(_objectSpread({}, config), {}, {
          values: _objectSpread(_objectSpread({}, config.values), buildEnumValueMap(extensions)),
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }

      function extendScalarType(type) {
        var _typeExtensionsMap$co2;

        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];
        var specifiedByUrl = config.specifiedByUrl;

        for (var _i8 = 0; _i8 < extensions.length; _i8++) {
          var _getSpecifiedByUrl;

          var extensionNode = extensions[_i8];
          specifiedByUrl = (_getSpecifiedByUrl = getSpecifiedByUrl(extensionNode)) !== null && _getSpecifiedByUrl !== void 0 ? _getSpecifiedByUrl : specifiedByUrl;
        }

        return new _definition.GraphQLScalarType(_objectSpread(_objectSpread({}, config), {}, {
          specifiedByUrl: specifiedByUrl,
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }

      function extendObjectType(type) {
        var _typeExtensionsMap$co3;

        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
        return new _definition.GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {
          interfaces: function interfaces() {
            return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
          },
          fields: function fields() {
            return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, extendField)), buildFieldMap(extensions));
          },
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }

      function extendInterfaceType(type) {
        var _typeExtensionsMap$co4;

        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
        return new _definition.GraphQLInterfaceType(_objectSpread(_objectSpread({}, config), {}, {
          interfaces: function interfaces() {
            return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
          },
          fields: function fields() {
            return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, extendField)), buildFieldMap(extensions));
          },
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }

      function extendUnionType(type) {
        var _typeExtensionsMap$co5;

        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
        return new _definition.GraphQLUnionType(_objectSpread(_objectSpread({}, config), {}, {
          types: function types() {
            return [].concat(type.getTypes().map(replaceNamedType), buildUnionTypes(extensions));
          },
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }

      function extendField(field) {
        return _objectSpread(_objectSpread({}, field), {}, {
          type: replaceType(field.type),
          // $FlowFixMe[incompatible-call]
          args: (0, _mapValue.default)(field.args, extendArg)
        });
      }

      function extendArg(arg) {
        return _objectSpread(_objectSpread({}, arg), {}, {
          type: replaceType(arg.type)
        });
      }

      function getOperationTypes(nodes) {
        var opTypes = {};

        for (var _i10 = 0; _i10 < nodes.length; _i10++) {
          var _node$operationTypes;

          var node = nodes[_i10]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

          var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];

          for (var _i12 = 0; _i12 < operationTypesNodes.length; _i12++) {
            var operationType = operationTypesNodes[_i12];
            opTypes[operationType.operation] = getNamedType(operationType.type);
          }
        } // Note: While this could make early assertions to get the correctly
        // typed values below, that would throw immediately while type system
        // validation with validateSchema() will produce more actionable results.


        return opTypes;
      }

      function getNamedType(node) {
        var _stdTypeMap$name2;

        var name = node.name.value;
        var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];

        if (type === undefined) {
          throw new Error("Unknown type: \"".concat(name, "\"."));
        }

        return type;
      }

      function getWrappedType(node) {
        if (node.kind === _kinds.Kind.LIST_TYPE) {
          return new _definition.GraphQLList(getWrappedType(node.type));
        }

        if (node.kind === _kinds.Kind.NON_NULL_TYPE) {
          return new _definition.GraphQLNonNull(getWrappedType(node.type));
        }

        return getNamedType(node);
      }

      function buildDirective(node) {
        var locations = node.locations.map(function (_ref) {
          var value = _ref.value;
          return value;
        });
        return new _directives.GraphQLDirective({
          name: node.name.value,
          description: getDescription(node, options),
          locations: locations,
          isRepeatable: node.repeatable,
          args: buildArgumentMap(node.arguments),
          astNode: node
        });
      }

      function buildFieldMap(nodes) {
        var fieldConfigMap = Object.create(null);

        for (var _i14 = 0; _i14 < nodes.length; _i14++) {
          var _node$fields;

          var node = nodes[_i14]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

          var nodeFields = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];

          for (var _i16 = 0; _i16 < nodeFields.length; _i16++) {
            var field = nodeFields[_i16];
            fieldConfigMap[field.name.value] = {
              // Note: While this could make assertions to get the correctly typed
              // value, that would throw immediately while type system validation
              // with validateSchema() will produce more actionable results.
              type: getWrappedType(field.type),
              description: getDescription(field, options),
              args: buildArgumentMap(field.arguments),
              deprecationReason: getDeprecationReason(field),
              astNode: field
            };
          }
        }

        return fieldConfigMap;
      }

      function buildArgumentMap(args) {
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var argsNodes = args !== null && args !== void 0 ? args : [];
        var argConfigMap = Object.create(null);

        for (var _i18 = 0; _i18 < argsNodes.length; _i18++) {
          var arg = argsNodes[_i18]; // Note: While this could make assertions to get the correctly typed
          // value, that would throw immediately while type system validation
          // with validateSchema() will produce more actionable results.

          var type = getWrappedType(arg.type);
          argConfigMap[arg.name.value] = {
            type: type,
            description: getDescription(arg, options),
            defaultValue: (0, _valueFromAST.valueFromAST)(arg.defaultValue, type),
            deprecationReason: getDeprecationReason(arg),
            astNode: arg
          };
        }

        return argConfigMap;
      }

      function buildInputFieldMap(nodes) {
        var inputFieldMap = Object.create(null);

        for (var _i20 = 0; _i20 < nodes.length; _i20++) {
          var _node$fields2;

          var node = nodes[_i20]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

          var fieldsNodes = (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];

          for (var _i22 = 0; _i22 < fieldsNodes.length; _i22++) {
            var field = fieldsNodes[_i22]; // Note: While this could make assertions to get the correctly typed
            // value, that would throw immediately while type system validation
            // with validateSchema() will produce more actionable results.

            var type = getWrappedType(field.type);
            inputFieldMap[field.name.value] = {
              type: type,
              description: getDescription(field, options),
              defaultValue: (0, _valueFromAST.valueFromAST)(field.defaultValue, type),
              deprecationReason: getDeprecationReason(field),
              astNode: field
            };
          }
        }

        return inputFieldMap;
      }

      function buildEnumValueMap(nodes) {
        var enumValueMap = Object.create(null);

        for (var _i24 = 0; _i24 < nodes.length; _i24++) {
          var _node$values;

          var node = nodes[_i24]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

          var valuesNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];

          for (var _i26 = 0; _i26 < valuesNodes.length; _i26++) {
            var value = valuesNodes[_i26];
            enumValueMap[value.name.value] = {
              description: getDescription(value, options),
              deprecationReason: getDeprecationReason(value),
              astNode: value
            };
          }
        }

        return enumValueMap;
      }

      function buildInterfaces(nodes) {
        var interfaces = [];

        for (var _i28 = 0; _i28 < nodes.length; _i28++) {
          var _node$interfaces;

          var node = nodes[_i28]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

          var interfacesNodes = (_node$interfaces = node.interfaces) !== null && _node$interfaces !== void 0 ? _node$interfaces : [];

          for (var _i30 = 0; _i30 < interfacesNodes.length; _i30++) {
            var type = interfacesNodes[_i30]; // Note: While this could make assertions to get the correctly typed
            // values below, that would throw immediately while type system
            // validation with validateSchema() will produce more actionable
            // results.

            interfaces.push(getNamedType(type));
          }
        }

        return interfaces;
      }

      function buildUnionTypes(nodes) {
        var types = [];

        for (var _i32 = 0; _i32 < nodes.length; _i32++) {
          var _node$types;

          var node = nodes[_i32]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

          var typeNodes = (_node$types = node.types) !== null && _node$types !== void 0 ? _node$types : [];

          for (var _i34 = 0; _i34 < typeNodes.length; _i34++) {
            var type = typeNodes[_i34]; // Note: While this could make assertions to get the correctly typed
            // values below, that would throw immediately while type system
            // validation with validateSchema() will produce more actionable
            // results.

            types.push(getNamedType(type));
          }
        }

        return types;
      }

      function buildType(astNode) {
        var _typeExtensionsMap$na;

        var name = astNode.name.value;
        var description = getDescription(astNode, options);
        var extensionNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];

        switch (astNode.kind) {
          case _kinds.Kind.OBJECT_TYPE_DEFINITION:
            {
              var extensionASTNodes = extensionNodes;
              var allNodes = [astNode].concat(extensionASTNodes);
              return new _definition.GraphQLObjectType({
                name: name,
                description: description,
                interfaces: function interfaces() {
                  return buildInterfaces(allNodes);
                },
                fields: function fields() {
                  return buildFieldMap(allNodes);
                },
                astNode: astNode,
                extensionASTNodes: extensionASTNodes
              });
            }

          case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
            {
              var _extensionASTNodes = extensionNodes;

              var _allNodes = [astNode].concat(_extensionASTNodes);

              return new _definition.GraphQLInterfaceType({
                name: name,
                description: description,
                interfaces: function interfaces() {
                  return buildInterfaces(_allNodes);
                },
                fields: function fields() {
                  return buildFieldMap(_allNodes);
                },
                astNode: astNode,
                extensionASTNodes: _extensionASTNodes
              });
            }

          case _kinds.Kind.ENUM_TYPE_DEFINITION:
            {
              var _extensionASTNodes2 = extensionNodes;

              var _allNodes2 = [astNode].concat(_extensionASTNodes2);

              return new _definition.GraphQLEnumType({
                name: name,
                description: description,
                values: buildEnumValueMap(_allNodes2),
                astNode: astNode,
                extensionASTNodes: _extensionASTNodes2
              });
            }

          case _kinds.Kind.UNION_TYPE_DEFINITION:
            {
              var _extensionASTNodes3 = extensionNodes;

              var _allNodes3 = [astNode].concat(_extensionASTNodes3);

              return new _definition.GraphQLUnionType({
                name: name,
                description: description,
                types: function types() {
                  return buildUnionTypes(_allNodes3);
                },
                astNode: astNode,
                extensionASTNodes: _extensionASTNodes3
              });
            }

          case _kinds.Kind.SCALAR_TYPE_DEFINITION:
            {
              var _extensionASTNodes4 = extensionNodes;
              return new _definition.GraphQLScalarType({
                name: name,
                description: description,
                specifiedByUrl: getSpecifiedByUrl(astNode),
                astNode: astNode,
                extensionASTNodes: _extensionASTNodes4
              });
            }

          case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
            {
              var _extensionASTNodes5 = extensionNodes;

              var _allNodes4 = [astNode].concat(_extensionASTNodes5);

              return new _definition.GraphQLInputObjectType({
                name: name,
                description: description,
                fields: function fields() {
                  return buildInputFieldMap(_allNodes4);
                },
                astNode: astNode,
                extensionASTNodes: _extensionASTNodes5
              });
            }
        } // istanbul ignore next (Not reachable. All possible type definition nodes have been considered)


        false || (0, _invariant.default)(0, 'Unexpected type definition node: ' + (0, _inspect.default)(astNode));
      }
    }

    var stdTypeMap = (0, _keyMap.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function (type) {
      return type.name;
    });
    /**
     * Given a field or enum value node, returns the string value for the
     * deprecation reason.
     */

    function getDeprecationReason(node) {
      var deprecated = (0, _values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective, node);
      return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;
    }
    /**
     * Given a scalar node, returns the string value for the specifiedByUrl.
     */


    function getSpecifiedByUrl(node) {
      var specifiedBy = (0, _values.getDirectiveValues)(_directives.GraphQLSpecifiedByDirective, node);
      return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;
    }
    /**
     * Given an ast node, returns its string description.
     * @deprecated: provided to ease adoption and will be removed in v16.
     *
     * Accepts options as a second argument:
     *
     *    - commentDescriptions:
     *        Provide true to use preceding comments as the description.
     *
     */


    function getDescription(node, options) {
      if (node.description) {
        return node.description.value;
      }

      if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
        var rawValue = getLeadingCommentBlock(node);

        if (rawValue !== undefined) {
          return (0, _blockString.dedentBlockStringValue)('\n' + rawValue);
        }
      }
    }

    function getLeadingCommentBlock(node) {
      var loc = node.loc;

      if (!loc) {
        return;
      }

      var comments = [];
      var token = loc.startToken.prev;

      while (token != null && token.kind === _tokenKind.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {
        var value = String(token.value);
        comments.push(value);
        token = token.prev;
      }

      return comments.length > 0 ? comments.reverse().join('\n') : undefined;
    }
  }, {
    "../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../jsutils/keyMap.mjs": "../node_modules/graphql/jsutils/keyMap.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/mapValue.mjs": "../node_modules/graphql/jsutils/mapValue.mjs",
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../jsutils/devAssert.mjs": "../node_modules/graphql/jsutils/devAssert.mjs",
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../language/tokenKind.mjs": "../node_modules/graphql/language/tokenKind.mjs",
    "../language/blockString.mjs": "../node_modules/graphql/language/blockString.mjs",
    "../language/predicates.mjs": "../node_modules/graphql/language/predicates.mjs",
    "../validation/validate.mjs": "../node_modules/graphql/validation/validate.mjs",
    "../execution/values.mjs": "../node_modules/graphql/execution/values.mjs",
    "../type/schema.mjs": "../node_modules/graphql/type/schema.mjs",
    "../type/scalars.mjs": "../node_modules/graphql/type/scalars.mjs",
    "../type/introspection.mjs": "../node_modules/graphql/type/introspection.mjs",
    "../type/directives.mjs": "../node_modules/graphql/type/directives.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "./valueFromAST.mjs": "../node_modules/graphql/utilities/valueFromAST.mjs"
  }],
  "../node_modules/graphql/utilities/buildASTSchema.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.buildASTSchema = buildASTSchema;
    exports.buildSchema = buildSchema;

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.mjs"));

    var _kinds = require("../language/kinds.mjs");

    var _parser = require("../language/parser.mjs");

    var _validate = require("../validation/validate.mjs");

    var _schema = require("../type/schema.mjs");

    var _directives = require("../type/directives.mjs");

    var _extendSchema = require("./extendSchema.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * This takes the ast of a schema document produced by the parse function in
     * src/language/parser.js.
     *
     * If no schema definition is provided, then it will look for types named Query
     * and Mutation.
     *
     * Given that AST it constructs a GraphQLSchema. The resulting schema
     * has no resolve methods, so execution will use default resolvers.
     *
     * Accepts options as a second argument:
     *
     *    - commentDescriptions:
     *        Provide true to use preceding comments as the description.
     *
     */


    function buildASTSchema(documentAST, options) {
      documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.default)(0, 'Must provide valid Document AST.');

      if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
        (0, _validate.assertValidSDL)(documentAST);
      }

      var emptySchemaConfig = {
        description: undefined,
        types: [],
        directives: [],
        extensions: undefined,
        extensionASTNodes: [],
        assumeValid: false
      };
      var config = (0, _extendSchema.extendSchemaImpl)(emptySchemaConfig, documentAST, options);

      if (config.astNode == null) {
        for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {
          var type = _config$types2[_i2];

          switch (type.name) {
            // Note: While this could make early assertions to get the correctly
            // typed values below, that would throw immediately while type system
            // validation with validateSchema() will produce more actionable results.
            case 'Query':
              config.query = type;
              break;

            case 'Mutation':
              config.mutation = type;
              break;

            case 'Subscription':
              config.subscription = type;
              break;
          }
        }
      }

      var directives = config.directives; // If specified directives were not explicitly declared, add them.

      var _loop = function _loop(_i4) {
        var stdDirective = _directives.specifiedDirectives[_i4];

        if (directives.every(function (directive) {
          return directive.name !== stdDirective.name;
        })) {
          directives.push(stdDirective);
        }
      };

      for (var _i4 = 0; _i4 < _directives.specifiedDirectives.length; _i4++) {
        _loop(_i4);
      }

      return new _schema.GraphQLSchema(config);
    }
    /**
     * A helper function to build a GraphQLSchema directly from a source
     * document.
     */


    function buildSchema(source, options) {
      var document = (0, _parser.parse)(source, {
        noLocation: options === null || options === void 0 ? void 0 : options.noLocation,
        allowLegacySDLEmptyFields: options === null || options === void 0 ? void 0 : options.allowLegacySDLEmptyFields,
        allowLegacySDLImplementsInterfaces: options === null || options === void 0 ? void 0 : options.allowLegacySDLImplementsInterfaces,
        experimentalFragmentVariables: options === null || options === void 0 ? void 0 : options.experimentalFragmentVariables
      });
      return buildASTSchema(document, {
        commentDescriptions: options === null || options === void 0 ? void 0 : options.commentDescriptions,
        assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
      });
    }
  }, {
    "../jsutils/devAssert.mjs": "../node_modules/graphql/jsutils/devAssert.mjs",
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../language/parser.mjs": "../node_modules/graphql/language/parser.mjs",
    "../validation/validate.mjs": "../node_modules/graphql/validation/validate.mjs",
    "../type/schema.mjs": "../node_modules/graphql/type/schema.mjs",
    "../type/directives.mjs": "../node_modules/graphql/type/directives.mjs",
    "./extendSchema.mjs": "../node_modules/graphql/utilities/extendSchema.mjs"
  }],
  "../node_modules/graphql/utilities/lexicographicSortSchema.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.lexicographicSortSchema = lexicographicSortSchema;

    var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _keyValMap = _interopRequireDefault(require("../jsutils/keyValMap.mjs"));

    var _schema = require("../type/schema.mjs");

    var _directives = require("../type/directives.mjs");

    var _introspection = require("../type/introspection.mjs");

    var _definition = require("../type/definition.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }
    /**
     * Sort GraphQLSchema.
     *
     * This function returns a sorted copy of the given GraphQLSchema.
     */


    function lexicographicSortSchema(schema) {
      var schemaConfig = schema.toConfig();
      var typeMap = (0, _keyValMap.default)(sortByName(schemaConfig.types), function (type) {
        return type.name;
      }, sortNamedType);
      return new _schema.GraphQLSchema(_objectSpread(_objectSpread({}, schemaConfig), {}, {
        types: (0, _objectValues.default)(typeMap),
        directives: sortByName(schemaConfig.directives).map(sortDirective),
        query: replaceMaybeType(schemaConfig.query),
        mutation: replaceMaybeType(schemaConfig.mutation),
        subscription: replaceMaybeType(schemaConfig.subscription)
      }));

      function replaceType(type) {
        if ((0, _definition.isListType)(type)) {
          // $FlowFixMe[incompatible-return]
          return new _definition.GraphQLList(replaceType(type.ofType));
        } else if ((0, _definition.isNonNullType)(type)) {
          // $FlowFixMe[incompatible-return]
          return new _definition.GraphQLNonNull(replaceType(type.ofType));
        }

        return replaceNamedType(type);
      }

      function replaceNamedType(type) {
        return typeMap[type.name];
      }

      function replaceMaybeType(maybeType) {
        return maybeType && replaceNamedType(maybeType);
      }

      function sortDirective(directive) {
        var config = directive.toConfig();
        return new _directives.GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {
          locations: sortBy(config.locations, function (x) {
            return x;
          }),
          args: sortArgs(config.args)
        }));
      }

      function sortArgs(args) {
        return sortObjMap(args, function (arg) {
          return _objectSpread(_objectSpread({}, arg), {}, {
            type: replaceType(arg.type)
          });
        });
      }

      function sortFields(fieldsMap) {
        return sortObjMap(fieldsMap, function (field) {
          return _objectSpread(_objectSpread({}, field), {}, {
            type: replaceType(field.type),
            args: sortArgs(field.args)
          });
        });
      }

      function sortInputFields(fieldsMap) {
        return sortObjMap(fieldsMap, function (field) {
          return _objectSpread(_objectSpread({}, field), {}, {
            type: replaceType(field.type)
          });
        });
      }

      function sortTypes(arr) {
        return sortByName(arr).map(replaceNamedType);
      }

      function sortNamedType(type) {
        if ((0, _definition.isScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {
          return type;
        }

        if ((0, _definition.isObjectType)(type)) {
          var config = type.toConfig();
          return new _definition.GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {
            interfaces: function interfaces() {
              return sortTypes(config.interfaces);
            },
            fields: function fields() {
              return sortFields(config.fields);
            }
          }));
        }

        if ((0, _definition.isInterfaceType)(type)) {
          var _config = type.toConfig();

          return new _definition.GraphQLInterfaceType(_objectSpread(_objectSpread({}, _config), {}, {
            interfaces: function interfaces() {
              return sortTypes(_config.interfaces);
            },
            fields: function fields() {
              return sortFields(_config.fields);
            }
          }));
        }

        if ((0, _definition.isUnionType)(type)) {
          var _config2 = type.toConfig();

          return new _definition.GraphQLUnionType(_objectSpread(_objectSpread({}, _config2), {}, {
            types: function types() {
              return sortTypes(_config2.types);
            }
          }));
        }

        if ((0, _definition.isEnumType)(type)) {
          var _config3 = type.toConfig();

          return new _definition.GraphQLEnumType(_objectSpread(_objectSpread({}, _config3), {}, {
            values: sortObjMap(_config3.values)
          }));
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


        if ((0, _definition.isInputObjectType)(type)) {
          var _config4 = type.toConfig();

          return new _definition.GraphQLInputObjectType(_objectSpread(_objectSpread({}, _config4), {}, {
            fields: function fields() {
              return sortInputFields(_config4.fields);
            }
          }));
        } // istanbul ignore next (Not reachable. All possible types have been considered)


        false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
      }
    }

    function sortObjMap(map, sortValueFn) {
      var sortedMap = Object.create(null);
      var sortedKeys = sortBy(Object.keys(map), function (x) {
        return x;
      });

      for (var _i2 = 0; _i2 < sortedKeys.length; _i2++) {
        var key = sortedKeys[_i2];
        var value = map[key];
        sortedMap[key] = sortValueFn ? sortValueFn(value) : value;
      }

      return sortedMap;
    }

    function sortByName(array) {
      return sortBy(array, function (obj) {
        return obj.name;
      });
    }

    function sortBy(array, mapToKey) {
      return array.slice().sort(function (obj1, obj2) {
        var key1 = mapToKey(obj1);
        var key2 = mapToKey(obj2);
        return key1.localeCompare(key2);
      });
    }
  }, {
    "../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../jsutils/keyValMap.mjs": "../node_modules/graphql/jsutils/keyValMap.mjs",
    "../type/schema.mjs": "../node_modules/graphql/type/schema.mjs",
    "../type/directives.mjs": "../node_modules/graphql/type/directives.mjs",
    "../type/introspection.mjs": "../node_modules/graphql/type/introspection.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs"
  }],
  "../node_modules/graphql/utilities/printSchema.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printSchema = printSchema;
    exports.printIntrospectionSchema = printIntrospectionSchema;
    exports.printType = printType;

    var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _printer = require("../language/printer.mjs");

    var _blockString = require("../language/blockString.mjs");

    var _introspection = require("../type/introspection.mjs");

    var _scalars = require("../type/scalars.mjs");

    var _directives = require("../type/directives.mjs");

    var _definition = require("../type/definition.mjs");

    var _astFromValue = require("./astFromValue.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Accepts options as a second argument:
     *
     *    - commentDescriptions:
     *        Provide true to use preceding comments as the description.
     *
     */


    function printSchema(schema, options) {
      return printFilteredSchema(schema, function (n) {
        return !(0, _directives.isSpecifiedDirective)(n);
      }, isDefinedType, options);
    }

    function printIntrospectionSchema(schema, options) {
      return printFilteredSchema(schema, _directives.isSpecifiedDirective, _introspection.isIntrospectionType, options);
    }

    function isDefinedType(type) {
      return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);
    }

    function printFilteredSchema(schema, directiveFilter, typeFilter, options) {
      var directives = schema.getDirectives().filter(directiveFilter);
      var types = (0, _objectValues.default)(schema.getTypeMap()).filter(typeFilter);
      return [printSchemaDefinition(schema)].concat(directives.map(function (directive) {
        return printDirective(directive, options);
      }), types.map(function (type) {
        return printType(type, options);
      })).filter(Boolean).join('\n\n') + '\n';
    }

    function printSchemaDefinition(schema) {
      if (schema.description == null && isSchemaOfCommonNames(schema)) {
        return;
      }

      var operationTypes = [];
      var queryType = schema.getQueryType();

      if (queryType) {
        operationTypes.push("  query: ".concat(queryType.name));
      }

      var mutationType = schema.getMutationType();

      if (mutationType) {
        operationTypes.push("  mutation: ".concat(mutationType.name));
      }

      var subscriptionType = schema.getSubscriptionType();

      if (subscriptionType) {
        operationTypes.push("  subscription: ".concat(subscriptionType.name));
      }

      return printDescription({}, schema) + "schema {\n".concat(operationTypes.join('\n'), "\n}");
    }
    /**
     * GraphQL schema define root types for each type of operation. These types are
     * the same as any other type and can be named in any manner, however there is
     * a common naming convention:
     *
     *   schema {
     *     query: Query
     *     mutation: Mutation
     *   }
     *
     * When using this naming convention, the schema description can be omitted.
     */


    function isSchemaOfCommonNames(schema) {
      var queryType = schema.getQueryType();

      if (queryType && queryType.name !== 'Query') {
        return false;
      }

      var mutationType = schema.getMutationType();

      if (mutationType && mutationType.name !== 'Mutation') {
        return false;
      }

      var subscriptionType = schema.getSubscriptionType();

      if (subscriptionType && subscriptionType.name !== 'Subscription') {
        return false;
      }

      return true;
    }

    function printType(type, options) {
      if ((0, _definition.isScalarType)(type)) {
        return printScalar(type, options);
      }

      if ((0, _definition.isObjectType)(type)) {
        return printObject(type, options);
      }

      if ((0, _definition.isInterfaceType)(type)) {
        return printInterface(type, options);
      }

      if ((0, _definition.isUnionType)(type)) {
        return printUnion(type, options);
      }

      if ((0, _definition.isEnumType)(type)) {
        return printEnum(type, options);
      } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


      if ((0, _definition.isInputObjectType)(type)) {
        return printInputObject(type, options);
      } // istanbul ignore next (Not reachable. All possible types have been considered)


      false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
    }

    function printScalar(type, options) {
      return printDescription(options, type) + "scalar ".concat(type.name) + printSpecifiedByUrl(type);
    }

    function printImplementedInterfaces(type) {
      var interfaces = type.getInterfaces();
      return interfaces.length ? ' implements ' + interfaces.map(function (i) {
        return i.name;
      }).join(' & ') : '';
    }

    function printObject(type, options) {
      return printDescription(options, type) + "type ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
    }

    function printInterface(type, options) {
      return printDescription(options, type) + "interface ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
    }

    function printUnion(type, options) {
      var types = type.getTypes();
      var possibleTypes = types.length ? ' = ' + types.join(' | ') : '';
      return printDescription(options, type) + 'union ' + type.name + possibleTypes;
    }

    function printEnum(type, options) {
      var values = type.getValues().map(function (value, i) {
        return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value.deprecationReason);
      });
      return printDescription(options, type) + "enum ".concat(type.name) + printBlock(values);
    }

    function printInputObject(type, options) {
      var fields = (0, _objectValues.default)(type.getFields()).map(function (f, i) {
        return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);
      });
      return printDescription(options, type) + "input ".concat(type.name) + printBlock(fields);
    }

    function printFields(options, type) {
      var fields = (0, _objectValues.default)(type.getFields()).map(function (f, i) {
        return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f.deprecationReason);
      });
      return printBlock(fields);
    }

    function printBlock(items) {
      return items.length !== 0 ? ' {\n' + items.join('\n') + '\n}' : '';
    }

    function printArgs(options, args) {
      var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      if (args.length === 0) {
        return '';
      } // If every arg does not have a description, print them on one line.


      if (args.every(function (arg) {
        return !arg.description;
      })) {
        return '(' + args.map(printInputValue).join(', ') + ')';
      }

      return '(\n' + args.map(function (arg, i) {
        return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);
      }).join('\n') + '\n' + indentation + ')';
    }

    function printInputValue(arg) {
      var defaultAST = (0, _astFromValue.astFromValue)(arg.defaultValue, arg.type);
      var argDecl = arg.name + ': ' + String(arg.type);

      if (defaultAST) {
        argDecl += " = ".concat((0, _printer.print)(defaultAST));
      }

      return argDecl + printDeprecated(arg.deprecationReason);
    }

    function printDirective(directive, options) {
      return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + (directive.isRepeatable ? ' repeatable' : '') + ' on ' + directive.locations.join(' | ');
    }

    function printDeprecated(reason) {
      if (reason == null) {
        return '';
      }

      var reasonAST = (0, _astFromValue.astFromValue)(reason, _scalars.GraphQLString);

      if (reasonAST && reason !== _directives.DEFAULT_DEPRECATION_REASON) {
        return ' @deprecated(reason: ' + (0, _printer.print)(reasonAST) + ')';
      }

      return ' @deprecated';
    }

    function printSpecifiedByUrl(scalar) {
      if (scalar.specifiedByUrl == null) {
        return '';
      }

      var url = scalar.specifiedByUrl;
      var urlAST = (0, _astFromValue.astFromValue)(url, _scalars.GraphQLString);
      urlAST || (0, _invariant.default)(0, 'Unexpected null value returned from `astFromValue` for specifiedByUrl');
      return ' @specifiedBy(url: ' + (0, _printer.print)(urlAST) + ')';
    }

    function printDescription(options, def) {
      var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var description = def.description;

      if (description == null) {
        return '';
      }

      if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
        return printDescriptionWithComments(description, indentation, firstInBlock);
      }

      var preferMultipleLines = description.length > 70;
      var blockString = (0, _blockString.printBlockString)(description, '', preferMultipleLines);
      var prefix = indentation && !firstInBlock ? '\n' + indentation : indentation;
      return prefix + blockString.replace(/\n/g, '\n' + indentation) + '\n';
    }

    function printDescriptionWithComments(description, indentation, firstInBlock) {
      var prefix = indentation && !firstInBlock ? '\n' : '';
      var comment = description.split('\n').map(function (line) {
        return indentation + (line !== '' ? '# ' + line : '#');
      }).join('\n');
      return prefix + comment + '\n';
    }
  }, {
    "../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../language/printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "../language/blockString.mjs": "../node_modules/graphql/language/blockString.mjs",
    "../type/introspection.mjs": "../node_modules/graphql/type/introspection.mjs",
    "../type/scalars.mjs": "../node_modules/graphql/type/scalars.mjs",
    "../type/directives.mjs": "../node_modules/graphql/type/directives.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "./astFromValue.mjs": "../node_modules/graphql/utilities/astFromValue.mjs"
  }],
  "../node_modules/graphql/utilities/concatAST.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.concatAST = concatAST;
    /**
     * Provided a collection of ASTs, presumably each from different files,
     * concatenate the ASTs together into batched AST, useful for validating many
     * GraphQL source files which together represent one conceptual application.
     */

    function concatAST(documents) {
      var definitions = [];

      for (var _i2 = 0; _i2 < documents.length; _i2++) {
        var doc = documents[_i2];
        definitions = definitions.concat(doc.definitions);
      }

      return {
        kind: 'Document',
        definitions: definitions
      };
    }
  }, {}],
  "../node_modules/graphql/utilities/separateOperations.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.separateOperations = separateOperations;

    var _kinds = require("../language/kinds.mjs");

    var _visitor = require("../language/visitor.mjs");
    /**
     * separateOperations accepts a single AST document which may contain many
     * operations and fragments and returns a collection of AST documents each of
     * which contains a single operation as well the fragment definitions it
     * refers to.
     */


    function separateOperations(documentAST) {
      var operations = [];
      var depGraph = Object.create(null);
      var fromName; // Populate metadata and build a dependency graph.

      (0, _visitor.visit)(documentAST, {
        OperationDefinition: function OperationDefinition(node) {
          fromName = opName(node);
          operations.push(node);
        },
        FragmentDefinition: function FragmentDefinition(node) {
          fromName = node.name.value;
        },
        FragmentSpread: function FragmentSpread(node) {
          var toName = node.name.value;
          var dependents = depGraph[fromName];

          if (dependents === undefined) {
            dependents = depGraph[fromName] = Object.create(null);
          }

          dependents[toName] = true;
        }
      }); // For each operation, produce a new synthesized AST which includes only what
      // is necessary for completing that operation.

      var separatedDocumentASTs = Object.create(null);

      var _loop = function _loop(_i2) {
        var operation = operations[_i2];
        var operationName = opName(operation);
        var dependencies = Object.create(null);
        collectTransitiveDependencies(dependencies, depGraph, operationName); // The list of definition nodes to be included for this operation, sorted
        // to retain the same order as the original document.

        separatedDocumentASTs[operationName] = {
          kind: _kinds.Kind.DOCUMENT,
          definitions: documentAST.definitions.filter(function (node) {
            return node === operation || node.kind === _kinds.Kind.FRAGMENT_DEFINITION && dependencies[node.name.value];
          })
        };
      };

      for (var _i2 = 0; _i2 < operations.length; _i2++) {
        _loop(_i2);
      }

      return separatedDocumentASTs;
    } // Provides the empty string for anonymous operations.


    function opName(operation) {
      return operation.name ? operation.name.value : '';
    } // From a dependency graph, collects a list of transitive dependencies by
    // recursing through a dependency graph.


    function collectTransitiveDependencies(collected, depGraph, fromName) {
      var immediateDeps = depGraph[fromName];

      if (immediateDeps) {
        for (var _i4 = 0, _Object$keys2 = Object.keys(immediateDeps); _i4 < _Object$keys2.length; _i4++) {
          var toName = _Object$keys2[_i4];

          if (!collected[toName]) {
            collected[toName] = true;
            collectTransitiveDependencies(collected, depGraph, toName);
          }
        }
      }
    }
  }, {
    "../language/kinds.mjs": "../node_modules/graphql/language/kinds.mjs",
    "../language/visitor.mjs": "../node_modules/graphql/language/visitor.mjs"
  }],
  "../node_modules/graphql/utilities/stripIgnoredCharacters.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.stripIgnoredCharacters = stripIgnoredCharacters;

    var _source = require("../language/source.mjs");

    var _tokenKind = require("../language/tokenKind.mjs");

    var _lexer = require("../language/lexer.mjs");

    var _blockString = require("../language/blockString.mjs");
    /**
     * Strips characters that are not significant to the validity or execution
     * of a GraphQL document:
     *   - UnicodeBOM
     *   - WhiteSpace
     *   - LineTerminator
     *   - Comment
     *   - Comma
     *   - BlockString indentation
     *
     * Note: It is required to have a delimiter character between neighboring
     * non-punctuator tokens and this function always uses single space as delimiter.
     *
     * It is guaranteed that both input and output documents if parsed would result
     * in the exact same AST except for nodes location.
     *
     * Warning: It is guaranteed that this function will always produce stable results.
     * However, it's not guaranteed that it will stay the same between different
     * releases due to bugfixes or changes in the GraphQL specification.
     *
     * Query example:
     *
     * query SomeQuery($foo: String!, $bar: String) {
     *   someField(foo: $foo, bar: $bar) {
     *     a
     *     b {
     *       c
     *       d
     *     }
     *   }
     * }
     *
     * Becomes:
     *
     * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}
     *
     * SDL example:
     *
     * """
     * Type description
     * """
     * type Foo {
     *   """
     *   Field description
     *   """
     *   bar: String
     * }
     *
     * Becomes:
     *
     * """Type description""" type Foo{"""Field description""" bar:String}
     */


    function stripIgnoredCharacters(source) {
      var sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
      var body = sourceObj.body;
      var lexer = new _lexer.Lexer(sourceObj);
      var strippedBody = '';
      var wasLastAddedTokenNonPunctuator = false;

      while (lexer.advance().kind !== _tokenKind.TokenKind.EOF) {
        var currentToken = lexer.token;
        var tokenKind = currentToken.kind;
        /**
         * Every two non-punctuator tokens should have space between them.
         * Also prevent case of non-punctuator token following by spread resulting
         * in invalid token (e.g. `1...` is invalid Float token).
         */

        var isNonPunctuator = !(0, _lexer.isPunctuatorTokenKind)(currentToken.kind);

        if (wasLastAddedTokenNonPunctuator) {
          if (isNonPunctuator || currentToken.kind === _tokenKind.TokenKind.SPREAD) {
            strippedBody += ' ';
          }
        }

        var tokenBody = body.slice(currentToken.start, currentToken.end);

        if (tokenKind === _tokenKind.TokenKind.BLOCK_STRING) {
          strippedBody += dedentBlockString(tokenBody);
        } else {
          strippedBody += tokenBody;
        }

        wasLastAddedTokenNonPunctuator = isNonPunctuator;
      }

      return strippedBody;
    }

    function dedentBlockString(blockStr) {
      // skip leading and trailing triple quotations
      var rawStr = blockStr.slice(3, -3);
      var body = (0, _blockString.dedentBlockStringValue)(rawStr);

      if ((0, _blockString.getBlockStringIndentation)(body) > 0) {
        body = '\n' + body;
      }

      var lastChar = body[body.length - 1];
      var hasTrailingQuote = lastChar === '"' && body.slice(-4) !== '\\"""';

      if (hasTrailingQuote || lastChar === '\\') {
        body += '\n';
      }

      return '"""' + body + '"""';
    }
  }, {
    "../language/source.mjs": "../node_modules/graphql/language/source.mjs",
    "../language/tokenKind.mjs": "../node_modules/graphql/language/tokenKind.mjs",
    "../language/lexer.mjs": "../node_modules/graphql/language/lexer.mjs",
    "../language/blockString.mjs": "../node_modules/graphql/language/blockString.mjs"
  }],
  "../node_modules/graphql/utilities/findBreakingChanges.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.findBreakingChanges = findBreakingChanges;
    exports.findDangerousChanges = findDangerousChanges;
    exports.DangerousChangeType = exports.BreakingChangeType = void 0;

    var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.mjs"));

    var _keyMap = _interopRequireDefault(require("../jsutils/keyMap.mjs"));

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.mjs"));

    var _invariant = _interopRequireDefault(require("../jsutils/invariant.mjs"));

    var _printer = require("../language/printer.mjs");

    var _visitor = require("../language/visitor.mjs");

    var _scalars = require("../type/scalars.mjs");

    var _definition = require("../type/definition.mjs");

    var _astFromValue = require("./astFromValue.mjs");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    var BreakingChangeType = Object.freeze({
      TYPE_REMOVED: 'TYPE_REMOVED',
      TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',
      TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',
      VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',
      REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',
      IMPLEMENTED_INTERFACE_REMOVED: 'IMPLEMENTED_INTERFACE_REMOVED',
      FIELD_REMOVED: 'FIELD_REMOVED',
      FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',
      REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',
      ARG_REMOVED: 'ARG_REMOVED',
      ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',
      DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',
      DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',
      REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',
      DIRECTIVE_REPEATABLE_REMOVED: 'DIRECTIVE_REPEATABLE_REMOVED',
      DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'
    });
    exports.BreakingChangeType = BreakingChangeType;
    var DangerousChangeType = Object.freeze({
      VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',
      TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',
      OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',
      OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',
      IMPLEMENTED_INTERFACE_ADDED: 'IMPLEMENTED_INTERFACE_ADDED',
      ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'
    });
    /**
     * Given two schemas, returns an Array containing descriptions of all the types
     * of breaking changes covered by the other functions down below.
     */

    exports.DangerousChangeType = DangerousChangeType;

    function findBreakingChanges(oldSchema, newSchema) {
      var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {
        return change.type in BreakingChangeType;
      });
      return breakingChanges;
    }
    /**
     * Given two schemas, returns an Array containing descriptions of all the types
     * of potentially dangerous changes covered by the other functions down below.
     */


    function findDangerousChanges(oldSchema, newSchema) {
      var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {
        return change.type in DangerousChangeType;
      });
      return dangerousChanges;
    }

    function findSchemaChanges(oldSchema, newSchema) {
      return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));
    }

    function findDirectiveChanges(oldSchema, newSchema) {
      var schemaChanges = [];
      var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());

      for (var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++) {
        var oldDirective = _directivesDiff$remov2[_i2];
        schemaChanges.push({
          type: BreakingChangeType.DIRECTIVE_REMOVED,
          description: "".concat(oldDirective.name, " was removed.")
        });
      }

      for (var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++) {
        var _ref2 = _directivesDiff$persi2[_i4];
        var _oldDirective = _ref2[0];
        var newDirective = _ref2[1];
        var argsDiff = diff(_oldDirective.args, newDirective.args);

        for (var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++) {
          var newArg = _argsDiff$added2[_i6];

          if ((0, _definition.isRequiredArgument)(newArg)) {
            schemaChanges.push({
              type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
              description: "A required arg ".concat(newArg.name, " on directive ").concat(_oldDirective.name, " was added.")
            });
          }
        }

        for (var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++) {
          var oldArg = _argsDiff$removed2[_i8];
          schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
            description: "".concat(oldArg.name, " was removed from ").concat(_oldDirective.name, ".")
          });
        }

        if (_oldDirective.isRepeatable && !newDirective.isRepeatable) {
          schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
            description: "Repeatable flag was removed from ".concat(_oldDirective.name, ".")
          });
        }

        for (var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++) {
          var location = _oldDirective$locatio2[_i10];

          if (newDirective.locations.indexOf(location) === -1) {
            schemaChanges.push({
              type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
              description: "".concat(location, " was removed from ").concat(_oldDirective.name, ".")
            });
          }
        }
      }

      return schemaChanges;
    }

    function findTypeChanges(oldSchema, newSchema) {
      var schemaChanges = [];
      var typesDiff = diff((0, _objectValues.default)(oldSchema.getTypeMap()), (0, _objectValues.default)(newSchema.getTypeMap()));

      for (var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++) {
        var oldType = _typesDiff$removed2[_i12];
        schemaChanges.push({
          type: BreakingChangeType.TYPE_REMOVED,
          description: (0, _scalars.isSpecifiedScalarType)(oldType) ? "Standard scalar ".concat(oldType.name, " was removed because it is not referenced anymore.") : "".concat(oldType.name, " was removed.")
        });
      }

      for (var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++) {
        var _ref4 = _typesDiff$persisted2[_i14];
        var _oldType = _ref4[0];
        var newType = _ref4[1];

        if ((0, _definition.isEnumType)(_oldType) && (0, _definition.isEnumType)(newType)) {
          schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));
        } else if ((0, _definition.isUnionType)(_oldType) && (0, _definition.isUnionType)(newType)) {
          schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));
        } else if ((0, _definition.isInputObjectType)(_oldType) && (0, _definition.isInputObjectType)(newType)) {
          schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));
        } else if ((0, _definition.isObjectType)(_oldType) && (0, _definition.isObjectType)(newType)) {
          schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
        } else if ((0, _definition.isInterfaceType)(_oldType) && (0, _definition.isInterfaceType)(newType)) {
          schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
        } else if (_oldType.constructor !== newType.constructor) {
          schemaChanges.push({
            type: BreakingChangeType.TYPE_CHANGED_KIND,
            description: "".concat(_oldType.name, " changed from ") + "".concat(typeKindName(_oldType), " to ").concat(typeKindName(newType), ".")
          });
        }
      }

      return schemaChanges;
    }

    function findInputObjectTypeChanges(oldType, newType) {
      var schemaChanges = [];
      var fieldsDiff = diff((0, _objectValues.default)(oldType.getFields()), (0, _objectValues.default)(newType.getFields()));

      for (var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++) {
        var newField = _fieldsDiff$added2[_i16];

        if ((0, _definition.isRequiredInputField)(newField)) {
          schemaChanges.push({
            type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
            description: "A required field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
          });
        } else {
          schemaChanges.push({
            type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
            description: "An optional field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
          });
        }
      }

      for (var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++) {
        var oldField = _fieldsDiff$removed2[_i18];
        schemaChanges.push({
          type: BreakingChangeType.FIELD_REMOVED,
          description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
        });
      }

      for (var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++) {
        var _ref6 = _fieldsDiff$persisted2[_i20];
        var _oldField = _ref6[0];
        var _newField = _ref6[1];
        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);

        if (!isSafe) {
          schemaChanges.push({
            type: BreakingChangeType.FIELD_CHANGED_KIND,
            description: "".concat(oldType.name, ".").concat(_oldField.name, " changed type from ") + "".concat(String(_oldField.type), " to ").concat(String(_newField.type), ".")
          });
        }
      }

      return schemaChanges;
    }

    function findUnionTypeChanges(oldType, newType) {
      var schemaChanges = [];
      var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());

      for (var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++) {
        var newPossibleType = _possibleTypesDiff$ad2[_i22];
        schemaChanges.push({
          type: DangerousChangeType.TYPE_ADDED_TO_UNION,
          description: "".concat(newPossibleType.name, " was added to union type ").concat(oldType.name, ".")
        });
      }

      for (var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++) {
        var oldPossibleType = _possibleTypesDiff$re2[_i24];
        schemaChanges.push({
          type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
          description: "".concat(oldPossibleType.name, " was removed from union type ").concat(oldType.name, ".")
        });
      }

      return schemaChanges;
    }

    function findEnumTypeChanges(oldType, newType) {
      var schemaChanges = [];
      var valuesDiff = diff(oldType.getValues(), newType.getValues());

      for (var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++) {
        var newValue = _valuesDiff$added2[_i26];
        schemaChanges.push({
          type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
          description: "".concat(newValue.name, " was added to enum type ").concat(oldType.name, ".")
        });
      }

      for (var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++) {
        var oldValue = _valuesDiff$removed2[_i28];
        schemaChanges.push({
          type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
          description: "".concat(oldValue.name, " was removed from enum type ").concat(oldType.name, ".")
        });
      }

      return schemaChanges;
    }

    function findImplementedInterfacesChanges(oldType, newType) {
      var schemaChanges = [];
      var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());

      for (var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++) {
        var newInterface = _interfacesDiff$added2[_i30];
        schemaChanges.push({
          type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
          description: "".concat(newInterface.name, " added to interfaces implemented by ").concat(oldType.name, ".")
        });
      }

      for (var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++) {
        var oldInterface = _interfacesDiff$remov2[_i32];
        schemaChanges.push({
          type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
          description: "".concat(oldType.name, " no longer implements interface ").concat(oldInterface.name, ".")
        });
      }

      return schemaChanges;
    }

    function findFieldChanges(oldType, newType) {
      var schemaChanges = [];
      var fieldsDiff = diff((0, _objectValues.default)(oldType.getFields()), (0, _objectValues.default)(newType.getFields()));

      for (var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++) {
        var oldField = _fieldsDiff$removed4[_i34];
        schemaChanges.push({
          type: BreakingChangeType.FIELD_REMOVED,
          description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
        });
      }

      for (var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++) {
        var _ref8 = _fieldsDiff$persisted4[_i36];
        var _oldField2 = _ref8[0];
        var newField = _ref8[1];
        schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));
        var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);

        if (!isSafe) {
          schemaChanges.push({
            type: BreakingChangeType.FIELD_CHANGED_KIND,
            description: "".concat(oldType.name, ".").concat(_oldField2.name, " changed type from ") + "".concat(String(_oldField2.type), " to ").concat(String(newField.type), ".")
          });
        }
      }

      return schemaChanges;
    }

    function findArgChanges(oldType, oldField, newField) {
      var schemaChanges = [];
      var argsDiff = diff(oldField.args, newField.args);

      for (var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++) {
        var oldArg = _argsDiff$removed4[_i38];
        schemaChanges.push({
          type: BreakingChangeType.ARG_REMOVED,
          description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(oldArg.name, " was removed.")
        });
      }

      for (var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++) {
        var _ref10 = _argsDiff$persisted2[_i40];
        var _oldArg = _ref10[0];
        var newArg = _ref10[1];
        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);

        if (!isSafe) {
          schemaChanges.push({
            type: BreakingChangeType.ARG_CHANGED_KIND,
            description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed type from ") + "".concat(String(_oldArg.type), " to ").concat(String(newArg.type), ".")
          });
        } else if (_oldArg.defaultValue !== undefined) {
          if (newArg.defaultValue === undefined) {
            schemaChanges.push({
              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
              description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " defaultValue was removed.")
            });
          } else {
            // Since we looking only for client's observable changes we should
            // compare default values in the same representation as they are
            // represented inside introspection.
            var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);
            var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);

            if (oldValueStr !== newValueStr) {
              schemaChanges.push({
                type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed defaultValue from ").concat(oldValueStr, " to ").concat(newValueStr, ".")
              });
            }
          }
        }
      }

      for (var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++) {
        var _newArg = _argsDiff$added4[_i42];

        if ((0, _definition.isRequiredArgument)(_newArg)) {
          schemaChanges.push({
            type: BreakingChangeType.REQUIRED_ARG_ADDED,
            description: "A required arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
          });
        } else {
          schemaChanges.push({
            type: DangerousChangeType.OPTIONAL_ARG_ADDED,
            description: "An optional arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
          });
        }
      }

      return schemaChanges;
    }

    function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
      if ((0, _definition.isListType)(oldType)) {
        return (// if they're both lists, make sure the underlying types are compatible
          (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe
          (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
        );
      }

      if ((0, _definition.isNonNullType)(oldType)) {
        // if they're both non-null, make sure the underlying types are compatible
        return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
      }

      return (// if they're both named types, see if their names are equivalent
        (0, _definition.isNamedType)(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe
        (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
      );
    }

    function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
      if ((0, _definition.isListType)(oldType)) {
        // if they're both lists, make sure the underlying types are compatible
        return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
      }

      if ((0, _definition.isNonNullType)(oldType)) {
        return (// if they're both non-null, make sure the underlying types are
          // compatible
          (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe
          !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)
        );
      } // if they're both named types, see if their names are equivalent


      return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;
    }

    function typeKindName(type) {
      if ((0, _definition.isScalarType)(type)) {
        return 'a Scalar type';
      }

      if ((0, _definition.isObjectType)(type)) {
        return 'an Object type';
      }

      if ((0, _definition.isInterfaceType)(type)) {
        return 'an Interface type';
      }

      if ((0, _definition.isUnionType)(type)) {
        return 'a Union type';
      }

      if ((0, _definition.isEnumType)(type)) {
        return 'an Enum type';
      } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


      if ((0, _definition.isInputObjectType)(type)) {
        return 'an Input type';
      } // istanbul ignore next (Not reachable. All possible named types have been considered)


      false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
    }

    function stringifyValue(value, type) {
      var ast = (0, _astFromValue.astFromValue)(value, type);
      ast != null || (0, _invariant.default)(0);
      var sortedAST = (0, _visitor.visit)(ast, {
        ObjectValue: function ObjectValue(objectNode) {
          var fields = [].concat(objectNode.fields).sort(function (fieldA, fieldB) {
            return fieldA.name.value.localeCompare(fieldB.name.value);
          });
          return _objectSpread(_objectSpread({}, objectNode), {}, {
            fields: fields
          });
        }
      });
      return (0, _printer.print)(sortedAST);
    }

    function diff(oldArray, newArray) {
      var added = [];
      var removed = [];
      var persisted = [];
      var oldMap = (0, _keyMap.default)(oldArray, function (_ref11) {
        var name = _ref11.name;
        return name;
      });
      var newMap = (0, _keyMap.default)(newArray, function (_ref12) {
        var name = _ref12.name;
        return name;
      });

      for (var _i44 = 0; _i44 < oldArray.length; _i44++) {
        var oldItem = oldArray[_i44];
        var newItem = newMap[oldItem.name];

        if (newItem === undefined) {
          removed.push(oldItem);
        } else {
          persisted.push([oldItem, newItem]);
        }
      }

      for (var _i46 = 0; _i46 < newArray.length; _i46++) {
        var _newItem = newArray[_i46];

        if (oldMap[_newItem.name] === undefined) {
          added.push(_newItem);
        }
      }

      return {
        added: added,
        persisted: persisted,
        removed: removed
      };
    }
  }, {
    "../polyfills/objectValues.mjs": "../node_modules/graphql/polyfills/objectValues.mjs",
    "../jsutils/keyMap.mjs": "../node_modules/graphql/jsutils/keyMap.mjs",
    "../jsutils/inspect.mjs": "../node_modules/graphql/jsutils/inspect.mjs",
    "../jsutils/invariant.mjs": "../node_modules/graphql/jsutils/invariant.mjs",
    "../language/printer.mjs": "../node_modules/graphql/language/printer.mjs",
    "../language/visitor.mjs": "../node_modules/graphql/language/visitor.mjs",
    "../type/scalars.mjs": "../node_modules/graphql/type/scalars.mjs",
    "../type/definition.mjs": "../node_modules/graphql/type/definition.mjs",
    "./astFromValue.mjs": "../node_modules/graphql/utilities/astFromValue.mjs"
  }],
  "../node_modules/graphql/utilities/findDeprecatedUsages.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.findDeprecatedUsages = findDeprecatedUsages;

    var _validate = require("../validation/validate.mjs");

    var _NoDeprecatedCustomRule = require("../validation/rules/custom/NoDeprecatedCustomRule.mjs");
    /**
     * A validation rule which reports deprecated usages.
     *
     * Returns a list of GraphQLError instances describing each deprecated use.
     *
     * @deprecated Please use `validate` with `NoDeprecatedCustomRule` instead:
     *
     * ```
     * import { validate, NoDeprecatedCustomRule } from 'graphql'
     *
     * const errors = validate(schema, document, [NoDeprecatedCustomRule])
     * ```
     */


    function findDeprecatedUsages(schema, ast) {
      return (0, _validate.validate)(schema, ast, [_NoDeprecatedCustomRule.NoDeprecatedCustomRule]);
    }
  }, {
    "../validation/validate.mjs": "../node_modules/graphql/validation/validate.mjs",
    "../validation/rules/custom/NoDeprecatedCustomRule.mjs": "../node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs"
  }],
  "../node_modules/graphql/utilities/index.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "getIntrospectionQuery", {
      enumerable: true,
      get: function get() {
        return _getIntrospectionQuery.getIntrospectionQuery;
      }
    });
    Object.defineProperty(exports, "getOperationAST", {
      enumerable: true,
      get: function get() {
        return _getOperationAST.getOperationAST;
      }
    });
    Object.defineProperty(exports, "getOperationRootType", {
      enumerable: true,
      get: function get() {
        return _getOperationRootType.getOperationRootType;
      }
    });
    Object.defineProperty(exports, "introspectionFromSchema", {
      enumerable: true,
      get: function get() {
        return _introspectionFromSchema.introspectionFromSchema;
      }
    });
    Object.defineProperty(exports, "buildClientSchema", {
      enumerable: true,
      get: function get() {
        return _buildClientSchema.buildClientSchema;
      }
    });
    Object.defineProperty(exports, "buildASTSchema", {
      enumerable: true,
      get: function get() {
        return _buildASTSchema.buildASTSchema;
      }
    });
    Object.defineProperty(exports, "buildSchema", {
      enumerable: true,
      get: function get() {
        return _buildASTSchema.buildSchema;
      }
    });
    Object.defineProperty(exports, "extendSchema", {
      enumerable: true,
      get: function get() {
        return _extendSchema.extendSchema;
      }
    });
    Object.defineProperty(exports, "getDescription", {
      enumerable: true,
      get: function get() {
        return _extendSchema.getDescription;
      }
    });
    Object.defineProperty(exports, "lexicographicSortSchema", {
      enumerable: true,
      get: function get() {
        return _lexicographicSortSchema.lexicographicSortSchema;
      }
    });
    Object.defineProperty(exports, "printSchema", {
      enumerable: true,
      get: function get() {
        return _printSchema.printSchema;
      }
    });
    Object.defineProperty(exports, "printType", {
      enumerable: true,
      get: function get() {
        return _printSchema.printType;
      }
    });
    Object.defineProperty(exports, "printIntrospectionSchema", {
      enumerable: true,
      get: function get() {
        return _printSchema.printIntrospectionSchema;
      }
    });
    Object.defineProperty(exports, "typeFromAST", {
      enumerable: true,
      get: function get() {
        return _typeFromAST.typeFromAST;
      }
    });
    Object.defineProperty(exports, "valueFromAST", {
      enumerable: true,
      get: function get() {
        return _valueFromAST.valueFromAST;
      }
    });
    Object.defineProperty(exports, "valueFromASTUntyped", {
      enumerable: true,
      get: function get() {
        return _valueFromASTUntyped.valueFromASTUntyped;
      }
    });
    Object.defineProperty(exports, "astFromValue", {
      enumerable: true,
      get: function get() {
        return _astFromValue.astFromValue;
      }
    });
    Object.defineProperty(exports, "TypeInfo", {
      enumerable: true,
      get: function get() {
        return _TypeInfo.TypeInfo;
      }
    });
    Object.defineProperty(exports, "visitWithTypeInfo", {
      enumerable: true,
      get: function get() {
        return _TypeInfo.visitWithTypeInfo;
      }
    });
    Object.defineProperty(exports, "coerceInputValue", {
      enumerable: true,
      get: function get() {
        return _coerceInputValue.coerceInputValue;
      }
    });
    Object.defineProperty(exports, "concatAST", {
      enumerable: true,
      get: function get() {
        return _concatAST.concatAST;
      }
    });
    Object.defineProperty(exports, "separateOperations", {
      enumerable: true,
      get: function get() {
        return _separateOperations.separateOperations;
      }
    });
    Object.defineProperty(exports, "stripIgnoredCharacters", {
      enumerable: true,
      get: function get() {
        return _stripIgnoredCharacters.stripIgnoredCharacters;
      }
    });
    Object.defineProperty(exports, "isEqualType", {
      enumerable: true,
      get: function get() {
        return _typeComparators.isEqualType;
      }
    });
    Object.defineProperty(exports, "isTypeSubTypeOf", {
      enumerable: true,
      get: function get() {
        return _typeComparators.isTypeSubTypeOf;
      }
    });
    Object.defineProperty(exports, "doTypesOverlap", {
      enumerable: true,
      get: function get() {
        return _typeComparators.doTypesOverlap;
      }
    });
    Object.defineProperty(exports, "assertValidName", {
      enumerable: true,
      get: function get() {
        return _assertValidName.assertValidName;
      }
    });
    Object.defineProperty(exports, "isValidNameError", {
      enumerable: true,
      get: function get() {
        return _assertValidName.isValidNameError;
      }
    });
    Object.defineProperty(exports, "BreakingChangeType", {
      enumerable: true,
      get: function get() {
        return _findBreakingChanges.BreakingChangeType;
      }
    });
    Object.defineProperty(exports, "DangerousChangeType", {
      enumerable: true,
      get: function get() {
        return _findBreakingChanges.DangerousChangeType;
      }
    });
    Object.defineProperty(exports, "findBreakingChanges", {
      enumerable: true,
      get: function get() {
        return _findBreakingChanges.findBreakingChanges;
      }
    });
    Object.defineProperty(exports, "findDangerousChanges", {
      enumerable: true,
      get: function get() {
        return _findBreakingChanges.findDangerousChanges;
      }
    });
    Object.defineProperty(exports, "findDeprecatedUsages", {
      enumerable: true,
      get: function get() {
        return _findDeprecatedUsages.findDeprecatedUsages;
      }
    });

    var _getIntrospectionQuery = require("./getIntrospectionQuery.mjs");

    var _getOperationAST = require("./getOperationAST.mjs");

    var _getOperationRootType = require("./getOperationRootType.mjs");

    var _introspectionFromSchema = require("./introspectionFromSchema.mjs");

    var _buildClientSchema = require("./buildClientSchema.mjs");

    var _buildASTSchema = require("./buildASTSchema.mjs");

    var _extendSchema = require("./extendSchema.mjs");

    var _lexicographicSortSchema = require("./lexicographicSortSchema.mjs");

    var _printSchema = require("./printSchema.mjs");

    var _typeFromAST = require("./typeFromAST.mjs");

    var _valueFromAST = require("./valueFromAST.mjs");

    var _valueFromASTUntyped = require("./valueFromASTUntyped.mjs");

    var _astFromValue = require("./astFromValue.mjs");

    var _TypeInfo = require("./TypeInfo.mjs");

    var _coerceInputValue = require("./coerceInputValue.mjs");

    var _concatAST = require("./concatAST.mjs");

    var _separateOperations = require("./separateOperations.mjs");

    var _stripIgnoredCharacters = require("./stripIgnoredCharacters.mjs");

    var _typeComparators = require("./typeComparators.mjs");

    var _assertValidName = require("./assertValidName.mjs");

    var _findBreakingChanges = require("./findBreakingChanges.mjs");

    var _findDeprecatedUsages = require("./findDeprecatedUsages.mjs");
  }, {
    "./getIntrospectionQuery.mjs": "../node_modules/graphql/utilities/getIntrospectionQuery.mjs",
    "./getOperationAST.mjs": "../node_modules/graphql/utilities/getOperationAST.mjs",
    "./getOperationRootType.mjs": "../node_modules/graphql/utilities/getOperationRootType.mjs",
    "./introspectionFromSchema.mjs": "../node_modules/graphql/utilities/introspectionFromSchema.mjs",
    "./buildClientSchema.mjs": "../node_modules/graphql/utilities/buildClientSchema.mjs",
    "./buildASTSchema.mjs": "../node_modules/graphql/utilities/buildASTSchema.mjs",
    "./extendSchema.mjs": "../node_modules/graphql/utilities/extendSchema.mjs",
    "./lexicographicSortSchema.mjs": "../node_modules/graphql/utilities/lexicographicSortSchema.mjs",
    "./printSchema.mjs": "../node_modules/graphql/utilities/printSchema.mjs",
    "./typeFromAST.mjs": "../node_modules/graphql/utilities/typeFromAST.mjs",
    "./valueFromAST.mjs": "../node_modules/graphql/utilities/valueFromAST.mjs",
    "./valueFromASTUntyped.mjs": "../node_modules/graphql/utilities/valueFromASTUntyped.mjs",
    "./astFromValue.mjs": "../node_modules/graphql/utilities/astFromValue.mjs",
    "./TypeInfo.mjs": "../node_modules/graphql/utilities/TypeInfo.mjs",
    "./coerceInputValue.mjs": "../node_modules/graphql/utilities/coerceInputValue.mjs",
    "./concatAST.mjs": "../node_modules/graphql/utilities/concatAST.mjs",
    "./separateOperations.mjs": "../node_modules/graphql/utilities/separateOperations.mjs",
    "./stripIgnoredCharacters.mjs": "../node_modules/graphql/utilities/stripIgnoredCharacters.mjs",
    "./typeComparators.mjs": "../node_modules/graphql/utilities/typeComparators.mjs",
    "./assertValidName.mjs": "../node_modules/graphql/utilities/assertValidName.mjs",
    "./findBreakingChanges.mjs": "../node_modules/graphql/utilities/findBreakingChanges.mjs",
    "./findDeprecatedUsages.mjs": "../node_modules/graphql/utilities/findDeprecatedUsages.mjs"
  }],
  "../node_modules/graphql/index.mjs": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function get() {
        return _version.version;
      }
    });
    Object.defineProperty(exports, "versionInfo", {
      enumerable: true,
      get: function get() {
        return _version.versionInfo;
      }
    });
    Object.defineProperty(exports, "graphql", {
      enumerable: true,
      get: function get() {
        return _graphql.graphql;
      }
    });
    Object.defineProperty(exports, "graphqlSync", {
      enumerable: true,
      get: function get() {
        return _graphql.graphqlSync;
      }
    });
    Object.defineProperty(exports, "GraphQLSchema", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLSchema;
      }
    });
    Object.defineProperty(exports, "GraphQLDirective", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLScalarType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLScalarType;
      }
    });
    Object.defineProperty(exports, "GraphQLObjectType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLInterfaceType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLInterfaceType;
      }
    });
    Object.defineProperty(exports, "GraphQLUnionType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLUnionType;
      }
    });
    Object.defineProperty(exports, "GraphQLEnumType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLEnumType;
      }
    });
    Object.defineProperty(exports, "GraphQLInputObjectType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLInputObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLList", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLList;
      }
    });
    Object.defineProperty(exports, "GraphQLNonNull", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLNonNull;
      }
    });
    Object.defineProperty(exports, "specifiedScalarTypes", {
      enumerable: true,
      get: function get() {
        return _index.specifiedScalarTypes;
      }
    });
    Object.defineProperty(exports, "GraphQLInt", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLInt;
      }
    });
    Object.defineProperty(exports, "GraphQLFloat", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLFloat;
      }
    });
    Object.defineProperty(exports, "GraphQLString", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLString;
      }
    });
    Object.defineProperty(exports, "GraphQLBoolean", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLBoolean;
      }
    });
    Object.defineProperty(exports, "GraphQLID", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLID;
      }
    });
    Object.defineProperty(exports, "specifiedDirectives", {
      enumerable: true,
      get: function get() {
        return _index.specifiedDirectives;
      }
    });
    Object.defineProperty(exports, "GraphQLIncludeDirective", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLIncludeDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLSkipDirective", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLSkipDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLDeprecatedDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLSpecifiedByDirective;
      }
    });
    Object.defineProperty(exports, "TypeKind", {
      enumerable: true,
      get: function get() {
        return _index.TypeKind;
      }
    });
    Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
      enumerable: true,
      get: function get() {
        return _index.DEFAULT_DEPRECATION_REASON;
      }
    });
    Object.defineProperty(exports, "introspectionTypes", {
      enumerable: true,
      get: function get() {
        return _index.introspectionTypes;
      }
    });
    Object.defineProperty(exports, "__Schema", {
      enumerable: true,
      get: function get() {
        return _index.__Schema;
      }
    });
    Object.defineProperty(exports, "__Directive", {
      enumerable: true,
      get: function get() {
        return _index.__Directive;
      }
    });
    Object.defineProperty(exports, "__DirectiveLocation", {
      enumerable: true,
      get: function get() {
        return _index.__DirectiveLocation;
      }
    });
    Object.defineProperty(exports, "__Type", {
      enumerable: true,
      get: function get() {
        return _index.__Type;
      }
    });
    Object.defineProperty(exports, "__Field", {
      enumerable: true,
      get: function get() {
        return _index.__Field;
      }
    });
    Object.defineProperty(exports, "__InputValue", {
      enumerable: true,
      get: function get() {
        return _index.__InputValue;
      }
    });
    Object.defineProperty(exports, "__EnumValue", {
      enumerable: true,
      get: function get() {
        return _index.__EnumValue;
      }
    });
    Object.defineProperty(exports, "__TypeKind", {
      enumerable: true,
      get: function get() {
        return _index.__TypeKind;
      }
    });
    Object.defineProperty(exports, "SchemaMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _index.SchemaMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "TypeMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _index.TypeMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "TypeNameMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _index.TypeNameMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "isSchema", {
      enumerable: true,
      get: function get() {
        return _index.isSchema;
      }
    });
    Object.defineProperty(exports, "isDirective", {
      enumerable: true,
      get: function get() {
        return _index.isDirective;
      }
    });
    Object.defineProperty(exports, "isType", {
      enumerable: true,
      get: function get() {
        return _index.isType;
      }
    });
    Object.defineProperty(exports, "isScalarType", {
      enumerable: true,
      get: function get() {
        return _index.isScalarType;
      }
    });
    Object.defineProperty(exports, "isObjectType", {
      enumerable: true,
      get: function get() {
        return _index.isObjectType;
      }
    });
    Object.defineProperty(exports, "isInterfaceType", {
      enumerable: true,
      get: function get() {
        return _index.isInterfaceType;
      }
    });
    Object.defineProperty(exports, "isUnionType", {
      enumerable: true,
      get: function get() {
        return _index.isUnionType;
      }
    });
    Object.defineProperty(exports, "isEnumType", {
      enumerable: true,
      get: function get() {
        return _index.isEnumType;
      }
    });
    Object.defineProperty(exports, "isInputObjectType", {
      enumerable: true,
      get: function get() {
        return _index.isInputObjectType;
      }
    });
    Object.defineProperty(exports, "isListType", {
      enumerable: true,
      get: function get() {
        return _index.isListType;
      }
    });
    Object.defineProperty(exports, "isNonNullType", {
      enumerable: true,
      get: function get() {
        return _index.isNonNullType;
      }
    });
    Object.defineProperty(exports, "isInputType", {
      enumerable: true,
      get: function get() {
        return _index.isInputType;
      }
    });
    Object.defineProperty(exports, "isOutputType", {
      enumerable: true,
      get: function get() {
        return _index.isOutputType;
      }
    });
    Object.defineProperty(exports, "isLeafType", {
      enumerable: true,
      get: function get() {
        return _index.isLeafType;
      }
    });
    Object.defineProperty(exports, "isCompositeType", {
      enumerable: true,
      get: function get() {
        return _index.isCompositeType;
      }
    });
    Object.defineProperty(exports, "isAbstractType", {
      enumerable: true,
      get: function get() {
        return _index.isAbstractType;
      }
    });
    Object.defineProperty(exports, "isWrappingType", {
      enumerable: true,
      get: function get() {
        return _index.isWrappingType;
      }
    });
    Object.defineProperty(exports, "isNullableType", {
      enumerable: true,
      get: function get() {
        return _index.isNullableType;
      }
    });
    Object.defineProperty(exports, "isNamedType", {
      enumerable: true,
      get: function get() {
        return _index.isNamedType;
      }
    });
    Object.defineProperty(exports, "isRequiredArgument", {
      enumerable: true,
      get: function get() {
        return _index.isRequiredArgument;
      }
    });
    Object.defineProperty(exports, "isRequiredInputField", {
      enumerable: true,
      get: function get() {
        return _index.isRequiredInputField;
      }
    });
    Object.defineProperty(exports, "isSpecifiedScalarType", {
      enumerable: true,
      get: function get() {
        return _index.isSpecifiedScalarType;
      }
    });
    Object.defineProperty(exports, "isIntrospectionType", {
      enumerable: true,
      get: function get() {
        return _index.isIntrospectionType;
      }
    });
    Object.defineProperty(exports, "isSpecifiedDirective", {
      enumerable: true,
      get: function get() {
        return _index.isSpecifiedDirective;
      }
    });
    Object.defineProperty(exports, "assertSchema", {
      enumerable: true,
      get: function get() {
        return _index.assertSchema;
      }
    });
    Object.defineProperty(exports, "assertDirective", {
      enumerable: true,
      get: function get() {
        return _index.assertDirective;
      }
    });
    Object.defineProperty(exports, "assertType", {
      enumerable: true,
      get: function get() {
        return _index.assertType;
      }
    });
    Object.defineProperty(exports, "assertScalarType", {
      enumerable: true,
      get: function get() {
        return _index.assertScalarType;
      }
    });
    Object.defineProperty(exports, "assertObjectType", {
      enumerable: true,
      get: function get() {
        return _index.assertObjectType;
      }
    });
    Object.defineProperty(exports, "assertInterfaceType", {
      enumerable: true,
      get: function get() {
        return _index.assertInterfaceType;
      }
    });
    Object.defineProperty(exports, "assertUnionType", {
      enumerable: true,
      get: function get() {
        return _index.assertUnionType;
      }
    });
    Object.defineProperty(exports, "assertEnumType", {
      enumerable: true,
      get: function get() {
        return _index.assertEnumType;
      }
    });
    Object.defineProperty(exports, "assertInputObjectType", {
      enumerable: true,
      get: function get() {
        return _index.assertInputObjectType;
      }
    });
    Object.defineProperty(exports, "assertListType", {
      enumerable: true,
      get: function get() {
        return _index.assertListType;
      }
    });
    Object.defineProperty(exports, "assertNonNullType", {
      enumerable: true,
      get: function get() {
        return _index.assertNonNullType;
      }
    });
    Object.defineProperty(exports, "assertInputType", {
      enumerable: true,
      get: function get() {
        return _index.assertInputType;
      }
    });
    Object.defineProperty(exports, "assertOutputType", {
      enumerable: true,
      get: function get() {
        return _index.assertOutputType;
      }
    });
    Object.defineProperty(exports, "assertLeafType", {
      enumerable: true,
      get: function get() {
        return _index.assertLeafType;
      }
    });
    Object.defineProperty(exports, "assertCompositeType", {
      enumerable: true,
      get: function get() {
        return _index.assertCompositeType;
      }
    });
    Object.defineProperty(exports, "assertAbstractType", {
      enumerable: true,
      get: function get() {
        return _index.assertAbstractType;
      }
    });
    Object.defineProperty(exports, "assertWrappingType", {
      enumerable: true,
      get: function get() {
        return _index.assertWrappingType;
      }
    });
    Object.defineProperty(exports, "assertNullableType", {
      enumerable: true,
      get: function get() {
        return _index.assertNullableType;
      }
    });
    Object.defineProperty(exports, "assertNamedType", {
      enumerable: true,
      get: function get() {
        return _index.assertNamedType;
      }
    });
    Object.defineProperty(exports, "getNullableType", {
      enumerable: true,
      get: function get() {
        return _index.getNullableType;
      }
    });
    Object.defineProperty(exports, "getNamedType", {
      enumerable: true,
      get: function get() {
        return _index.getNamedType;
      }
    });
    Object.defineProperty(exports, "validateSchema", {
      enumerable: true,
      get: function get() {
        return _index.validateSchema;
      }
    });
    Object.defineProperty(exports, "assertValidSchema", {
      enumerable: true,
      get: function get() {
        return _index.assertValidSchema;
      }
    });
    Object.defineProperty(exports, "Token", {
      enumerable: true,
      get: function get() {
        return _index2.Token;
      }
    });
    Object.defineProperty(exports, "Source", {
      enumerable: true,
      get: function get() {
        return _index2.Source;
      }
    });
    Object.defineProperty(exports, "Location", {
      enumerable: true,
      get: function get() {
        return _index2.Location;
      }
    });
    Object.defineProperty(exports, "getLocation", {
      enumerable: true,
      get: function get() {
        return _index2.getLocation;
      }
    });
    Object.defineProperty(exports, "printLocation", {
      enumerable: true,
      get: function get() {
        return _index2.printLocation;
      }
    });
    Object.defineProperty(exports, "printSourceLocation", {
      enumerable: true,
      get: function get() {
        return _index2.printSourceLocation;
      }
    });
    Object.defineProperty(exports, "Lexer", {
      enumerable: true,
      get: function get() {
        return _index2.Lexer;
      }
    });
    Object.defineProperty(exports, "TokenKind", {
      enumerable: true,
      get: function get() {
        return _index2.TokenKind;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function get() {
        return _index2.parse;
      }
    });
    Object.defineProperty(exports, "parseValue", {
      enumerable: true,
      get: function get() {
        return _index2.parseValue;
      }
    });
    Object.defineProperty(exports, "parseType", {
      enumerable: true,
      get: function get() {
        return _index2.parseType;
      }
    });
    Object.defineProperty(exports, "print", {
      enumerable: true,
      get: function get() {
        return _index2.print;
      }
    });
    Object.defineProperty(exports, "visit", {
      enumerable: true,
      get: function get() {
        return _index2.visit;
      }
    });
    Object.defineProperty(exports, "visitInParallel", {
      enumerable: true,
      get: function get() {
        return _index2.visitInParallel;
      }
    });
    Object.defineProperty(exports, "getVisitFn", {
      enumerable: true,
      get: function get() {
        return _index2.getVisitFn;
      }
    });
    Object.defineProperty(exports, "BREAK", {
      enumerable: true,
      get: function get() {
        return _index2.BREAK;
      }
    });
    Object.defineProperty(exports, "Kind", {
      enumerable: true,
      get: function get() {
        return _index2.Kind;
      }
    });
    Object.defineProperty(exports, "DirectiveLocation", {
      enumerable: true,
      get: function get() {
        return _index2.DirectiveLocation;
      }
    });
    Object.defineProperty(exports, "isDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isExecutableDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isExecutableDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isSelectionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isSelectionNode;
      }
    });
    Object.defineProperty(exports, "isValueNode", {
      enumerable: true,
      get: function get() {
        return _index2.isValueNode;
      }
    });
    Object.defineProperty(exports, "isTypeNode", {
      enumerable: true,
      get: function get() {
        return _index2.isTypeNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isTypeSystemDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isTypeDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemExtensionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isTypeSystemExtensionNode;
      }
    });
    Object.defineProperty(exports, "isTypeExtensionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isTypeExtensionNode;
      }
    });
    Object.defineProperty(exports, "execute", {
      enumerable: true,
      get: function get() {
        return _index3.execute;
      }
    });
    Object.defineProperty(exports, "executeSync", {
      enumerable: true,
      get: function get() {
        return _index3.executeSync;
      }
    });
    Object.defineProperty(exports, "defaultFieldResolver", {
      enumerable: true,
      get: function get() {
        return _index3.defaultFieldResolver;
      }
    });
    Object.defineProperty(exports, "defaultTypeResolver", {
      enumerable: true,
      get: function get() {
        return _index3.defaultTypeResolver;
      }
    });
    Object.defineProperty(exports, "responsePathAsArray", {
      enumerable: true,
      get: function get() {
        return _index3.responsePathAsArray;
      }
    });
    Object.defineProperty(exports, "getDirectiveValues", {
      enumerable: true,
      get: function get() {
        return _index3.getDirectiveValues;
      }
    });
    Object.defineProperty(exports, "subscribe", {
      enumerable: true,
      get: function get() {
        return _index4.subscribe;
      }
    });
    Object.defineProperty(exports, "createSourceEventStream", {
      enumerable: true,
      get: function get() {
        return _index4.createSourceEventStream;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function get() {
        return _index5.validate;
      }
    });
    Object.defineProperty(exports, "ValidationContext", {
      enumerable: true,
      get: function get() {
        return _index5.ValidationContext;
      }
    });
    Object.defineProperty(exports, "specifiedRules", {
      enumerable: true,
      get: function get() {
        return _index5.specifiedRules;
      }
    });
    Object.defineProperty(exports, "ExecutableDefinitionsRule", {
      enumerable: true,
      get: function get() {
        return _index5.ExecutableDefinitionsRule;
      }
    });
    Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
      enumerable: true,
      get: function get() {
        return _index5.FieldsOnCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
      enumerable: true,
      get: function get() {
        return _index5.FragmentsOnCompositeTypesRule;
      }
    });
    Object.defineProperty(exports, "KnownArgumentNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.KnownArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownDirectivesRule", {
      enumerable: true,
      get: function get() {
        return _index5.KnownDirectivesRule;
      }
    });
    Object.defineProperty(exports, "KnownFragmentNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.KnownFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownTypeNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.KnownTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "LoneAnonymousOperationRule", {
      enumerable: true,
      get: function get() {
        return _index5.LoneAnonymousOperationRule;
      }
    });
    Object.defineProperty(exports, "NoFragmentCyclesRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoFragmentCyclesRule;
      }
    });
    Object.defineProperty(exports, "NoUndefinedVariablesRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoUndefinedVariablesRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedFragmentsRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoUnusedFragmentsRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedVariablesRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoUnusedVariablesRule;
      }
    });
    Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
      enumerable: true,
      get: function get() {
        return _index5.OverlappingFieldsCanBeMergedRule;
      }
    });
    Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
      enumerable: true,
      get: function get() {
        return _index5.PossibleFragmentSpreadsRule;
      }
    });
    Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
      enumerable: true,
      get: function get() {
        return _index5.ProvidedRequiredArgumentsRule;
      }
    });
    Object.defineProperty(exports, "ScalarLeafsRule", {
      enumerable: true,
      get: function get() {
        return _index5.ScalarLeafsRule;
      }
    });
    Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
      enumerable: true,
      get: function get() {
        return _index5.SingleFieldSubscriptionsRule;
      }
    });
    Object.defineProperty(exports, "UniqueArgumentNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueDirectivesPerLocationRule;
      }
    });
    Object.defineProperty(exports, "UniqueFragmentNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueInputFieldNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueOperationNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueVariableNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueVariableNamesRule;
      }
    });
    Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
      enumerable: true,
      get: function get() {
        return _index5.ValuesOfCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "VariablesAreInputTypesRule", {
      enumerable: true,
      get: function get() {
        return _index5.VariablesAreInputTypesRule;
      }
    });
    Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
      enumerable: true,
      get: function get() {
        return _index5.VariablesInAllowedPositionRule;
      }
    });
    Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
      enumerable: true,
      get: function get() {
        return _index5.LoneSchemaDefinitionRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationTypesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueOperationTypesRule;
      }
    });
    Object.defineProperty(exports, "UniqueTypeNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueEnumValueNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueFieldDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueDirectiveNamesRule;
      }
    });
    Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
      enumerable: true,
      get: function get() {
        return _index5.PossibleTypeExtensionsRule;
      }
    });
    Object.defineProperty(exports, "NoDeprecatedCustomRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoDeprecatedCustomRule;
      }
    });
    Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoSchemaIntrospectionCustomRule;
      }
    });
    Object.defineProperty(exports, "GraphQLError", {
      enumerable: true,
      get: function get() {
        return _index6.GraphQLError;
      }
    });
    Object.defineProperty(exports, "syntaxError", {
      enumerable: true,
      get: function get() {
        return _index6.syntaxError;
      }
    });
    Object.defineProperty(exports, "locatedError", {
      enumerable: true,
      get: function get() {
        return _index6.locatedError;
      }
    });
    Object.defineProperty(exports, "printError", {
      enumerable: true,
      get: function get() {
        return _index6.printError;
      }
    });
    Object.defineProperty(exports, "formatError", {
      enumerable: true,
      get: function get() {
        return _index6.formatError;
      }
    });
    Object.defineProperty(exports, "getIntrospectionQuery", {
      enumerable: true,
      get: function get() {
        return _index7.getIntrospectionQuery;
      }
    });
    Object.defineProperty(exports, "getOperationAST", {
      enumerable: true,
      get: function get() {
        return _index7.getOperationAST;
      }
    });
    Object.defineProperty(exports, "getOperationRootType", {
      enumerable: true,
      get: function get() {
        return _index7.getOperationRootType;
      }
    });
    Object.defineProperty(exports, "introspectionFromSchema", {
      enumerable: true,
      get: function get() {
        return _index7.introspectionFromSchema;
      }
    });
    Object.defineProperty(exports, "buildClientSchema", {
      enumerable: true,
      get: function get() {
        return _index7.buildClientSchema;
      }
    });
    Object.defineProperty(exports, "buildASTSchema", {
      enumerable: true,
      get: function get() {
        return _index7.buildASTSchema;
      }
    });
    Object.defineProperty(exports, "buildSchema", {
      enumerable: true,
      get: function get() {
        return _index7.buildSchema;
      }
    });
    Object.defineProperty(exports, "getDescription", {
      enumerable: true,
      get: function get() {
        return _index7.getDescription;
      }
    });
    Object.defineProperty(exports, "extendSchema", {
      enumerable: true,
      get: function get() {
        return _index7.extendSchema;
      }
    });
    Object.defineProperty(exports, "lexicographicSortSchema", {
      enumerable: true,
      get: function get() {
        return _index7.lexicographicSortSchema;
      }
    });
    Object.defineProperty(exports, "printSchema", {
      enumerable: true,
      get: function get() {
        return _index7.printSchema;
      }
    });
    Object.defineProperty(exports, "printType", {
      enumerable: true,
      get: function get() {
        return _index7.printType;
      }
    });
    Object.defineProperty(exports, "printIntrospectionSchema", {
      enumerable: true,
      get: function get() {
        return _index7.printIntrospectionSchema;
      }
    });
    Object.defineProperty(exports, "typeFromAST", {
      enumerable: true,
      get: function get() {
        return _index7.typeFromAST;
      }
    });
    Object.defineProperty(exports, "valueFromAST", {
      enumerable: true,
      get: function get() {
        return _index7.valueFromAST;
      }
    });
    Object.defineProperty(exports, "valueFromASTUntyped", {
      enumerable: true,
      get: function get() {
        return _index7.valueFromASTUntyped;
      }
    });
    Object.defineProperty(exports, "astFromValue", {
      enumerable: true,
      get: function get() {
        return _index7.astFromValue;
      }
    });
    Object.defineProperty(exports, "TypeInfo", {
      enumerable: true,
      get: function get() {
        return _index7.TypeInfo;
      }
    });
    Object.defineProperty(exports, "visitWithTypeInfo", {
      enumerable: true,
      get: function get() {
        return _index7.visitWithTypeInfo;
      }
    });
    Object.defineProperty(exports, "coerceInputValue", {
      enumerable: true,
      get: function get() {
        return _index7.coerceInputValue;
      }
    });
    Object.defineProperty(exports, "concatAST", {
      enumerable: true,
      get: function get() {
        return _index7.concatAST;
      }
    });
    Object.defineProperty(exports, "separateOperations", {
      enumerable: true,
      get: function get() {
        return _index7.separateOperations;
      }
    });
    Object.defineProperty(exports, "stripIgnoredCharacters", {
      enumerable: true,
      get: function get() {
        return _index7.stripIgnoredCharacters;
      }
    });
    Object.defineProperty(exports, "isEqualType", {
      enumerable: true,
      get: function get() {
        return _index7.isEqualType;
      }
    });
    Object.defineProperty(exports, "isTypeSubTypeOf", {
      enumerable: true,
      get: function get() {
        return _index7.isTypeSubTypeOf;
      }
    });
    Object.defineProperty(exports, "doTypesOverlap", {
      enumerable: true,
      get: function get() {
        return _index7.doTypesOverlap;
      }
    });
    Object.defineProperty(exports, "assertValidName", {
      enumerable: true,
      get: function get() {
        return _index7.assertValidName;
      }
    });
    Object.defineProperty(exports, "isValidNameError", {
      enumerable: true,
      get: function get() {
        return _index7.isValidNameError;
      }
    });
    Object.defineProperty(exports, "BreakingChangeType", {
      enumerable: true,
      get: function get() {
        return _index7.BreakingChangeType;
      }
    });
    Object.defineProperty(exports, "DangerousChangeType", {
      enumerable: true,
      get: function get() {
        return _index7.DangerousChangeType;
      }
    });
    Object.defineProperty(exports, "findBreakingChanges", {
      enumerable: true,
      get: function get() {
        return _index7.findBreakingChanges;
      }
    });
    Object.defineProperty(exports, "findDangerousChanges", {
      enumerable: true,
      get: function get() {
        return _index7.findDangerousChanges;
      }
    });
    Object.defineProperty(exports, "findDeprecatedUsages", {
      enumerable: true,
      get: function get() {
        return _index7.findDeprecatedUsages;
      }
    });

    var _version = require("./version.mjs");

    var _graphql = require("./graphql.mjs");

    var _index = require("./type/index.mjs");

    var _index2 = require("./language/index.mjs");

    var _index3 = require("./execution/index.mjs");

    var _index4 = require("./subscription/index.mjs");

    var _index5 = require("./validation/index.mjs");

    var _index6 = require("./error/index.mjs");

    var _index7 = require("./utilities/index.mjs");
  }, {
    "./version.mjs": "../node_modules/graphql/version.mjs",
    "./graphql.mjs": "../node_modules/graphql/graphql.mjs",
    "./type/index.mjs": "../node_modules/graphql/type/index.mjs",
    "./language/index.mjs": "../node_modules/graphql/language/index.mjs",
    "./execution/index.mjs": "../node_modules/graphql/execution/index.mjs",
    "./subscription/index.mjs": "../node_modules/graphql/subscription/index.mjs",
    "./validation/index.mjs": "../node_modules/graphql/validation/index.mjs",
    "./error/index.mjs": "../node_modules/graphql/error/index.mjs",
    "./utilities/index.mjs": "../node_modules/graphql/utilities/index.mjs"
  }],
  "../node_modules/@apollo/client/utilities/graphql/directives.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.shouldInclude = shouldInclude;
    exports.getDirectiveNames = getDirectiveNames;
    exports.hasDirectives = hasDirectives;
    exports.hasClientExports = hasClientExports;
    exports.getInclusionDirectives = getInclusionDirectives;

    var _graphql = require("graphql");

    var _tsInvariant = require("ts-invariant");

    function shouldInclude(_a, variables) {
      var directives = _a.directives;

      if (!directives || !directives.length) {
        return true;
      }

      return getInclusionDirectives(directives).every(function (_a) {
        var directive = _a.directive,
            ifArgument = _a.ifArgument;
        var evaledValue = false;

        if (ifArgument.value.kind === 'Variable') {
          evaledValue = variables && variables[ifArgument.value.name.value];
          "development" === "production" ? (0, _tsInvariant.invariant)(evaledValue !== void 0, 38) : (0, _tsInvariant.invariant)(evaledValue !== void 0, "Invalid variable referenced in @" + directive.name.value + " directive.");
        } else {
          evaledValue = ifArgument.value.value;
        }

        return directive.name.value === 'skip' ? !evaledValue : evaledValue;
      });
    }

    function getDirectiveNames(root) {
      var names = [];
      (0, _graphql.visit)(root, {
        Directive: function Directive(node) {
          names.push(node.name.value);
        }
      });
      return names;
    }

    function hasDirectives(names, root) {
      return getDirectiveNames(root).some(function (name) {
        return names.indexOf(name) > -1;
      });
    }

    function hasClientExports(document) {
      return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);
    }

    function isInclusionDirective(_a) {
      var value = _a.name.value;
      return value === 'skip' || value === 'include';
    }

    function getInclusionDirectives(directives) {
      var result = [];

      if (directives && directives.length) {
        directives.forEach(function (directive) {
          if (!isInclusionDirective(directive)) return;
          var directiveArguments = directive.arguments;
          var directiveName = directive.name.value;
          "development" === "production" ? (0, _tsInvariant.invariant)(directiveArguments && directiveArguments.length === 1, 39) : (0, _tsInvariant.invariant)(directiveArguments && directiveArguments.length === 1, "Incorrect number of arguments for the @" + directiveName + " directive.");
          var ifArgument = directiveArguments[0];
          "development" === "production" ? (0, _tsInvariant.invariant)(ifArgument.name && ifArgument.name.value === 'if', 40) : (0, _tsInvariant.invariant)(ifArgument.name && ifArgument.name.value === 'if', "Invalid argument for the @" + directiveName + " directive.");
          var ifValue = ifArgument.value;
          "development" === "production" ? (0, _tsInvariant.invariant)(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 41) : (0, _tsInvariant.invariant)(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), "Argument for the @" + directiveName + " directive must be a variable or a boolean value.");
          result.push({
            directive: directive,
            ifArgument: ifArgument
          });
        });
      }

      return result;
    }
  }, {
    "graphql": "../node_modules/graphql/index.mjs",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js"
  }],
  "../node_modules/@apollo/client/utilities/graphql/fragments.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getFragmentQueryDocument = getFragmentQueryDocument;
    exports.createFragmentMap = createFragmentMap;
    exports.getFragmentFromSelection = getFragmentFromSelection;

    var _tslib = require("tslib");

    var _tsInvariant = require("ts-invariant");

    function getFragmentQueryDocument(document, fragmentName) {
      var actualFragmentName = fragmentName;
      var fragments = [];
      document.definitions.forEach(function (definition) {
        if (definition.kind === 'OperationDefinition') {
          throw "development" === "production" ? new _tsInvariant.InvariantError(42) : new _tsInvariant.InvariantError("Found a " + definition.operation + " operation" + (definition.name ? " named '" + definition.name.value + "'" : '') + ". " + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.');
        }

        if (definition.kind === 'FragmentDefinition') {
          fragments.push(definition);
        }
      });

      if (typeof actualFragmentName === 'undefined') {
        "development" === "production" ? (0, _tsInvariant.invariant)(fragments.length === 1, 43) : (0, _tsInvariant.invariant)(fragments.length === 1, "Found " + fragments.length + " fragments. `fragmentName` must be provided when there is not exactly 1 fragment.");
        actualFragmentName = fragments[0].name.value;
      }

      var query = (0, _tslib.__assign)((0, _tslib.__assign)({}, document), {
        definitions: (0, _tslib.__spreadArrays)([{
          kind: 'OperationDefinition',
          operation: 'query',
          selectionSet: {
            kind: 'SelectionSet',
            selections: [{
              kind: 'FragmentSpread',
              name: {
                kind: 'Name',
                value: actualFragmentName
              }
            }]
          }
        }], document.definitions)
      });
      return query;
    }

    function createFragmentMap(fragments) {
      if (fragments === void 0) {
        fragments = [];
      }

      var symTable = {};
      fragments.forEach(function (fragment) {
        symTable[fragment.name.value] = fragment;
      });
      return symTable;
    }

    function getFragmentFromSelection(selection, fragmentMap) {
      switch (selection.kind) {
        case 'InlineFragment':
          return selection;

        case 'FragmentSpread':
          {
            var fragment = fragmentMap && fragmentMap[selection.name.value];
            "development" === "production" ? (0, _tsInvariant.invariant)(fragment, 44) : (0, _tsInvariant.invariant)(fragment, "No fragment named " + selection.name.value + ".");
            return fragment;
          }

        default:
          return null;
      }
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js"
  }],
  "../node_modules/fast-json-stable-stringify/index.js": [function (require, module, exports) {
    'use strict';

    module.exports = function (data, opts) {
      if (!opts) opts = {};
      if (typeof opts === 'function') opts = {
        cmp: opts
      };
      var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;

      var cmp = opts.cmp && function (f) {
        return function (node) {
          return function (a, b) {
            var aobj = {
              key: a,
              value: node[a]
            };
            var bobj = {
              key: b,
              value: node[b]
            };
            return f(aobj, bobj);
          };
        };
      }(opts.cmp);

      var seen = [];
      return function stringify(node) {
        if (node && node.toJSON && typeof node.toJSON === 'function') {
          node = node.toJSON();
        }

        if (node === undefined) return;
        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
        if (_typeof3(node) !== 'object') return JSON.stringify(node);
        var i, out;

        if (Array.isArray(node)) {
          out = '[';

          for (i = 0; i < node.length; i++) {
            if (i) out += ',';
            out += stringify(node[i]) || 'null';
          }

          return out + ']';
        }

        if (node === null) return 'null';

        if (seen.indexOf(node) !== -1) {
          if (cycles) return JSON.stringify('__cycle__');
          throw new TypeError('Converting circular structure to JSON');
        }

        var seenIndex = seen.push(node) - 1;
        var keys = Object.keys(node).sort(cmp && cmp(node));
        out = '';

        for (i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = stringify(node[key]);
          if (!value) continue;
          if (out) out += ',';
          out += JSON.stringify(key) + ':' + value;
        }

        seen.splice(seenIndex, 1);
        return '{' + out + '}';
      }(data);
    };
  }, {}],
  "../node_modules/@apollo/client/utilities/graphql/storeUtils.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.makeReference = makeReference;
    exports.isReference = isReference;
    exports.valueToObjectRepresentation = valueToObjectRepresentation;
    exports.storeKeyNameFromField = storeKeyNameFromField;
    exports.getStoreKeyName = getStoreKeyName;
    exports.argumentsObjectFromField = argumentsObjectFromField;
    exports.resultKeyNameFromField = resultKeyNameFromField;
    exports.getTypenameFromResult = getTypenameFromResult;
    exports.isField = isField;
    exports.isInlineFragment = isInlineFragment;

    var _fastJsonStableStringify = _interopRequireDefault(require("fast-json-stable-stringify"));

    var _tsInvariant = require("ts-invariant");

    var _fragments = require("./fragments.js");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function makeReference(id) {
      return {
        __ref: String(id)
      };
    }

    function isReference(obj) {
      return Boolean(obj && _typeof3(obj) === 'object' && typeof obj.__ref === 'string');
    }

    function isStringValue(value) {
      return value.kind === 'StringValue';
    }

    function isBooleanValue(value) {
      return value.kind === 'BooleanValue';
    }

    function isIntValue(value) {
      return value.kind === 'IntValue';
    }

    function isFloatValue(value) {
      return value.kind === 'FloatValue';
    }

    function isVariable(value) {
      return value.kind === 'Variable';
    }

    function isObjectValue(value) {
      return value.kind === 'ObjectValue';
    }

    function isListValue(value) {
      return value.kind === 'ListValue';
    }

    function isEnumValue(value) {
      return value.kind === 'EnumValue';
    }

    function isNullValue(value) {
      return value.kind === 'NullValue';
    }

    function valueToObjectRepresentation(argObj, name, value, variables) {
      if (isIntValue(value) || isFloatValue(value)) {
        argObj[name.value] = Number(value.value);
      } else if (isBooleanValue(value) || isStringValue(value)) {
        argObj[name.value] = value.value;
      } else if (isObjectValue(value)) {
        var nestedArgObj_1 = {};
        value.fields.map(function (obj) {
          return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
        });
        argObj[name.value] = nestedArgObj_1;
      } else if (isVariable(value)) {
        var variableValue = (variables || {})[value.name.value];
        argObj[name.value] = variableValue;
      } else if (isListValue(value)) {
        argObj[name.value] = value.values.map(function (listValue) {
          var nestedArgArrayObj = {};
          valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
          return nestedArgArrayObj[name.value];
        });
      } else if (isEnumValue(value)) {
        argObj[name.value] = value.value;
      } else if (isNullValue(value)) {
        argObj[name.value] = null;
      } else {
        throw "development" === "production" ? new _tsInvariant.InvariantError(53) : new _tsInvariant.InvariantError("The inline argument \"" + name.value + "\" of kind \"" + value.kind + "\"" + 'is not supported. Use variables instead of inline arguments to ' + 'overcome this limitation.');
      }
    }

    function storeKeyNameFromField(field, variables) {
      var directivesObj = null;

      if (field.directives) {
        directivesObj = {};
        field.directives.forEach(function (directive) {
          directivesObj[directive.name.value] = {};

          if (directive.arguments) {
            directive.arguments.forEach(function (_a) {
              var name = _a.name,
                  value = _a.value;
              return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
            });
          }
        });
      }

      var argObj = null;

      if (field.arguments && field.arguments.length) {
        argObj = {};
        field.arguments.forEach(function (_a) {
          var name = _a.name,
              value = _a.value;
          return valueToObjectRepresentation(argObj, name, value, variables);
        });
      }

      return getStoreKeyName(field.name.value, argObj, directivesObj);
    }

    var KNOWN_DIRECTIVES = ['connection', 'include', 'skip', 'client', 'rest', 'export'];

    function getStoreKeyName(fieldName, args, directives) {
      if (args && directives && directives['connection'] && directives['connection']['key']) {
        if (directives['connection']['filter'] && directives['connection']['filter'].length > 0) {
          var filterKeys = directives['connection']['filter'] ? directives['connection']['filter'] : [];
          filterKeys.sort();
          var filteredArgs_1 = {};
          filterKeys.forEach(function (key) {
            filteredArgs_1[key] = args[key];
          });
          return directives['connection']['key'] + "(" + JSON.stringify(filteredArgs_1) + ")";
        } else {
          return directives['connection']['key'];
        }
      }

      var completeFieldName = fieldName;

      if (args) {
        var stringifiedArgs = (0, _fastJsonStableStringify.default)(args);
        completeFieldName += "(" + stringifiedArgs + ")";
      }

      if (directives) {
        Object.keys(directives).forEach(function (key) {
          if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;

          if (directives[key] && Object.keys(directives[key]).length) {
            completeFieldName += "@" + key + "(" + JSON.stringify(directives[key]) + ")";
          } else {
            completeFieldName += "@" + key;
          }
        });
      }

      return completeFieldName;
    }

    function argumentsObjectFromField(field, variables) {
      if (field.arguments && field.arguments.length) {
        var argObj_1 = {};
        field.arguments.forEach(function (_a) {
          var name = _a.name,
              value = _a.value;
          return valueToObjectRepresentation(argObj_1, name, value, variables);
        });
        return argObj_1;
      }

      return null;
    }

    function resultKeyNameFromField(field) {
      return field.alias ? field.alias.value : field.name.value;
    }

    function getTypenameFromResult(result, selectionSet, fragmentMap) {
      if (typeof result.__typename === 'string') {
        return result.__typename;
      }

      for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {
        var selection = _a[_i];

        if (isField(selection)) {
          if (selection.name.value === '__typename') {
            return result[resultKeyNameFromField(selection)];
          }
        } else {
          var typename = getTypenameFromResult(result, (0, _fragments.getFragmentFromSelection)(selection, fragmentMap).selectionSet, fragmentMap);

          if (typeof typename === 'string') {
            return typename;
          }
        }
      }
    }

    function isField(selection) {
      return selection.kind === 'Field';
    }

    function isInlineFragment(selection) {
      return selection.kind === 'InlineFragment';
    }
  }, {
    "fast-json-stable-stringify": "../node_modules/fast-json-stable-stringify/index.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "./fragments.js": "../node_modules/@apollo/client/utilities/graphql/fragments.js"
  }],
  "../node_modules/@apollo/client/utilities/graphql/getFromAST.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.checkDocument = checkDocument;
    exports.getOperationDefinition = getOperationDefinition;
    exports.getOperationName = getOperationName;
    exports.getFragmentDefinitions = getFragmentDefinitions;
    exports.getQueryDefinition = getQueryDefinition;
    exports.getFragmentDefinition = getFragmentDefinition;
    exports.getMainDefinition = getMainDefinition;
    exports.getDefaultValues = getDefaultValues;

    var _tsInvariant = require("ts-invariant");

    var _storeUtils = require("./storeUtils.js");

    function checkDocument(doc) {
      "development" === "production" ? (0, _tsInvariant.invariant)(doc && doc.kind === 'Document', 45) : (0, _tsInvariant.invariant)(doc && doc.kind === 'Document', "Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql");
      var operations = doc.definitions.filter(function (d) {
        return d.kind !== 'FragmentDefinition';
      }).map(function (definition) {
        if (definition.kind !== 'OperationDefinition') {
          throw "development" === "production" ? new _tsInvariant.InvariantError(46) : new _tsInvariant.InvariantError("Schema type definitions not allowed in queries. Found: \"" + definition.kind + "\"");
        }

        return definition;
      });
      "development" === "production" ? (0, _tsInvariant.invariant)(operations.length <= 1, 47) : (0, _tsInvariant.invariant)(operations.length <= 1, "Ambiguous GraphQL document: contains " + operations.length + " operations");
      return doc;
    }

    function getOperationDefinition(doc) {
      checkDocument(doc);
      return doc.definitions.filter(function (definition) {
        return definition.kind === 'OperationDefinition';
      })[0];
    }

    function getOperationName(doc) {
      return doc.definitions.filter(function (definition) {
        return definition.kind === 'OperationDefinition' && definition.name;
      }).map(function (x) {
        return x.name.value;
      })[0] || null;
    }

    function getFragmentDefinitions(doc) {
      return doc.definitions.filter(function (definition) {
        return definition.kind === 'FragmentDefinition';
      });
    }

    function getQueryDefinition(doc) {
      var queryDef = getOperationDefinition(doc);
      "development" === "production" ? (0, _tsInvariant.invariant)(queryDef && queryDef.operation === 'query', 48) : (0, _tsInvariant.invariant)(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');
      return queryDef;
    }

    function getFragmentDefinition(doc) {
      "development" === "production" ? (0, _tsInvariant.invariant)(doc.kind === 'Document', 49) : (0, _tsInvariant.invariant)(doc.kind === 'Document', "Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql");
      "development" === "production" ? (0, _tsInvariant.invariant)(doc.definitions.length <= 1, 50) : (0, _tsInvariant.invariant)(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');
      var fragmentDef = doc.definitions[0];
      "development" === "production" ? (0, _tsInvariant.invariant)(fragmentDef.kind === 'FragmentDefinition', 51) : (0, _tsInvariant.invariant)(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');
      return fragmentDef;
    }

    function getMainDefinition(queryDoc) {
      checkDocument(queryDoc);
      var fragmentDefinition;

      for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {
        var definition = _a[_i];

        if (definition.kind === 'OperationDefinition') {
          var operation = definition.operation;

          if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {
            return definition;
          }
        }

        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {
          fragmentDefinition = definition;
        }
      }

      if (fragmentDefinition) {
        return fragmentDefinition;
      }

      throw "development" === "production" ? new _tsInvariant.InvariantError(52) : new _tsInvariant.InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');
    }

    function getDefaultValues(definition) {
      var defaultValues = Object.create(null);
      var defs = definition && definition.variableDefinitions;

      if (defs && defs.length) {
        defs.forEach(function (def) {
          if (def.defaultValue) {
            (0, _storeUtils.valueToObjectRepresentation)(defaultValues, def.variable.name, def.defaultValue);
          }
        });
      }

      return defaultValues;
    }
  }, {
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "./storeUtils.js": "../node_modules/@apollo/client/utilities/graphql/storeUtils.js"
  }],
  "../node_modules/@apollo/client/utilities/common/filterInPlace.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.filterInPlace = filterInPlace;

    function filterInPlace(array, test, context) {
      var target = 0;
      array.forEach(function (elem, i) {
        if (test.call(this, elem, i, array)) {
          array[target++] = elem;
        }
      }, context);
      array.length = target;
      return array;
    }
  }, {}],
  "../node_modules/@apollo/client/utilities/graphql/transform.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.removeDirectivesFromDocument = removeDirectivesFromDocument;
    exports.addTypenameToDocument = addTypenameToDocument;
    exports.removeConnectionDirectiveFromDocument = removeConnectionDirectiveFromDocument;
    exports.removeArgumentsFromDocument = removeArgumentsFromDocument;
    exports.removeFragmentSpreadFromDocument = removeFragmentSpreadFromDocument;
    exports.buildQueryFromSelectionSet = buildQueryFromSelectionSet;
    exports.removeClientSetsFromDocument = removeClientSetsFromDocument;

    var _tslib = require("tslib");

    var _graphql = require("graphql");

    var _tsInvariant = require("ts-invariant");

    var _getFromAST = require("./getFromAST.js");

    var _filterInPlace = require("../common/filterInPlace.js");

    var _storeUtils = require("./storeUtils.js");

    var _fragments = require("./fragments.js");

    var TYPENAME_FIELD = {
      kind: 'Field',
      name: {
        kind: 'Name',
        value: '__typename'
      }
    };

    function isEmpty(op, fragments) {
      return op.selectionSet.selections.every(function (selection) {
        return selection.kind === 'FragmentSpread' && isEmpty(fragments[selection.name.value], fragments);
      });
    }

    function nullIfDocIsEmpty(doc) {
      return isEmpty((0, _getFromAST.getOperationDefinition)(doc) || (0, _getFromAST.getFragmentDefinition)(doc), (0, _fragments.createFragmentMap)((0, _getFromAST.getFragmentDefinitions)(doc))) ? null : doc;
    }

    function getDirectiveMatcher(directives) {
      return function directiveMatcher(directive) {
        return directives.some(function (dir) {
          return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);
        });
      };
    }

    function removeDirectivesFromDocument(directives, doc) {
      var variablesInUse = Object.create(null);
      var variablesToRemove = [];
      var fragmentSpreadsInUse = Object.create(null);
      var fragmentSpreadsToRemove = [];
      var modifiedDoc = nullIfDocIsEmpty((0, _graphql.visit)(doc, {
        Variable: {
          enter: function enter(node, _key, parent) {
            if (parent.kind !== 'VariableDefinition') {
              variablesInUse[node.name.value] = true;
            }
          }
        },
        Field: {
          enter: function enter(node) {
            if (directives && node.directives) {
              var shouldRemoveField = directives.some(function (directive) {
                return directive.remove;
              });

              if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {
                if (node.arguments) {
                  node.arguments.forEach(function (arg) {
                    if (arg.value.kind === 'Variable') {
                      variablesToRemove.push({
                        name: arg.value.name.value
                      });
                    }
                  });
                }

                if (node.selectionSet) {
                  getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {
                    fragmentSpreadsToRemove.push({
                      name: frag.name.value
                    });
                  });
                }

                return null;
              }
            }
          }
        },
        FragmentSpread: {
          enter: function enter(node) {
            fragmentSpreadsInUse[node.name.value] = true;
          }
        },
        Directive: {
          enter: function enter(node) {
            if (getDirectiveMatcher(directives)(node)) {
              return null;
            }
          }
        }
      }));

      if (modifiedDoc && (0, _filterInPlace.filterInPlace)(variablesToRemove, function (v) {
        return !!v.name && !variablesInUse[v.name];
      }).length) {
        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);
      }

      if (modifiedDoc && (0, _filterInPlace.filterInPlace)(fragmentSpreadsToRemove, function (fs) {
        return !!fs.name && !fragmentSpreadsInUse[fs.name];
      }).length) {
        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);
      }

      return modifiedDoc;
    }

    function addTypenameToDocument(doc) {
      return (0, _graphql.visit)((0, _getFromAST.checkDocument)(doc), {
        SelectionSet: {
          enter: function enter(node, _key, parent) {
            if (parent && parent.kind === 'OperationDefinition') {
              return;
            }

            var selections = node.selections;

            if (!selections) {
              return;
            }

            var skip = selections.some(function (selection) {
              return (0, _storeUtils.isField)(selection) && (selection.name.value === '__typename' || selection.name.value.lastIndexOf('__', 0) === 0);
            });

            if (skip) {
              return;
            }

            var field = parent;

            if ((0, _storeUtils.isField)(field) && field.directives && field.directives.some(function (d) {
              return d.name.value === 'export';
            })) {
              return;
            }

            return (0, _tslib.__assign)((0, _tslib.__assign)({}, node), {
              selections: (0, _tslib.__spreadArrays)(selections, [TYPENAME_FIELD])
            });
          }
        }
      });
    }

    addTypenameToDocument.added = function (field) {
      return field === TYPENAME_FIELD;
    };

    var connectionRemoveConfig = {
      test: function test(directive) {
        var willRemove = directive.name.value === 'connection';

        if (willRemove) {
          if (!directive.arguments || !directive.arguments.some(function (arg) {
            return arg.name.value === 'key';
          })) {
            "development" === "production" || _tsInvariant.invariant.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');
          }
        }

        return willRemove;
      }
    };

    function removeConnectionDirectiveFromDocument(doc) {
      return removeDirectivesFromDocument([connectionRemoveConfig], (0, _getFromAST.checkDocument)(doc));
    }

    function hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {
      if (nestedCheck === void 0) {
        nestedCheck = true;
      }

      return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function (selection) {
        return hasDirectivesInSelection(directives, selection, nestedCheck);
      });
    }

    function hasDirectivesInSelection(directives, selection, nestedCheck) {
      if (nestedCheck === void 0) {
        nestedCheck = true;
      }

      if (!(0, _storeUtils.isField)(selection)) {
        return true;
      }

      if (!selection.directives) {
        return false;
      }

      return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);
    }

    function getArgumentMatcher(config) {
      return function argumentMatcher(argument) {
        return config.some(function (aConfig) {
          return argument.value && argument.value.kind === 'Variable' && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));
        });
      };
    }

    function removeArgumentsFromDocument(config, doc) {
      var argMatcher = getArgumentMatcher(config);
      return nullIfDocIsEmpty((0, _graphql.visit)(doc, {
        OperationDefinition: {
          enter: function enter(node) {
            return (0, _tslib.__assign)((0, _tslib.__assign)({}, node), {
              variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {
                return !config.some(function (arg) {
                  return arg.name === varDef.variable.name.value;
                });
              }) : []
            });
          }
        },
        Field: {
          enter: function enter(node) {
            var shouldRemoveField = config.some(function (argConfig) {
              return argConfig.remove;
            });

            if (shouldRemoveField) {
              var argMatchCount_1 = 0;

              if (node.arguments) {
                node.arguments.forEach(function (arg) {
                  if (argMatcher(arg)) {
                    argMatchCount_1 += 1;
                  }
                });
              }

              if (argMatchCount_1 === 1) {
                return null;
              }
            }
          }
        },
        Argument: {
          enter: function enter(node) {
            if (argMatcher(node)) {
              return null;
            }
          }
        }
      }));
    }

    function removeFragmentSpreadFromDocument(config, doc) {
      function enter(node) {
        if (config.some(function (def) {
          return def.name === node.name.value;
        })) {
          return null;
        }
      }

      return nullIfDocIsEmpty((0, _graphql.visit)(doc, {
        FragmentSpread: {
          enter: enter
        },
        FragmentDefinition: {
          enter: enter
        }
      }));
    }

    function getAllFragmentSpreadsFromSelectionSet(selectionSet) {
      var allFragments = [];
      selectionSet.selections.forEach(function (selection) {
        if (((0, _storeUtils.isField)(selection) || (0, _storeUtils.isInlineFragment)(selection)) && selection.selectionSet) {
          getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) {
            return allFragments.push(frag);
          });
        } else if (selection.kind === 'FragmentSpread') {
          allFragments.push(selection);
        }
      });
      return allFragments;
    }

    function buildQueryFromSelectionSet(document) {
      var definition = (0, _getFromAST.getMainDefinition)(document);
      var definitionOperation = definition.operation;

      if (definitionOperation === 'query') {
        return document;
      }

      var modifiedDoc = (0, _graphql.visit)(document, {
        OperationDefinition: {
          enter: function enter(node) {
            return (0, _tslib.__assign)((0, _tslib.__assign)({}, node), {
              operation: 'query'
            });
          }
        }
      });
      return modifiedDoc;
    }

    function removeClientSetsFromDocument(document) {
      (0, _getFromAST.checkDocument)(document);
      var modifiedDoc = removeDirectivesFromDocument([{
        test: function test(directive) {
          return directive.name.value === 'client';
        },
        remove: true
      }], document);

      if (modifiedDoc) {
        modifiedDoc = (0, _graphql.visit)(modifiedDoc, {
          FragmentDefinition: {
            enter: function enter(node) {
              if (node.selectionSet) {
                var isTypenameOnly = node.selectionSet.selections.every(function (selection) {
                  return (0, _storeUtils.isField)(selection) && selection.name.value === '__typename';
                });

                if (isTypenameOnly) {
                  return null;
                }
              }
            }
          }
        });
      }

      return modifiedDoc;
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "graphql": "../node_modules/graphql/index.mjs",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "./getFromAST.js": "../node_modules/@apollo/client/utilities/graphql/getFromAST.js",
    "../common/filterInPlace.js": "../node_modules/@apollo/client/utilities/common/filterInPlace.js",
    "./storeUtils.js": "../node_modules/@apollo/client/utilities/graphql/storeUtils.js",
    "./fragments.js": "../node_modules/@apollo/client/utilities/graphql/fragments.js"
  }],
  "../node_modules/@apollo/client/utilities/policies/pagination.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.concatPagination = concatPagination;
    exports.offsetLimitPagination = offsetLimitPagination;
    exports.relayStylePagination = relayStylePagination;

    var _tslib = require("tslib");

    function concatPagination(keyArgs) {
      if (keyArgs === void 0) {
        keyArgs = false;
      }

      return {
        keyArgs: keyArgs,
        merge: function merge(existing, incoming) {
          return existing ? (0, _tslib.__spreadArrays)(existing, incoming) : incoming;
        }
      };
    }

    function offsetLimitPagination(keyArgs) {
      if (keyArgs === void 0) {
        keyArgs = false;
      }

      return {
        keyArgs: keyArgs,
        merge: function merge(existing, incoming, _a) {
          var args = _a.args;
          var merged = existing ? existing.slice(0) : [];

          if (args) {
            var _b = args.offset,
                offset = _b === void 0 ? 0 : _b;

            for (var i = 0; i < incoming.length; ++i) {
              merged[offset + i] = incoming[i];
            }
          } else {
            merged.push.apply(merged, incoming);
          }

          return merged;
        }
      };
    }

    function relayStylePagination(keyArgs) {
      if (keyArgs === void 0) {
        keyArgs = false;
      }

      return {
        keyArgs: keyArgs,
        read: function read(existing, _a) {
          var canRead = _a.canRead,
              readField = _a.readField;
          if (!existing) return;
          var edges = [];
          var startCursor = "";
          var endCursor = "";
          existing.edges.forEach(function (edge) {
            if (canRead(readField("node", edge))) {
              edges.push(edge);

              if (edge.cursor) {
                startCursor = startCursor || edge.cursor;
                endCursor = edge.cursor;
              }
            }
          });
          return (0, _tslib.__assign)((0, _tslib.__assign)({}, getExtras(existing)), {
            edges: edges,
            pageInfo: (0, _tslib.__assign)((0, _tslib.__assign)({}, existing.pageInfo), {
              startCursor: startCursor,
              endCursor: endCursor
            })
          });
        },
        merge: function merge(existing, incoming, _a) {
          if (existing === void 0) {
            existing = makeEmptyData();
          }

          var args = _a.args,
              isReference = _a.isReference,
              readField = _a.readField;
          var incomingEdges = incoming.edges ? incoming.edges.map(function (edge) {
            if (isReference(edge = (0, _tslib.__assign)({}, edge))) {
              edge.cursor = readField("cursor", edge);
            }

            return edge;
          }) : [];

          if (incoming.pageInfo) {
            var _b = incoming.pageInfo,
                startCursor = _b.startCursor,
                endCursor = _b.endCursor;
            var firstEdge_1 = incomingEdges[0];

            if (firstEdge_1 && startCursor) {
              firstEdge_1.cursor = startCursor;
            }

            var lastEdge_1 = incomingEdges[incomingEdges.length - 1];

            if (lastEdge_1 && endCursor) {
              lastEdge_1.cursor = endCursor;
            }
          }

          var prefix = existing.edges;
          var suffix = [];

          if (args && args.after) {
            var index = prefix.findIndex(function (edge) {
              return edge.cursor === args.after;
            });

            if (index >= 0) {
              prefix = prefix.slice(0, index + 1);
            }
          } else if (args && args.before) {
            var index = prefix.findIndex(function (edge) {
              return edge.cursor === args.before;
            });
            suffix = index < 0 ? prefix : prefix.slice(index);
            prefix = [];
          } else if (incoming.edges) {
            prefix = [];
          }

          var edges = (0, _tslib.__spreadArrays)(prefix, incomingEdges, suffix);
          var firstEdge = edges[0];
          var lastEdge = edges[edges.length - 1];
          var pageInfo = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, incoming.pageInfo), existing.pageInfo), {
            startCursor: firstEdge && firstEdge.cursor || "",
            endCursor: lastEdge && lastEdge.cursor || ""
          });

          if (incoming.pageInfo) {
            var _c = incoming.pageInfo,
                hasPreviousPage = _c.hasPreviousPage,
                hasNextPage = _c.hasNextPage;

            if (!prefix.length && hasPreviousPage !== void 0) {
              pageInfo.hasPreviousPage = hasPreviousPage;
            }

            if (!suffix.length && hasNextPage !== void 0) {
              pageInfo.hasNextPage = hasNextPage;
            }
          }

          return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, getExtras(existing)), getExtras(incoming)), {
            edges: edges,
            pageInfo: pageInfo
          });
        }
      };
    }

    var getExtras = function getExtras(obj) {
      return (0, _tslib.__rest)(obj, notExtras);
    };

    var notExtras = ["edges", "pageInfo"];

    function makeEmptyData() {
      return {
        edges: [],
        pageInfo: {
          hasPreviousPage: false,
          hasNextPage: true,
          startCursor: "",
          endCursor: ""
        }
      };
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js"
  }],
  "../node_modules/zen-observable/lib/Observable.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Observable = void 0;

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    } // === Symbol Support ===


    var hasSymbols = function hasSymbols() {
      return typeof Symbol === 'function';
    };

    var hasSymbol = function hasSymbol(name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };

    var getSymbol = function getSymbol(name) {
      return hasSymbol(name) ? Symbol[name] : '@@' + name;
    };

    if (hasSymbols() && !hasSymbol('observable')) {
      Symbol.observable = Symbol('observable');
    }

    var SymbolIterator = getSymbol('iterator');
    var SymbolObservable = getSymbol('observable');
    var SymbolSpecies = getSymbol('species'); // === Abstract Operations ===

    function getMethod(obj, key) {
      var value = obj[key];
      if (value == null) return undefined;
      if (typeof value !== 'function') throw new TypeError(value + ' is not a function');
      return value;
    }

    function getSpecies(obj) {
      var ctor = obj.constructor;

      if (ctor !== undefined) {
        ctor = ctor[SymbolSpecies];

        if (ctor === null) {
          ctor = undefined;
        }
      }

      return ctor !== undefined ? ctor : Observable;
    }

    function isObservable(x) {
      return x instanceof Observable; // SPEC: Brand check
    }

    function hostReportError(e) {
      if (hostReportError.log) {
        hostReportError.log(e);
      } else {
        setTimeout(function () {
          throw e;
        });
      }
    }

    function enqueue(fn) {
      Promise.resolve().then(function () {
        try {
          fn();
        } catch (e) {
          hostReportError(e);
        }
      });
    }

    function cleanupSubscription(subscription) {
      var cleanup = subscription._cleanup;
      if (cleanup === undefined) return;
      subscription._cleanup = undefined;

      if (!cleanup) {
        return;
      }

      try {
        if (typeof cleanup === 'function') {
          cleanup();
        } else {
          var unsubscribe = getMethod(cleanup, 'unsubscribe');

          if (unsubscribe) {
            unsubscribe.call(cleanup);
          }
        }
      } catch (e) {
        hostReportError(e);
      }
    }

    function closeSubscription(subscription) {
      subscription._observer = undefined;
      subscription._queue = undefined;
      subscription._state = 'closed';
    }

    function flushSubscription(subscription) {
      var queue = subscription._queue;

      if (!queue) {
        return;
      }

      subscription._queue = undefined;
      subscription._state = 'ready';

      for (var i = 0; i < queue.length; ++i) {
        notifySubscription(subscription, queue[i].type, queue[i].value);
        if (subscription._state === 'closed') break;
      }
    }

    function notifySubscription(subscription, type, value) {
      subscription._state = 'running';
      var observer = subscription._observer;

      try {
        var m = getMethod(observer, type);

        switch (type) {
          case 'next':
            if (m) m.call(observer, value);
            break;

          case 'error':
            closeSubscription(subscription);
            if (m) m.call(observer, value);else throw value;
            break;

          case 'complete':
            closeSubscription(subscription);
            if (m) m.call(observer);
            break;
        }
      } catch (e) {
        hostReportError(e);
      }

      if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';
    }

    function onNotify(subscription, type, value) {
      if (subscription._state === 'closed') return;

      if (subscription._state === 'buffering') {
        subscription._queue.push({
          type: type,
          value: value
        });

        return;
      }

      if (subscription._state !== 'ready') {
        subscription._state = 'buffering';
        subscription._queue = [{
          type: type,
          value: value
        }];
        enqueue(function () {
          return flushSubscription(subscription);
        });
        return;
      }

      notifySubscription(subscription, type, value);
    }

    var Subscription = /*#__PURE__*/function () {
      function Subscription(observer, subscriber) {
        _classCallCheck(this, Subscription); // ASSERT: observer is an object
        // ASSERT: subscriber is callable


        this._cleanup = undefined;
        this._observer = observer;
        this._queue = undefined;
        this._state = 'initializing';
        var subscriptionObserver = new SubscriptionObserver(this);

        try {
          this._cleanup = subscriber.call(undefined, subscriptionObserver);
        } catch (e) {
          subscriptionObserver.error(e);
        }

        if (this._state === 'initializing') this._state = 'ready';
      }

      _createClass(Subscription, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this._state !== 'closed') {
            closeSubscription(this);
            cleanupSubscription(this);
          }
        }
      }, {
        key: "closed",
        get: function get() {
          return this._state === 'closed';
        }
      }]);

      return Subscription;
    }();

    var SubscriptionObserver = /*#__PURE__*/function () {
      function SubscriptionObserver(subscription) {
        _classCallCheck(this, SubscriptionObserver);

        this._subscription = subscription;
      }

      _createClass(SubscriptionObserver, [{
        key: "next",
        value: function next(value) {
          onNotify(this._subscription, 'next', value);
        }
      }, {
        key: "error",
        value: function error(value) {
          onNotify(this._subscription, 'error', value);
        }
      }, {
        key: "complete",
        value: function complete() {
          onNotify(this._subscription, 'complete');
        }
      }, {
        key: "closed",
        get: function get() {
          return this._subscription._state === 'closed';
        }
      }]);

      return SubscriptionObserver;
    }();

    var Observable = /*#__PURE__*/function () {
      function Observable(subscriber) {
        _classCallCheck(this, Observable);

        if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');
        if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');
        this._subscriber = subscriber;
      }

      _createClass(Observable, [{
        key: "subscribe",
        value: function subscribe(observer) {
          if (_typeof3(observer) !== 'object' || observer === null) {
            observer = {
              next: observer,
              error: arguments[1],
              complete: arguments[2]
            };
          }

          return new Subscription(observer, this._subscriber);
        }
      }, {
        key: "forEach",
        value: function forEach(fn) {
          var _this = this;

          return new Promise(function (resolve, reject) {
            if (typeof fn !== 'function') {
              reject(new TypeError(fn + ' is not a function'));
              return;
            }

            function done() {
              subscription.unsubscribe();
              resolve();
            }

            var subscription = _this.subscribe({
              next: function next(value) {
                try {
                  fn(value, done);
                } catch (e) {
                  reject(e);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve
            });
          });
        }
      }, {
        key: "map",
        value: function map(fn) {
          var _this2 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
          var C = getSpecies(this);
          return new C(function (observer) {
            return _this2.subscribe({
              next: function next(value) {
                try {
                  value = fn(value);
                } catch (e) {
                  return observer.error(e);
                }

                observer.next(value);
              },
              error: function error(e) {
                observer.error(e);
              },
              complete: function complete() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "filter",
        value: function filter(fn) {
          var _this3 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
          var C = getSpecies(this);
          return new C(function (observer) {
            return _this3.subscribe({
              next: function next(value) {
                try {
                  if (!fn(value)) return;
                } catch (e) {
                  return observer.error(e);
                }

                observer.next(value);
              },
              error: function error(e) {
                observer.error(e);
              },
              complete: function complete() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "reduce",
        value: function reduce(fn) {
          var _this4 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
          var C = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;
          return new C(function (observer) {
            return _this4.subscribe({
              next: function next(value) {
                var first = !hasValue;
                hasValue = true;

                if (!first || hasSeed) {
                  try {
                    acc = fn(acc, value);
                  } catch (e) {
                    return observer.error(e);
                  }
                } else {
                  acc = value;
                }
              },
              error: function error(e) {
                observer.error(e);
              },
              complete: function complete() {
                if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));
                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "concat",
        value: function concat() {
          var _this5 = this;

          for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
          }

          var C = getSpecies(this);
          return new C(function (observer) {
            var subscription;
            var index = 0;

            function startNext(next) {
              subscription = next.subscribe({
                next: function next(v) {
                  observer.next(v);
                },
                error: function error(e) {
                  observer.error(e);
                },
                complete: function complete() {
                  if (index === sources.length) {
                    subscription = undefined;
                    observer.complete();
                  } else {
                    startNext(C.from(sources[index++]));
                  }
                }
              });
            }

            startNext(_this5);
            return function () {
              if (subscription) {
                subscription.unsubscribe();
                subscription = undefined;
              }
            };
          });
        }
      }, {
        key: "flatMap",
        value: function flatMap(fn) {
          var _this6 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
          var C = getSpecies(this);
          return new C(function (observer) {
            var subscriptions = [];

            var outer = _this6.subscribe({
              next: function next(value) {
                if (fn) {
                  try {
                    value = fn(value);
                  } catch (e) {
                    return observer.error(e);
                  }
                }

                var inner = C.from(value).subscribe({
                  next: function next(value) {
                    observer.next(value);
                  },
                  error: function error(e) {
                    observer.error(e);
                  },
                  complete: function complete() {
                    var i = subscriptions.indexOf(inner);
                    if (i >= 0) subscriptions.splice(i, 1);
                    completeIfDone();
                  }
                });
                subscriptions.push(inner);
              },
              error: function error(e) {
                observer.error(e);
              },
              complete: function complete() {
                completeIfDone();
              }
            });

            function completeIfDone() {
              if (outer.closed && subscriptions.length === 0) observer.complete();
            }

            return function () {
              subscriptions.forEach(function (s) {
                return s.unsubscribe();
              });
              outer.unsubscribe();
            };
          });
        }
      }, {
        key: SymbolObservable,
        value: function value() {
          return this;
        }
      }], [{
        key: "from",
        value: function from(x) {
          var C = typeof this === 'function' ? this : Observable;
          if (x == null) throw new TypeError(x + ' is not an object');
          var method = getMethod(x, SymbolObservable);

          if (method) {
            var observable = method.call(x);
            if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');
            if (isObservable(observable) && observable.constructor === C) return observable;
            return new C(function (observer) {
              return observable.subscribe(observer);
            });
          }

          if (hasSymbol('iterator')) {
            method = getMethod(x, SymbolIterator);

            if (method) {
              return new C(function (observer) {
                enqueue(function () {
                  if (observer.closed) return;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;

                  try {
                    for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var _item = _step.value;
                      observer.next(_item);
                      if (observer.closed) return;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }

                  observer.complete();
                });
              });
            }
          }

          if (Array.isArray(x)) {
            return new C(function (observer) {
              enqueue(function () {
                if (observer.closed) return;

                for (var i = 0; i < x.length; ++i) {
                  observer.next(x[i]);
                  if (observer.closed) return;
                }

                observer.complete();
              });
            });
          }

          throw new TypeError(x + ' is not observable');
        }
      }, {
        key: "of",
        value: function of() {
          for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }

          var C = typeof this === 'function' ? this : Observable;
          return new C(function (observer) {
            enqueue(function () {
              if (observer.closed) return;

              for (var i = 0; i < items.length; ++i) {
                observer.next(items[i]);
                if (observer.closed) return;
              }

              observer.complete();
            });
          });
        }
      }, {
        key: SymbolSpecies,
        get: function get() {
          return this;
        }
      }]);

      return Observable;
    }();

    exports.Observable = Observable;

    if (hasSymbols()) {
      Object.defineProperty(Observable, Symbol('extensions'), {
        value: {
          symbol: SymbolObservable,
          hostReportError: hostReportError
        },
        configurable: true
      });
    }
  }, {}],
  "../node_modules/zen-observable/index.js": [function (require, module, exports) {
    module.exports = require('./lib/Observable.js').Observable;
  }, {
    "./lib/Observable.js": "../node_modules/zen-observable/lib/Observable.js"
  }],
  "../node_modules/@apollo/client/node_modules/symbol-observable/es/ponyfill.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = symbolObservablePonyfill;

    function symbolObservablePonyfill(root) {
      var result;
      var _Symbol = root.Symbol;

      if (typeof _Symbol === 'function') {
        if (_Symbol.observable) {
          result = _Symbol.observable;
        } else {
          // This just needs to be something that won't trample other user's Symbol.for use
          // It also will guide people to the source of their issues, if this is problematic.
          // META: It's a resource locator!
          result = _Symbol.for('https://github.com/benlesh/symbol-observable');

          try {
            _Symbol.observable = result;
          } catch (err) {// Do nothing. In some environments, users have frozen `Symbol` for security reasons,
            // if it is frozen assigning to it will throw. In this case, we don't care, because
            // they will need to use the returned value from the ponyfill.
          }
        }
      } else {
        result = '@@observable';
      }

      return result;
    }

    ;
  }, {}],
  "../node_modules/@apollo/client/node_modules/symbol-observable/es/index.js": [function (require, module, exports) {
    var global = arguments[3];
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _ponyfill = _interopRequireDefault(require("./ponyfill.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /* global window */


    var root;

    if (typeof self !== 'undefined') {
      root = self;
    } else if (typeof window !== 'undefined') {
      root = window;
    } else if (typeof global !== 'undefined') {
      root = global;
    } else if (typeof module !== 'undefined') {
      root = module;
    } else {
      root = Function('return this')();
    }

    var result = (0, _ponyfill.default)(root);
    var _default = result;
    exports.default = _default;
  }, {
    "./ponyfill.js": "../node_modules/@apollo/client/node_modules/symbol-observable/es/ponyfill.js"
  }],
  "../node_modules/@apollo/client/utilities/observables/Observable.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Observable", {
      enumerable: true,
      get: function get() {
        return _zenObservable.default;
      }
    });

    var _zenObservable = _interopRequireDefault(require("zen-observable"));

    require("symbol-observable");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    _zenObservable.default.prototype['@@observable'] = function () {
      return this;
    };
  }, {
    "zen-observable": "../node_modules/zen-observable/index.js",
    "symbol-observable": "../node_modules/@apollo/client/node_modules/symbol-observable/es/index.js"
  }],
  "../node_modules/@apollo/client/utilities/common/mergeDeep.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.mergeDeep = mergeDeep;
    exports.mergeDeepArray = mergeDeepArray;
    exports.DeepMerger = void 0;

    var _tslib = require("tslib");

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function mergeDeep() {
      var sources = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
      }

      return mergeDeepArray(sources);
    }

    function mergeDeepArray(sources) {
      var target = sources[0] || {};
      var count = sources.length;

      if (count > 1) {
        var merger = new DeepMerger();

        for (var i = 1; i < count; ++i) {
          target = merger.merge(target, sources[i]);
        }
      }

      return target;
    }

    function isObject(obj) {
      return obj !== null && _typeof3(obj) === 'object';
    }

    var defaultReconciler = function defaultReconciler(target, source, property) {
      return this.merge(target[property], source[property]);
    };

    var DeepMerger = function () {
      function DeepMerger(reconciler) {
        if (reconciler === void 0) {
          reconciler = defaultReconciler;
        }

        this.reconciler = reconciler;
        this.isObject = isObject;
        this.pastCopies = new Set();
      }

      DeepMerger.prototype.merge = function (target, source) {
        var _this = this;

        var context = [];

        for (var _i = 2; _i < arguments.length; _i++) {
          context[_i - 2] = arguments[_i];
        }

        if (isObject(source) && isObject(target)) {
          Object.keys(source).forEach(function (sourceKey) {
            if (hasOwnProperty.call(target, sourceKey)) {
              var targetValue = target[sourceKey];

              if (source[sourceKey] !== targetValue) {
                var result = _this.reconciler.apply(_this, (0, _tslib.__spreadArrays)([target, source, sourceKey], context));

                if (result !== targetValue) {
                  target = _this.shallowCopyForMerge(target);
                  target[sourceKey] = result;
                }
              }
            } else {
              target = _this.shallowCopyForMerge(target);
              target[sourceKey] = source[sourceKey];
            }
          });
          return target;
        }

        return source;
      };

      DeepMerger.prototype.shallowCopyForMerge = function (value) {
        if (isObject(value) && !this.pastCopies.has(value)) {
          if (Array.isArray(value)) {
            value = value.slice(0);
          } else {
            value = (0, _tslib.__assign)({
              __proto__: Object.getPrototypeOf(value)
            }, value);
          }

          this.pastCopies.add(value);
        }

        return value;
      };

      return DeepMerger;
    }();

    exports.DeepMerger = DeepMerger;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js"
  }],
  "../node_modules/@apollo/client/utilities/common/cloneDeep.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.cloneDeep = cloneDeep;
    var toString = Object.prototype.toString;

    function cloneDeep(value) {
      return cloneDeepHelper(value);
    }

    function cloneDeepHelper(val, seen) {
      switch (toString.call(val)) {
        case "[object Array]":
          {
            seen = seen || new Map();
            if (seen.has(val)) return seen.get(val);
            var copy_1 = val.slice(0);
            seen.set(val, copy_1);
            copy_1.forEach(function (child, i) {
              copy_1[i] = cloneDeepHelper(child, seen);
            });
            return copy_1;
          }

        case "[object Object]":
          {
            seen = seen || new Map();
            if (seen.has(val)) return seen.get(val);
            var copy_2 = Object.create(Object.getPrototypeOf(val));
            seen.set(val, copy_2);
            Object.keys(val).forEach(function (key) {
              copy_2[key] = cloneDeepHelper(val[key], seen);
            });
            return copy_2;
          }

        default:
          return val;
      }
    }
  }, {}],
  "../node_modules/@apollo/client/utilities/common/environment.js": [function (require, module, exports) {
    var process = require("process");

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getEnv = getEnv;
    exports.isEnv = isEnv;
    exports.isDevelopment = isDevelopment;
    exports.isTest = isTest;

    function getEnv() {
      if (typeof process !== 'undefined' && "development") {
        return "development";
      }

      return 'development';
    }

    function isEnv(env) {
      return getEnv() === env;
    }

    function isDevelopment() {
      return isEnv('development') === true;
    }

    function isTest() {
      return isEnv('test') === true;
    }
  }, {
    "process": "../node_modules/process/browser.js"
  }],
  "../node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.maybeDeepFreeze = maybeDeepFreeze;

    var _environment = require("./environment.js");

    function isObject(value) {
      return value !== null && _typeof3(value) === "object";
    }

    function deepFreeze(value) {
      var workSet = new Set([value]);
      workSet.forEach(function (obj) {
        if (isObject(obj)) {
          if (!Object.isFrozen(obj)) Object.freeze(obj);
          Object.getOwnPropertyNames(obj).forEach(function (name) {
            if (isObject(obj[name])) workSet.add(obj[name]);
          });
        }
      });
      return value;
    }

    function maybeDeepFreeze(obj) {
      if ("development" !== "production" && ((0, _environment.isDevelopment)() || (0, _environment.isTest)())) {
        deepFreeze(obj);
      }

      return obj;
    }
  }, {
    "./environment.js": "../node_modules/@apollo/client/utilities/common/environment.js"
  }],
  "../node_modules/@apollo/client/utilities/observables/iteration.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.iterateObserversSafely = iterateObserversSafely;

    function iterateObserversSafely(observers, method, argument) {
      var observersWithMethod = [];
      observers.forEach(function (obs) {
        return obs[method] && observersWithMethod.push(obs);
      });
      observersWithMethod.forEach(function (obs) {
        return obs[method](argument);
      });
    }
  }, {}],
  "../node_modules/@apollo/client/utilities/observables/asyncMap.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.asyncMap = asyncMap;

    var _Observable = require("./Observable.js");

    function asyncMap(observable, mapFn, catchFn) {
      return new _Observable.Observable(function (observer) {
        var next = observer.next,
            error = observer.error,
            _complete = observer.complete;
        var activeCallbackCount = 0;
        var completed = false;

        function makeCallback(examiner, delegate) {
          if (examiner) {
            return function (arg) {
              ++activeCallbackCount;
              new Promise(function (resolve) {
                return resolve(examiner(arg));
              }).then(function (result) {
                --activeCallbackCount;
                next && next.call(observer, result);

                if (completed) {
                  handler.complete();
                }
              }, function (e) {
                --activeCallbackCount;
                error && error.call(observer, e);
              });
            };
          } else {
            return function (arg) {
              return delegate && delegate.call(observer, arg);
            };
          }
        }

        var handler = {
          next: makeCallback(mapFn, next),
          error: makeCallback(catchFn, error),
          complete: function complete() {
            completed = true;

            if (!activeCallbackCount) {
              _complete && _complete.call(observer);
            }
          }
        };
        var sub = observable.subscribe(handler);
        return function () {
          return sub.unsubscribe();
        };
      });
    }
  }, {
    "./Observable.js": "../node_modules/@apollo/client/utilities/observables/Observable.js"
  }],
  "../node_modules/@apollo/client/utilities/observables/Concast.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Concast = void 0;

    var _tslib = require("tslib");

    var _Observable = require("./Observable.js");

    var _iteration = require("./iteration.js");

    function isPromiseLike(value) {
      return value && typeof value.then === "function";
    }

    var Concast = function (_super) {
      (0, _tslib.__extends)(Concast, _super);

      function Concast(sources) {
        var _this = _super.call(this, function (observer) {
          _this.addObserver(observer);

          return function () {
            return _this.removeObserver(observer);
          };
        }) || this;

        _this.observers = new Set();
        _this.promise = new Promise(function (resolve, reject) {
          _this.resolve = resolve;
          _this.reject = reject;
        });
        _this.handlers = {
          next: function next(result) {
            if (_this.sub !== null) {
              _this.latest = ["next", result];
              (0, _iteration.iterateObserversSafely)(_this.observers, "next", result);
            }
          },
          error: function error(_error5) {
            if (_this.sub !== null) {
              if (_this.sub) _this.sub.unsubscribe();
              _this.sub = null;
              _this.latest = ["error", _error5];

              _this.reject(_error5);

              (0, _iteration.iterateObserversSafely)(_this.observers, "error", _error5);
            }
          },
          complete: function complete() {
            if (_this.sub !== null) {
              var value = _this.sources.shift();

              if (!value) {
                _this.sub = null;

                if (_this.latest && _this.latest[0] === "next") {
                  _this.resolve(_this.latest[1]);
                } else {
                  _this.resolve();
                }

                (0, _iteration.iterateObserversSafely)(_this.observers, "complete");
              } else if (isPromiseLike(value)) {
                value.then(function (obs) {
                  return _this.sub = obs.subscribe(_this.handlers);
                });
              } else {
                _this.sub = value.subscribe(_this.handlers);
              }
            }
          }
        };

        _this.cancel = function (reason) {
          _this.reject(reason);

          _this.sources = [];

          _this.handlers.complete();
        };

        _this.promise.catch(function (_) {});

        if (isPromiseLike(sources)) {
          sources.then(function (iterable) {
            return _this.start(iterable);
          }, _this.handlers.error);
        } else {
          _this.start(sources);
        }

        return _this;
      }

      Concast.prototype.start = function (sources) {
        if (this.sub !== void 0) return;
        this.sources = Array.from(sources);
        this.handlers.complete();
      };

      Concast.prototype.addObserver = function (observer) {
        if (!this.observers.has(observer)) {
          if (this.latest) {
            var nextOrError = this.latest[0];
            var method = observer[nextOrError];

            if (method) {
              method.call(observer, this.latest[1]);
            }

            if (this.sub === null && nextOrError === "next" && observer.complete) {
              observer.complete();
            }
          }

          this.observers.add(observer);
        }
      };

      Concast.prototype.removeObserver = function (observer, quietly) {
        if (this.observers.delete(observer) && this.observers.size < 1) {
          if (quietly) return;

          if (this.sub) {
            this.sub.unsubscribe();
            this.reject(new Error("Observable cancelled prematurely"));
          }

          this.sub = null;
        }
      };

      Concast.prototype.cleanup = function (callback) {
        var _this = this;

        var called = false;

        var once = function once() {
          if (!called) {
            called = true;

            _this.observers.delete(observer);

            callback();
          }
        };

        var observer = {
          next: once,
          error: once,
          complete: once
        };
        this.addObserver(observer);
      };

      return Concast;
    }(_Observable.Observable);

    exports.Concast = Concast;

    if (typeof Symbol === "function" && Symbol.species) {
      Object.defineProperty(Concast, Symbol.species, {
        value: _Observable.Observable
      });
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "./Observable.js": "../node_modules/@apollo/client/utilities/observables/Observable.js",
    "./iteration.js": "../node_modules/@apollo/client/utilities/observables/iteration.js"
  }],
  "../node_modules/@apollo/client/utilities/common/arrays.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isNonEmptyArray = isNonEmptyArray;

    function isNonEmptyArray(value) {
      return Array.isArray(value) && value.length > 0;
    }
  }, {}],
  "../node_modules/@apollo/client/utilities/common/errorHandling.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.graphQLResultHasError = graphQLResultHasError;

    function graphQLResultHasError(result) {
      return result.errors && result.errors.length > 0 || false;
    }
  }, {}],
  "../node_modules/@apollo/client/utilities/common/canUse.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.canUseWeakMap = void 0;
    var canUseWeakMap = typeof WeakMap === 'function' && !((typeof navigator === "undefined" ? "undefined" : _typeof3(navigator)) === 'object' && navigator.product === 'ReactNative');
    exports.canUseWeakMap = canUseWeakMap;
  }, {}],
  "../node_modules/@apollo/client/utilities/common/compact.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.compact = compact;

    function compact() {
      var objects = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
      }

      var result = Object.create(null);
      objects.forEach(function (obj) {
        if (!obj) return;
        Object.keys(obj).forEach(function (key) {
          var value = obj[key];

          if (value !== void 0) {
            result[key] = value;
          }
        });
      });
      return result;
    }
  }, {}],
  "../node_modules/@apollo/client/utilities/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      shouldInclude: true,
      hasDirectives: true,
      hasClientExports: true,
      getDirectiveNames: true,
      getInclusionDirectives: true,
      createFragmentMap: true,
      getFragmentQueryDocument: true,
      getFragmentFromSelection: true,
      checkDocument: true,
      getOperationDefinition: true,
      getOperationName: true,
      getFragmentDefinitions: true,
      getQueryDefinition: true,
      getFragmentDefinition: true,
      getMainDefinition: true,
      getDefaultValues: true,
      makeReference: true,
      isReference: true,
      isField: true,
      isInlineFragment: true,
      valueToObjectRepresentation: true,
      storeKeyNameFromField: true,
      argumentsObjectFromField: true,
      resultKeyNameFromField: true,
      getStoreKeyName: true,
      getTypenameFromResult: true,
      addTypenameToDocument: true,
      buildQueryFromSelectionSet: true,
      removeDirectivesFromDocument: true,
      removeConnectionDirectiveFromDocument: true,
      removeArgumentsFromDocument: true,
      removeFragmentSpreadFromDocument: true,
      removeClientSetsFromDocument: true,
      concatPagination: true,
      offsetLimitPagination: true,
      relayStylePagination: true,
      Observable: true
    };
    Object.defineProperty(exports, "shouldInclude", {
      enumerable: true,
      get: function get() {
        return _directives.shouldInclude;
      }
    });
    Object.defineProperty(exports, "hasDirectives", {
      enumerable: true,
      get: function get() {
        return _directives.hasDirectives;
      }
    });
    Object.defineProperty(exports, "hasClientExports", {
      enumerable: true,
      get: function get() {
        return _directives.hasClientExports;
      }
    });
    Object.defineProperty(exports, "getDirectiveNames", {
      enumerable: true,
      get: function get() {
        return _directives.getDirectiveNames;
      }
    });
    Object.defineProperty(exports, "getInclusionDirectives", {
      enumerable: true,
      get: function get() {
        return _directives.getInclusionDirectives;
      }
    });
    Object.defineProperty(exports, "createFragmentMap", {
      enumerable: true,
      get: function get() {
        return _fragments.createFragmentMap;
      }
    });
    Object.defineProperty(exports, "getFragmentQueryDocument", {
      enumerable: true,
      get: function get() {
        return _fragments.getFragmentQueryDocument;
      }
    });
    Object.defineProperty(exports, "getFragmentFromSelection", {
      enumerable: true,
      get: function get() {
        return _fragments.getFragmentFromSelection;
      }
    });
    Object.defineProperty(exports, "checkDocument", {
      enumerable: true,
      get: function get() {
        return _getFromAST.checkDocument;
      }
    });
    Object.defineProperty(exports, "getOperationDefinition", {
      enumerable: true,
      get: function get() {
        return _getFromAST.getOperationDefinition;
      }
    });
    Object.defineProperty(exports, "getOperationName", {
      enumerable: true,
      get: function get() {
        return _getFromAST.getOperationName;
      }
    });
    Object.defineProperty(exports, "getFragmentDefinitions", {
      enumerable: true,
      get: function get() {
        return _getFromAST.getFragmentDefinitions;
      }
    });
    Object.defineProperty(exports, "getQueryDefinition", {
      enumerable: true,
      get: function get() {
        return _getFromAST.getQueryDefinition;
      }
    });
    Object.defineProperty(exports, "getFragmentDefinition", {
      enumerable: true,
      get: function get() {
        return _getFromAST.getFragmentDefinition;
      }
    });
    Object.defineProperty(exports, "getMainDefinition", {
      enumerable: true,
      get: function get() {
        return _getFromAST.getMainDefinition;
      }
    });
    Object.defineProperty(exports, "getDefaultValues", {
      enumerable: true,
      get: function get() {
        return _getFromAST.getDefaultValues;
      }
    });
    Object.defineProperty(exports, "makeReference", {
      enumerable: true,
      get: function get() {
        return _storeUtils.makeReference;
      }
    });
    Object.defineProperty(exports, "isReference", {
      enumerable: true,
      get: function get() {
        return _storeUtils.isReference;
      }
    });
    Object.defineProperty(exports, "isField", {
      enumerable: true,
      get: function get() {
        return _storeUtils.isField;
      }
    });
    Object.defineProperty(exports, "isInlineFragment", {
      enumerable: true,
      get: function get() {
        return _storeUtils.isInlineFragment;
      }
    });
    Object.defineProperty(exports, "valueToObjectRepresentation", {
      enumerable: true,
      get: function get() {
        return _storeUtils.valueToObjectRepresentation;
      }
    });
    Object.defineProperty(exports, "storeKeyNameFromField", {
      enumerable: true,
      get: function get() {
        return _storeUtils.storeKeyNameFromField;
      }
    });
    Object.defineProperty(exports, "argumentsObjectFromField", {
      enumerable: true,
      get: function get() {
        return _storeUtils.argumentsObjectFromField;
      }
    });
    Object.defineProperty(exports, "resultKeyNameFromField", {
      enumerable: true,
      get: function get() {
        return _storeUtils.resultKeyNameFromField;
      }
    });
    Object.defineProperty(exports, "getStoreKeyName", {
      enumerable: true,
      get: function get() {
        return _storeUtils.getStoreKeyName;
      }
    });
    Object.defineProperty(exports, "getTypenameFromResult", {
      enumerable: true,
      get: function get() {
        return _storeUtils.getTypenameFromResult;
      }
    });
    Object.defineProperty(exports, "addTypenameToDocument", {
      enumerable: true,
      get: function get() {
        return _transform.addTypenameToDocument;
      }
    });
    Object.defineProperty(exports, "buildQueryFromSelectionSet", {
      enumerable: true,
      get: function get() {
        return _transform.buildQueryFromSelectionSet;
      }
    });
    Object.defineProperty(exports, "removeDirectivesFromDocument", {
      enumerable: true,
      get: function get() {
        return _transform.removeDirectivesFromDocument;
      }
    });
    Object.defineProperty(exports, "removeConnectionDirectiveFromDocument", {
      enumerable: true,
      get: function get() {
        return _transform.removeConnectionDirectiveFromDocument;
      }
    });
    Object.defineProperty(exports, "removeArgumentsFromDocument", {
      enumerable: true,
      get: function get() {
        return _transform.removeArgumentsFromDocument;
      }
    });
    Object.defineProperty(exports, "removeFragmentSpreadFromDocument", {
      enumerable: true,
      get: function get() {
        return _transform.removeFragmentSpreadFromDocument;
      }
    });
    Object.defineProperty(exports, "removeClientSetsFromDocument", {
      enumerable: true,
      get: function get() {
        return _transform.removeClientSetsFromDocument;
      }
    });
    Object.defineProperty(exports, "concatPagination", {
      enumerable: true,
      get: function get() {
        return _pagination.concatPagination;
      }
    });
    Object.defineProperty(exports, "offsetLimitPagination", {
      enumerable: true,
      get: function get() {
        return _pagination.offsetLimitPagination;
      }
    });
    Object.defineProperty(exports, "relayStylePagination", {
      enumerable: true,
      get: function get() {
        return _pagination.relayStylePagination;
      }
    });
    Object.defineProperty(exports, "Observable", {
      enumerable: true,
      get: function get() {
        return _Observable.Observable;
      }
    });

    var _directives = require("./graphql/directives.js");

    var _fragments = require("./graphql/fragments.js");

    var _getFromAST = require("./graphql/getFromAST.js");

    var _storeUtils = require("./graphql/storeUtils.js");

    var _transform = require("./graphql/transform.js");

    var _pagination = require("./policies/pagination.js");

    var _Observable = require("./observables/Observable.js");

    var _mergeDeep = require("./common/mergeDeep.js");

    Object.keys(_mergeDeep).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _mergeDeep[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _mergeDeep[key];
        }
      });
    });

    var _cloneDeep = require("./common/cloneDeep.js");

    Object.keys(_cloneDeep).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _cloneDeep[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _cloneDeep[key];
        }
      });
    });

    var _maybeDeepFreeze = require("./common/maybeDeepFreeze.js");

    Object.keys(_maybeDeepFreeze).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _maybeDeepFreeze[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _maybeDeepFreeze[key];
        }
      });
    });

    var _iteration = require("./observables/iteration.js");

    Object.keys(_iteration).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _iteration[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _iteration[key];
        }
      });
    });

    var _asyncMap = require("./observables/asyncMap.js");

    Object.keys(_asyncMap).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _asyncMap[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _asyncMap[key];
        }
      });
    });

    var _Concast = require("./observables/Concast.js");

    Object.keys(_Concast).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _Concast[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _Concast[key];
        }
      });
    });

    var _arrays = require("./common/arrays.js");

    Object.keys(_arrays).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _arrays[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _arrays[key];
        }
      });
    });

    var _errorHandling = require("./common/errorHandling.js");

    Object.keys(_errorHandling).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _errorHandling[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _errorHandling[key];
        }
      });
    });

    var _canUse = require("./common/canUse.js");

    Object.keys(_canUse).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _canUse[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _canUse[key];
        }
      });
    });

    var _compact = require("./common/compact.js");

    Object.keys(_compact).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _compact[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _compact[key];
        }
      });
    });
  }, {
    "./graphql/directives.js": "../node_modules/@apollo/client/utilities/graphql/directives.js",
    "./graphql/fragments.js": "../node_modules/@apollo/client/utilities/graphql/fragments.js",
    "./graphql/getFromAST.js": "../node_modules/@apollo/client/utilities/graphql/getFromAST.js",
    "./graphql/storeUtils.js": "../node_modules/@apollo/client/utilities/graphql/storeUtils.js",
    "./graphql/transform.js": "../node_modules/@apollo/client/utilities/graphql/transform.js",
    "./policies/pagination.js": "../node_modules/@apollo/client/utilities/policies/pagination.js",
    "./observables/Observable.js": "../node_modules/@apollo/client/utilities/observables/Observable.js",
    "./common/mergeDeep.js": "../node_modules/@apollo/client/utilities/common/mergeDeep.js",
    "./common/cloneDeep.js": "../node_modules/@apollo/client/utilities/common/cloneDeep.js",
    "./common/maybeDeepFreeze.js": "../node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js",
    "./observables/iteration.js": "../node_modules/@apollo/client/utilities/observables/iteration.js",
    "./observables/asyncMap.js": "../node_modules/@apollo/client/utilities/observables/asyncMap.js",
    "./observables/Concast.js": "../node_modules/@apollo/client/utilities/observables/Concast.js",
    "./common/arrays.js": "../node_modules/@apollo/client/utilities/common/arrays.js",
    "./common/errorHandling.js": "../node_modules/@apollo/client/utilities/common/errorHandling.js",
    "./common/canUse.js": "../node_modules/@apollo/client/utilities/common/canUse.js",
    "./common/compact.js": "../node_modules/@apollo/client/utilities/common/compact.js"
  }],
  "../node_modules/@apollo/client/link/utils/fromError.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.fromError = fromError;

    var _index = require("../../utilities/index.js");

    function fromError(errorValue) {
      return new _index.Observable(function (observer) {
        observer.error(errorValue);
      });
    }
  }, {
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js"
  }],
  "../node_modules/@apollo/client/link/utils/toPromise.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.toPromise = toPromise;

    var _tsInvariant = require("ts-invariant");

    function toPromise(observable) {
      var completed = false;
      return new Promise(function (resolve, reject) {
        observable.subscribe({
          next: function next(data) {
            if (completed) {
              "development" === "production" || _tsInvariant.invariant.warn("Promise Wrapper does not support multiple results from Observable");
            } else {
              completed = true;
              resolve(data);
            }
          },
          error: reject
        });
      });
    }
  }, {
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js"
  }],
  "../node_modules/@apollo/client/link/utils/fromPromise.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.fromPromise = fromPromise;

    var _index = require("../../utilities/index.js");

    function fromPromise(promise) {
      return new _index.Observable(function (observer) {
        promise.then(function (value) {
          observer.next(value);
          observer.complete();
        }).catch(observer.error.bind(observer));
      });
    }
  }, {
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js"
  }],
  "../node_modules/@apollo/client/link/utils/throwServerError.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.throwServerError = void 0;

    var throwServerError = function throwServerError(response, result, message) {
      var error = new Error(message);
      error.name = 'ServerError';
      error.response = response;
      error.statusCode = response.status;
      error.result = result;
      throw error;
    };

    exports.throwServerError = throwServerError;
  }, {}],
  "../node_modules/@apollo/client/link/utils/validateOperation.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.validateOperation = validateOperation;

    var _tsInvariant = require("ts-invariant");

    function validateOperation(operation) {
      var OPERATION_FIELDS = ['query', 'operationName', 'variables', 'extensions', 'context'];

      for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {
        var key = _a[_i];

        if (OPERATION_FIELDS.indexOf(key) < 0) {
          throw "development" === "production" ? new _tsInvariant.InvariantError(26) : new _tsInvariant.InvariantError("illegal argument: " + key);
        }
      }

      return operation;
    }
  }, {
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js"
  }],
  "../node_modules/@apollo/client/link/utils/createOperation.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createOperation = createOperation;

    var _tslib = require("tslib");

    function createOperation(starting, operation) {
      var context = (0, _tslib.__assign)({}, starting);

      var setContext = function setContext(next) {
        if (typeof next === 'function') {
          context = (0, _tslib.__assign)((0, _tslib.__assign)({}, context), next(context));
        } else {
          context = (0, _tslib.__assign)((0, _tslib.__assign)({}, context), next);
        }
      };

      var getContext = function getContext() {
        return (0, _tslib.__assign)({}, context);
      };

      Object.defineProperty(operation, 'setContext', {
        enumerable: false,
        value: setContext
      });
      Object.defineProperty(operation, 'getContext', {
        enumerable: false,
        value: getContext
      });
      return operation;
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js"
  }],
  "../node_modules/@apollo/client/link/utils/transformOperation.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.transformOperation = transformOperation;

    var _index = require("../../utilities/index.js");

    function transformOperation(operation) {
      var transformedOperation = {
        variables: operation.variables || {},
        extensions: operation.extensions || {},
        operationName: operation.operationName,
        query: operation.query
      };

      if (!transformedOperation.operationName) {
        transformedOperation.operationName = typeof transformedOperation.query !== 'string' ? (0, _index.getOperationName)(transformedOperation.query) || undefined : '';
      }

      return transformedOperation;
    }
  }, {
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js"
  }],
  "../node_modules/@apollo/client/link/utils/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "fromError", {
      enumerable: true,
      get: function get() {
        return _fromError.fromError;
      }
    });
    Object.defineProperty(exports, "toPromise", {
      enumerable: true,
      get: function get() {
        return _toPromise.toPromise;
      }
    });
    Object.defineProperty(exports, "fromPromise", {
      enumerable: true,
      get: function get() {
        return _fromPromise.fromPromise;
      }
    });
    Object.defineProperty(exports, "throwServerError", {
      enumerable: true,
      get: function get() {
        return _throwServerError.throwServerError;
      }
    });
    Object.defineProperty(exports, "validateOperation", {
      enumerable: true,
      get: function get() {
        return _validateOperation.validateOperation;
      }
    });
    Object.defineProperty(exports, "createOperation", {
      enumerable: true,
      get: function get() {
        return _createOperation.createOperation;
      }
    });
    Object.defineProperty(exports, "transformOperation", {
      enumerable: true,
      get: function get() {
        return _transformOperation.transformOperation;
      }
    });

    var _fromError = require("./fromError.js");

    var _toPromise = require("./toPromise.js");

    var _fromPromise = require("./fromPromise.js");

    var _throwServerError = require("./throwServerError.js");

    var _validateOperation = require("./validateOperation.js");

    var _createOperation = require("./createOperation.js");

    var _transformOperation = require("./transformOperation.js");
  }, {
    "./fromError.js": "../node_modules/@apollo/client/link/utils/fromError.js",
    "./toPromise.js": "../node_modules/@apollo/client/link/utils/toPromise.js",
    "./fromPromise.js": "../node_modules/@apollo/client/link/utils/fromPromise.js",
    "./throwServerError.js": "../node_modules/@apollo/client/link/utils/throwServerError.js",
    "./validateOperation.js": "../node_modules/@apollo/client/link/utils/validateOperation.js",
    "./createOperation.js": "../node_modules/@apollo/client/link/utils/createOperation.js",
    "./transformOperation.js": "../node_modules/@apollo/client/link/utils/transformOperation.js"
  }],
  "../node_modules/@apollo/client/link/core/ApolloLink.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ApolloLink = void 0;

    var _tslib = require("tslib");

    var _tsInvariant = require("ts-invariant");

    var _index = require("../../utilities/index.js");

    var _index2 = require("../utils/index.js");

    function passthrough(op, forward) {
      return forward ? forward(op) : _index.Observable.of();
    }

    function toLink(handler) {
      return typeof handler === 'function' ? new ApolloLink(handler) : handler;
    }

    function isTerminating(link) {
      return link.request.length <= 1;
    }

    var LinkError = function (_super) {
      (0, _tslib.__extends)(LinkError, _super);

      function LinkError(message, link) {
        var _this = _super.call(this, message) || this;

        _this.link = link;
        return _this;
      }

      return LinkError;
    }(Error);

    var ApolloLink = function () {
      function ApolloLink(request) {
        if (request) this.request = request;
      }

      ApolloLink.empty = function () {
        return new ApolloLink(function () {
          return _index.Observable.of();
        });
      };

      ApolloLink.from = function (links) {
        if (links.length === 0) return ApolloLink.empty();
        return links.map(toLink).reduce(function (x, y) {
          return x.concat(y);
        });
      };

      ApolloLink.split = function (test, left, right) {
        var leftLink = toLink(left);
        var rightLink = toLink(right || new ApolloLink(passthrough));

        if (isTerminating(leftLink) && isTerminating(rightLink)) {
          return new ApolloLink(function (operation) {
            return test(operation) ? leftLink.request(operation) || _index.Observable.of() : rightLink.request(operation) || _index.Observable.of();
          });
        } else {
          return new ApolloLink(function (operation, forward) {
            return test(operation) ? leftLink.request(operation, forward) || _index.Observable.of() : rightLink.request(operation, forward) || _index.Observable.of();
          });
        }
      };

      ApolloLink.execute = function (link, operation) {
        return link.request((0, _index2.createOperation)(operation.context, (0, _index2.transformOperation)((0, _index2.validateOperation)(operation)))) || _index.Observable.of();
      };

      ApolloLink.concat = function (first, second) {
        var firstLink = toLink(first);

        if (isTerminating(firstLink)) {
          "development" === "production" || _tsInvariant.invariant.warn(new LinkError("You are calling concat on a terminating link, which will have no effect", firstLink));
          return firstLink;
        }

        var nextLink = toLink(second);

        if (isTerminating(nextLink)) {
          return new ApolloLink(function (operation) {
            return firstLink.request(operation, function (op) {
              return nextLink.request(op) || _index.Observable.of();
            }) || _index.Observable.of();
          });
        } else {
          return new ApolloLink(function (operation, forward) {
            return firstLink.request(operation, function (op) {
              return nextLink.request(op, forward) || _index.Observable.of();
            }) || _index.Observable.of();
          });
        }
      };

      ApolloLink.prototype.split = function (test, left, right) {
        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));
      };

      ApolloLink.prototype.concat = function (next) {
        return ApolloLink.concat(this, next);
      };

      ApolloLink.prototype.request = function (operation, forward) {
        throw "development" === "production" ? new _tsInvariant.InvariantError(21) : new _tsInvariant.InvariantError('request is not implemented');
      };

      ApolloLink.prototype.onError = function (reason) {
        throw reason;
      };

      ApolloLink.prototype.setOnError = function (fn) {
        this.onError = fn;
        return this;
      };

      return ApolloLink;
    }();

    exports.ApolloLink = ApolloLink;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "../utils/index.js": "../node_modules/@apollo/client/link/utils/index.js"
  }],
  "../node_modules/@apollo/client/link/core/empty.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.empty = void 0;

    var _ApolloLink = require("./ApolloLink.js");

    var empty = _ApolloLink.ApolloLink.empty;
    exports.empty = empty;
  }, {
    "./ApolloLink.js": "../node_modules/@apollo/client/link/core/ApolloLink.js"
  }],
  "../node_modules/@apollo/client/link/core/from.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.from = void 0;

    var _ApolloLink = require("./ApolloLink.js");

    var from = _ApolloLink.ApolloLink.from;
    exports.from = from;
  }, {
    "./ApolloLink.js": "../node_modules/@apollo/client/link/core/ApolloLink.js"
  }],
  "../node_modules/@apollo/client/link/core/split.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.split = void 0;

    var _ApolloLink = require("./ApolloLink.js");

    var split = _ApolloLink.ApolloLink.split;
    exports.split = split;
  }, {
    "./ApolloLink.js": "../node_modules/@apollo/client/link/core/ApolloLink.js"
  }],
  "../node_modules/@apollo/client/link/core/concat.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.concat = void 0;

    var _ApolloLink = require("./ApolloLink.js");

    var concat = _ApolloLink.ApolloLink.concat;
    exports.concat = concat;
  }, {
    "./ApolloLink.js": "../node_modules/@apollo/client/link/core/ApolloLink.js"
  }],
  "../node_modules/@apollo/client/link/core/execute.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.execute = void 0;

    var _ApolloLink = require("./ApolloLink.js");

    var execute = _ApolloLink.ApolloLink.execute;
    exports.execute = execute;
  }, {
    "./ApolloLink.js": "../node_modules/@apollo/client/link/core/ApolloLink.js"
  }],
  "../node_modules/@apollo/client/link/core/types.js": [function (require, module, exports) {
    ;
  }, {}],
  "../node_modules/@apollo/client/link/core/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      empty: true,
      from: true,
      split: true,
      concat: true,
      execute: true,
      ApolloLink: true
    };
    Object.defineProperty(exports, "empty", {
      enumerable: true,
      get: function get() {
        return _empty.empty;
      }
    });
    Object.defineProperty(exports, "from", {
      enumerable: true,
      get: function get() {
        return _from.from;
      }
    });
    Object.defineProperty(exports, "split", {
      enumerable: true,
      get: function get() {
        return _split.split;
      }
    });
    Object.defineProperty(exports, "concat", {
      enumerable: true,
      get: function get() {
        return _concat.concat;
      }
    });
    Object.defineProperty(exports, "execute", {
      enumerable: true,
      get: function get() {
        return _execute.execute;
      }
    });
    Object.defineProperty(exports, "ApolloLink", {
      enumerable: true,
      get: function get() {
        return _ApolloLink.ApolloLink;
      }
    });

    var _empty = require("./empty.js");

    var _from = require("./from.js");

    var _split = require("./split.js");

    var _concat = require("./concat.js");

    var _execute = require("./execute.js");

    var _ApolloLink = require("./ApolloLink.js");

    var _types = require("./types.js");

    Object.keys(_types).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _types[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _types[key];
        }
      });
    });
  }, {
    "./empty.js": "../node_modules/@apollo/client/link/core/empty.js",
    "./from.js": "../node_modules/@apollo/client/link/core/from.js",
    "./split.js": "../node_modules/@apollo/client/link/core/split.js",
    "./concat.js": "../node_modules/@apollo/client/link/core/concat.js",
    "./execute.js": "../node_modules/@apollo/client/link/core/execute.js",
    "./ApolloLink.js": "../node_modules/@apollo/client/link/core/ApolloLink.js",
    "./types.js": "../node_modules/@apollo/client/link/core/types.js"
  }],
  "../node_modules/@apollo/client/version.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.version = void 0;
    var version = 'local';
    exports.version = version;
  }, {}],
  "../node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parseAndCheckHttpResponse = parseAndCheckHttpResponse;

    var _index = require("../utils/index.js");

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function parseAndCheckHttpResponse(operations) {
      return function (response) {
        return response.text().then(function (bodyText) {
          try {
            return JSON.parse(bodyText);
          } catch (err) {
            var parseError = err;
            parseError.name = 'ServerParseError';
            parseError.response = response;
            parseError.statusCode = response.status;
            parseError.bodyText = bodyText;
            throw parseError;
          }
        }).then(function (result) {
          if (response.status >= 300) {
            (0, _index.throwServerError)(response, result, "Response not successful: Received status code " + response.status);
          }

          if (!Array.isArray(result) && !hasOwnProperty.call(result, 'data') && !hasOwnProperty.call(result, 'errors')) {
            (0, _index.throwServerError)(response, result, "Server response was missing for query '" + (Array.isArray(operations) ? operations.map(function (op) {
              return op.operationName;
            }) : operations.operationName) + "'.");
          }

          return result;
        });
      };
    }
  }, {
    "../utils/index.js": "../node_modules/@apollo/client/link/utils/index.js"
  }],
  "../node_modules/@apollo/client/link/http/serializeFetchParameter.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.serializeFetchParameter = void 0;

    var _tsInvariant = require("ts-invariant");

    var serializeFetchParameter = function serializeFetchParameter(p, label) {
      var serialized;

      try {
        serialized = JSON.stringify(p);
      } catch (e) {
        var parseError = "development" === "production" ? new _tsInvariant.InvariantError(23) : new _tsInvariant.InvariantError("Network request failed. " + label + " is not serializable: " + e.message);
        parseError.parseError = e;
        throw parseError;
      }

      return serialized;
    };

    exports.serializeFetchParameter = serializeFetchParameter;
  }, {
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js"
  }],
  "../node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.selectHttpOptionsAndBody = exports.fallbackHttpConfig = void 0;

    var _tslib = require("tslib");

    var _graphql = require("graphql");

    var defaultHttpOptions = {
      includeQuery: true,
      includeExtensions: false
    };
    var defaultHeaders = {
      accept: '*/*',
      'content-type': 'application/json'
    };
    var defaultOptions = {
      method: 'POST'
    };
    var fallbackHttpConfig = {
      http: defaultHttpOptions,
      headers: defaultHeaders,
      options: defaultOptions
    };
    exports.fallbackHttpConfig = fallbackHttpConfig;

    var selectHttpOptionsAndBody = function selectHttpOptionsAndBody(operation, fallbackConfig) {
      var configs = [];

      for (var _i = 2; _i < arguments.length; _i++) {
        configs[_i - 2] = arguments[_i];
      }

      var options = (0, _tslib.__assign)((0, _tslib.__assign)({}, fallbackConfig.options), {
        headers: fallbackConfig.headers,
        credentials: fallbackConfig.credentials
      });
      var http = fallbackConfig.http || {};
      configs.forEach(function (config) {
        options = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, options), config.options), {
          headers: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.headers), config.headers)
        });
        if (config.credentials) options.credentials = config.credentials;
        http = (0, _tslib.__assign)((0, _tslib.__assign)({}, http), config.http);
      });
      var operationName = operation.operationName,
          extensions = operation.extensions,
          variables = operation.variables,
          query = operation.query;
      var body = {
        operationName: operationName,
        variables: variables
      };
      if (http.includeExtensions) body.extensions = extensions;
      if (http.includeQuery) body.query = (0, _graphql.print)(query);
      return {
        options: options,
        body: body
      };
    };

    exports.selectHttpOptionsAndBody = selectHttpOptionsAndBody;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "graphql": "../node_modules/graphql/index.mjs"
  }],
  "../node_modules/@apollo/client/link/http/checkFetcher.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.checkFetcher = void 0;

    var _tsInvariant = require("ts-invariant");

    var checkFetcher = function checkFetcher(fetcher) {
      if (!fetcher && typeof fetch === 'undefined') {
        throw "development" === "production" ? new _tsInvariant.InvariantError(22) : new _tsInvariant.InvariantError("\n\"fetch\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    ");
      }
    };

    exports.checkFetcher = checkFetcher;
  }, {
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js"
  }],
  "../node_modules/@apollo/client/link/http/createSignalIfSupported.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createSignalIfSupported = void 0;

    var createSignalIfSupported = function createSignalIfSupported() {
      if (typeof AbortController === 'undefined') return {
        controller: false,
        signal: false
      };
      var controller = new AbortController();
      var signal = controller.signal;
      return {
        controller: controller,
        signal: signal
      };
    };

    exports.createSignalIfSupported = createSignalIfSupported;
  }, {}],
  "../node_modules/@apollo/client/link/http/selectURI.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.selectURI = void 0;

    var selectURI = function selectURI(operation, fallbackURI) {
      var context = operation.getContext();
      var contextURI = context.uri;

      if (contextURI) {
        return contextURI;
      } else if (typeof fallbackURI === 'function') {
        return fallbackURI(operation);
      } else {
        return fallbackURI || '/graphql';
      }
    };

    exports.selectURI = selectURI;
  }, {}],
  "../node_modules/@apollo/client/link/http/rewriteURIForGET.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.rewriteURIForGET = rewriteURIForGET;

    var _serializeFetchParameter = require("./serializeFetchParameter.js");

    function rewriteURIForGET(chosenURI, body) {
      var queryParams = [];

      var addQueryParam = function addQueryParam(key, value) {
        queryParams.push(key + "=" + encodeURIComponent(value));
      };

      if ('query' in body) {
        addQueryParam('query', body.query);
      }

      if (body.operationName) {
        addQueryParam('operationName', body.operationName);
      }

      if (body.variables) {
        var serializedVariables = void 0;

        try {
          serializedVariables = (0, _serializeFetchParameter.serializeFetchParameter)(body.variables, 'Variables map');
        } catch (parseError) {
          return {
            parseError: parseError
          };
        }

        addQueryParam('variables', serializedVariables);
      }

      if (body.extensions) {
        var serializedExtensions = void 0;

        try {
          serializedExtensions = (0, _serializeFetchParameter.serializeFetchParameter)(body.extensions, 'Extensions map');
        } catch (parseError) {
          return {
            parseError: parseError
          };
        }

        addQueryParam('extensions', serializedExtensions);
      }

      var fragment = '',
          preFragment = chosenURI;
      var fragmentStart = chosenURI.indexOf('#');

      if (fragmentStart !== -1) {
        fragment = chosenURI.substr(fragmentStart);
        preFragment = chosenURI.substr(0, fragmentStart);
      }

      var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';
      var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;
      return {
        newURI: newURI
      };
    }
  }, {
    "./serializeFetchParameter.js": "../node_modules/@apollo/client/link/http/serializeFetchParameter.js"
  }],
  "../node_modules/@apollo/client/link/http/createHttpLink.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createHttpLink = void 0;

    var _tslib = require("tslib");

    var _index = require("../core/index.js");

    var _index2 = require("../../utilities/index.js");

    var _serializeFetchParameter = require("./serializeFetchParameter.js");

    var _selectURI = require("./selectURI.js");

    var _parseAndCheckHttpResponse = require("./parseAndCheckHttpResponse.js");

    var _checkFetcher = require("./checkFetcher.js");

    var _selectHttpOptionsAndBody = require("./selectHttpOptionsAndBody.js");

    var _createSignalIfSupported = require("./createSignalIfSupported.js");

    var _rewriteURIForGET = require("./rewriteURIForGET.js");

    var _index3 = require("../utils/index.js");

    var createHttpLink = function createHttpLink(linkOptions) {
      if (linkOptions === void 0) {
        linkOptions = {};
      }

      var _a = linkOptions.uri,
          uri = _a === void 0 ? '/graphql' : _a,
          fetcher = linkOptions.fetch,
          includeExtensions = linkOptions.includeExtensions,
          useGETForQueries = linkOptions.useGETForQueries,
          requestOptions = (0, _tslib.__rest)(linkOptions, ["uri", "fetch", "includeExtensions", "useGETForQueries"]);
      (0, _checkFetcher.checkFetcher)(fetcher);

      if (!fetcher) {
        fetcher = fetch;
      }

      var linkConfig = {
        http: {
          includeExtensions: includeExtensions
        },
        options: requestOptions.fetchOptions,
        credentials: requestOptions.credentials,
        headers: requestOptions.headers
      };
      return new _index.ApolloLink(function (operation) {
        var chosenURI = (0, _selectURI.selectURI)(operation, uri);
        var context = operation.getContext();
        var clientAwarenessHeaders = {};

        if (context.clientAwareness) {
          var _a = context.clientAwareness,
              name_1 = _a.name,
              version = _a.version;

          if (name_1) {
            clientAwarenessHeaders['apollographql-client-name'] = name_1;
          }

          if (version) {
            clientAwarenessHeaders['apollographql-client-version'] = version;
          }
        }

        var contextHeaders = (0, _tslib.__assign)((0, _tslib.__assign)({}, clientAwarenessHeaders), context.headers);
        var contextConfig = {
          http: context.http,
          options: context.fetchOptions,
          credentials: context.credentials,
          headers: contextHeaders
        };

        var _b = (0, _selectHttpOptionsAndBody.selectHttpOptionsAndBody)(operation, _selectHttpOptionsAndBody.fallbackHttpConfig, linkConfig, contextConfig),
            options = _b.options,
            body = _b.body;

        var controller;

        if (!options.signal) {
          var _c = (0, _createSignalIfSupported.createSignalIfSupported)(),
              _controller = _c.controller,
              signal = _c.signal;

          controller = _controller;
          if (controller) options.signal = signal;
        }

        var definitionIsMutation = function definitionIsMutation(d) {
          return d.kind === 'OperationDefinition' && d.operation === 'mutation';
        };

        if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {
          options.method = 'GET';
        }

        if (options.method === 'GET') {
          var _d = (0, _rewriteURIForGET.rewriteURIForGET)(chosenURI, body),
              newURI = _d.newURI,
              parseError = _d.parseError;

          if (parseError) {
            return (0, _index3.fromError)(parseError);
          }

          chosenURI = newURI;
        } else {
          try {
            options.body = (0, _serializeFetchParameter.serializeFetchParameter)(body, 'Payload');
          } catch (parseError) {
            return (0, _index3.fromError)(parseError);
          }
        }

        return new _index2.Observable(function (observer) {
          fetcher(chosenURI, options).then(function (response) {
            operation.setContext({
              response: response
            });
            return response;
          }).then((0, _parseAndCheckHttpResponse.parseAndCheckHttpResponse)(operation)).then(function (result) {
            observer.next(result);
            observer.complete();
            return result;
          }).catch(function (err) {
            if (err.name === 'AbortError') return;

            if (err.result && err.result.errors && err.result.data) {
              observer.next(err.result);
            }

            observer.error(err);
          });
          return function () {
            if (controller) controller.abort();
          };
        });
      });
    };

    exports.createHttpLink = createHttpLink;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "../core/index.js": "../node_modules/@apollo/client/link/core/index.js",
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "./serializeFetchParameter.js": "../node_modules/@apollo/client/link/http/serializeFetchParameter.js",
    "./selectURI.js": "../node_modules/@apollo/client/link/http/selectURI.js",
    "./parseAndCheckHttpResponse.js": "../node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js",
    "./checkFetcher.js": "../node_modules/@apollo/client/link/http/checkFetcher.js",
    "./selectHttpOptionsAndBody.js": "../node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js",
    "./createSignalIfSupported.js": "../node_modules/@apollo/client/link/http/createSignalIfSupported.js",
    "./rewriteURIForGET.js": "../node_modules/@apollo/client/link/http/rewriteURIForGET.js",
    "../utils/index.js": "../node_modules/@apollo/client/link/utils/index.js"
  }],
  "../node_modules/@apollo/client/link/http/HttpLink.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.HttpLink = void 0;

    var _tslib = require("tslib");

    var _index = require("../core/index.js");

    var _createHttpLink = require("./createHttpLink.js");

    var HttpLink = function (_super) {
      (0, _tslib.__extends)(HttpLink, _super);

      function HttpLink(options) {
        if (options === void 0) {
          options = {};
        }

        var _this = _super.call(this, (0, _createHttpLink.createHttpLink)(options).request) || this;

        _this.options = options;
        return _this;
      }

      return HttpLink;
    }(_index.ApolloLink);

    exports.HttpLink = HttpLink;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "../core/index.js": "../node_modules/@apollo/client/link/core/index.js",
    "./createHttpLink.js": "../node_modules/@apollo/client/link/http/createHttpLink.js"
  }],
  "../node_modules/@apollo/client/link/http/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "parseAndCheckHttpResponse", {
      enumerable: true,
      get: function get() {
        return _parseAndCheckHttpResponse.parseAndCheckHttpResponse;
      }
    });
    Object.defineProperty(exports, "serializeFetchParameter", {
      enumerable: true,
      get: function get() {
        return _serializeFetchParameter.serializeFetchParameter;
      }
    });
    Object.defineProperty(exports, "fallbackHttpConfig", {
      enumerable: true,
      get: function get() {
        return _selectHttpOptionsAndBody.fallbackHttpConfig;
      }
    });
    Object.defineProperty(exports, "selectHttpOptionsAndBody", {
      enumerable: true,
      get: function get() {
        return _selectHttpOptionsAndBody.selectHttpOptionsAndBody;
      }
    });
    Object.defineProperty(exports, "checkFetcher", {
      enumerable: true,
      get: function get() {
        return _checkFetcher.checkFetcher;
      }
    });
    Object.defineProperty(exports, "createSignalIfSupported", {
      enumerable: true,
      get: function get() {
        return _createSignalIfSupported.createSignalIfSupported;
      }
    });
    Object.defineProperty(exports, "selectURI", {
      enumerable: true,
      get: function get() {
        return _selectURI.selectURI;
      }
    });
    Object.defineProperty(exports, "createHttpLink", {
      enumerable: true,
      get: function get() {
        return _createHttpLink.createHttpLink;
      }
    });
    Object.defineProperty(exports, "HttpLink", {
      enumerable: true,
      get: function get() {
        return _HttpLink.HttpLink;
      }
    });
    Object.defineProperty(exports, "rewriteURIForGET", {
      enumerable: true,
      get: function get() {
        return _rewriteURIForGET.rewriteURIForGET;
      }
    });

    var _parseAndCheckHttpResponse = require("./parseAndCheckHttpResponse.js");

    var _serializeFetchParameter = require("./serializeFetchParameter.js");

    var _selectHttpOptionsAndBody = require("./selectHttpOptionsAndBody.js");

    var _checkFetcher = require("./checkFetcher.js");

    var _createSignalIfSupported = require("./createSignalIfSupported.js");

    var _selectURI = require("./selectURI.js");

    var _createHttpLink = require("./createHttpLink.js");

    var _HttpLink = require("./HttpLink.js");

    var _rewriteURIForGET = require("./rewriteURIForGET.js");
  }, {
    "./parseAndCheckHttpResponse.js": "../node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js",
    "./serializeFetchParameter.js": "../node_modules/@apollo/client/link/http/serializeFetchParameter.js",
    "./selectHttpOptionsAndBody.js": "../node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js",
    "./checkFetcher.js": "../node_modules/@apollo/client/link/http/checkFetcher.js",
    "./createSignalIfSupported.js": "../node_modules/@apollo/client/link/http/createSignalIfSupported.js",
    "./selectURI.js": "../node_modules/@apollo/client/link/http/selectURI.js",
    "./createHttpLink.js": "../node_modules/@apollo/client/link/http/createHttpLink.js",
    "./HttpLink.js": "../node_modules/@apollo/client/link/http/HttpLink.js",
    "./rewriteURIForGET.js": "../node_modules/@apollo/client/link/http/rewriteURIForGET.js"
  }],
  "../node_modules/@wry/equality/lib/equality.esm.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.equal = equal;
    exports.default = void 0;
    var _a = Object.prototype,
        toString = _a.toString,
        hasOwnProperty = _a.hasOwnProperty;
    var fnToStr = Function.prototype.toString;
    var previousComparisons = new Map();
    /**
     * Performs a deep equality check on two JavaScript values, tolerating cycles.
     */

    function equal(a, b) {
      try {
        return check(a, b);
      } finally {
        previousComparisons.clear();
      }
    }

    function check(a, b) {
      // If the two values are strictly equal, our job is easy.
      if (a === b) {
        return true;
      } // Object.prototype.toString returns a representation of the runtime type of
      // the given value that is considerably more precise than typeof.


      var aTag = toString.call(a);
      var bTag = toString.call(b); // If the runtime types of a and b are different, they could maybe be equal
      // under some interpretation of equality, but for simplicity and performance
      // we just return false instead.

      if (aTag !== bTag) {
        return false;
      }

      switch (aTag) {
        case '[object Array]':
          // Arrays are a lot like other objects, but we can cheaply compare their
          // lengths as a short-cut before comparing their elements.
          if (a.length !== b.length) return false;
        // Fall through to object case...

        case '[object Object]':
          {
            if (previouslyCompared(a, b)) return true;
            var aKeys = Object.keys(a);
            var bKeys = Object.keys(b); // If `a` and `b` have a different number of enumerable keys, they
            // must be different.

            var keyCount = aKeys.length;
            if (keyCount !== bKeys.length) return false; // Now make sure they have the same keys.

            for (var k = 0; k < keyCount; ++k) {
              if (!hasOwnProperty.call(b, aKeys[k])) {
                return false;
              }
            } // Finally, check deep equality of all child properties.


            for (var k = 0; k < keyCount; ++k) {
              var key = aKeys[k];

              if (!check(a[key], b[key])) {
                return false;
              }
            }

            return true;
          }

        case '[object Error]':
          return a.name === b.name && a.message === b.message;

        case '[object Number]':
          // Handle NaN, which is !== itself.
          if (a !== a) return b !== b;
        // Fall through to shared +a === +b case...

        case '[object Boolean]':
        case '[object Date]':
          return +a === +b;

        case '[object RegExp]':
        case '[object String]':
          return a == "" + b;

        case '[object Map]':
        case '[object Set]':
          {
            if (a.size !== b.size) return false;
            if (previouslyCompared(a, b)) return true;
            var aIterator = a.entries();
            var isMap = aTag === '[object Map]';

            while (true) {
              var info = aIterator.next();
              if (info.done) break; // If a instanceof Set, aValue === aKey.

              var _a = info.value,
                  aKey = _a[0],
                  aValue = _a[1]; // So this works the same way for both Set and Map.

              if (!b.has(aKey)) {
                return false;
              } // However, we care about deep equality of values only when dealing
              // with Map structures.


              if (isMap && !check(aValue, b.get(aKey))) {
                return false;
              }
            }

            return true;
          }

        case '[object Function]':
          {
            var aCode = fnToStr.call(a);

            if (aCode !== fnToStr.call(b)) {
              return false;
            } // We consider non-native functions equal if they have the same code
            // (native functions require === because their code is censored).
            // Note that this behavior is not entirely sound, since !== function
            // objects with the same code can behave differently depending on
            // their closure scope. However, any function can behave differently
            // depending on the values of its input arguments (including this)
            // and its calling context (including its closure scope), even
            // though the function object is === to itself; and it is entirely
            // possible for functions that are not === to behave exactly the
            // same under all conceivable circumstances. Because none of these
            // factors are statically decidable in JavaScript, JS function
            // equality is not well-defined. This ambiguity allows us to
            // consider the best possible heuristic among various imperfect
            // options, and equating non-native functions that have the same
            // code has enormous practical benefits, such as when comparing
            // functions that are repeatedly passed as fresh function
            // expressions within objects that are otherwise deeply equal. Since
            // any function created from the same syntactic expression (in the
            // same code location) will always stringify to the same code
            // according to fnToStr.call, we can reasonably expect these
            // repeatedly passed function expressions to have the same code, and
            // thus behave "the same" (with all the caveats mentioned above),
            // even though the runtime function objects are !== to one another.


            return !endsWith(aCode, nativeCodeSuffix);
          }
      } // Otherwise the values are not equal.


      return false;
    }

    var nativeCodeSuffix = "{ [native code] }";

    function endsWith(full, suffix) {
      var fromIndex = full.length - suffix.length;
      return fromIndex >= 0 && full.indexOf(suffix, fromIndex) === fromIndex;
    }

    function previouslyCompared(a, b) {
      // Though cyclic references can make an object graph appear infinite from the
      // perspective of a depth-first traversal, the graph still contains a finite
      // number of distinct object references. We use the previousComparisons cache
      // to avoid comparing the same pair of object references more than once, which
      // guarantees termination (even if we end up comparing every object in one
      // graph to every object in the other graph, which is extremely unlikely),
      // while still allowing weird isomorphic structures (like rings with different
      // lengths) a chance to pass the equality test.
      var bSet = previousComparisons.get(a);

      if (bSet) {
        // Return true here because we can be sure false will be returned somewhere
        // else if the objects are not equivalent.
        if (bSet.has(b)) return true;
      } else {
        previousComparisons.set(a, bSet = new Set());
      }

      bSet.add(b);
      return false;
    }

    var _default = equal;
    exports.default = _default;
  }, {}],
  "../node_modules/@apollo/client/errors/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isApolloError = isApolloError;
    exports.ApolloError = void 0;

    var _tslib = require("tslib");

    var _index = require("../utilities/index.js");

    function isApolloError(err) {
      return err.hasOwnProperty('graphQLErrors');
    }

    var generateErrorMessage = function generateErrorMessage(err) {
      var message = '';

      if ((0, _index.isNonEmptyArray)(err.graphQLErrors)) {
        err.graphQLErrors.forEach(function (graphQLError) {
          var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';
          message += errorMessage + "\n";
        });
      }

      if (err.networkError) {
        message += err.networkError.message + "\n";
      }

      message = message.replace(/\n$/, '');
      return message;
    };

    var ApolloError = function (_super) {
      (0, _tslib.__extends)(ApolloError, _super);

      function ApolloError(_a) {
        var graphQLErrors = _a.graphQLErrors,
            networkError = _a.networkError,
            errorMessage = _a.errorMessage,
            extraInfo = _a.extraInfo;

        var _this = _super.call(this, errorMessage) || this;

        _this.graphQLErrors = graphQLErrors || [];
        _this.networkError = networkError || null;
        _this.message = errorMessage || generateErrorMessage(_this);
        _this.extraInfo = extraInfo;
        _this.__proto__ = ApolloError.prototype;
        return _this;
      }

      return ApolloError;
    }(Error);

    exports.ApolloError = ApolloError;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js"
  }],
  "../node_modules/@apollo/client/core/MutationStore.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MutationStore = void 0;

    var MutationStore = function () {
      function MutationStore() {
        this.store = {};
      }

      MutationStore.prototype.getStore = function () {
        return this.store;
      };

      MutationStore.prototype.get = function (mutationId) {
        return this.store[mutationId];
      };

      MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {
        this.store[mutationId] = {
          mutation: mutation,
          variables: variables || {},
          loading: true,
          error: null
        };
      };

      MutationStore.prototype.markMutationError = function (mutationId, error) {
        var mutation = this.store[mutationId];

        if (mutation) {
          mutation.loading = false;
          mutation.error = error;
        }
      };

      MutationStore.prototype.markMutationResult = function (mutationId) {
        var mutation = this.store[mutationId];

        if (mutation) {
          mutation.loading = false;
          mutation.error = null;
        }
      };

      MutationStore.prototype.reset = function () {
        this.store = {};
      };

      return MutationStore;
    }();

    exports.MutationStore = MutationStore;
  }, {}],
  "../node_modules/@apollo/client/core/networkStatus.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isNetworkRequestInFlight = isNetworkRequestInFlight;
    exports.NetworkStatus = void 0;
    var NetworkStatus;
    exports.NetworkStatus = NetworkStatus;

    (function (NetworkStatus) {
      NetworkStatus[NetworkStatus["loading"] = 1] = "loading";
      NetworkStatus[NetworkStatus["setVariables"] = 2] = "setVariables";
      NetworkStatus[NetworkStatus["fetchMore"] = 3] = "fetchMore";
      NetworkStatus[NetworkStatus["refetch"] = 4] = "refetch";
      NetworkStatus[NetworkStatus["poll"] = 6] = "poll";
      NetworkStatus[NetworkStatus["ready"] = 7] = "ready";
      NetworkStatus[NetworkStatus["error"] = 8] = "error";
    })(NetworkStatus || (exports.NetworkStatus = NetworkStatus = {}));

    function isNetworkRequestInFlight(networkStatus) {
      return networkStatus ? networkStatus < 7 : false;
    }
  }, {}],
  "../node_modules/@apollo/client/core/Reobserver.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Reobserver = void 0;

    var _networkStatus = require("./networkStatus.js");

    var _index = require("../utilities/index.js");

    var _tsInvariant = require("ts-invariant");

    var Reobserver = function () {
      function Reobserver(observer, options, fetch, shouldFetch) {
        this.observer = observer;
        this.options = options;
        this.fetch = fetch;
        this.shouldFetch = shouldFetch;
      }

      Reobserver.prototype.reobserve = function (newOptions, newNetworkStatus) {
        if (newOptions) {
          this.updateOptions(newOptions);
        } else {
          this.updatePolling();
        }

        var concast = this.fetch(this.options, newNetworkStatus);

        if (this.concast) {
          this.concast.removeObserver(this.observer, true);
        }

        concast.addObserver(this.observer);
        return (this.concast = concast).promise;
      };

      Reobserver.prototype.updateOptions = function (newOptions) {
        Object.assign(this.options, (0, _index.compact)(newOptions));
        this.updatePolling();
        return this;
      };

      Reobserver.prototype.stop = function () {
        if (this.concast) {
          this.concast.removeObserver(this.observer);
          delete this.concast;
        }

        if (this.pollingInfo) {
          clearTimeout(this.pollingInfo.timeout);
          this.options.pollInterval = 0;
          this.updatePolling();
        }
      };

      Reobserver.prototype.updatePolling = function () {
        var _this = this;

        var _a = this,
            pollingInfo = _a.pollingInfo,
            pollInterval = _a.options.pollInterval;

        if (!pollInterval) {
          if (pollingInfo) {
            clearTimeout(pollingInfo.timeout);
            delete this.pollingInfo;
          }

          return;
        }

        if (pollingInfo && pollingInfo.interval === pollInterval) {
          return;
        }

        "development" === "production" ? (0, _tsInvariant.invariant)(pollInterval, 20) : (0, _tsInvariant.invariant)(pollInterval, 'Attempted to start a polling query without a polling interval.');

        if (this.shouldFetch === false) {
          return;
        }

        var info = pollingInfo || (this.pollingInfo = {});
        info.interval = pollInterval;

        var maybeFetch = function maybeFetch() {
          if (_this.pollingInfo) {
            if (_this.shouldFetch && _this.shouldFetch()) {
              _this.reobserve({
                fetchPolicy: "network-only",
                nextFetchPolicy: _this.options.fetchPolicy || "cache-first"
              }, _networkStatus.NetworkStatus.poll).then(poll, poll);
            } else {
              poll();
            }
          }

          ;
        };

        var poll = function poll() {
          var info = _this.pollingInfo;

          if (info) {
            clearTimeout(info.timeout);
            info.timeout = setTimeout(maybeFetch, info.interval);
          }
        };

        poll();
      };

      return Reobserver;
    }();

    exports.Reobserver = Reobserver;
  }, {
    "./networkStatus.js": "../node_modules/@apollo/client/core/networkStatus.js",
    "../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js"
  }],
  "../node_modules/@apollo/client/core/ObservableQuery.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ObservableQuery = void 0;

    var _tslib = require("tslib");

    var _tsInvariant = require("ts-invariant");

    var _equality = require("@wry/equality");

    var _networkStatus = require("./networkStatus.js");

    var _index = require("../utilities/index.js");

    var _Reobserver = require("./Reobserver.js");

    var warnedAboutUpdateQuery = false;

    var ObservableQuery = function (_super) {
      (0, _tslib.__extends)(ObservableQuery, _super);

      function ObservableQuery(_a) {
        var queryManager = _a.queryManager,
            queryInfo = _a.queryInfo,
            options = _a.options;

        var _this = _super.call(this, function (observer) {
          return _this.onSubscribe(observer);
        }) || this;

        _this.observers = new Set();
        _this.subscriptions = new Set();
        _this.observer = {
          next: function next(result) {
            if (_this.lastError || _this.isDifferentFromLastResult(result)) {
              _this.updateLastResult(result);

              (0, _index.iterateObserversSafely)(_this.observers, 'next', result);
            }
          },
          error: function error(_error6) {
            _this.updateLastResult((0, _tslib.__assign)((0, _tslib.__assign)({}, _this.lastResult), {
              error: _error6,
              errors: _error6.graphQLErrors,
              networkStatus: _networkStatus.NetworkStatus.error,
              loading: false
            }));

            (0, _index.iterateObserversSafely)(_this.observers, 'error', _this.lastError = _error6);
          }
        };
        _this.isTornDown = false;
        _this.options = options;
        _this.queryId = queryManager.generateQueryId();
        var opDef = (0, _index.getOperationDefinition)(options.query);
        _this.queryName = opDef && opDef.name && opDef.name.value;
        _this.queryManager = queryManager;
        _this.queryInfo = queryInfo;
        return _this;
      }

      Object.defineProperty(ObservableQuery.prototype, "variables", {
        get: function get() {
          return this.options.variables;
        },
        enumerable: false,
        configurable: true
      });

      ObservableQuery.prototype.result = function () {
        var _this = this;

        return new Promise(function (resolve, reject) {
          var observer = {
            next: function next(result) {
              resolve(result);

              _this.observers.delete(observer);

              if (!_this.observers.size) {
                _this.queryManager.removeQuery(_this.queryId);
              }

              setTimeout(function () {
                subscription.unsubscribe();
              }, 0);
            },
            error: reject
          };

          var subscription = _this.subscribe(observer);
        });
      };

      ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {
        if (saveAsLastResult === void 0) {
          saveAsLastResult = true;
        }

        var lastResult = this.lastResult;
        var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || _networkStatus.NetworkStatus.ready;
        var result = (0, _tslib.__assign)((0, _tslib.__assign)({}, lastResult), {
          loading: (0, _networkStatus.isNetworkRequestInFlight)(networkStatus),
          networkStatus: networkStatus
        });

        if (this.isTornDown) {
          return result;
        }

        var _a = this.options.fetchPolicy,
            fetchPolicy = _a === void 0 ? 'cache-first' : _a;

        if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {
          delete result.partial;
        } else if (!result.data || !this.queryManager.transform(this.options.query).hasForcedResolvers) {
          var diff = this.queryInfo.getDiff();
          result.data = diff.complete || this.options.returnPartialData ? diff.result : void 0;

          if (diff.complete) {
            if (result.networkStatus === _networkStatus.NetworkStatus.loading && (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only')) {
              result.networkStatus = _networkStatus.NetworkStatus.ready;
              result.loading = false;
            }

            delete result.partial;
          } else {
            result.partial = true;
          }
        }

        if (saveAsLastResult) {
          this.updateLastResult(result);
        }

        return result;
      };

      ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {
        return !(0, _equality.equal)(this.lastResultSnapshot, newResult);
      };

      ObservableQuery.prototype.getLastResult = function () {
        return this.lastResult;
      };

      ObservableQuery.prototype.getLastError = function () {
        return this.lastError;
      };

      ObservableQuery.prototype.resetLastResults = function () {
        delete this.lastResult;
        delete this.lastResultSnapshot;
        delete this.lastError;
        this.isTornDown = false;
      };

      ObservableQuery.prototype.resetQueryStoreErrors = function () {
        this.queryManager.resetErrors(this.queryId);
      };

      ObservableQuery.prototype.refetch = function (variables) {
        var reobserveOptions = {
          pollInterval: 0
        };
        var fetchPolicy = this.options.fetchPolicy;

        if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'cache-and-network') {
          reobserveOptions.fetchPolicy = 'network-only';
          reobserveOptions.nextFetchPolicy = fetchPolicy || "cache-first";
        }

        if (variables && !(0, _equality.equal)(this.options.variables, variables)) {
          reobserveOptions.variables = this.options.variables = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.options.variables), variables);
        }

        return this.newReobserver(false).reobserve(reobserveOptions, _networkStatus.NetworkStatus.refetch);
      };

      ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {
        var _this = this;

        var combinedOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, fetchMoreOptions.query ? fetchMoreOptions : (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, this.options), fetchMoreOptions), {
          variables: (0, _tslib.__assign)((0, _tslib.__assign)({}, this.options.variables), fetchMoreOptions.variables)
        })), {
          fetchPolicy: "no-cache"
        });
        var qid = this.queryManager.generateQueryId();

        if (combinedOptions.notifyOnNetworkStatusChange) {
          this.queryInfo.networkStatus = _networkStatus.NetworkStatus.fetchMore;
          this.observe();
        }

        return this.queryManager.fetchQuery(qid, combinedOptions, _networkStatus.NetworkStatus.fetchMore).then(function (fetchMoreResult) {
          var data = fetchMoreResult.data;
          var updateQuery = fetchMoreOptions.updateQuery;

          if (updateQuery) {
            if ("development" !== "production" && !warnedAboutUpdateQuery) {
              "development" === "production" || _tsInvariant.invariant.warn("The updateQuery callback for fetchMore is deprecated, and will be removed\nin the next major version of Apollo Client.\n\nPlease convert updateQuery functions to field policies with appropriate\nread and merge functions, or use/adapt a helper function (such as\nconcatPagination, offsetLimitPagination, or relayStylePagination) from\n@apollo/client/utilities.\n\nThe field policy system handles pagination more effectively than a\nhand-written updateQuery function, and you only need to define the policy\nonce, rather than every time you call fetchMore.");
              warnedAboutUpdateQuery = true;
            }

            _this.updateQuery(function (previous) {
              return updateQuery(previous, {
                fetchMoreResult: data,
                variables: combinedOptions.variables
              });
            });
          } else {
            _this.queryManager.cache.writeQuery({
              query: combinedOptions.query,
              variables: combinedOptions.variables,
              data: data
            });
          }

          return fetchMoreResult;
        }).finally(function () {
          _this.queryManager.stopQuery(qid);

          _this.reobserve();
        });
      };

      ObservableQuery.prototype.subscribeToMore = function (options) {
        var _this = this;

        var subscription = this.queryManager.startGraphQLSubscription({
          query: options.document,
          variables: options.variables,
          context: options.context
        }).subscribe({
          next: function next(subscriptionData) {
            var updateQuery = options.updateQuery;

            if (updateQuery) {
              _this.updateQuery(function (previous, _a) {
                var variables = _a.variables;
                return updateQuery(previous, {
                  subscriptionData: subscriptionData,
                  variables: variables
                });
              });
            }
          },
          error: function error(err) {
            if (options.onError) {
              options.onError(err);
              return;
            }

            "development" === "production" || _tsInvariant.invariant.error('Unhandled GraphQL subscription error', err);
          }
        });
        this.subscriptions.add(subscription);
        return function () {
          if (_this.subscriptions.delete(subscription)) {
            subscription.unsubscribe();
          }
        };
      };

      ObservableQuery.prototype.setOptions = function (newOptions) {
        return this.reobserve(newOptions);
      };

      ObservableQuery.prototype.setVariables = function (variables) {
        if ((0, _equality.equal)(this.variables, variables)) {
          return this.observers.size ? this.result() : Promise.resolve();
        }

        this.options.variables = variables;

        if (!this.observers.size) {
          return Promise.resolve();
        }

        var _a = this.options.fetchPolicy,
            fetchPolicy = _a === void 0 ? 'cache-first' : _a;
        var reobserveOptions = {
          fetchPolicy: fetchPolicy,
          variables: variables
        };

        if (fetchPolicy !== 'cache-first' && fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {
          reobserveOptions.fetchPolicy = 'cache-and-network';
          reobserveOptions.nextFetchPolicy = fetchPolicy;
        }

        return this.reobserve(reobserveOptions, _networkStatus.NetworkStatus.setVariables);
      };

      ObservableQuery.prototype.updateQuery = function (mapFn) {
        var _a;

        var queryManager = this.queryManager;
        var result = queryManager.cache.diff({
          query: this.options.query,
          variables: this.variables,
          previousResult: (_a = this.lastResult) === null || _a === void 0 ? void 0 : _a.data,
          returnPartialData: true,
          optimistic: false
        }).result;
        var newResult = mapFn(result, {
          variables: this.variables
        });

        if (newResult) {
          queryManager.cache.writeQuery({
            query: this.options.query,
            data: newResult,
            variables: this.variables
          });
          queryManager.broadcastQueries();
        }
      };

      ObservableQuery.prototype.startPolling = function (pollInterval) {
        this.getReobserver().updateOptions({
          pollInterval: pollInterval
        });
      };

      ObservableQuery.prototype.stopPolling = function () {
        if (this.reobserver) {
          this.reobserver.updateOptions({
            pollInterval: 0
          });
        }
      };

      ObservableQuery.prototype.updateLastResult = function (newResult) {
        var previousResult = this.lastResult;
        this.lastResult = newResult;
        this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : (0, _index.cloneDeep)(newResult);

        if (!(0, _index.isNonEmptyArray)(newResult.errors)) {
          delete this.lastError;
        }

        return previousResult;
      };

      ObservableQuery.prototype.onSubscribe = function (observer) {
        var _this = this;

        if (observer === this.observer) {
          return function () {};
        }

        try {
          var subObserver = observer._subscription._observer;

          if (subObserver && !subObserver.error) {
            subObserver.error = defaultSubscriptionObserverErrorCallback;
          }
        } catch (_a) {}

        var first = !this.observers.size;
        this.observers.add(observer);

        if (this.lastError) {
          observer.error && observer.error(this.lastError);
        } else if (this.lastResult) {
          observer.next && observer.next(this.lastResult);
        }

        if (first) {
          this.reobserve().catch(function (_) {});
        }

        return function () {
          if (_this.observers.delete(observer) && !_this.observers.size) {
            _this.tearDownQuery();
          }
        };
      };

      ObservableQuery.prototype.getReobserver = function () {
        return this.reobserver || (this.reobserver = this.newReobserver(true));
      };

      ObservableQuery.prototype.newReobserver = function (shareOptions) {
        var _this = this;

        var _a = this,
            queryManager = _a.queryManager,
            queryId = _a.queryId;

        queryManager.setObservableQuery(this);
        return new _Reobserver.Reobserver(this.observer, shareOptions ? this.options : (0, _tslib.__assign)({}, this.options), function (currentOptions, newNetworkStatus) {
          queryManager.setObservableQuery(_this);
          return queryManager.fetchQueryObservable(queryId, currentOptions, newNetworkStatus);
        }, !queryManager.ssrMode && function () {
          return !(0, _networkStatus.isNetworkRequestInFlight)(_this.queryInfo.networkStatus);
        });
      };

      ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {
        this.isTornDown = false;
        return this.getReobserver().reobserve(newOptions, newNetworkStatus);
      };

      ObservableQuery.prototype.observe = function () {
        this.observer.next(this.getCurrentResult(false));
      };

      ObservableQuery.prototype.hasObservers = function () {
        return this.observers.size > 0;
      };

      ObservableQuery.prototype.tearDownQuery = function () {
        var queryManager = this.queryManager;

        if (this.reobserver) {
          this.reobserver.stop();
          delete this.reobserver;
        }

        this.isTornDown = true;
        this.subscriptions.forEach(function (sub) {
          return sub.unsubscribe();
        });
        this.subscriptions.clear();
        queryManager.stopQuery(this.queryId);
        this.observers.clear();
      };

      return ObservableQuery;
    }(_index.Observable);

    exports.ObservableQuery = ObservableQuery;

    function defaultSubscriptionObserverErrorCallback(error) {
      "development" === "production" || _tsInvariant.invariant.error('Unhandled error', error.message, error.stack);
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "@wry/equality": "../node_modules/@wry/equality/lib/equality.esm.js",
    "./networkStatus.js": "../node_modules/@apollo/client/core/networkStatus.js",
    "../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "./Reobserver.js": "../node_modules/@apollo/client/core/Reobserver.js"
  }],
  "../node_modules/@wry/context/lib/context.esm.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.asyncFromGen = asyncFromGen;
    exports.setTimeout = setTimeoutWithContext;
    exports.wrapYieldingFiberMethods = wrapYieldingFiberMethods;
    exports.noContext = exports.bind = exports.Slot = void 0; // This currentContext variable will only be used if the makeSlotClass
    // function is called, which happens only if this is the first copy of the
    // @wry/context package to be imported.

    var currentContext = null; // This unique internal object is used to denote the absence of a value
    // for a given Slot, and is never exposed to outside code.

    var MISSING_VALUE = {};
    var idCounter = 1; // Although we can't do anything about the cost of duplicated code from
    // accidentally bundling multiple copies of the @wry/context package, we can
    // avoid creating the Slot class more than once using makeSlotClass.

    var makeSlotClass = function makeSlotClass() {
      return (
        /** @class */
        function () {
          function Slot() {
            // If you have a Slot object, you can find out its slot.id, but you cannot
            // guess the slot.id of a Slot you don't have access to, thanks to the
            // randomized suffix.
            this.id = ["slot", idCounter++, Date.now(), Math.random().toString(36).slice(2)].join(":");
          }

          Slot.prototype.hasValue = function () {
            for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {
              // We use the Slot object iself as a key to its value, which means the
              // value cannot be obtained without a reference to the Slot object.
              if (this.id in context_1.slots) {
                var value = context_1.slots[this.id];
                if (value === MISSING_VALUE) break;

                if (context_1 !== currentContext) {
                  // Cache the value in currentContext.slots so the next lookup will
                  // be faster. This caching is safe because the tree of contexts and
                  // the values of the slots are logically immutable.
                  currentContext.slots[this.id] = value;
                }

                return true;
              }
            }

            if (currentContext) {
              // If a value was not found for this Slot, it's never going to be found
              // no matter how many times we look it up, so we might as well cache
              // the absence of the value, too.
              currentContext.slots[this.id] = MISSING_VALUE;
            }

            return false;
          };

          Slot.prototype.getValue = function () {
            if (this.hasValue()) {
              return currentContext.slots[this.id];
            }
          };

          Slot.prototype.withValue = function (value, callback, // Given the prevalence of arrow functions, specifying arguments is likely
          // to be much more common than specifying `this`, hence this ordering:
          args, thisArg) {
            var _a;

            var slots = (_a = {
              __proto__: null
            }, _a[this.id] = value, _a);
            var parent = currentContext;
            currentContext = {
              parent: parent,
              slots: slots
            };

            try {
              // Function.prototype.apply allows the arguments array argument to be
              // omitted or undefined, so args! is fine here.
              return callback.apply(thisArg, args);
            } finally {
              currentContext = parent;
            }
          }; // Capture the current context and wrap a callback function so that it
          // reestablishes the captured context when called.


          Slot.bind = function (callback) {
            var context = currentContext;
            return function () {
              var saved = currentContext;

              try {
                currentContext = context;
                return callback.apply(this, arguments);
              } finally {
                currentContext = saved;
              }
            };
          }; // Immediately run a callback function without any captured context.


          Slot.noContext = function (callback, // Given the prevalence of arrow functions, specifying arguments is likely
          // to be much more common than specifying `this`, hence this ordering:
          args, thisArg) {
            if (currentContext) {
              var saved = currentContext;

              try {
                currentContext = null; // Function.prototype.apply allows the arguments array argument to be
                // omitted or undefined, so args! is fine here.

                return callback.apply(thisArg, args);
              } finally {
                currentContext = saved;
              }
            } else {
              return callback.apply(thisArg, args);
            }
          };

          return Slot;
        }()
      );
    }; // We store a single global implementation of the Slot class as a permanent
    // non-enumerable symbol property of the Array constructor. This obfuscation
    // does nothing to prevent access to the Slot class, but at least it ensures
    // the implementation (i.e. currentContext) cannot be tampered with, and all
    // copies of the @wry/context package (hopefully just one) will share the
    // same Slot implementation. Since the first copy of the @wry/context package
    // to be imported wins, this technique imposes a very high cost for any
    // future breaking changes to the Slot class.


    var globalKey = "@wry/context:Slot";
    var host = Array;

    var Slot = host[globalKey] || function () {
      var Slot = makeSlotClass();

      try {
        Object.defineProperty(host, globalKey, {
          value: host[globalKey] = Slot,
          enumerable: false,
          writable: false,
          configurable: false
        });
      } finally {
        return Slot;
      }
    }();

    exports.Slot = Slot;
    var bind = Slot.bind,
        noContext = Slot.noContext;
    exports.noContext = noContext;
    exports.bind = bind;

    function setTimeoutWithContext(callback, delay) {
      return setTimeout(bind(callback), delay);
    } // Turn any generator function into an async function (using yield instead
    // of await), with context automatically preserved across yields.


    function asyncFromGen(genFn) {
      return function () {
        var gen = genFn.apply(this, arguments);
        var boundNext = bind(gen.next);
        var boundThrow = bind(gen.throw);
        return new Promise(function (resolve, reject) {
          function invoke(method, argument) {
            try {
              var result = method.call(gen, argument);
            } catch (error) {
              return reject(error);
            }

            var next = result.done ? resolve : invokeNext;

            if (isPromiseLike(result.value)) {
              result.value.then(next, result.done ? reject : invokeThrow);
            } else {
              next(result.value);
            }
          }

          var invokeNext = function invokeNext(value) {
            return invoke(boundNext, value);
          };

          var invokeThrow = function invokeThrow(error) {
            return invoke(boundThrow, error);
          };

          invokeNext();
        });
      };
    }

    function isPromiseLike(value) {
      return value && typeof value.then === "function";
    } // If you use the fibers npm package to implement coroutines in Node.js,
    // you should call this function at least once to ensure context management
    // remains coherent across any yields.


    var wrappedFibers = [];

    function wrapYieldingFiberMethods(Fiber) {
      // There can be only one implementation of Fiber per process, so this array
      // should never grow longer than one element.
      if (wrappedFibers.indexOf(Fiber) < 0) {
        var wrap = function wrap(obj, method) {
          var fn = obj[method];

          obj[method] = function () {
            return noContext(fn, arguments, this);
          };
        }; // These methods can yield, according to
        // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100


        wrap(Fiber, "yield");
        wrap(Fiber.prototype, "run");
        wrap(Fiber.prototype, "throwInto");
        wrappedFibers.push(Fiber);
      }

      return Fiber;
    }
  }, {}],
  "../node_modules/optimism/lib/bundle.esm.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultMakeCacheKey = defaultMakeCacheKey;
    exports.dep = dep;
    exports.wrap = wrap;
    Object.defineProperty(exports, "asyncFromGen", {
      enumerable: true,
      get: function get() {
        return _context.asyncFromGen;
      }
    });
    Object.defineProperty(exports, "bindContext", {
      enumerable: true,
      get: function get() {
        return _context.bind;
      }
    });
    Object.defineProperty(exports, "noContext", {
      enumerable: true,
      get: function get() {
        return _context.noContext;
      }
    });
    Object.defineProperty(exports, "setTimeout", {
      enumerable: true,
      get: function get() {
        return _context.setTimeout;
      }
    });
    exports.KeyTrie = void 0;

    var _context = require("@wry/context");

    function defaultDispose() {}

    var Cache =
    /** @class */
    function () {
      function Cache(max, dispose) {
        if (max === void 0) {
          max = Infinity;
        }

        if (dispose === void 0) {
          dispose = defaultDispose;
        }

        this.max = max;
        this.dispose = dispose;
        this.map = new Map();
        this.newest = null;
        this.oldest = null;
      }

      Cache.prototype.has = function (key) {
        return this.map.has(key);
      };

      Cache.prototype.get = function (key) {
        var entry = this.getEntry(key);
        return entry && entry.value;
      };

      Cache.prototype.getEntry = function (key) {
        var entry = this.map.get(key);

        if (entry && entry !== this.newest) {
          var older = entry.older,
              newer = entry.newer;

          if (newer) {
            newer.older = older;
          }

          if (older) {
            older.newer = newer;
          }

          entry.older = this.newest;
          entry.older.newer = entry;
          entry.newer = null;
          this.newest = entry;

          if (entry === this.oldest) {
            this.oldest = newer;
          }
        }

        return entry;
      };

      Cache.prototype.set = function (key, value) {
        var entry = this.getEntry(key);

        if (entry) {
          return entry.value = value;
        }

        entry = {
          key: key,
          value: value,
          newer: null,
          older: this.newest
        };

        if (this.newest) {
          this.newest.newer = entry;
        }

        this.newest = entry;
        this.oldest = this.oldest || entry;
        this.map.set(key, entry);
        return entry.value;
      };

      Cache.prototype.clean = function () {
        while (this.oldest && this.map.size > this.max) {
          this.delete(this.oldest.key);
        }
      };

      Cache.prototype.delete = function (key) {
        var entry = this.map.get(key);

        if (entry) {
          if (entry === this.newest) {
            this.newest = entry.older;
          }

          if (entry === this.oldest) {
            this.oldest = entry.newer;
          }

          if (entry.newer) {
            entry.newer.older = entry.older;
          }

          if (entry.older) {
            entry.older.newer = entry.newer;
          }

          this.map.delete(key);
          this.dispose(entry.value, key);
          return true;
        }

        return false;
      };

      return Cache;
    }();

    var parentEntrySlot = new _context.Slot();

    function maybeUnsubscribe(entryOrDep) {
      var unsubscribe = entryOrDep.unsubscribe;

      if (typeof unsubscribe === "function") {
        entryOrDep.unsubscribe = void 0;
        unsubscribe();
      }
    }

    var emptySetPool = [];
    var POOL_TARGET_SIZE = 100; // Since this package might be used browsers, we should avoid using the
    // Node built-in assert module.

    function assert(condition, optionalMessage) {
      if (!condition) {
        throw new Error(optionalMessage || "assertion failure");
      }
    }

    function valueIs(a, b) {
      var len = a.length;
      return (// Unknown values are not equal to each other.
        len > 0 && // Both values must be ordinary (or both exceptional) to be equal.
        len === b.length && // The underlying value or exception must be the same.
        a[len - 1] === b[len - 1]
      );
    }

    function valueGet(value) {
      switch (value.length) {
        case 0:
          throw new Error("unknown value");

        case 1:
          return value[0];

        case 2:
          throw value[1];
      }
    }

    function valueCopy(value) {
      return value.slice(0);
    }

    var Entry =
    /** @class */
    function () {
      function Entry(fn, args) {
        this.fn = fn;
        this.args = args;
        this.parents = new Set();
        this.childValues = new Map(); // When this Entry has children that are dirty, this property becomes
        // a Set containing other Entry objects, borrowed from emptySetPool.
        // When the set becomes empty, it gets recycled back to emptySetPool.

        this.dirtyChildren = null;
        this.dirty = true;
        this.recomputing = false;
        this.value = [];
        this.deps = null;
        ++Entry.count;
      }

      Entry.prototype.peek = function () {
        if (this.value.length === 1 && !mightBeDirty(this)) {
          return this.value[0];
        }
      }; // This is the most important method of the Entry API, because it
      // determines whether the cached this.value can be returned immediately,
      // or must be recomputed. The overall performance of the caching system
      // depends on the truth of the following observations: (1) this.dirty is
      // usually false, (2) this.dirtyChildren is usually null/empty, and thus
      // (3) valueGet(this.value) is usually returned without recomputation.


      Entry.prototype.recompute = function () {
        assert(!this.recomputing, "already recomputing");
        rememberParent(this);
        return mightBeDirty(this) ? reallyRecompute(this) : valueGet(this.value);
      };

      Entry.prototype.setDirty = function () {
        if (this.dirty) return;
        this.dirty = true;
        this.value.length = 0;
        reportDirty(this);
        forgetChildren(this); // We can go ahead and unsubscribe here, since any further dirty
        // notifications we receive will be redundant, and unsubscribing may
        // free up some resources, e.g. file watchers.

        maybeUnsubscribe(this);
      };

      Entry.prototype.dispose = function () {
        var _this = this;

        forgetChildren(this);
        maybeUnsubscribe(this); // Because this entry has been kicked out of the cache (in index.js),
        // we've lost the ability to find out if/when this entry becomes dirty,
        // whether that happens through a subscription, because of a direct call
        // to entry.setDirty(), or because one of its children becomes dirty.
        // Because of this loss of future information, we have to assume the
        // worst (that this entry might have become dirty very soon), so we must
        // immediately mark this entry's parents as dirty. Normally we could
        // just call entry.setDirty() rather than calling parent.setDirty() for
        // each parent, but that would leave this entry in parent.childValues
        // and parent.dirtyChildren, which would prevent the child from being
        // truly forgotten.

        this.parents.forEach(function (parent) {
          parent.setDirty();
          forgetChild(parent, _this);
        });
      };

      Entry.prototype.dependOn = function (dep) {
        dep.add(this);

        if (!this.deps) {
          this.deps = emptySetPool.pop() || new Set();
        }

        this.deps.add(dep);
      };

      Entry.prototype.forgetDeps = function () {
        var _this = this;

        if (this.deps) {
          this.deps.forEach(function (dep) {
            return dep.delete(_this);
          });
          this.deps.clear();
          emptySetPool.push(this.deps);
          this.deps = null;
        }
      };

      Entry.count = 0;
      return Entry;
    }();

    function rememberParent(child) {
      var parent = parentEntrySlot.getValue();

      if (parent) {
        child.parents.add(parent);

        if (!parent.childValues.has(child)) {
          parent.childValues.set(child, []);
        }

        if (mightBeDirty(child)) {
          reportDirtyChild(parent, child);
        } else {
          reportCleanChild(parent, child);
        }

        return parent;
      }
    }

    function reallyRecompute(entry) {
      forgetChildren(entry); // Set entry as the parent entry while calling recomputeNewValue(entry).

      parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);

      if (maybeSubscribe(entry)) {
        // If we successfully recomputed entry.value and did not fail to
        // (re)subscribe, then this Entry is no longer explicitly dirty.
        setClean(entry);
      }

      return valueGet(entry.value);
    }

    function recomputeNewValue(entry) {
      entry.recomputing = true; // Set entry.value as unknown.

      entry.value.length = 0;

      try {
        // If entry.fn succeeds, entry.value will become a normal Value.
        entry.value[0] = entry.fn.apply(null, entry.args);
      } catch (e) {
        // If entry.fn throws, entry.value will become exceptional.
        entry.value[1] = e;
      } // Either way, this line is always reached.


      entry.recomputing = false;
    }

    function mightBeDirty(entry) {
      return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);
    }

    function setClean(entry) {
      entry.dirty = false;

      if (mightBeDirty(entry)) {
        // This Entry may still have dirty children, in which case we can't
        // let our parents know we're clean just yet.
        return;
      }

      reportClean(entry);
    }

    function reportDirty(child) {
      child.parents.forEach(function (parent) {
        return reportDirtyChild(parent, child);
      });
    }

    function reportClean(child) {
      child.parents.forEach(function (parent) {
        return reportCleanChild(parent, child);
      });
    } // Let a parent Entry know that one of its children may be dirty.


    function reportDirtyChild(parent, child) {
      // Must have called rememberParent(child) before calling
      // reportDirtyChild(parent, child).
      assert(parent.childValues.has(child));
      assert(mightBeDirty(child));

      if (!parent.dirtyChildren) {
        parent.dirtyChildren = emptySetPool.pop() || new Set();
      } else if (parent.dirtyChildren.has(child)) {
        // If we already know this child is dirty, then we must have already
        // informed our own parents that we are dirty, so we can terminate
        // the recursion early.
        return;
      }

      parent.dirtyChildren.add(child);
      reportDirty(parent);
    } // Let a parent Entry know that one of its children is no longer dirty.


    function reportCleanChild(parent, child) {
      // Must have called rememberChild(child) before calling
      // reportCleanChild(parent, child).
      assert(parent.childValues.has(child));
      assert(!mightBeDirty(child));
      var childValue = parent.childValues.get(child);

      if (childValue.length === 0) {
        parent.childValues.set(child, valueCopy(child.value));
      } else if (!valueIs(childValue, child.value)) {
        parent.setDirty();
      }

      removeDirtyChild(parent, child);

      if (mightBeDirty(parent)) {
        return;
      }

      reportClean(parent);
    }

    function removeDirtyChild(parent, child) {
      var dc = parent.dirtyChildren;

      if (dc) {
        dc.delete(child);

        if (dc.size === 0) {
          if (emptySetPool.length < POOL_TARGET_SIZE) {
            emptySetPool.push(dc);
          }

          parent.dirtyChildren = null;
        }
      }
    } // Removes all children from this entry and returns an array of the
    // removed children.


    function forgetChildren(parent) {
      if (parent.childValues.size > 0) {
        parent.childValues.forEach(function (_value, child) {
          forgetChild(parent, child);
        });
      } // Remove this parent Entry from any sets to which it was added by the
      // addToSet method.


      parent.forgetDeps(); // After we forget all our children, this.dirtyChildren must be empty
      // and therefore must have been reset to null.

      assert(parent.dirtyChildren === null);
    }

    function forgetChild(parent, child) {
      child.parents.delete(parent);
      parent.childValues.delete(child);
      removeDirtyChild(parent, child);
    }

    function maybeSubscribe(entry) {
      if (typeof entry.subscribe === "function") {
        try {
          maybeUnsubscribe(entry); // Prevent double subscriptions.

          entry.unsubscribe = entry.subscribe.apply(null, entry.args);
        } catch (e) {
          // If this Entry has a subscribe function and it threw an exception
          // (or an unsubscribe function it previously returned now throws),
          // return false to indicate that we were not able to subscribe (or
          // unsubscribe), and this Entry should remain dirty.
          entry.setDirty();
          return false;
        }
      } // Returning true indicates either that there was no entry.subscribe
      // function or that it succeeded.


      return true;
    } // A trie data structure that holds object keys weakly, yet can also hold
    // non-object keys, unlike the native `WeakMap`.
    // If no makeData function is supplied, the looked-up data will be an empty,
    // no-prototype Object.


    var defaultMakeData = function defaultMakeData() {
      return Object.create(null);
    }; // Useful for processing arguments objects as well as arrays.


    var _a = Array.prototype,
        forEach = _a.forEach,
        slice = _a.slice;

    var KeyTrie =
    /** @class */
    function () {
      function KeyTrie(weakness, makeData) {
        if (makeData === void 0) {
          makeData = defaultMakeData;
        }

        this.weakness = weakness;
        this.makeData = makeData;
      }

      KeyTrie.prototype.lookup = function () {
        var array = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          array[_i] = arguments[_i];
        }

        return this.lookupArray(array);
      };

      KeyTrie.prototype.lookupArray = function (array) {
        var node = this;
        forEach.call(array, function (key) {
          return node = node.getChildTrie(key);
        });
        return node.data || (node.data = this.makeData(slice.call(array)));
      };

      KeyTrie.prototype.getChildTrie = function (key) {
        var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());
        var child = map.get(key);
        if (!child) map.set(key, child = new KeyTrie(this.weakness, this.makeData));
        return child;
      };

      return KeyTrie;
    }();

    exports.KeyTrie = KeyTrie;

    function isObjRef(value) {
      switch (_typeof3(value)) {
        case "object":
          if (value === null) break;
        // Fall through to return true...

        case "function":
          return true;
      }

      return false;
    }

    function dep(options) {
      var depsByKey = new Map();
      var subscribe = options && options.subscribe;

      function depend(key) {
        var parent = parentEntrySlot.getValue();

        if (parent) {
          var dep_1 = depsByKey.get(key);

          if (!dep_1) {
            depsByKey.set(key, dep_1 = new Set());
          }

          parent.dependOn(dep_1);

          if (typeof subscribe === "function") {
            maybeUnsubscribe(dep_1);
            dep_1.unsubscribe = subscribe(key);
          }
        }
      }

      depend.dirty = function dirty(key) {
        var dep = depsByKey.get(key);

        if (dep) {
          dep.forEach(function (entry) {
            return entry.setDirty();
          });
          depsByKey.delete(key);
          maybeUnsubscribe(dep);
        }
      };

      return depend;
    } // The defaultMakeCacheKey function is remarkably powerful, because it gives
    // a unique object for any shallow-identical list of arguments. If you need
    // to implement a custom makeCacheKey function, you may find it helpful to
    // delegate the final work to defaultMakeCacheKey, which is why we export it
    // here. However, you may want to avoid defaultMakeCacheKey if your runtime
    // does not support WeakMap, or you have the ability to return a string key.
    // In those cases, just write your own custom makeCacheKey functions.


    var keyTrie = new KeyTrie(typeof WeakMap === "function");

    function defaultMakeCacheKey() {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return keyTrie.lookupArray(args);
    }

    var caches = new Set();

    function wrap(originalFunction, options) {
      if (options === void 0) {
        options = Object.create(null);
      }

      var cache = new Cache(options.max || Math.pow(2, 16), function (entry) {
        return entry.dispose();
      });

      var keyArgs = options.keyArgs || function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        return args;
      };

      var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;

      function optimistic() {
        var key = makeCacheKey.apply(null, keyArgs.apply(null, arguments));

        if (key === void 0) {
          return originalFunction.apply(null, arguments);
        }

        var args = Array.prototype.slice.call(arguments);
        var entry = cache.get(key);

        if (entry) {
          entry.args = args;
        } else {
          entry = new Entry(originalFunction, args);
          cache.set(key, entry);
          entry.subscribe = options.subscribe;
        }

        var value = entry.recompute(); // Move this entry to the front of the least-recently used queue,
        // since we just finished computing its value.

        cache.set(key, entry);
        caches.add(cache); // Clean up any excess entries in the cache, but only if there is no
        // active parent entry, meaning we're not in the middle of a larger
        // computation that might be flummoxed by the cleaning.

        if (!parentEntrySlot.hasValue()) {
          caches.forEach(function (cache) {
            return cache.clean();
          });
          caches.clear();
        }

        return value;
      }

      function lookup() {
        var key = makeCacheKey.apply(null, arguments);

        if (key !== void 0) {
          return cache.get(key);
        }
      }

      optimistic.dirty = function () {
        var entry = lookup.apply(null, arguments);

        if (entry) {
          entry.setDirty();
        }
      };

      optimistic.peek = function () {
        var entry = lookup.apply(null, arguments);

        if (entry) {
          return entry.peek();
        }
      };

      optimistic.forget = function () {
        var key = makeCacheKey.apply(null, arguments);
        return key !== void 0 && cache.delete(key);
      };

      return optimistic;
    }
  }, {
    "@wry/context": "../node_modules/@wry/context/lib/context.esm.js"
  }],
  "../node_modules/@apollo/client/cache/core/cache.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ApolloCache = void 0;

    var _optimism = require("optimism");

    var _index = require("../../utilities/index.js");

    var ApolloCache = function () {
      function ApolloCache() {
        this.getFragmentDoc = (0, _optimism.wrap)(_index.getFragmentQueryDocument);
      }

      ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {
        this.performTransaction(transaction, optimisticId);
      };

      ApolloCache.prototype.transformDocument = function (document) {
        return document;
      };

      ApolloCache.prototype.identify = function (object) {
        return;
      };

      ApolloCache.prototype.gc = function () {
        return [];
      };

      ApolloCache.prototype.modify = function (options) {
        return false;
      };

      ApolloCache.prototype.transformForLink = function (document) {
        return document;
      };

      ApolloCache.prototype.readQuery = function (options, optimistic) {
        if (optimistic === void 0) {
          optimistic = false;
        }

        return this.read({
          rootId: options.id || 'ROOT_QUERY',
          query: options.query,
          variables: options.variables,
          optimistic: optimistic
        });
      };

      ApolloCache.prototype.readFragment = function (options, optimistic) {
        if (optimistic === void 0) {
          optimistic = false;
        }

        return this.read({
          query: this.getFragmentDoc(options.fragment, options.fragmentName),
          variables: options.variables,
          rootId: options.id,
          optimistic: optimistic
        });
      };

      ApolloCache.prototype.writeQuery = function (options) {
        return this.write({
          dataId: options.id || 'ROOT_QUERY',
          result: options.data,
          query: options.query,
          variables: options.variables,
          broadcast: options.broadcast
        });
      };

      ApolloCache.prototype.writeFragment = function (options) {
        return this.write({
          dataId: options.id,
          result: options.data,
          variables: options.variables,
          query: this.getFragmentDoc(options.fragment, options.fragmentName),
          broadcast: options.broadcast
        });
      };

      return ApolloCache;
    }();

    exports.ApolloCache = ApolloCache;
  }, {
    "optimism": "../node_modules/optimism/lib/bundle.esm.js",
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js"
  }],
  "../node_modules/@apollo/client/cache/core/types/Cache.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Cache = void 0;
    var Cache;
    exports.Cache = Cache;

    (function (Cache) {})(Cache || (exports.Cache = Cache = {}));
  }, {}],
  "../node_modules/@apollo/client/cache/core/types/common.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MissingFieldError = void 0;

    var MissingFieldError = function () {
      function MissingFieldError(message, path, query, clientOnly, variables) {
        this.message = message;
        this.path = path;
        this.query = query;
        this.clientOnly = clientOnly;
        this.variables = variables;
      }

      return MissingFieldError;
    }();

    exports.MissingFieldError = MissingFieldError;
  }, {}],
  "../node_modules/@apollo/client/cache/inmemory/fixPolyfills.js": [function (require, module, exports) {}, {}],
  "../node_modules/@apollo/client/cache/inmemory/helpers.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getTypenameFromStoreObject = getTypenameFromStoreObject;
    exports.fieldNameFromStoreName = fieldNameFromStoreName;
    exports.selectionSetMatchesResult = selectionSetMatchesResult;
    exports.storeValueIsStoreObject = storeValueIsStoreObject;
    exports.isFieldValueToBeMerged = isFieldValueToBeMerged;
    exports.makeProcessedFieldsMerger = makeProcessedFieldsMerger;
    exports.TypeOrFieldNameRegExp = exports.hasOwn = void 0;

    var _index = require("../../utilities/index.js");

    var hasOwn = Object.prototype.hasOwnProperty;
    exports.hasOwn = hasOwn;

    function getTypenameFromStoreObject(store, objectOrReference) {
      return (0, _index.isReference)(objectOrReference) ? store.get(objectOrReference.__ref, "__typename") : objectOrReference && objectOrReference.__typename;
    }

    var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;
    exports.TypeOrFieldNameRegExp = TypeOrFieldNameRegExp;

    function fieldNameFromStoreName(storeFieldName) {
      var match = storeFieldName.match(TypeOrFieldNameRegExp);
      return match ? match[0] : storeFieldName;
    }

    function selectionSetMatchesResult(selectionSet, result, variables) {
      if (result && _typeof3(result) === "object") {
        return Array.isArray(result) ? result.every(function (item) {
          return selectionSetMatchesResult(selectionSet, item, variables);
        }) : selectionSet.selections.every(function (field) {
          if ((0, _index.isField)(field) && (0, _index.shouldInclude)(field, variables)) {
            var key = (0, _index.resultKeyNameFromField)(field);
            return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));
          }

          return true;
        });
      }

      return false;
    }

    function storeValueIsStoreObject(value) {
      return value !== null && _typeof3(value) === "object" && !(0, _index.isReference)(value) && !Array.isArray(value);
    }

    function isFieldValueToBeMerged(value) {
      var field = value && value.__field;
      return field && (0, _index.isField)(field);
    }

    function makeProcessedFieldsMerger() {
      return new _index.DeepMerger(reconcileProcessedFields);
    }

    var reconcileProcessedFields = function reconcileProcessedFields(existingObject, incomingObject, property) {
      var existing = existingObject[property];
      var incoming = incomingObject[property];

      if (isFieldValueToBeMerged(existing)) {
        existing.__value = this.merge(existing.__value, isFieldValueToBeMerged(incoming) ? incoming.__value : incoming);
        return existing;
      }

      if (isFieldValueToBeMerged(incoming)) {
        incoming.__value = this.merge(existing, incoming.__value);
        return incoming;
      }

      return this.merge(existing, incoming);
    };
  }, {
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js"
  }],
  "../node_modules/@apollo/client/cache/inmemory/entityStore.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.supportsResultCaching = supportsResultCaching;
    exports.EntityStore = void 0;

    var _tslib = require("tslib");

    var _optimism = require("optimism");

    var _equality = require("@wry/equality");

    var _index = require("../../utilities/index.js");

    var _helpers = require("./helpers.js");

    var DELETE = Object.create(null);

    var delModifier = function delModifier() {
      return DELETE;
    };

    var INVALIDATE = Object.create(null);

    var EntityStore = function () {
      function EntityStore(policies, group) {
        var _this = this;

        this.policies = policies;
        this.group = group;
        this.data = Object.create(null);
        this.rootIds = Object.create(null);
        this.refs = Object.create(null);

        this.getFieldValue = function (objectOrReference, storeFieldName) {
          return (0, _index.maybeDeepFreeze)((0, _index.isReference)(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);
        };

        this.canRead = function (objOrRef) {
          return (0, _index.isReference)(objOrRef) ? _this.has(objOrRef.__ref) : _typeof3(objOrRef) === "object";
        };

        this.toReference = function (objOrIdOrRef, mergeIntoStore) {
          if (typeof objOrIdOrRef === "string") {
            return (0, _index.makeReference)(objOrIdOrRef);
          }

          if ((0, _index.isReference)(objOrIdOrRef)) {
            return objOrIdOrRef;
          }

          var id = _this.policies.identify(objOrIdOrRef)[0];

          if (id) {
            var ref = (0, _index.makeReference)(id);

            if (mergeIntoStore) {
              _this.merge(id, objOrIdOrRef);
            }

            return ref;
          }
        };
      }

      EntityStore.prototype.toObject = function () {
        return (0, _tslib.__assign)({}, this.data);
      };

      EntityStore.prototype.has = function (dataId) {
        return this.lookup(dataId, true) !== void 0;
      };

      EntityStore.prototype.get = function (dataId, fieldName) {
        this.group.depend(dataId, fieldName);

        if (_helpers.hasOwn.call(this.data, dataId)) {
          var storeObject = this.data[dataId];

          if (storeObject && _helpers.hasOwn.call(storeObject, fieldName)) {
            return storeObject[fieldName];
          }
        }

        if (fieldName === "__typename" && _helpers.hasOwn.call(this.policies.rootTypenamesById, dataId)) {
          return this.policies.rootTypenamesById[dataId];
        }

        if (this instanceof Layer) {
          return this.parent.get(dataId, fieldName);
        }
      };

      EntityStore.prototype.lookup = function (dataId, dependOnExistence) {
        if (dependOnExistence) this.group.depend(dataId, "__exists");
        return _helpers.hasOwn.call(this.data, dataId) ? this.data[dataId] : this instanceof Layer ? this.parent.lookup(dataId, dependOnExistence) : void 0;
      };

      EntityStore.prototype.merge = function (dataId, incoming) {
        var _this = this;

        var existing = this.lookup(dataId);
        var merged = new _index.DeepMerger(storeObjectReconciler).merge(existing, incoming);
        this.data[dataId] = merged;

        if (merged !== existing) {
          delete this.refs[dataId];

          if (this.group.caching) {
            var fieldsToDirty_1 = Object.create(null);
            if (!existing) fieldsToDirty_1.__exists = 1;
            Object.keys(incoming).forEach(function (storeFieldName) {
              if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {
                fieldsToDirty_1[(0, _helpers.fieldNameFromStoreName)(storeFieldName)] = 1;

                if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {
                  delete merged[storeFieldName];
                }
              }
            });
            Object.keys(fieldsToDirty_1).forEach(function (fieldName) {
              return _this.group.dirty(dataId, fieldName);
            });
          }
        }
      };

      EntityStore.prototype.modify = function (dataId, fields) {
        var _this = this;

        var storeObject = this.lookup(dataId);

        if (storeObject) {
          var changedFields_1 = Object.create(null);
          var needToMerge_1 = false;
          var allDeleted_1 = true;
          var sharedDetails_1 = {
            DELETE: DELETE,
            INVALIDATE: INVALIDATE,
            isReference: _index.isReference,
            toReference: this.toReference,
            canRead: this.canRead,
            readField: function readField(fieldNameOrOptions, from) {
              return _this.policies.readField(typeof fieldNameOrOptions === "string" ? {
                fieldName: fieldNameOrOptions,
                from: from || (0, _index.makeReference)(dataId)
              } : fieldNameOrOptions, {
                store: _this
              });
            }
          };
          Object.keys(storeObject).forEach(function (storeFieldName) {
            var fieldName = (0, _helpers.fieldNameFromStoreName)(storeFieldName);
            var fieldValue = storeObject[storeFieldName];
            if (fieldValue === void 0) return;
            var modify = typeof fields === "function" ? fields : fields[storeFieldName] || fields[fieldName];

            if (modify) {
              var newValue = modify === delModifier ? DELETE : modify((0, _index.maybeDeepFreeze)(fieldValue), (0, _tslib.__assign)((0, _tslib.__assign)({}, sharedDetails_1), {
                fieldName: fieldName,
                storeFieldName: storeFieldName,
                storage: _this.getStorage(dataId, storeFieldName)
              }));

              if (newValue === INVALIDATE) {
                _this.group.dirty(dataId, storeFieldName);
              } else {
                if (newValue === DELETE) newValue = void 0;

                if (newValue !== fieldValue) {
                  changedFields_1[storeFieldName] = newValue;
                  needToMerge_1 = true;
                  fieldValue = newValue;
                }
              }
            }

            if (fieldValue !== void 0) {
              allDeleted_1 = false;
            }
          });

          if (needToMerge_1) {
            this.merge(dataId, changedFields_1);

            if (allDeleted_1) {
              if (this instanceof Layer) {
                this.data[dataId] = void 0;
              } else {
                delete this.data[dataId];
              }

              this.group.dirty(dataId, "__exists");
            }

            return true;
          }
        }

        return false;
      };

      EntityStore.prototype.delete = function (dataId, fieldName, args) {
        var _a;

        var storeObject = this.lookup(dataId);

        if (storeObject) {
          var typename = this.getFieldValue(storeObject, "__typename");
          var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({
            typename: typename,
            fieldName: fieldName,
            args: args
          }) : fieldName;
          return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);
        }

        return false;
      };

      EntityStore.prototype.evict = function (options) {
        var evicted = false;

        if (options.id) {
          if (_helpers.hasOwn.call(this.data, options.id)) {
            evicted = this.delete(options.id, options.fieldName, options.args);
          }

          if (this instanceof Layer) {
            evicted = this.parent.evict(options) || evicted;
          }

          if (options.fieldName || evicted) {
            this.group.dirty(options.id, options.fieldName || "__exists");
          }
        }

        return evicted;
      };

      EntityStore.prototype.clear = function () {
        this.replace(null);
      };

      EntityStore.prototype.replace = function (newData) {
        var _this = this;

        Object.keys(this.data).forEach(function (dataId) {
          if (!(newData && _helpers.hasOwn.call(newData, dataId))) {
            _this.delete(dataId);
          }
        });

        if (newData) {
          Object.keys(newData).forEach(function (dataId) {
            _this.merge(dataId, newData[dataId]);
          });
        }
      };

      EntityStore.prototype.retain = function (rootId) {
        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;
      };

      EntityStore.prototype.release = function (rootId) {
        if (this.rootIds[rootId] > 0) {
          var count = --this.rootIds[rootId];
          if (!count) delete this.rootIds[rootId];
          return count;
        }

        return 0;
      };

      EntityStore.prototype.getRootIdSet = function (ids) {
        if (ids === void 0) {
          ids = new Set();
        }

        Object.keys(this.rootIds).forEach(ids.add, ids);

        if (this instanceof Layer) {
          this.parent.getRootIdSet(ids);
        }

        return ids;
      };

      EntityStore.prototype.gc = function () {
        var _this = this;

        var ids = this.getRootIdSet();
        var snapshot = this.toObject();
        ids.forEach(function (id) {
          if (_helpers.hasOwn.call(snapshot, id)) {
            Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);
            delete snapshot[id];
          }
        });
        var idsToRemove = Object.keys(snapshot);

        if (idsToRemove.length) {
          var root_1 = this;

          while (root_1 instanceof Layer) {
            root_1 = root_1.parent;
          }

          idsToRemove.forEach(function (id) {
            return root_1.delete(id);
          });
        }

        return idsToRemove;
      };

      EntityStore.prototype.findChildRefIds = function (dataId) {
        if (!_helpers.hasOwn.call(this.refs, dataId)) {
          var found_1 = this.refs[dataId] = Object.create(null);
          var workSet_1 = new Set([this.data[dataId]]);

          var canTraverse_1 = function canTraverse_1(obj) {
            return obj !== null && _typeof3(obj) === 'object';
          };

          workSet_1.forEach(function (obj) {
            if ((0, _index.isReference)(obj)) {
              found_1[obj.__ref] = true;
            } else if (canTraverse_1(obj)) {
              Object.values(obj).filter(canTraverse_1).forEach(workSet_1.add, workSet_1);
            }
          });
        }

        return this.refs[dataId];
      };

      EntityStore.prototype.makeCacheKey = function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        return this.group.keyMaker.lookupArray(args);
      };

      return EntityStore;
    }();

    exports.EntityStore = EntityStore;

    var CacheGroup = function () {
      function CacheGroup(caching) {
        this.caching = caching;
        this.d = null;
        this.keyMaker = new _optimism.KeyTrie(_index.canUseWeakMap);
        this.d = caching ? (0, _optimism.dep)() : null;
      }

      CacheGroup.prototype.depend = function (dataId, storeFieldName) {
        if (this.d) {
          this.d(makeDepKey(dataId, storeFieldName));
        }
      };

      CacheGroup.prototype.dirty = function (dataId, storeFieldName) {
        if (this.d) {
          this.d.dirty(makeDepKey(dataId, storeFieldName));
        }
      };

      return CacheGroup;
    }();

    function makeDepKey(dataId, storeFieldName) {
      return (0, _helpers.fieldNameFromStoreName)(storeFieldName) + '#' + dataId;
    }

    (function (EntityStore) {
      var Root = function (_super) {
        (0, _tslib.__extends)(Root, _super);

        function Root(_a) {
          var policies = _a.policies,
              _b = _a.resultCaching,
              resultCaching = _b === void 0 ? true : _b,
              seed = _a.seed;

          var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;

          _this.storageTrie = new _optimism.KeyTrie(_index.canUseWeakMap);
          _this.sharedLayerGroup = new CacheGroup(resultCaching);
          if (seed) _this.replace(seed);
          return _this;
        }

        Root.prototype.addLayer = function (layerId, replay) {
          return new Layer(layerId, this, replay, this.sharedLayerGroup);
        };

        Root.prototype.removeLayer = function () {
          return this;
        };

        Root.prototype.getStorage = function (idOrObj, storeFieldName) {
          return this.storageTrie.lookup(idOrObj, storeFieldName);
        };

        return Root;
      }(EntityStore);

      EntityStore.Root = Root;
    })(EntityStore || (exports.EntityStore = EntityStore = {}));

    var Layer = function (_super) {
      (0, _tslib.__extends)(Layer, _super);

      function Layer(id, parent, replay, group) {
        var _this = _super.call(this, parent.policies, group) || this;

        _this.id = id;
        _this.parent = parent;
        _this.replay = replay;
        _this.group = group;
        replay(_this);
        return _this;
      }

      Layer.prototype.addLayer = function (layerId, replay) {
        return new Layer(layerId, this, replay, this.group);
      };

      Layer.prototype.removeLayer = function (layerId) {
        var _this = this;

        var parent = this.parent.removeLayer(layerId);

        if (layerId === this.id) {
          if (this.group.caching) {
            Object.keys(this.data).forEach(function (dataId) {
              if (_this.data[dataId] !== parent.lookup(dataId)) {
                _this.delete(dataId);
              }
            });
          }

          return parent;
        }

        if (parent === this.parent) return this;
        return parent.addLayer(this.id, this.replay);
      };

      Layer.prototype.toObject = function () {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, this.parent.toObject()), this.data);
      };

      Layer.prototype.findChildRefIds = function (dataId) {
        var fromParent = this.parent.findChildRefIds(dataId);
        return _helpers.hasOwn.call(this.data, dataId) ? (0, _tslib.__assign)((0, _tslib.__assign)({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;
      };

      Layer.prototype.getStorage = function (idOrObj, storeFieldName) {
        return this.parent.getStorage(idOrObj, storeFieldName);
      };

      return Layer;
    }(EntityStore);

    function storeObjectReconciler(existingObject, incomingObject, property) {
      var existingValue = existingObject[property];
      var incomingValue = incomingObject[property];
      return (0, _equality.equal)(existingValue, incomingValue) ? existingValue : incomingValue;
    }

    function supportsResultCaching(store) {
      return !!(store instanceof EntityStore && store.group.caching);
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "optimism": "../node_modules/optimism/lib/bundle.esm.js",
    "@wry/equality": "../node_modules/@wry/equality/lib/equality.esm.js",
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "./helpers.js": "../node_modules/@apollo/client/cache/inmemory/helpers.js"
  }],
  "../node_modules/@apollo/client/cache/inmemory/readFromStore.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoreReader = void 0;

    var _tslib = require("tslib");

    var _optimism = require("optimism");

    var _tsInvariant = require("ts-invariant");

    var _index = require("../../utilities/index.js");

    var _entityStore = require("./entityStore.js");

    var _helpers = require("./helpers.js");

    var _common = require("../core/types/common.js");

    ;

    function missingFromInvariant(err, context) {
      return new _common.MissingFieldError(err.message, context.path.slice(), context.query, context.clientOnly, context.variables);
    }

    var StoreReader = function () {
      function StoreReader(config) {
        var _this = this;

        this.config = config;
        this.executeSelectionSet = (0, _optimism.wrap)(function (options) {
          return _this.execSelectionSetImpl(options);
        }, {
          keyArgs: function keyArgs(options) {
            return [options.selectionSet, options.objectOrReference, options.context];
          },
          makeCacheKey: function makeCacheKey(selectionSet, parent, context) {
            if ((0, _entityStore.supportsResultCaching)(context.store)) {
              return context.store.makeCacheKey(selectionSet, (0, _index.isReference)(parent) ? parent.__ref : parent, context.varString);
            }
          }
        });
        this.knownResults = new WeakMap();
        this.executeSubSelectedArray = (0, _optimism.wrap)(function (options) {
          return _this.execSubSelectedArrayImpl(options);
        }, {
          makeCacheKey: function makeCacheKey(_a) {
            var field = _a.field,
                array = _a.array,
                context = _a.context;

            if ((0, _entityStore.supportsResultCaching)(context.store)) {
              return context.store.makeCacheKey(field, array, context.varString);
            }
          }
        });
        this.config = (0, _tslib.__assign)({
          addTypename: true
        }, config);
      }

      StoreReader.prototype.diffQueryAgainstStore = function (_a) {
        var store = _a.store,
            query = _a.query,
            _b = _a.rootId,
            rootId = _b === void 0 ? 'ROOT_QUERY' : _b,
            variables = _a.variables,
            _c = _a.returnPartialData,
            returnPartialData = _c === void 0 ? true : _c;
        var policies = this.config.cache.policies;
        variables = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _index.getDefaultValues)((0, _index.getQueryDefinition)(query))), variables);
        var execResult = this.executeSelectionSet({
          selectionSet: (0, _index.getMainDefinition)(query).selectionSet,
          objectOrReference: (0, _index.makeReference)(rootId),
          context: {
            store: store,
            query: query,
            policies: policies,
            variables: variables,
            varString: JSON.stringify(variables),
            fragmentMap: (0, _index.createFragmentMap)((0, _index.getFragmentDefinitions)(query)),
            path: [],
            clientOnly: false
          }
        });
        var hasMissingFields = execResult.missing && execResult.missing.length > 0;

        if (hasMissingFields && !returnPartialData) {
          throw execResult.missing[0];
        }

        return {
          result: execResult.result,
          missing: execResult.missing,
          complete: !hasMissingFields
        };
      };

      StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {
        if ((0, _entityStore.supportsResultCaching)(context.store) && this.knownResults.get(result) === selectionSet) {
          var latest = this.executeSelectionSet.peek(selectionSet, parent, context);

          if (latest && result === latest.result) {
            return true;
          }
        }

        return false;
      };

      StoreReader.prototype.execSelectionSetImpl = function (_a) {
        var _this = this;

        var selectionSet = _a.selectionSet,
            objectOrReference = _a.objectOrReference,
            context = _a.context;

        if ((0, _index.isReference)(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {
          return {
            result: {},
            missing: [missingFromInvariant("development" === "production" ? new _tsInvariant.InvariantError(4) : new _tsInvariant.InvariantError("Dangling reference to missing " + objectOrReference.__ref + " object"), context)]
          };
        }

        var variables = context.variables,
            policies = context.policies,
            store = context.store;
        var objectsToMerge = [];
        var finalResult = {
          result: null
        };
        var typename = store.getFieldValue(objectOrReference, "__typename");

        if (this.config.addTypename && typeof typename === "string" && !policies.rootIdsByTypename[typename]) {
          objectsToMerge.push({
            __typename: typename
          });
        }

        function getMissing() {
          return finalResult.missing || (finalResult.missing = []);
        }

        function handleMissing(result) {
          var _a;

          if (result.missing) (_a = getMissing()).push.apply(_a, result.missing);
          return result.result;
        }

        var workSet = new Set(selectionSet.selections);
        workSet.forEach(function (selection) {
          var _a;

          if (!(0, _index.shouldInclude)(selection, variables)) return;

          if ((0, _index.isField)(selection)) {
            var fieldValue = policies.readField({
              fieldName: selection.name.value,
              field: selection,
              variables: context.variables,
              from: objectOrReference
            }, context);
            var resultName = (0, _index.resultKeyNameFromField)(selection);
            context.path.push(resultName);
            var wasClientOnly = context.clientOnly;
            context.clientOnly = wasClientOnly || !!(selection.directives && selection.directives.some(function (d) {
              return d.name.value === "client";
            }));

            if (fieldValue === void 0) {
              if (!_index.addTypenameToDocument.added(selection)) {
                getMissing().push(missingFromInvariant("development" === "production" ? new _tsInvariant.InvariantError(5) : new _tsInvariant.InvariantError("Can't find field '" + selection.name.value + "' on " + ((0, _index.isReference)(objectOrReference) ? objectOrReference.__ref + " object" : "object " + JSON.stringify(objectOrReference, null, 2))), context));
              }
            } else if (Array.isArray(fieldValue)) {
              fieldValue = handleMissing(_this.executeSubSelectedArray({
                field: selection,
                array: fieldValue,
                context: context
              }));
            } else if (!selection.selectionSet) {
              if ("development" !== 'production') {
                assertSelectionSetForIdValue(context.store, selection, fieldValue);
                (0, _index.maybeDeepFreeze)(fieldValue);
              }
            } else if (fieldValue != null) {
              fieldValue = handleMissing(_this.executeSelectionSet({
                selectionSet: selection.selectionSet,
                objectOrReference: fieldValue,
                context: context
              }));
            }

            if (fieldValue !== void 0) {
              objectsToMerge.push((_a = {}, _a[resultName] = fieldValue, _a));
            }

            context.clientOnly = wasClientOnly;
            (0, _tsInvariant.invariant)(context.path.pop() === resultName);
          } else {
            var fragment = (0, _index.getFragmentFromSelection)(selection, context.fragmentMap);

            if (fragment && policies.fragmentMatches(fragment, typename)) {
              fragment.selectionSet.selections.forEach(workSet.add, workSet);
            }
          }
        });
        finalResult.result = (0, _index.mergeDeepArray)(objectsToMerge);

        if ("development" !== 'production') {
          Object.freeze(finalResult.result);
        }

        this.knownResults.set(finalResult.result, selectionSet);
        return finalResult;
      };

      StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {
        var _this = this;

        var field = _a.field,
            array = _a.array,
            context = _a.context;
        var missing;

        function handleMissing(childResult, i) {
          if (childResult.missing) {
            missing = missing || [];
            missing.push.apply(missing, childResult.missing);
          }

          (0, _tsInvariant.invariant)(context.path.pop() === i);
          return childResult.result;
        }

        if (field.selectionSet) {
          array = array.filter(context.store.canRead);
        }

        array = array.map(function (item, i) {
          if (item === null) {
            return null;
          }

          context.path.push(i);

          if (Array.isArray(item)) {
            return handleMissing(_this.executeSubSelectedArray({
              field: field,
              array: item,
              context: context
            }), i);
          }

          if (field.selectionSet) {
            return handleMissing(_this.executeSelectionSet({
              selectionSet: field.selectionSet,
              objectOrReference: item,
              context: context
            }), i);
          }

          if ("development" !== 'production') {
            assertSelectionSetForIdValue(context.store, field, item);
          }

          (0, _tsInvariant.invariant)(context.path.pop() === i);
          return item;
        });

        if ("development" !== 'production') {
          Object.freeze(array);
        }

        return {
          result: array,
          missing: missing
        };
      };

      return StoreReader;
    }();

    exports.StoreReader = StoreReader;

    function assertSelectionSetForIdValue(store, field, fieldValue) {
      if (!field.selectionSet) {
        var workSet_1 = new Set([fieldValue]);
        workSet_1.forEach(function (value) {
          if (value && _typeof3(value) === "object") {
            "development" === "production" ? (0, _tsInvariant.invariant)(!(0, _index.isReference)(value), 6) : (0, _tsInvariant.invariant)(!(0, _index.isReference)(value), "Missing selection set for object of type " + (0, _helpers.getTypenameFromStoreObject)(store, value) + " returned for query field " + field.name.value);
            Object.values(value).forEach(workSet_1.add, workSet_1);
          }
        });
      }
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "optimism": "../node_modules/optimism/lib/bundle.esm.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "./entityStore.js": "../node_modules/@apollo/client/cache/inmemory/entityStore.js",
    "./helpers.js": "../node_modules/@apollo/client/cache/inmemory/helpers.js",
    "../core/types/common.js": "../node_modules/@apollo/client/cache/core/types/common.js"
  }],
  "../node_modules/@apollo/client/cache/inmemory/writeToStore.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoreWriter = void 0;

    var _tslib = require("tslib");

    var _tsInvariant = require("ts-invariant");

    var _equality = require("@wry/equality");

    var _index = require("../../utilities/index.js");

    var _helpers = require("./helpers.js");

    ;

    var StoreWriter = function () {
      function StoreWriter(cache, reader) {
        this.cache = cache;
        this.reader = reader;
      }

      StoreWriter.prototype.writeToStore = function (_a) {
        var query = _a.query,
            result = _a.result,
            dataId = _a.dataId,
            store = _a.store,
            variables = _a.variables;
        var operationDefinition = (0, _index.getOperationDefinition)(query);
        var merger = (0, _helpers.makeProcessedFieldsMerger)();
        variables = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _index.getDefaultValues)(operationDefinition)), variables);
        var ref = this.processSelectionSet({
          result: result || Object.create(null),
          dataId: dataId,
          selectionSet: operationDefinition.selectionSet,
          context: {
            store: store,
            written: Object.create(null),
            merge: function merge(existing, incoming) {
              return merger.merge(existing, incoming);
            },
            variables: variables,
            varString: JSON.stringify(variables),
            fragmentMap: (0, _index.createFragmentMap)((0, _index.getFragmentDefinitions)(query))
          }
        });

        if (!(0, _index.isReference)(ref)) {
          throw "development" === "production" ? new _tsInvariant.InvariantError(7) : new _tsInvariant.InvariantError("Could not identify object " + JSON.stringify(result));
        }

        store.retain(ref.__ref);
        return ref;
      };

      StoreWriter.prototype.processSelectionSet = function (_a) {
        var _this = this;

        var dataId = _a.dataId,
            result = _a.result,
            selectionSet = _a.selectionSet,
            context = _a.context,
            _b = _a.out,
            out = _b === void 0 ? {
          shouldApplyMerges: false
        } : _b;
        var policies = this.cache.policies;

        var _c = policies.identify(result, selectionSet, context.fragmentMap),
            id = _c[0],
            keyObject = _c[1];

        dataId = dataId || id;

        if ("string" === typeof dataId) {
          var sets = context.written[dataId] || (context.written[dataId] = []);
          var ref = (0, _index.makeReference)(dataId);
          if (sets.indexOf(selectionSet) >= 0) return ref;
          sets.push(selectionSet);

          if (this.reader && this.reader.isFresh(result, ref, selectionSet, context)) {
            return ref;
          }
        }

        var mergedFields = Object.create(null);

        if (keyObject) {
          mergedFields = context.merge(mergedFields, keyObject);
        }

        var typename = dataId && policies.rootTypenamesById[dataId] || (0, _index.getTypenameFromResult)(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, "__typename");

        if ("string" === typeof typename) {
          mergedFields.__typename = typename;
        }

        var workSet = new Set(selectionSet.selections);
        workSet.forEach(function (selection) {
          var _a;

          if (!(0, _index.shouldInclude)(selection, context.variables)) return;

          if ((0, _index.isField)(selection)) {
            var resultFieldKey = (0, _index.resultKeyNameFromField)(selection);
            var value = result[resultFieldKey];

            if (typeof value !== 'undefined') {
              var storeFieldName = policies.getStoreFieldName({
                typename: typename,
                fieldName: selection.name.value,
                field: selection,
                variables: context.variables
              });

              var incomingValue = _this.processFieldValue(value, selection, context, out);

              if (policies.hasMergeFunction(typename, selection.name.value)) {
                incomingValue = {
                  __field: selection,
                  __typename: typename,
                  __value: incomingValue
                };
                out.shouldApplyMerges = true;
              }

              mergedFields = context.merge(mergedFields, (_a = {}, _a[storeFieldName] = incomingValue, _a));
            } else if (policies.usingPossibleTypes && !(0, _index.hasDirectives)(["defer", "client"], selection)) {
              throw "development" === "production" ? new _tsInvariant.InvariantError(8) : new _tsInvariant.InvariantError("Missing field '" + resultFieldKey + "' in " + JSON.stringify(result, null, 2).substring(0, 100));
            }
          } else {
            var fragment = (0, _index.getFragmentFromSelection)(selection, context.fragmentMap);

            if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {
              fragment.selectionSet.selections.forEach(workSet.add, workSet);
            }
          }
        });

        if ("string" === typeof dataId) {
          var entityRef_1 = (0, _index.makeReference)(dataId);

          if (out.shouldApplyMerges) {
            mergedFields = policies.applyMerges(entityRef_1, mergedFields, context);
          }

          if ("development" !== "production") {
            Object.keys(mergedFields).forEach(function (storeFieldName) {
              var fieldName = (0, _helpers.fieldNameFromStoreName)(storeFieldName);

              if (!policies.hasMergeFunction(typename, fieldName)) {
                warnAboutDataLoss(entityRef_1, mergedFields, storeFieldName, context.store);
              }
            });
          }

          context.store.merge(dataId, mergedFields);
          return entityRef_1;
        }

        return mergedFields;
      };

      StoreWriter.prototype.processFieldValue = function (value, field, context, out) {
        var _this = this;

        if (!field.selectionSet || value === null) {
          return "development" === 'production' ? value : (0, _index.cloneDeep)(value);
        }

        if (Array.isArray(value)) {
          return value.map(function (item) {
            return _this.processFieldValue(item, field, context, out);
          });
        }

        return this.processSelectionSet({
          result: value,
          selectionSet: field.selectionSet,
          context: context,
          out: out
        });
      };

      return StoreWriter;
    }();

    exports.StoreWriter = StoreWriter;
    var warnings = new Set();

    function warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {
      var getChild = function getChild(objOrRef) {
        var child = store.getFieldValue(objOrRef, storeFieldName);
        return _typeof3(child) === "object" && child;
      };

      var existing = getChild(existingRef);
      if (!existing) return;
      var incoming = getChild(incomingObj);
      if (!incoming) return;
      if ((0, _index.isReference)(existing)) return;
      if ((0, _equality.equal)(existing, incoming)) return;

      if (Object.keys(existing).every(function (key) {
        return store.getFieldValue(incoming, key) !== void 0;
      })) {
        return;
      }

      var parentType = store.getFieldValue(existingRef, "__typename") || store.getFieldValue(incomingObj, "__typename");
      var fieldName = (0, _helpers.fieldNameFromStoreName)(storeFieldName);
      var typeDotName = parentType + "." + fieldName;
      if (warnings.has(typeDotName)) return;
      warnings.add(typeDotName);
      var childTypenames = [];

      if (!Array.isArray(existing) && !Array.isArray(incoming)) {
        [existing, incoming].forEach(function (child) {
          var typename = store.getFieldValue(child, "__typename");

          if (typeof typename === "string" && !childTypenames.includes(typename)) {
            childTypenames.push(typename);
          }
        });
      }

      "development" === "production" || _tsInvariant.invariant.warn("Cache data may be lost when replacing the " + fieldName + " field of a " + parentType + " object.\n\nTo address this problem (which is not a bug in Apollo Client), " + (childTypenames.length ? "either ensure all objects of type " + childTypenames.join(" and ") + " have IDs, or " : "") + "define a custom merge function for the " + typeDotName + " field, so InMemoryCache can safely merge these objects:\n\n  existing: " + JSON.stringify(existing).slice(0, 1000) + "\n  incoming: " + JSON.stringify(incoming).slice(0, 1000) + "\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n");
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "@wry/equality": "../node_modules/@wry/equality/lib/equality.esm.js",
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "./helpers.js": "../node_modules/@apollo/client/cache/inmemory/helpers.js"
  }],
  "../node_modules/@apollo/client/cache/inmemory/reactiveVars.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.makeVar = makeVar;
    exports.cacheSlot = void 0;

    var _context = require("@wry/context");

    var _optimism = require("optimism");

    var varDep = (0, _optimism.dep)();
    var cacheSlot = new _context.Slot();
    exports.cacheSlot = cacheSlot;

    function consumeAndIterate(set, callback) {
      var items = [];
      set.forEach(function (item) {
        return items.push(item);
      });
      set.clear();
      items.forEach(callback);
    }

    function makeVar(value) {
      var caches = new Set();
      var listeners = new Set();

      var rv = function rv(newValue) {
        if (arguments.length > 0) {
          if (value !== newValue) {
            value = newValue;
            varDep.dirty(rv);
            caches.forEach(broadcast);
            consumeAndIterate(listeners, function (listener) {
              return listener(value);
            });
          }
        } else {
          var cache = cacheSlot.getValue();
          if (cache) caches.add(cache);
          varDep(rv);
        }

        return value;
      };

      rv.onNextChange = function (listener) {
        listeners.add(listener);
        return function () {
          listeners.delete(listener);
        };
      };

      return rv;
    }

    function broadcast(cache) {
      if (cache.broadcastWatches) {
        cache.broadcastWatches();
      }
    }
  }, {
    "@wry/context": "../node_modules/@wry/context/lib/context.esm.js",
    "optimism": "../node_modules/optimism/lib/bundle.esm.js"
  }],
  "../node_modules/@apollo/client/cache/inmemory/policies.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Policies = exports.defaultDataIdFromObject = void 0;

    var _tslib = require("tslib");

    var _optimism = require("optimism");

    var _tsInvariant = require("ts-invariant");

    var _index = require("../../utilities/index.js");

    var _helpers = require("./helpers.js");

    var _reactiveVars = require("./reactiveVars.js");

    function argsFromFieldSpecifier(spec) {
      return spec.args !== void 0 ? spec.args : spec.field ? (0, _index.argumentsObjectFromField)(spec.field, spec.variables) : null;
    }

    var defaultDataIdFromObject = function defaultDataIdFromObject(_a, context) {
      var __typename = _a.__typename,
          id = _a.id,
          _id = _a._id;

      if (typeof __typename === "string") {
        if (context) {
          context.keyObject = id !== void 0 ? {
            id: id
          } : _id !== void 0 ? {
            _id: _id
          } : void 0;
        }

        if (id === void 0) id = _id;

        if (id !== void 0) {
          return __typename + ":" + (typeof id === "number" || typeof id === "string" ? id : JSON.stringify(id));
        }
      }
    };

    exports.defaultDataIdFromObject = defaultDataIdFromObject;

    var nullKeyFieldsFn = function nullKeyFieldsFn() {
      return void 0;
    };

    var simpleKeyArgsFn = function simpleKeyArgsFn(_args, context) {
      return context.fieldName;
    };

    var mergeTrueFn = function mergeTrueFn(existing, incoming, _a) {
      var mergeObjects = _a.mergeObjects;
      return mergeObjects(existing, incoming);
    };

    var mergeFalseFn = function mergeFalseFn(_, incoming) {
      return incoming;
    };

    var Policies = function () {
      function Policies(config) {
        this.config = config;
        this.typePolicies = Object.create(null);
        this.supertypeMap = new Map();
        this.fuzzySubtypes = new Map();
        this.rootIdsByTypename = Object.create(null);
        this.rootTypenamesById = Object.create(null);
        this.usingPossibleTypes = false;
        this.config = (0, _tslib.__assign)({
          dataIdFromObject: defaultDataIdFromObject
        }, config);
        this.cache = this.config.cache;
        this.setRootTypename("Query");
        this.setRootTypename("Mutation");
        this.setRootTypename("Subscription");

        if (config.possibleTypes) {
          this.addPossibleTypes(config.possibleTypes);
        }

        if (config.typePolicies) {
          this.addTypePolicies(config.typePolicies);
        }
      }

      Policies.prototype.identify = function (object, selectionSet, fragmentMap) {
        var typename = selectionSet && fragmentMap ? (0, _index.getTypenameFromResult)(object, selectionSet, fragmentMap) : object.__typename;

        if (typename === this.rootTypenamesById.ROOT_QUERY) {
          return ["ROOT_QUERY"];
        }

        var context = {
          typename: typename,
          selectionSet: selectionSet,
          fragmentMap: fragmentMap
        };
        var id;
        var policy = this.getTypePolicy(typename, false);
        var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;

        while (keyFn) {
          var specifierOrId = keyFn(object, context);

          if (Array.isArray(specifierOrId)) {
            keyFn = keyFieldsFnFromSpecifier(specifierOrId);
          } else {
            id = specifierOrId;
            break;
          }
        }

        id = id && String(id);
        return context.keyObject ? [id, context.keyObject] : [id];
      };

      Policies.prototype.addTypePolicies = function (typePolicies) {
        var _this = this;

        Object.keys(typePolicies).forEach(function (typename) {
          var existing = _this.getTypePolicy(typename, true);

          var incoming = typePolicies[typename];
          var keyFields = incoming.keyFields,
              fields = incoming.fields;
          if (incoming.queryType) _this.setRootTypename("Query", typename);
          if (incoming.mutationType) _this.setRootTypename("Mutation", typename);
          if (incoming.subscriptionType) _this.setRootTypename("Subscription", typename);
          existing.keyFn = keyFields === false ? nullKeyFieldsFn : Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) : typeof keyFields === "function" ? keyFields : existing.keyFn;

          if (fields) {
            Object.keys(fields).forEach(function (fieldName) {
              var existing = _this.getFieldPolicy(typename, fieldName, true);

              var incoming = fields[fieldName];

              if (typeof incoming === "function") {
                existing.read = incoming;
              } else {
                var keyArgs = incoming.keyArgs,
                    read = incoming.read,
                    merge = incoming.merge;
                existing.keyFn = keyArgs === false ? simpleKeyArgsFn : Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) : typeof keyArgs === "function" ? keyArgs : existing.keyFn;
                if (typeof read === "function") existing.read = read;
                existing.merge = typeof merge === "function" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;
              }

              if (existing.read && existing.merge) {
                existing.keyFn = existing.keyFn || simpleKeyArgsFn;
              }
            });
          }
        });
      };

      Policies.prototype.setRootTypename = function (which, typename) {
        if (typename === void 0) {
          typename = which;
        }

        var rootId = "ROOT_" + which.toUpperCase();
        var old = this.rootTypenamesById[rootId];

        if (typename !== old) {
          "development" === "production" ? (0, _tsInvariant.invariant)(!old || old === which, 1) : (0, _tsInvariant.invariant)(!old || old === which, "Cannot change root " + which + " __typename more than once");
          if (old) delete this.rootIdsByTypename[old];
          this.rootIdsByTypename[typename] = rootId;
          this.rootTypenamesById[rootId] = typename;
        }
      };

      Policies.prototype.addPossibleTypes = function (possibleTypes) {
        var _this = this;

        this.usingPossibleTypes = true;
        Object.keys(possibleTypes).forEach(function (supertype) {
          _this.getSupertypeSet(supertype, true);

          possibleTypes[supertype].forEach(function (subtype) {
            _this.getSupertypeSet(subtype, true).add(supertype);

            var match = subtype.match(_helpers.TypeOrFieldNameRegExp);

            if (!match || match[0] !== subtype) {
              _this.fuzzySubtypes.set(subtype, new RegExp(subtype));
            }
          });
        });
      };

      Policies.prototype.getTypePolicy = function (typename, createIfMissing) {
        if (typename) {
          return this.typePolicies[typename] || createIfMissing && (this.typePolicies[typename] = Object.create(null));
        }
      };

      Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {
        var typePolicy = this.getTypePolicy(typename, createIfMissing);

        if (typePolicy) {
          var fieldPolicies = typePolicy.fields || createIfMissing && (typePolicy.fields = Object.create(null));

          if (fieldPolicies) {
            return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));
          }
        }
      };

      Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {
        var supertypeSet = this.supertypeMap.get(subtype);

        if (!supertypeSet && createIfMissing) {
          this.supertypeMap.set(subtype, supertypeSet = new Set());
        }

        return supertypeSet;
      };

      Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {
        var _this = this;

        if (!fragment.typeCondition) return true;
        if (!typename) return false;
        var supertype = fragment.typeCondition.name.value;
        if (typename === supertype) return true;

        if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {
          var typenameSupertypeSet = this.getSupertypeSet(typename, true);
          var workQueue_1 = [typenameSupertypeSet];

          var maybeEnqueue_1 = function maybeEnqueue_1(subtype) {
            var supertypeSet = _this.getSupertypeSet(subtype, false);

            if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {
              workQueue_1.push(supertypeSet);
            }
          };

          var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);
          var checkingFuzzySubtypes = false;

          for (var i = 0; i < workQueue_1.length; ++i) {
            var supertypeSet = workQueue_1[i];

            if (supertypeSet.has(supertype)) {
              if (!typenameSupertypeSet.has(supertype)) {
                if (checkingFuzzySubtypes) {
                  "development" === "production" || _tsInvariant.invariant.warn("Inferring subtype " + typename + " of supertype " + supertype);
                }

                typenameSupertypeSet.add(supertype);
              }

              return true;
            }

            supertypeSet.forEach(maybeEnqueue_1);

            if (needToCheckFuzzySubtypes && i === workQueue_1.length - 1 && (0, _helpers.selectionSetMatchesResult)(fragment.selectionSet, result, variables)) {
              needToCheckFuzzySubtypes = false;
              checkingFuzzySubtypes = true;
              this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {
                var match = typename.match(regExp);

                if (match && match[0] === typename) {
                  maybeEnqueue_1(fuzzyString);
                }
              });
            }
          }
        }

        return false;
      };

      Policies.prototype.getStoreFieldName = function (fieldSpec) {
        var typename = fieldSpec.typename,
            fieldName = fieldSpec.fieldName;
        var policy = this.getFieldPolicy(typename, fieldName, false);
        var storeFieldName;
        var keyFn = policy && policy.keyFn;

        if (keyFn && typename) {
          var context = {
            typename: typename,
            fieldName: fieldName,
            field: fieldSpec.field || null,
            variables: fieldSpec.variables
          };
          var args = argsFromFieldSpecifier(fieldSpec);

          while (keyFn) {
            var specifierOrString = keyFn(args, context);

            if (Array.isArray(specifierOrString)) {
              keyFn = keyArgsFnFromSpecifier(specifierOrString);
            } else {
              storeFieldName = specifierOrString || fieldName;
              break;
            }
          }
        }

        if (storeFieldName === void 0) {
          storeFieldName = fieldSpec.field ? (0, _index.storeKeyNameFromField)(fieldSpec.field, fieldSpec.variables) : (0, _index.getStoreKeyName)(fieldName, argsFromFieldSpecifier(fieldSpec));
        }

        return fieldName === (0, _helpers.fieldNameFromStoreName)(storeFieldName) ? storeFieldName : fieldName + ":" + storeFieldName;
      };

      Policies.prototype.readField = function (options, context) {
        var objectOrReference = options.from;
        if (!objectOrReference) return;
        var nameOrField = options.field || options.fieldName;
        if (!nameOrField) return;

        if (options.typename === void 0) {
          var typename = context.store.getFieldValue(objectOrReference, "__typename");
          if (typename) options.typename = typename;
        }

        var storeFieldName = this.getStoreFieldName(options);
        var fieldName = (0, _helpers.fieldNameFromStoreName)(storeFieldName);
        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);
        var policy = this.getFieldPolicy(options.typename, fieldName, false);
        var read = policy && policy.read;

        if (read) {
          var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage((0, _index.isReference)(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));
          return _reactiveVars.cacheSlot.withValue(this.cache, read, [existing, readOptions]);
        }

        return existing;
      };

      Policies.prototype.hasMergeFunction = function (typename, fieldName) {
        var policy = this.getFieldPolicy(typename, fieldName, false);
        return !!(policy && policy.merge);
      };

      Policies.prototype.applyMerges = function (existing, incoming, context, storageKeys) {
        var _a;

        var _this = this;

        if ((0, _helpers.isFieldValueToBeMerged)(incoming)) {
          var field = incoming.__field;
          var fieldName = field.name.value;
          var merge = this.getFieldPolicy(incoming.__typename, fieldName, false).merge;
          incoming = merge(existing, incoming.__value, makeFieldFunctionOptions(this, void 0, {
            typename: incoming.__typename,
            fieldName: fieldName,
            field: field,
            variables: context.variables
          }, context, storageKeys ? (_a = context.store).getStorage.apply(_a, storageKeys) : Object.create(null)));
        }

        if (Array.isArray(incoming)) {
          return incoming.map(function (item) {
            return _this.applyMerges(void 0, item, context);
          });
        }

        if ((0, _helpers.storeValueIsStoreObject)(incoming)) {
          var e_1 = existing;
          var i_1 = incoming;
          var firstStorageKey_1 = (0, _index.isReference)(e_1) ? e_1.__ref : _typeof3(e_1) === "object" && e_1;
          var newFields_1;
          Object.keys(i_1).forEach(function (storeFieldName) {
            var incomingValue = i_1[storeFieldName];

            var appliedValue = _this.applyMerges(context.store.getFieldValue(e_1, storeFieldName), incomingValue, context, firstStorageKey_1 ? [firstStorageKey_1, storeFieldName] : void 0);

            if (appliedValue !== incomingValue) {
              newFields_1 = newFields_1 || Object.create(null);
              newFields_1[storeFieldName] = appliedValue;
            }
          });

          if (newFields_1) {
            return (0, _tslib.__assign)((0, _tslib.__assign)({}, i_1), newFields_1);
          }
        }

        return incoming;
      };

      return Policies;
    }();

    exports.Policies = Policies;

    function makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {
      var storeFieldName = policies.getStoreFieldName(fieldSpec);
      var fieldName = (0, _helpers.fieldNameFromStoreName)(storeFieldName);
      var variables = fieldSpec.variables || context.variables;
      var _a = context.store,
          getFieldValue = _a.getFieldValue,
          toReference = _a.toReference,
          canRead = _a.canRead;
      return {
        args: argsFromFieldSpecifier(fieldSpec),
        field: fieldSpec.field || null,
        fieldName: fieldName,
        storeFieldName: storeFieldName,
        variables: variables,
        isReference: _index.isReference,
        toReference: toReference,
        storage: storage,
        cache: policies.cache,
        canRead: canRead,
        readField: function readField(fieldNameOrOptions, from) {
          var options = typeof fieldNameOrOptions === "string" ? {
            fieldName: fieldNameOrOptions,
            from: from
          } : (0, _tslib.__assign)({}, fieldNameOrOptions);

          if (void 0 === options.from) {
            options.from = objectOrReference;
          }

          if (void 0 === options.variables) {
            options.variables = variables;
          }

          return policies.readField(options, context);
        },
        mergeObjects: function mergeObjects(existing, incoming) {
          if (Array.isArray(existing) || Array.isArray(incoming)) {
            throw "development" === "production" ? new _tsInvariant.InvariantError(2) : new _tsInvariant.InvariantError("Cannot automatically merge arrays");
          }

          if (existing && _typeof3(existing) === "object" && incoming && _typeof3(incoming) === "object") {
            var eType = getFieldValue(existing, "__typename");
            var iType = getFieldValue(incoming, "__typename");
            var typesDiffer = eType && iType && eType !== iType;
            var applied = policies.applyMerges(typesDiffer ? void 0 : existing, incoming, context);

            if (typesDiffer || !(0, _helpers.storeValueIsStoreObject)(existing) || !(0, _helpers.storeValueIsStoreObject)(applied)) {
              return applied;
            }

            return (0, _tslib.__assign)((0, _tslib.__assign)({}, existing), applied);
          }

          return incoming;
        }
      };
    }

    function keyArgsFnFromSpecifier(specifier) {
      return function (args, context) {
        return args ? context.fieldName + ":" + JSON.stringify(computeKeyObject(args, specifier)) : context.fieldName;
      };
    }

    function keyFieldsFnFromSpecifier(specifier) {
      var trie = new _optimism.KeyTrie(_index.canUseWeakMap);
      return function (object, context) {
        var aliasMap;

        if (context.selectionSet && context.fragmentMap) {
          var info = trie.lookupArray([context.selectionSet, context.fragmentMap]);
          aliasMap = info.aliasMap || (info.aliasMap = makeAliasMap(context.selectionSet, context.fragmentMap));
        }

        var keyObject = context.keyObject = computeKeyObject(object, specifier, aliasMap);
        return context.typename + ":" + JSON.stringify(keyObject);
      };
    }

    function makeAliasMap(selectionSet, fragmentMap) {
      var map = Object.create(null);
      var workQueue = new Set([selectionSet]);
      workQueue.forEach(function (selectionSet) {
        selectionSet.selections.forEach(function (selection) {
          if ((0, _index.isField)(selection)) {
            if (selection.alias) {
              var responseKey = selection.alias.value;
              var storeKey = selection.name.value;

              if (storeKey !== responseKey) {
                var aliases = map.aliases || (map.aliases = Object.create(null));
                aliases[storeKey] = responseKey;
              }
            }

            if (selection.selectionSet) {
              var subsets = map.subsets || (map.subsets = Object.create(null));
              subsets[selection.name.value] = makeAliasMap(selection.selectionSet, fragmentMap);
            }
          } else {
            var fragment = (0, _index.getFragmentFromSelection)(selection, fragmentMap);

            if (fragment) {
              workQueue.add(fragment.selectionSet);
            }
          }
        });
      });
      return map;
    }

    function computeKeyObject(response, specifier, aliasMap) {
      var keyObj = Object.create(null);
      var prevKey;
      specifier.forEach(function (s) {
        if (Array.isArray(s)) {
          if (typeof prevKey === "string") {
            var subsets = aliasMap && aliasMap.subsets;
            var subset = subsets && subsets[prevKey];
            keyObj[prevKey] = computeKeyObject(response[prevKey], s, subset);
          }
        } else {
          var aliases = aliasMap && aliasMap.aliases;
          var responseName = aliases && aliases[s] || s;
          "development" === "production" ? (0, _tsInvariant.invariant)(_helpers.hasOwn.call(response, responseName), 3) : (0, _tsInvariant.invariant)(_helpers.hasOwn.call(response, responseName), "Missing field '" + responseName + "' while computing key fields");
          keyObj[prevKey = s] = response[responseName];
        }
      });
      return keyObj;
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "optimism": "../node_modules/optimism/lib/bundle.esm.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "./helpers.js": "../node_modules/@apollo/client/cache/inmemory/helpers.js",
    "./reactiveVars.js": "../node_modules/@apollo/client/cache/inmemory/reactiveVars.js"
  }],
  "../node_modules/@apollo/client/cache/inmemory/inMemoryCache.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.InMemoryCache = void 0;

    var _tslib = require("tslib");

    require("./fixPolyfills.js");

    var _optimism = require("optimism");

    var _cache = require("../core/cache.js");

    var _index = require("../../utilities/index.js");

    var _readFromStore = require("./readFromStore.js");

    var _writeToStore = require("./writeToStore.js");

    var _entityStore = require("./entityStore.js");

    var _reactiveVars = require("./reactiveVars.js");

    var _policies = require("./policies.js");

    var _helpers = require("./helpers.js");

    var defaultConfig = {
      dataIdFromObject: _policies.defaultDataIdFromObject,
      addTypename: true,
      resultCaching: true,
      typePolicies: {}
    };

    var InMemoryCache = function (_super) {
      (0, _tslib.__extends)(InMemoryCache, _super);

      function InMemoryCache(config) {
        if (config === void 0) {
          config = {};
        }

        var _this = _super.call(this) || this;

        _this.watches = new Set();
        _this.typenameDocumentCache = new Map();
        _this.makeVar = _reactiveVars.makeVar;
        _this.txCount = 0;
        _this.maybeBroadcastWatch = (0, _optimism.wrap)(function (c, fromOptimisticTransaction) {
          return _this.broadcastWatch.call(_this, c, !!fromOptimisticTransaction);
        }, {
          makeCacheKey: function makeCacheKey(c) {
            var store = c.optimistic ? _this.optimisticData : _this.data;

            if ((0, _entityStore.supportsResultCaching)(store)) {
              var optimistic = c.optimistic,
                  rootId = c.rootId,
                  variables = c.variables;
              return store.makeCacheKey(c.query, c.callback, JSON.stringify({
                optimistic: optimistic,
                rootId: rootId,
                variables: variables
              }));
            }
          }
        });
        _this.watchDep = (0, _optimism.dep)();
        _this.config = (0, _tslib.__assign)((0, _tslib.__assign)({}, defaultConfig), config);
        _this.addTypename = !!_this.config.addTypename;
        _this.policies = new _policies.Policies({
          cache: _this,
          dataIdFromObject: _this.config.dataIdFromObject,
          possibleTypes: _this.config.possibleTypes,
          typePolicies: _this.config.typePolicies
        });
        _this.data = new _entityStore.EntityStore.Root({
          policies: _this.policies,
          resultCaching: _this.config.resultCaching
        });
        _this.optimisticData = _this.data;
        _this.storeWriter = new _writeToStore.StoreWriter(_this, _this.storeReader = new _readFromStore.StoreReader({
          cache: _this,
          addTypename: _this.addTypename
        }));
        return _this;
      }

      InMemoryCache.prototype.restore = function (data) {
        if (data) this.data.replace(data);
        return this;
      };

      InMemoryCache.prototype.extract = function (optimistic) {
        if (optimistic === void 0) {
          optimistic = false;
        }

        return (optimistic ? this.optimisticData : this.data).toObject();
      };

      InMemoryCache.prototype.read = function (options) {
        var store = options.optimistic ? this.optimisticData : this.data;

        if (typeof options.rootId === 'string' && !store.has(options.rootId)) {
          return null;
        }

        return this.storeReader.diffQueryAgainstStore({
          store: store,
          query: options.query,
          variables: options.variables,
          rootId: options.rootId,
          config: this.config,
          returnPartialData: false
        }).result || null;
      };

      InMemoryCache.prototype.write = function (options) {
        try {
          ++this.txCount;
          return this.storeWriter.writeToStore({
            store: this.data,
            query: options.query,
            result: options.result,
            dataId: options.dataId,
            variables: options.variables
          });
        } finally {
          if (! --this.txCount && options.broadcast !== false) {
            this.broadcastWatches();
          }
        }
      };

      InMemoryCache.prototype.modify = function (options) {
        if (_helpers.hasOwn.call(options, "id") && !options.id) {
          return false;
        }

        var store = options.optimistic ? this.optimisticData : this.data;

        try {
          ++this.txCount;
          return store.modify(options.id || "ROOT_QUERY", options.fields);
        } finally {
          if (! --this.txCount && options.broadcast !== false) {
            this.broadcastWatches();
          }
        }
      };

      InMemoryCache.prototype.diff = function (options) {
        return this.storeReader.diffQueryAgainstStore({
          store: options.optimistic ? this.optimisticData : this.data,
          rootId: options.id || "ROOT_QUERY",
          query: options.query,
          variables: options.variables,
          returnPartialData: options.returnPartialData,
          config: this.config
        });
      };

      InMemoryCache.prototype.watch = function (watch) {
        var _this = this;

        this.watches.add(watch);

        if (watch.immediate) {
          this.maybeBroadcastWatch(watch);
        }

        return function () {
          _this.watches.delete(watch);

          _this.watchDep.dirty(watch);

          _this.maybeBroadcastWatch.forget(watch);
        };
      };

      InMemoryCache.prototype.gc = function () {
        return this.optimisticData.gc();
      };

      InMemoryCache.prototype.retain = function (rootId, optimistic) {
        return (optimistic ? this.optimisticData : this.data).retain(rootId);
      };

      InMemoryCache.prototype.release = function (rootId, optimistic) {
        return (optimistic ? this.optimisticData : this.data).release(rootId);
      };

      InMemoryCache.prototype.identify = function (object) {
        return (0, _index.isReference)(object) ? object.__ref : this.policies.identify(object)[0];
      };

      InMemoryCache.prototype.evict = function (options) {
        if (!options.id) {
          if (_helpers.hasOwn.call(options, "id")) {
            return false;
          }

          options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
            id: "ROOT_QUERY"
          });
        }

        try {
          ++this.txCount;
          return this.optimisticData.evict(options);
        } finally {
          if (! --this.txCount && options.broadcast !== false) {
            this.broadcastWatches();
          }
        }
      };

      InMemoryCache.prototype.reset = function () {
        this.data.clear();
        this.optimisticData = this.data;
        this.broadcastWatches();
        return Promise.resolve();
      };

      InMemoryCache.prototype.removeOptimistic = function (idToRemove) {
        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);

        if (newOptimisticData !== this.optimisticData) {
          this.optimisticData = newOptimisticData;
          this.broadcastWatches();
        }
      };

      InMemoryCache.prototype.performTransaction = function (transaction, optimisticId) {
        var _this = this;

        var perform = function perform(layer) {
          var _a = _this,
              data = _a.data,
              optimisticData = _a.optimisticData;
          ++_this.txCount;

          if (layer) {
            _this.data = _this.optimisticData = layer;
          }

          try {
            transaction(_this);
          } finally {
            --_this.txCount;
            _this.data = data;
            _this.optimisticData = optimisticData;
          }
        };

        var fromOptimisticTransaction = false;

        if (typeof optimisticId === 'string') {
          this.optimisticData = this.optimisticData.addLayer(optimisticId, perform);
          fromOptimisticTransaction = true;
        } else if (optimisticId === null) {
          perform(this.data);
        } else {
          perform();
        }

        this.broadcastWatches(fromOptimisticTransaction);
      };

      InMemoryCache.prototype.transformDocument = function (document) {
        if (this.addTypename) {
          var result = this.typenameDocumentCache.get(document);

          if (!result) {
            result = (0, _index.addTypenameToDocument)(document);
            this.typenameDocumentCache.set(document, result);
            this.typenameDocumentCache.set(result, result);
          }

          return result;
        }

        return document;
      };

      InMemoryCache.prototype.broadcastWatches = function (fromOptimisticTransaction) {
        var _this = this;

        if (!this.txCount) {
          this.watches.forEach(function (c) {
            return _this.maybeBroadcastWatch(c, fromOptimisticTransaction);
          });
        }
      };

      InMemoryCache.prototype.broadcastWatch = function (c, fromOptimisticTransaction) {
        this.watchDep.dirty(c);
        this.watchDep(c);
        var diff = this.diff({
          query: c.query,
          variables: c.variables,
          optimistic: c.optimistic
        });

        if (c.optimistic && fromOptimisticTransaction) {
          diff.fromOptimisticTransaction = true;
        }

        c.callback(diff);
      };

      return InMemoryCache;
    }(_cache.ApolloCache);

    exports.InMemoryCache = InMemoryCache;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "./fixPolyfills.js": "../node_modules/@apollo/client/cache/inmemory/fixPolyfills.js",
    "optimism": "../node_modules/optimism/lib/bundle.esm.js",
    "../core/cache.js": "../node_modules/@apollo/client/cache/core/cache.js",
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "./readFromStore.js": "../node_modules/@apollo/client/cache/inmemory/readFromStore.js",
    "./writeToStore.js": "../node_modules/@apollo/client/cache/inmemory/writeToStore.js",
    "./entityStore.js": "../node_modules/@apollo/client/cache/inmemory/entityStore.js",
    "./reactiveVars.js": "../node_modules/@apollo/client/cache/inmemory/reactiveVars.js",
    "./policies.js": "../node_modules/@apollo/client/cache/inmemory/policies.js",
    "./helpers.js": "../node_modules/@apollo/client/cache/inmemory/helpers.js"
  }],
  "../node_modules/@apollo/client/cache/inmemory/types.js": [function (require, module, exports) {}, {}],
  "../node_modules/@apollo/client/cache/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      ApolloCache: true,
      Cache: true,
      MissingFieldError: true,
      isReference: true,
      makeReference: true,
      InMemoryCache: true,
      makeVar: true,
      cacheSlot: true,
      defaultDataIdFromObject: true
    };
    Object.defineProperty(exports, "ApolloCache", {
      enumerable: true,
      get: function get() {
        return _cache.ApolloCache;
      }
    });
    Object.defineProperty(exports, "Cache", {
      enumerable: true,
      get: function get() {
        return _Cache.Cache;
      }
    });
    Object.defineProperty(exports, "MissingFieldError", {
      enumerable: true,
      get: function get() {
        return _common.MissingFieldError;
      }
    });
    Object.defineProperty(exports, "isReference", {
      enumerable: true,
      get: function get() {
        return _index.isReference;
      }
    });
    Object.defineProperty(exports, "makeReference", {
      enumerable: true,
      get: function get() {
        return _index.makeReference;
      }
    });
    Object.defineProperty(exports, "InMemoryCache", {
      enumerable: true,
      get: function get() {
        return _inMemoryCache.InMemoryCache;
      }
    });
    Object.defineProperty(exports, "makeVar", {
      enumerable: true,
      get: function get() {
        return _reactiveVars.makeVar;
      }
    });
    Object.defineProperty(exports, "cacheSlot", {
      enumerable: true,
      get: function get() {
        return _reactiveVars.cacheSlot;
      }
    });
    Object.defineProperty(exports, "defaultDataIdFromObject", {
      enumerable: true,
      get: function get() {
        return _policies.defaultDataIdFromObject;
      }
    });

    var _cache = require("./core/cache.js");

    var _Cache = require("./core/types/Cache.js");

    var _common = require("./core/types/common.js");

    var _index = require("../utilities/index.js");

    var _inMemoryCache = require("./inmemory/inMemoryCache.js");

    var _reactiveVars = require("./inmemory/reactiveVars.js");

    var _policies = require("./inmemory/policies.js");

    var _types = require("./inmemory/types.js");

    Object.keys(_types).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _types[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _types[key];
        }
      });
    });
  }, {
    "./core/cache.js": "../node_modules/@apollo/client/cache/core/cache.js",
    "./core/types/Cache.js": "../node_modules/@apollo/client/cache/core/types/Cache.js",
    "./core/types/common.js": "../node_modules/@apollo/client/cache/core/types/common.js",
    "../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "./inmemory/inMemoryCache.js": "../node_modules/@apollo/client/cache/inmemory/inMemoryCache.js",
    "./inmemory/reactiveVars.js": "../node_modules/@apollo/client/cache/inmemory/reactiveVars.js",
    "./inmemory/policies.js": "../node_modules/@apollo/client/cache/inmemory/policies.js",
    "./inmemory/types.js": "../node_modules/@apollo/client/cache/inmemory/types.js"
  }],
  "../node_modules/@apollo/client/core/LocalState.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LocalState = void 0;

    var _tslib = require("tslib");

    var _graphql = require("graphql");

    var _tsInvariant = require("ts-invariant");

    var _index = require("../utilities/index.js");

    var _index2 = require("../cache/index.js");

    var LocalState = function () {
      function LocalState(_a) {
        var cache = _a.cache,
            client = _a.client,
            resolvers = _a.resolvers,
            fragmentMatcher = _a.fragmentMatcher;
        this.cache = cache;

        if (client) {
          this.client = client;
        }

        if (resolvers) {
          this.addResolvers(resolvers);
        }

        if (fragmentMatcher) {
          this.setFragmentMatcher(fragmentMatcher);
        }
      }

      LocalState.prototype.addResolvers = function (resolvers) {
        var _this = this;

        this.resolvers = this.resolvers || {};

        if (Array.isArray(resolvers)) {
          resolvers.forEach(function (resolverGroup) {
            _this.resolvers = (0, _index.mergeDeep)(_this.resolvers, resolverGroup);
          });
        } else {
          this.resolvers = (0, _index.mergeDeep)(this.resolvers, resolvers);
        }
      };

      LocalState.prototype.setResolvers = function (resolvers) {
        this.resolvers = {};
        this.addResolvers(resolvers);
      };

      LocalState.prototype.getResolvers = function () {
        return this.resolvers || {};
      };

      LocalState.prototype.runResolvers = function (_a) {
        var document = _a.document,
            remoteResult = _a.remoteResult,
            context = _a.context,
            variables = _a.variables,
            _b = _a.onlyRunForcedResolvers,
            onlyRunForcedResolvers = _b === void 0 ? false : _b;
        return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
          return (0, _tslib.__generator)(this, function (_c) {
            if (document) {
              return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {
                return (0, _tslib.__assign)((0, _tslib.__assign)({}, remoteResult), {
                  data: localResult.result
                });
              })];
            }

            return [2, remoteResult];
          });
        });
      };

      LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {
        this.fragmentMatcher = fragmentMatcher;
      };

      LocalState.prototype.getFragmentMatcher = function () {
        return this.fragmentMatcher;
      };

      LocalState.prototype.clientQuery = function (document) {
        if ((0, _index.hasDirectives)(['client'], document)) {
          if (this.resolvers) {
            return document;
          }
        }

        return null;
      };

      LocalState.prototype.serverQuery = function (document) {
        return (0, _index.removeClientSetsFromDocument)(document);
      };

      LocalState.prototype.prepareContext = function (context) {
        var cache = this.cache;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, context), {
          cache: cache,
          getCacheKey: function getCacheKey(obj) {
            return cache.identify(obj);
          }
        });
      };

      LocalState.prototype.addExportedVariables = function (document, variables, context) {
        if (variables === void 0) {
          variables = {};
        }

        if (context === void 0) {
          context = {};
        }

        return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
          return (0, _tslib.__generator)(this, function (_a) {
            if (document) {
              return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {
                return (0, _tslib.__assign)((0, _tslib.__assign)({}, variables), data.exportedVariables);
              })];
            }

            return [2, (0, _tslib.__assign)({}, variables)];
          });
        });
      };

      LocalState.prototype.shouldForceResolvers = function (document) {
        var forceResolvers = false;
        (0, _graphql.visit)(document, {
          Directive: {
            enter: function enter(node) {
              if (node.name.value === 'client' && node.arguments) {
                forceResolvers = node.arguments.some(function (arg) {
                  return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;
                });

                if (forceResolvers) {
                  return _graphql.BREAK;
                }
              }
            }
          }
        });
        return forceResolvers;
      };

      LocalState.prototype.buildRootValueFromCache = function (document, variables) {
        return this.cache.diff({
          query: (0, _index.buildQueryFromSelectionSet)(document),
          variables: variables,
          returnPartialData: true,
          optimistic: false
        }).result;
      };

      LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {
        if (context === void 0) {
          context = {};
        }

        if (variables === void 0) {
          variables = {};
        }

        if (fragmentMatcher === void 0) {
          fragmentMatcher = function fragmentMatcher() {
            return true;
          };
        }

        if (onlyRunForcedResolvers === void 0) {
          onlyRunForcedResolvers = false;
        }

        return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
          var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;

          return (0, _tslib.__generator)(this, function (_b) {
            mainDefinition = (0, _index.getMainDefinition)(document);
            fragments = (0, _index.getFragmentDefinitions)(document);
            fragmentMap = (0, _index.createFragmentMap)(fragments);
            definitionOperation = mainDefinition.operation;
            defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : 'Query';
            _a = this, cache = _a.cache, client = _a.client;
            execContext = {
              fragmentMap: fragmentMap,
              context: (0, _tslib.__assign)((0, _tslib.__assign)({}, context), {
                cache: cache,
                client: client
              }),
              variables: variables,
              fragmentMatcher: fragmentMatcher,
              defaultOperationType: defaultOperationType,
              exportedVariables: {},
              onlyRunForcedResolvers: onlyRunForcedResolvers
            };
            return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) {
              return {
                result: result,
                exportedVariables: execContext.exportedVariables
              };
            })];
          });
        });
      };

      LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
          var fragmentMap, context, variables, resultsToMerge, execute;

          var _this = this;

          return (0, _tslib.__generator)(this, function (_a) {
            fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;
            resultsToMerge = [rootValue];

            execute = function execute(selection) {
              return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {
                var fragment, typeCondition;
                return (0, _tslib.__generator)(this, function (_a) {
                  if (!(0, _index.shouldInclude)(selection, variables)) {
                    return [2];
                  }

                  if ((0, _index.isField)(selection)) {
                    return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {
                      var _a;

                      if (typeof fieldResult !== 'undefined') {
                        resultsToMerge.push((_a = {}, _a[(0, _index.resultKeyNameFromField)(selection)] = fieldResult, _a));
                      }
                    })];
                  }

                  if ((0, _index.isInlineFragment)(selection)) {
                    fragment = selection;
                  } else {
                    fragment = fragmentMap[selection.name.value];
                    "development" === "production" ? (0, _tsInvariant.invariant)(fragment, 11) : (0, _tsInvariant.invariant)(fragment, "No fragment named " + selection.name.value);
                  }

                  if (fragment && fragment.typeCondition) {
                    typeCondition = fragment.typeCondition.name.value;

                    if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {
                      return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {
                        resultsToMerge.push(fragmentResult);
                      })];
                    }
                  }

                  return [2];
                });
              });
            };

            return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {
              return (0, _index.mergeDeepArray)(resultsToMerge);
            })];
          });
        });
      };

      LocalState.prototype.resolveField = function (field, rootValue, execContext) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
          var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;

          var _this = this;

          return (0, _tslib.__generator)(this, function (_a) {
            variables = execContext.variables;
            fieldName = field.name.value;
            aliasedFieldName = (0, _index.resultKeyNameFromField)(field);
            aliasUsed = fieldName !== aliasedFieldName;
            defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];
            resultPromise = Promise.resolve(defaultResult);

            if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {
              resolverType = rootValue.__typename || execContext.defaultOperationType;
              resolverMap = this.resolvers && this.resolvers[resolverType];

              if (resolverMap) {
                resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];

                if (resolve) {
                  resultPromise = Promise.resolve(_index2.cacheSlot.withValue(this.cache, resolve, [rootValue, (0, _index.argumentsObjectFromField)(field, variables), execContext.context, {
                    field: field,
                    fragmentMap: execContext.fragmentMap
                  }]));
                }
              }
            }

            return [2, resultPromise.then(function (result) {
              if (result === void 0) {
                result = defaultResult;
              }

              if (field.directives) {
                field.directives.forEach(function (directive) {
                  if (directive.name.value === 'export' && directive.arguments) {
                    directive.arguments.forEach(function (arg) {
                      if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {
                        execContext.exportedVariables[arg.value.value] = result;
                      }
                    });
                  }
                });
              }

              if (!field.selectionSet) {
                return result;
              }

              if (result == null) {
                return result;
              }

              if (Array.isArray(result)) {
                return _this.resolveSubSelectedArray(field, result, execContext);
              }

              if (field.selectionSet) {
                return _this.resolveSelectionSet(field.selectionSet, result, execContext);
              }
            })];
          });
        });
      };

      LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {
        var _this = this;

        return Promise.all(result.map(function (item) {
          if (item === null) {
            return null;
          }

          if (Array.isArray(item)) {
            return _this.resolveSubSelectedArray(field, item, execContext);
          }

          if (field.selectionSet) {
            return _this.resolveSelectionSet(field.selectionSet, item, execContext);
          }
        }));
      };

      return LocalState;
    }();

    exports.LocalState = LocalState;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "graphql": "../node_modules/graphql/index.mjs",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "../cache/index.js": "../node_modules/@apollo/client/cache/index.js"
  }],
  "../node_modules/@apollo/client/core/QueryInfo.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.shouldWriteResult = shouldWriteResult;
    exports.QueryInfo = void 0;

    var _equality = require("@wry/equality");

    var _index = require("../utilities/index.js");

    var _networkStatus = require("./networkStatus.js");

    var destructiveMethodCounts = new (_index.canUseWeakMap ? WeakMap : Map)();

    function wrapDestructiveCacheMethod(cache, methodName) {
      var original = cache[methodName];

      if (typeof original === "function") {
        cache[methodName] = function () {
          destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);
          return original.apply(this, arguments);
        };
      }
    }

    var QueryInfo = function () {
      function QueryInfo(cache) {
        this.cache = cache;
        this.listeners = new Set();
        this.document = null;
        this.lastRequestId = 1;
        this.subscriptions = new Set();
        this.dirty = false;
        this.diff = null;
        this.observableQuery = null;

        if (!destructiveMethodCounts.has(cache)) {
          destructiveMethodCounts.set(cache, 0);
          wrapDestructiveCacheMethod(cache, "evict");
          wrapDestructiveCacheMethod(cache, "modify");
          wrapDestructiveCacheMethod(cache, "reset");
        }
      }

      QueryInfo.prototype.init = function (query) {
        var networkStatus = query.networkStatus || _networkStatus.NetworkStatus.loading;

        if (this.variables && this.networkStatus !== _networkStatus.NetworkStatus.loading && !(0, _equality.equal)(this.variables, query.variables)) {
          networkStatus = _networkStatus.NetworkStatus.setVariables;
        }

        if (!(0, _equality.equal)(query.variables, this.variables)) {
          this.diff = null;
        }

        Object.assign(this, {
          document: query.document,
          variables: query.variables,
          networkError: null,
          graphQLErrors: this.graphQLErrors || [],
          networkStatus: networkStatus
        });

        if (query.observableQuery) {
          this.setObservableQuery(query.observableQuery);
        }

        if (query.lastRequestId) {
          this.lastRequestId = query.lastRequestId;
        }

        return this;
      };

      QueryInfo.prototype.getDiff = function (variables) {
        if (variables === void 0) {
          variables = this.variables;
        }

        if (this.diff && (0, _equality.equal)(variables, this.variables)) {
          return this.diff;
        }

        this.updateWatch(this.variables = variables);
        return this.diff = this.cache.diff({
          query: this.document,
          variables: variables,
          returnPartialData: true,
          optimistic: true
        });
      };

      QueryInfo.prototype.setDiff = function (diff) {
        var _this = this;

        var oldDiff = this.diff;
        this.diff = diff;

        if (!this.dirty && (diff && diff.result) !== (oldDiff && oldDiff.result)) {
          this.dirty = true;

          if (!this.notifyTimeout) {
            this.notifyTimeout = setTimeout(function () {
              return _this.notify();
            }, 0);
          }
        }
      };

      QueryInfo.prototype.setObservableQuery = function (oq) {
        var _this = this;

        if (oq === this.observableQuery) return;

        if (this.oqListener) {
          this.listeners.delete(this.oqListener);
        }

        this.observableQuery = oq;

        if (oq) {
          oq["queryInfo"] = this;
          this.listeners.add(this.oqListener = function () {
            if (_this.getDiff().fromOptimisticTransaction) {
              oq["observe"]();
            } else {
              oq.reobserve();
            }
          });
        } else {
          delete this.oqListener;
        }
      };

      QueryInfo.prototype.notify = function () {
        var _this = this;

        if (this.notifyTimeout) {
          clearTimeout(this.notifyTimeout);
          this.notifyTimeout = void 0;
        }

        if (this.shouldNotify()) {
          this.listeners.forEach(function (listener) {
            return listener(_this);
          });
        }

        this.dirty = false;
      };

      QueryInfo.prototype.shouldNotify = function () {
        if (!this.dirty || !this.listeners.size) {
          return false;
        }

        if ((0, _networkStatus.isNetworkRequestInFlight)(this.networkStatus) && this.observableQuery) {
          var fetchPolicy = this.observableQuery.options.fetchPolicy;

          if (fetchPolicy !== "cache-only" && fetchPolicy !== "cache-and-network") {
            return false;
          }
        }

        return true;
      };

      QueryInfo.prototype.stop = function () {
        this.cancel();
        delete this.cancel;
        var oq = this.observableQuery;
        if (oq) oq.stopPolling();
      };

      QueryInfo.prototype.cancel = function () {};

      QueryInfo.prototype.updateWatch = function (variables) {
        var _this = this;

        if (variables === void 0) {
          variables = this.variables;
        }

        var oq = this.observableQuery;

        if (oq && oq.options.fetchPolicy === "no-cache") {
          return;
        }

        if (!this.lastWatch || this.lastWatch.query !== this.document || !(0, _equality.equal)(variables, this.lastWatch.variables)) {
          this.cancel();
          this.cancel = this.cache.watch(this.lastWatch = {
            query: this.document,
            variables: variables,
            optimistic: true,
            callback: function callback(diff) {
              return _this.setDiff(diff);
            }
          });
        }
      };

      QueryInfo.prototype.shouldWrite = function (result, variables) {
        var lastWrite = this.lastWrite;
        return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && (0, _equality.equal)(variables, lastWrite.variables) && (0, _equality.equal)(result.data, lastWrite.result.data));
      };

      QueryInfo.prototype.markResult = function (result, options, allowCacheWrite) {
        var _this = this;

        this.graphQLErrors = (0, _index.isNonEmptyArray)(result.errors) ? result.errors : [];

        if (options.fetchPolicy === 'no-cache') {
          this.diff = {
            result: result.data,
            complete: true
          };
        } else if (allowCacheWrite) {
          if (shouldWriteResult(result, options.errorPolicy)) {
            this.cache.performTransaction(function (cache) {
              if (_this.shouldWrite(result, options.variables)) {
                cache.writeQuery({
                  query: _this.document,
                  data: result.data,
                  variables: options.variables
                });
                _this.lastWrite = {
                  result: result,
                  variables: options.variables,
                  dmCount: destructiveMethodCounts.get(_this.cache)
                };
              } else {
                if (_this.diff && _this.diff.complete) {
                  result.data = _this.diff.result;
                  return;
                }
              }

              var diff = cache.diff({
                query: _this.document,
                variables: options.variables,
                returnPartialData: true,
                optimistic: true
              });

              _this.updateWatch(options.variables);

              _this.diff = diff;

              if (diff.complete) {
                result.data = diff.result;
              }
            });
          } else {
            this.lastWrite = void 0;
          }
        }
      };

      QueryInfo.prototype.markReady = function () {
        this.networkError = null;
        return this.networkStatus = _networkStatus.NetworkStatus.ready;
      };

      QueryInfo.prototype.markError = function (error) {
        this.networkStatus = _networkStatus.NetworkStatus.error;
        this.lastWrite = void 0;

        if (error.graphQLErrors) {
          this.graphQLErrors = error.graphQLErrors;
        }

        if (error.networkError) {
          this.networkError = error.networkError;
        }

        return error;
      };

      return QueryInfo;
    }();

    exports.QueryInfo = QueryInfo;

    function shouldWriteResult(result, errorPolicy) {
      if (errorPolicy === void 0) {
        errorPolicy = "none";
      }

      var ignoreErrors = errorPolicy === "ignore" || errorPolicy === "all";
      var writeWithErrors = !(0, _index.graphQLResultHasError)(result);

      if (!writeWithErrors && ignoreErrors && result.data) {
        writeWithErrors = true;
      }

      return writeWithErrors;
    }
  }, {
    "@wry/equality": "../node_modules/@wry/equality/lib/equality.esm.js",
    "../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "./networkStatus.js": "../node_modules/@apollo/client/core/networkStatus.js"
  }],
  "../node_modules/@apollo/client/core/QueryManager.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.QueryManager = void 0;

    var _tslib = require("tslib");

    var _tsInvariant = require("ts-invariant");

    var _equality = require("@wry/equality");

    var _index = require("../link/core/index.js");

    var _index2 = require("../utilities/index.js");

    var _index3 = require("../errors/index.js");

    var _MutationStore = require("./MutationStore.js");

    var _ObservableQuery = require("./ObservableQuery.js");

    var _networkStatus = require("./networkStatus.js");

    var _LocalState = require("./LocalState.js");

    var _QueryInfo = require("./QueryInfo.js");

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    var QueryManager = function () {
      function QueryManager(_a) {
        var cache = _a.cache,
            link = _a.link,
            _b = _a.queryDeduplication,
            queryDeduplication = _b === void 0 ? false : _b,
            _c = _a.onBroadcast,
            onBroadcast = _c === void 0 ? function () {
          return undefined;
        } : _c,
            _d = _a.ssrMode,
            ssrMode = _d === void 0 ? false : _d,
            _e = _a.clientAwareness,
            clientAwareness = _e === void 0 ? {} : _e,
            localState = _a.localState,
            assumeImmutableResults = _a.assumeImmutableResults;
        this.mutationStore = new _MutationStore.MutationStore();
        this.clientAwareness = {};
        this.queries = new Map();
        this.fetchCancelFns = new Map();
        this.transformCache = new (_index2.canUseWeakMap ? WeakMap : Map)();
        this.queryIdCounter = 1;
        this.requestIdCounter = 1;
        this.mutationIdCounter = 1;
        this.inFlightLinkObservables = new Map();
        this.cache = cache;
        this.link = link;
        this.queryDeduplication = queryDeduplication;
        this.onBroadcast = onBroadcast;
        this.clientAwareness = clientAwareness;
        this.localState = localState || new _LocalState.LocalState({
          cache: cache
        });
        this.ssrMode = ssrMode;
        this.assumeImmutableResults = !!assumeImmutableResults;
      }

      QueryManager.prototype.stop = function () {
        var _this = this;

        this.queries.forEach(function (_info, queryId) {
          _this.stopQueryNoBroadcast(queryId);
        });
        this.cancelPendingFetches("development" === "production" ? new _tsInvariant.InvariantError(12) : new _tsInvariant.InvariantError('QueryManager stopped while query was in flight'));
      };

      QueryManager.prototype.cancelPendingFetches = function (error) {
        this.fetchCancelFns.forEach(function (cancel) {
          return cancel(error);
        });
        this.fetchCancelFns.clear();
      };

      QueryManager.prototype.mutate = function (_a) {
        var mutation = _a.mutation,
            variables = _a.variables,
            optimisticResponse = _a.optimisticResponse,
            updateQueriesByName = _a.updateQueries,
            _b = _a.refetchQueries,
            refetchQueries = _b === void 0 ? [] : _b,
            _c = _a.awaitRefetchQueries,
            awaitRefetchQueries = _c === void 0 ? false : _c,
            updateWithProxyFn = _a.update,
            _d = _a.errorPolicy,
            errorPolicy = _d === void 0 ? 'none' : _d,
            fetchPolicy = _a.fetchPolicy,
            _e = _a.context,
            context = _e === void 0 ? {} : _e;
        return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
          var mutationId, generateUpdateQueriesInfo, optimistic_1, self;

          var _this = this;

          return (0, _tslib.__generator)(this, function (_f) {
            switch (_f.label) {
              case 0:
                "development" === "production" ? (0, _tsInvariant.invariant)(mutation, 13) : (0, _tsInvariant.invariant)(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');
                "development" === "production" ? (0, _tsInvariant.invariant)(!fetchPolicy || fetchPolicy === 'no-cache', 14) : (0, _tsInvariant.invariant)(!fetchPolicy || fetchPolicy === 'no-cache', "Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.");
                mutationId = this.generateMutationId();
                mutation = this.transform(mutation).document;
                variables = this.getVariables(mutation, variables);
                if (!this.transform(mutation).hasClientExports) return [3, 2];
                return [4, this.localState.addExportedVariables(mutation, variables, context)];

              case 1:
                variables = _f.sent();
                _f.label = 2;

              case 2:
                generateUpdateQueriesInfo = function generateUpdateQueriesInfo() {
                  var ret = {};

                  if (updateQueriesByName) {
                    _this.queries.forEach(function (_a, queryId) {
                      var observableQuery = _a.observableQuery;

                      if (observableQuery) {
                        var queryName = observableQuery.queryName;

                        if (queryName && hasOwnProperty.call(updateQueriesByName, queryName)) {
                          ret[queryId] = {
                            updater: updateQueriesByName[queryName],
                            queryInfo: _this.queries.get(queryId)
                          };
                        }
                      }
                    });
                  }

                  return ret;
                };

                this.mutationStore.initMutation(mutationId, mutation, variables);

                if (optimisticResponse) {
                  optimistic_1 = typeof optimisticResponse === 'function' ? optimisticResponse(variables) : optimisticResponse;
                  this.cache.recordOptimisticTransaction(function (cache) {
                    try {
                      markMutationResult({
                        mutationId: mutationId,
                        result: {
                          data: optimistic_1
                        },
                        document: mutation,
                        variables: variables,
                        errorPolicy: errorPolicy,
                        queryUpdatersById: generateUpdateQueriesInfo(),
                        update: updateWithProxyFn
                      }, cache);
                    } catch (error) {
                      "development" === "production" || _tsInvariant.invariant.error(error);
                    }
                  }, mutationId);
                }

                this.broadcastQueries();
                self = this;
                return [2, new Promise(function (resolve, reject) {
                  var storeResult;
                  var error;
                  self.getObservableFromLink(mutation, (0, _tslib.__assign)((0, _tslib.__assign)({}, context), {
                    optimisticResponse: optimisticResponse
                  }), variables, false).subscribe({
                    next: function next(result) {
                      if ((0, _index2.graphQLResultHasError)(result) && errorPolicy === 'none') {
                        error = new _index3.ApolloError({
                          graphQLErrors: result.errors
                        });
                        return;
                      }

                      self.mutationStore.markMutationResult(mutationId);

                      if (fetchPolicy !== 'no-cache') {
                        try {
                          markMutationResult({
                            mutationId: mutationId,
                            result: result,
                            document: mutation,
                            variables: variables,
                            errorPolicy: errorPolicy,
                            queryUpdatersById: generateUpdateQueriesInfo(),
                            update: updateWithProxyFn
                          }, self.cache);
                        } catch (e) {
                          error = new _index3.ApolloError({
                            networkError: e
                          });
                          return;
                        }
                      }

                      storeResult = result;
                    },
                    error: function error(err) {
                      self.mutationStore.markMutationError(mutationId, err);

                      if (optimisticResponse) {
                        self.cache.removeOptimistic(mutationId);
                      }

                      self.broadcastQueries();
                      reject(new _index3.ApolloError({
                        networkError: err
                      }));
                    },
                    complete: function complete() {
                      if (error) {
                        self.mutationStore.markMutationError(mutationId, error);
                      }

                      if (optimisticResponse) {
                        self.cache.removeOptimistic(mutationId);
                      }

                      self.broadcastQueries();

                      if (error) {
                        reject(error);
                        return;
                      }

                      if (typeof refetchQueries === 'function') {
                        refetchQueries = refetchQueries(storeResult);
                      }

                      var refetchQueryPromises = [];

                      if ((0, _index2.isNonEmptyArray)(refetchQueries)) {
                        refetchQueries.forEach(function (refetchQuery) {
                          if (typeof refetchQuery === 'string') {
                            self.queries.forEach(function (_a) {
                              var observableQuery = _a.observableQuery;

                              if (observableQuery && observableQuery.queryName === refetchQuery) {
                                refetchQueryPromises.push(observableQuery.refetch());
                              }
                            });
                          } else {
                            var queryOptions = {
                              query: refetchQuery.query,
                              variables: refetchQuery.variables,
                              fetchPolicy: 'network-only'
                            };

                            if (refetchQuery.context) {
                              queryOptions.context = refetchQuery.context;
                            }

                            refetchQueryPromises.push(self.query(queryOptions));
                          }
                        });
                      }

                      Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {
                        if (errorPolicy === 'ignore' && storeResult && (0, _index2.graphQLResultHasError)(storeResult)) {
                          delete storeResult.errors;
                        }

                        resolve(storeResult);
                      }, reject);
                    }
                  });
                })];
            }
          });
        });
      };

      QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {
        return this.fetchQueryObservable(queryId, options, networkStatus).promise;
      };

      QueryManager.prototype.getQueryStore = function () {
        var store = Object.create(null);
        this.queries.forEach(function (info, queryId) {
          store[queryId] = {
            variables: info.variables,
            networkStatus: info.networkStatus,
            networkError: info.networkError,
            graphQLErrors: info.graphQLErrors
          };
        });
        return store;
      };

      QueryManager.prototype.resetErrors = function (queryId) {
        var queryInfo = this.queries.get(queryId);

        if (queryInfo) {
          queryInfo.networkError = undefined;
          queryInfo.graphQLErrors = [];
        }
      };

      QueryManager.prototype.transform = function (document) {
        var transformCache = this.transformCache;

        if (!transformCache.has(document)) {
          var transformed = this.cache.transformDocument(document);
          var forLink = (0, _index2.removeConnectionDirectiveFromDocument)(this.cache.transformForLink(transformed));
          var clientQuery = this.localState.clientQuery(transformed);
          var serverQuery = forLink && this.localState.serverQuery(forLink);
          var cacheEntry_1 = {
            document: transformed,
            hasClientExports: (0, _index2.hasClientExports)(transformed),
            hasForcedResolvers: this.localState.shouldForceResolvers(transformed),
            clientQuery: clientQuery,
            serverQuery: serverQuery,
            defaultVars: (0, _index2.getDefaultValues)((0, _index2.getOperationDefinition)(transformed))
          };

          var add = function add(doc) {
            if (doc && !transformCache.has(doc)) {
              transformCache.set(doc, cacheEntry_1);
            }
          };

          add(document);
          add(transformed);
          add(clientQuery);
          add(serverQuery);
        }

        return transformCache.get(document);
      };

      QueryManager.prototype.getVariables = function (document, variables) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, this.transform(document).defaultVars), variables);
      };

      QueryManager.prototype.watchQuery = function (options) {
        options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
          variables: this.getVariables(options.query, options.variables)
        });

        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {
          options.notifyOnNetworkStatusChange = false;
        }

        var queryInfo = new _QueryInfo.QueryInfo(this.cache);
        var observable = new _ObservableQuery.ObservableQuery({
          queryManager: this,
          queryInfo: queryInfo,
          options: options
        });
        this.queries.set(observable.queryId, queryInfo);
        queryInfo.init({
          document: options.query,
          observableQuery: observable,
          variables: options.variables
        });
        return observable;
      };

      QueryManager.prototype.query = function (options) {
        var _this = this;

        "development" === "production" ? (0, _tsInvariant.invariant)(options.query, 15) : (0, _tsInvariant.invariant)(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');
        "development" === "production" ? (0, _tsInvariant.invariant)(options.query.kind === 'Document', 16) : (0, _tsInvariant.invariant)(options.query.kind === 'Document', 'You must wrap the query string in a "gql" tag.');
        "development" === "production" ? (0, _tsInvariant.invariant)(!options.returnPartialData, 17) : (0, _tsInvariant.invariant)(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');
        "development" === "production" ? (0, _tsInvariant.invariant)(!options.pollInterval, 18) : (0, _tsInvariant.invariant)(!options.pollInterval, 'pollInterval option only supported on watchQuery.');
        var queryId = this.generateQueryId();
        return this.fetchQuery(queryId, options).finally(function () {
          return _this.stopQuery(queryId);
        });
      };

      QueryManager.prototype.generateQueryId = function () {
        return String(this.queryIdCounter++);
      };

      QueryManager.prototype.generateRequestId = function () {
        return this.requestIdCounter++;
      };

      QueryManager.prototype.generateMutationId = function () {
        return String(this.mutationIdCounter++);
      };

      QueryManager.prototype.stopQueryInStore = function (queryId) {
        this.stopQueryInStoreNoBroadcast(queryId);
        this.broadcastQueries();
      };

      QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {
        var queryInfo = this.queries.get(queryId);
        if (queryInfo) queryInfo.stop();
      };

      QueryManager.prototype.clearStore = function () {
        this.cancelPendingFetches("development" === "production" ? new _tsInvariant.InvariantError(19) : new _tsInvariant.InvariantError('Store reset while query was in flight (not completed in link chain)'));
        this.queries.forEach(function (queryInfo) {
          if (queryInfo.observableQuery) {
            queryInfo.networkStatus = _networkStatus.NetworkStatus.loading;
          } else {
            queryInfo.stop();
          }
        });
        this.mutationStore.reset();
        return this.cache.reset();
      };

      QueryManager.prototype.resetStore = function () {
        var _this = this;

        return this.clearStore().then(function () {
          return _this.reFetchObservableQueries();
        });
      };

      QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {
        var _this = this;

        if (includeStandby === void 0) {
          includeStandby = false;
        }

        var observableQueryPromises = [];
        this.queries.forEach(function (_a, queryId) {
          var observableQuery = _a.observableQuery;

          if (observableQuery && observableQuery.hasObservers()) {
            var fetchPolicy = observableQuery.options.fetchPolicy;
            observableQuery.resetLastResults();

            if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {
              observableQueryPromises.push(observableQuery.refetch());
            }

            _this.getQuery(queryId).setDiff(null);
          }
        });
        this.broadcastQueries();
        return Promise.all(observableQueryPromises);
      };

      QueryManager.prototype.setObservableQuery = function (observableQuery) {
        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);
      };

      QueryManager.prototype.startGraphQLSubscription = function (_a) {
        var _this = this;

        var query = _a.query,
            fetchPolicy = _a.fetchPolicy,
            errorPolicy = _a.errorPolicy,
            variables = _a.variables,
            _b = _a.context,
            context = _b === void 0 ? {} : _b;
        query = this.transform(query).document;
        variables = this.getVariables(query, variables);

        var makeObservable = function makeObservable(variables) {
          return _this.getObservableFromLink(query, context, variables, false).map(function (result) {
            if (fetchPolicy !== 'no-cache') {
              if ((0, _QueryInfo.shouldWriteResult)(result, errorPolicy)) {
                _this.cache.write({
                  query: query,
                  result: result.data,
                  dataId: 'ROOT_SUBSCRIPTION',
                  variables: variables
                });
              }

              _this.broadcastQueries();
            }

            if ((0, _index2.graphQLResultHasError)(result)) {
              throw new _index3.ApolloError({
                graphQLErrors: result.errors
              });
            }

            return result;
          });
        };

        if (this.transform(query).hasClientExports) {
          var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);
          return new _index2.Observable(function (observer) {
            var sub = null;
            observablePromise_1.then(function (observable) {
              return sub = observable.subscribe(observer);
            }, observer.error);
            return function () {
              return sub && sub.unsubscribe();
            };
          });
        }

        return makeObservable(variables);
      };

      QueryManager.prototype.stopQuery = function (queryId) {
        this.stopQueryNoBroadcast(queryId);
        this.broadcastQueries();
      };

      QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {
        this.stopQueryInStoreNoBroadcast(queryId);
        this.removeQuery(queryId);
      };

      QueryManager.prototype.removeQuery = function (queryId) {
        this.fetchCancelFns.delete(queryId);
        this.getQuery(queryId).subscriptions.forEach(function (x) {
          return x.unsubscribe();
        });
        this.queries.delete(queryId);
      };

      QueryManager.prototype.broadcastQueries = function () {
        this.onBroadcast();
        this.queries.forEach(function (info) {
          return info.notify();
        });
      };

      QueryManager.prototype.getLocalState = function () {
        return this.localState;
      };

      QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {
        var _this = this;

        var _a;

        if (deduplication === void 0) {
          deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;
        }

        var observable;
        var serverQuery = this.transform(query).serverQuery;

        if (serverQuery) {
          var _b = this,
              inFlightLinkObservables_1 = _b.inFlightLinkObservables,
              link = _b.link;

          var operation = {
            query: serverQuery,
            variables: variables,
            operationName: (0, _index2.getOperationName)(serverQuery) || void 0,
            context: this.prepareContext((0, _tslib.__assign)((0, _tslib.__assign)({}, context), {
              forceFetch: !deduplication
            }))
          };
          context = operation.context;

          if (deduplication) {
            var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();
            inFlightLinkObservables_1.set(serverQuery, byVariables_1);
            var varJson_1 = JSON.stringify(variables);
            observable = byVariables_1.get(varJson_1);

            if (!observable) {
              var concast = new _index2.Concast([(0, _index.execute)(link, operation)]);
              byVariables_1.set(varJson_1, observable = concast);
              concast.cleanup(function () {
                if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {
                  inFlightLinkObservables_1.delete(serverQuery);
                }
              });
            }
          } else {
            observable = new _index2.Concast([(0, _index.execute)(link, operation)]);
          }
        } else {
          observable = new _index2.Concast([_index2.Observable.of({
            data: {}
          })]);
          context = this.prepareContext(context);
        }

        var clientQuery = this.transform(query).clientQuery;

        if (clientQuery) {
          observable = (0, _index2.asyncMap)(observable, function (result) {
            return _this.localState.runResolvers({
              document: clientQuery,
              remoteResult: result,
              context: context,
              variables: variables
            });
          });
        }

        return observable;
      };

      QueryManager.prototype.getResultsFromLink = function (queryInfo, allowCacheWrite, options) {
        var lastRequestId = queryInfo.lastRequestId;
        return (0, _index2.asyncMap)(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {
          var hasErrors = (0, _index2.isNonEmptyArray)(result.errors);

          if (lastRequestId >= queryInfo.lastRequestId) {
            if (hasErrors && options.errorPolicy === "none") {
              throw queryInfo.markError(new _index3.ApolloError({
                graphQLErrors: result.errors
              }));
            }

            queryInfo.markResult(result, options, allowCacheWrite);
            queryInfo.markReady();
          }

          var aqr = {
            data: result.data,
            loading: false,
            networkStatus: queryInfo.networkStatus || _networkStatus.NetworkStatus.ready
          };

          if (hasErrors && options.errorPolicy !== "ignore") {
            aqr.errors = result.errors;
          }

          return aqr;
        }, function (networkError) {
          var error = (0, _index3.isApolloError)(networkError) ? networkError : new _index3.ApolloError({
            networkError: networkError
          });

          if (lastRequestId >= queryInfo.lastRequestId) {
            queryInfo.markError(error);
          }

          throw error;
        });
      };

      QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {
        var _this = this;

        if (networkStatus === void 0) {
          networkStatus = _networkStatus.NetworkStatus.loading;
        }

        var query = this.transform(options.query).document;
        var variables = this.getVariables(query, options.variables);
        var queryInfo = this.getQuery(queryId);
        var oldNetworkStatus = queryInfo.networkStatus;
        var _a = options.fetchPolicy,
            fetchPolicy = _a === void 0 ? "cache-first" : _a,
            _b = options.errorPolicy,
            errorPolicy = _b === void 0 ? "none" : _b,
            _c = options.returnPartialData,
            returnPartialData = _c === void 0 ? false : _c,
            _d = options.notifyOnNetworkStatusChange,
            notifyOnNetworkStatusChange = _d === void 0 ? false : _d,
            _e = options.context,
            context = _e === void 0 ? {} : _e;
        var mightUseNetwork = fetchPolicy === "cache-first" || fetchPolicy === "cache-and-network" || fetchPolicy === "network-only" || fetchPolicy === "no-cache";

        if (mightUseNetwork && notifyOnNetworkStatusChange && typeof oldNetworkStatus === "number" && oldNetworkStatus !== networkStatus && (0, _networkStatus.isNetworkRequestInFlight)(networkStatus)) {
          if (fetchPolicy !== "cache-first") {
            fetchPolicy = "cache-and-network";
          }

          returnPartialData = true;
        }

        var normalized = Object.assign({}, options, {
          query: query,
          variables: variables,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          returnPartialData: returnPartialData,
          notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
          context: context
        });

        var fromVariables = function fromVariables(variables) {
          normalized.variables = variables;
          return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);
        };

        this.fetchCancelFns.set(queryId, function (reason) {
          Promise.resolve().then(function () {
            return concast.cancel(reason);
          });
        });
        var concast = new _index2.Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));
        concast.cleanup(function () {
          _this.fetchCancelFns.delete(queryId);

          var nextFetchPolicy = options.nextFetchPolicy;

          if (nextFetchPolicy) {
            options.nextFetchPolicy = void 0;
            options.fetchPolicy = typeof nextFetchPolicy === "function" ? nextFetchPolicy.call(options, options.fetchPolicy || "cache-first") : nextFetchPolicy;
          }
        });
        return concast;
      };

      QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, options, networkStatus) {
        var _this = this;

        var query = options.query,
            variables = options.variables,
            fetchPolicy = options.fetchPolicy,
            errorPolicy = options.errorPolicy,
            returnPartialData = options.returnPartialData,
            context = options.context;
        queryInfo.init({
          document: query,
          variables: variables,
          lastRequestId: this.generateRequestId(),
          networkStatus: networkStatus
        });

        var readCache = function readCache() {
          return queryInfo.getDiff(variables);
        };

        var resultsFromCache = function resultsFromCache(diff, networkStatus) {
          if (networkStatus === void 0) {
            networkStatus = queryInfo.networkStatus || _networkStatus.NetworkStatus.loading;
          }

          var data = diff.result;

          if ("development" !== 'production' && (0, _index2.isNonEmptyArray)(diff.missing) && !(0, _equality.equal)(data, {}) && !returnPartialData) {
            "development" === "production" || _tsInvariant.invariant.warn("Missing cache result fields: " + diff.missing.map(function (m) {
              return m.path.join('.');
            }).join(', '), diff.missing);
          }

          var fromData = function fromData(data) {
            return _index2.Observable.of((0, _tslib.__assign)({
              data: data,
              loading: (0, _networkStatus.isNetworkRequestInFlight)(networkStatus),
              networkStatus: networkStatus
            }, diff.complete ? null : {
              partial: true
            }));
          };

          if (_this.transform(query).hasForcedResolvers) {
            return _this.localState.runResolvers({
              document: query,
              remoteResult: {
                data: data
              },
              context: context,
              variables: variables,
              onlyRunForcedResolvers: true
            }).then(function (resolved) {
              return fromData(resolved.data);
            });
          }

          return fromData(data);
        };

        var resultsFromLink = function resultsFromLink(allowCacheWrite) {
          return _this.getResultsFromLink(queryInfo, allowCacheWrite, {
            variables: variables,
            context: context,
            fetchPolicy: fetchPolicy,
            errorPolicy: errorPolicy
          });
        };

        switch (fetchPolicy) {
          default:
          case "cache-first":
            {
              var diff = readCache();

              if (diff.complete) {
                return [resultsFromCache(diff, queryInfo.markReady())];
              }

              if (returnPartialData) {
                return [resultsFromCache(diff), resultsFromLink(true)];
              }

              return [resultsFromLink(true)];
            }

          case "cache-and-network":
            {
              var diff = readCache();

              if (diff.complete || returnPartialData) {
                return [resultsFromCache(diff), resultsFromLink(true)];
              }

              return [resultsFromLink(true)];
            }

          case "cache-only":
            return [resultsFromCache(readCache(), queryInfo.markReady())];

          case "network-only":
            return [resultsFromLink(true)];

          case "no-cache":
            return [resultsFromLink(false)];

          case "standby":
            return [];
        }
      };

      QueryManager.prototype.getQuery = function (queryId) {
        if (queryId && !this.queries.has(queryId)) {
          this.queries.set(queryId, new _QueryInfo.QueryInfo(this.cache));
        }

        return this.queries.get(queryId);
      };

      QueryManager.prototype.prepareContext = function (context) {
        if (context === void 0) {
          context = {};
        }

        var newContext = this.localState.prepareContext(context);
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, newContext), {
          clientAwareness: this.clientAwareness
        });
      };

      return QueryManager;
    }();

    exports.QueryManager = QueryManager;

    function markMutationResult(mutation, cache) {
      if ((0, _QueryInfo.shouldWriteResult)(mutation.result, mutation.errorPolicy)) {
        var cacheWrites_1 = [{
          result: mutation.result.data,
          dataId: 'ROOT_MUTATION',
          query: mutation.document,
          variables: mutation.variables
        }];
        var queryUpdatersById_1 = mutation.queryUpdatersById;

        if (queryUpdatersById_1) {
          Object.keys(queryUpdatersById_1).forEach(function (id) {
            var _a = queryUpdatersById_1[id],
                updater = _a.updater,
                _b = _a.queryInfo,
                document = _b.document,
                variables = _b.variables;

            var _c = cache.diff({
              query: document,
              variables: variables,
              returnPartialData: true,
              optimistic: false
            }),
                currentQueryResult = _c.result,
                complete = _c.complete;

            if (complete && currentQueryResult) {
              var nextQueryResult = updater(currentQueryResult, {
                mutationResult: mutation.result,
                queryName: (0, _index2.getOperationName)(document) || undefined,
                queryVariables: variables
              });

              if (nextQueryResult) {
                cacheWrites_1.push({
                  result: nextQueryResult,
                  dataId: 'ROOT_QUERY',
                  query: document,
                  variables: variables
                });
              }
            }
          });
        }

        cache.performTransaction(function (c) {
          cacheWrites_1.forEach(function (write) {
            return c.write(write);
          });
          var update = mutation.update;

          if (update) {
            update(c, mutation.result);
          }
        }, null);
      }
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "@wry/equality": "../node_modules/@wry/equality/lib/equality.esm.js",
    "../link/core/index.js": "../node_modules/@apollo/client/link/core/index.js",
    "../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "../errors/index.js": "../node_modules/@apollo/client/errors/index.js",
    "./MutationStore.js": "../node_modules/@apollo/client/core/MutationStore.js",
    "./ObservableQuery.js": "../node_modules/@apollo/client/core/ObservableQuery.js",
    "./networkStatus.js": "../node_modules/@apollo/client/core/networkStatus.js",
    "./LocalState.js": "../node_modules/@apollo/client/core/LocalState.js",
    "./QueryInfo.js": "../node_modules/@apollo/client/core/QueryInfo.js"
  }],
  "../node_modules/@apollo/client/core/ApolloClient.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ApolloClient = void 0;

    var _tslib = require("tslib");

    var _tsInvariant = require("ts-invariant");

    var _index = require("../link/core/index.js");

    var _index2 = require("../utilities/index.js");

    var _version = require("../version.js");

    var _index3 = require("../link/http/index.js");

    var _QueryManager = require("./QueryManager.js");

    var _LocalState = require("./LocalState.js");

    var hasSuggestedDevtools = false;

    var ApolloClient = function () {
      function ApolloClient(options) {
        var _this = this;

        this.defaultOptions = {};
        this.resetStoreCallbacks = [];
        this.clearStoreCallbacks = [];
        var uri = options.uri,
            credentials = options.credentials,
            headers = options.headers,
            cache = options.cache,
            _a = options.ssrMode,
            ssrMode = _a === void 0 ? false : _a,
            _b = options.ssrForceFetchDelay,
            ssrForceFetchDelay = _b === void 0 ? 0 : _b,
            connectToDevTools = options.connectToDevTools,
            _c = options.queryDeduplication,
            queryDeduplication = _c === void 0 ? true : _c,
            defaultOptions = options.defaultOptions,
            _d = options.assumeImmutableResults,
            assumeImmutableResults = _d === void 0 ? false : _d,
            resolvers = options.resolvers,
            typeDefs = options.typeDefs,
            fragmentMatcher = options.fragmentMatcher,
            clientAwarenessName = options.name,
            clientAwarenessVersion = options.version;
        var link = options.link;

        if (!link) {
          link = uri ? new _index3.HttpLink({
            uri: uri,
            credentials: credentials,
            headers: headers
          }) : _index.ApolloLink.empty();
        }

        if (!cache) {
          throw "development" === "production" ? new _tsInvariant.InvariantError(9) : new _tsInvariant.InvariantError("To initialize Apollo Client, you must specify a 'cache' property " + "in the options object. \n" + "For more information, please visit: https://go.apollo.dev/c/docs");
        }

        this.link = link;
        this.cache = cache;
        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
        this.queryDeduplication = queryDeduplication;
        this.defaultOptions = defaultOptions || {};
        this.typeDefs = typeDefs;

        if (ssrForceFetchDelay) {
          setTimeout(function () {
            return _this.disableNetworkFetches = false;
          }, ssrForceFetchDelay);
        }

        this.watchQuery = this.watchQuery.bind(this);
        this.query = this.query.bind(this);
        this.mutate = this.mutate.bind(this);
        this.resetStore = this.resetStore.bind(this);
        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
        var defaultConnectToDevTools = "development" !== 'production' && typeof window !== 'undefined' && !window.__APOLLO_CLIENT__;

        if (typeof connectToDevTools === 'undefined' ? defaultConnectToDevTools : connectToDevTools && typeof window !== 'undefined') {
          window.__APOLLO_CLIENT__ = this;
        }

        if (!hasSuggestedDevtools && "development" !== 'production') {
          hasSuggestedDevtools = true;

          if (typeof window !== 'undefined' && window.document && window.top === window.self) {
            if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
              if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('Chrome') > -1) {
                console.debug('Download the Apollo DevTools ' + 'for a better development experience: ' + 'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');
              }
            }
          }
        }

        this.version = _version.version;
        this.localState = new _LocalState.LocalState({
          cache: cache,
          client: this,
          resolvers: resolvers,
          fragmentMatcher: fragmentMatcher
        });
        this.queryManager = new _QueryManager.QueryManager({
          cache: this.cache,
          link: this.link,
          queryDeduplication: queryDeduplication,
          ssrMode: ssrMode,
          clientAwareness: {
            name: clientAwarenessName,
            version: clientAwarenessVersion
          },
          localState: this.localState,
          assumeImmutableResults: assumeImmutableResults,
          onBroadcast: function onBroadcast() {
            if (_this.devToolsHookCb) {
              _this.devToolsHookCb({
                action: {},
                state: {
                  queries: _this.queryManager.getQueryStore(),
                  mutations: _this.queryManager.mutationStore.getStore()
                },
                dataWithOptimisticResults: _this.cache.extract(true)
              });
            }
          }
        });
      }

      ApolloClient.prototype.stop = function () {
        this.queryManager.stop();
      };

      ApolloClient.prototype.watchQuery = function (options) {
        if (this.defaultOptions.watchQuery) {
          options = (0, _index2.compact)(this.defaultOptions.watchQuery, options);
        }

        if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {
          options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
            fetchPolicy: 'cache-first'
          });
        }

        return this.queryManager.watchQuery(options);
      };

      ApolloClient.prototype.query = function (options) {
        if (this.defaultOptions.query) {
          options = (0, _index2.compact)(this.defaultOptions.query, options);
        }

        "development" === "production" ? (0, _tsInvariant.invariant)(options.fetchPolicy !== 'cache-and-network', 10) : (0, _tsInvariant.invariant)(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' + 'client.query can only return a single result. Please use client.watchQuery ' + 'to receive multiple results from the cache and the network, or consider ' + 'using a different fetchPolicy, such as cache-first or network-only.');

        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {
          options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
            fetchPolicy: 'cache-first'
          });
        }

        return this.queryManager.query(options);
      };

      ApolloClient.prototype.mutate = function (options) {
        if (this.defaultOptions.mutate) {
          options = (0, _index2.compact)(this.defaultOptions.mutate, options);
        }

        return this.queryManager.mutate(options);
      };

      ApolloClient.prototype.subscribe = function (options) {
        return this.queryManager.startGraphQLSubscription(options);
      };

      ApolloClient.prototype.readQuery = function (options, optimistic) {
        if (optimistic === void 0) {
          optimistic = false;
        }

        return this.cache.readQuery(options, optimistic);
      };

      ApolloClient.prototype.readFragment = function (options, optimistic) {
        if (optimistic === void 0) {
          optimistic = false;
        }

        return this.cache.readFragment(options, optimistic);
      };

      ApolloClient.prototype.writeQuery = function (options) {
        this.cache.writeQuery(options);
        this.queryManager.broadcastQueries();
      };

      ApolloClient.prototype.writeFragment = function (options) {
        this.cache.writeFragment(options);
        this.queryManager.broadcastQueries();
      };

      ApolloClient.prototype.__actionHookForDevTools = function (cb) {
        this.devToolsHookCb = cb;
      };

      ApolloClient.prototype.__requestRaw = function (payload) {
        return (0, _index.execute)(this.link, payload);
      };

      ApolloClient.prototype.resetStore = function () {
        var _this = this;

        return Promise.resolve().then(function () {
          return _this.queryManager.clearStore();
        }).then(function () {
          return Promise.all(_this.resetStoreCallbacks.map(function (fn) {
            return fn();
          }));
        }).then(function () {
          return _this.reFetchObservableQueries();
        });
      };

      ApolloClient.prototype.clearStore = function () {
        var _this = this;

        return Promise.resolve().then(function () {
          return _this.queryManager.clearStore();
        }).then(function () {
          return Promise.all(_this.clearStoreCallbacks.map(function (fn) {
            return fn();
          }));
        });
      };

      ApolloClient.prototype.onResetStore = function (cb) {
        var _this = this;

        this.resetStoreCallbacks.push(cb);
        return function () {
          _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {
            return c !== cb;
          });
        };
      };

      ApolloClient.prototype.onClearStore = function (cb) {
        var _this = this;

        this.clearStoreCallbacks.push(cb);
        return function () {
          _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {
            return c !== cb;
          });
        };
      };

      ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {
        return this.queryManager.reFetchObservableQueries(includeStandby);
      };

      ApolloClient.prototype.extract = function (optimistic) {
        return this.cache.extract(optimistic);
      };

      ApolloClient.prototype.restore = function (serializedState) {
        return this.cache.restore(serializedState);
      };

      ApolloClient.prototype.addResolvers = function (resolvers) {
        this.localState.addResolvers(resolvers);
      };

      ApolloClient.prototype.setResolvers = function (resolvers) {
        this.localState.setResolvers(resolvers);
      };

      ApolloClient.prototype.getResolvers = function () {
        return this.localState.getResolvers();
      };

      ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {
        this.localState.setFragmentMatcher(fragmentMatcher);
      };

      ApolloClient.prototype.setLink = function (newLink) {
        this.link = this.queryManager.link = newLink;
      };

      return ApolloClient;
    }();

    exports.ApolloClient = ApolloClient;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "../link/core/index.js": "../node_modules/@apollo/client/link/core/index.js",
    "../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "../version.js": "../node_modules/@apollo/client/version.js",
    "../link/http/index.js": "../node_modules/@apollo/client/link/http/index.js",
    "./QueryManager.js": "../node_modules/@apollo/client/core/QueryManager.js",
    "./LocalState.js": "../node_modules/@apollo/client/core/LocalState.js"
  }],
  "../node_modules/@apollo/client/core/types.js": [function (require, module, exports) {}, {}],
  "../node_modules/graphql/jsutils/isObjectLike.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isObjectLike;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }
    /**
     * Return true if `value` is object-like. A value is object-like if it's not
     * `null` and has a `typeof` result of "object".
     */


    function isObjectLike(value) {
      return _typeof(value) == 'object' && value !== null;
    }
  }, {}],
  "../node_modules/graphql/polyfills/symbols.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SYMBOL_TO_STRING_TAG = exports.SYMBOL_ASYNC_ITERATOR = exports.SYMBOL_ITERATOR = void 0; // In ES2015 (or a polyfilled) environment, this will be Symbol.iterator
    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

    var SYMBOL_ITERATOR = typeof Symbol === 'function' && Symbol.iterator != null ? Symbol.iterator : '@@iterator'; // In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator
    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

    exports.SYMBOL_ITERATOR = SYMBOL_ITERATOR;
    var SYMBOL_ASYNC_ITERATOR = typeof Symbol === 'function' && Symbol.asyncIterator != null ? Symbol.asyncIterator : '@@asyncIterator'; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

    exports.SYMBOL_ASYNC_ITERATOR = SYMBOL_ASYNC_ITERATOR;
    var SYMBOL_TO_STRING_TAG = typeof Symbol === 'function' && Symbol.toStringTag != null ? Symbol.toStringTag : '@@toStringTag';
    exports.SYMBOL_TO_STRING_TAG = SYMBOL_TO_STRING_TAG;
  }, {}],
  "../node_modules/graphql/language/location.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getLocation = getLocation;
    /**
     * Represents a location in a Source.
     */

    /**
     * Takes a Source and a UTF-8 character offset, and returns the corresponding
     * line and column as a SourceLocation.
     */

    function getLocation(source, position) {
      var lineRegexp = /\r\n|[\n\r]/g;
      var line = 1;
      var column = position + 1;
      var match;

      while ((match = lineRegexp.exec(source.body)) && match.index < position) {
        line += 1;
        column = position + 1 - (match.index + match[0].length);
      }

      return {
        line: line,
        column: column
      };
    }
  }, {}],
  "../node_modules/graphql/language/printLocation.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printLocation = printLocation;
    exports.printSourceLocation = printSourceLocation;

    var _location = require("./location.js");
    /**
     * Render a helpful description of the location in the GraphQL Source document.
     */


    function printLocation(location) {
      return printSourceLocation(location.source, (0, _location.getLocation)(location.source, location.start));
    }
    /**
     * Render a helpful description of the location in the GraphQL Source document.
     */


    function printSourceLocation(source, sourceLocation) {
      var firstLineColumnOffset = source.locationOffset.column - 1;
      var body = whitespace(firstLineColumnOffset) + source.body;
      var lineIndex = sourceLocation.line - 1;
      var lineOffset = source.locationOffset.line - 1;
      var lineNum = sourceLocation.line + lineOffset;
      var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
      var columnNum = sourceLocation.column + columnOffset;
      var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
      var lines = body.split(/\r\n|[\n\r]/g);
      var locationLine = lines[lineIndex]; // Special case for minified documents

      if (locationLine.length > 120) {
        var subLineIndex = Math.floor(columnNum / 80);
        var subLineColumnNum = columnNum % 80;
        var subLines = [];

        for (var i = 0; i < locationLine.length; i += 80) {
          subLines.push(locationLine.slice(i, i + 80));
        }

        return locationStr + printPrefixedLines([["".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function (subLine) {
          return ['', subLine];
        }), [[' ', whitespace(subLineColumnNum - 1) + '^'], ['', subLines[subLineIndex + 1]]]));
      }

      return locationStr + printPrefixedLines([// Lines specified like this: ["prefix", "string"],
      ["".concat(lineNum - 1), lines[lineIndex - 1]], ["".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], ["".concat(lineNum + 1), lines[lineIndex + 1]]]);
    }

    function printPrefixedLines(lines) {
      var existingLines = lines.filter(function (_ref) {
        var _ = _ref[0],
            line = _ref[1];
        return line !== undefined;
      });
      var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {
        var prefix = _ref2[0];
        return prefix.length;
      }));
      return existingLines.map(function (_ref3) {
        var prefix = _ref3[0],
            line = _ref3[1];
        return leftPad(padLen, prefix) + (line ? ' | ' + line : ' |');
      }).join('\n');
    }

    function whitespace(len) {
      return Array(len + 1).join(' ');
    }

    function leftPad(len, str) {
      return whitespace(len - str.length) + str;
    }
  }, {
    "./location.js": "../node_modules/graphql/language/location.js"
  }],
  "../node_modules/graphql/error/GraphQLError.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printError = printError;
    exports.GraphQLError = void 0;

    var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.js"));

    var _symbols = require("../polyfills/symbols.js");

    var _location = require("../language/location.js");

    var _printLocation = require("../language/printLocation.js");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }

      return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? new Map() : undefined;

      _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;

        if (typeof Class !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }

        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) return _cache.get(Class);

          _cache.set(Class, Wrapper);
        }

        function Wrapper() {
          return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }

        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return _setPrototypeOf(Wrapper, Class);
      };

      return _wrapNativeSuper(Class);
    }

    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
          return instance;
        };
      }

      return _construct.apply(null, arguments);
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    /**
     * A GraphQLError describes an Error found during the parse, validate, or
     * execute phases of performing a GraphQL operation. In addition to a message
     * and stack trace, it also includes information about the locations in a
     * GraphQL document and/or execution result that correspond to the Error.
     */


    var GraphQLError = /*#__PURE__*/function (_Error) {
      _inherits(GraphQLError, _Error);

      var _super = _createSuper(GraphQLError);
      /**
       * A message describing the Error for debugging purposes.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       *
       * Note: should be treated as readonly, despite invariant usage.
       */

      /**
       * An array of { line, column } locations within the source GraphQL document
       * which correspond to this error.
       *
       * Errors during validation often contain multiple locations, for example to
       * point out two things with the same name. Errors during execution include a
       * single location, the field which produced the error.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       */

      /**
       * An array describing the JSON-path into the execution response which
       * corresponds to this error. Only included for errors during execution.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       */

      /**
       * An array of GraphQL AST Nodes corresponding to this error.
       */

      /**
       * The source GraphQL document for the first location of this error.
       *
       * Note that if this Error represents more than one node, the source may not
       * represent nodes after the first node.
       */

      /**
       * An array of character offsets within the source GraphQL document
       * which correspond to this error.
       */

      /**
       * The original error thrown from a field resolver during execution.
       */

      /**
       * Extension fields to add to the formatted error.
       */


      function GraphQLError(message, nodes, source, positions, path, originalError, extensions) {
        var _locations2, _source2, _positions2, _extensions2;

        var _this;

        _classCallCheck(this, GraphQLError);

        _this = _super.call(this, message); // Compute list of blame nodes.

        var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.


        var _source = source;

        if (!_source && _nodes) {
          var _nodes$0$loc;

          _source = (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0 ? void 0 : _nodes$0$loc.source;
        }

        var _positions = positions;

        if (!_positions && _nodes) {
          _positions = _nodes.reduce(function (list, node) {
            if (node.loc) {
              list.push(node.loc.start);
            }

            return list;
          }, []);
        }

        if (_positions && _positions.length === 0) {
          _positions = undefined;
        }

        var _locations;

        if (positions && source) {
          _locations = positions.map(function (pos) {
            return (0, _location.getLocation)(source, pos);
          });
        } else if (_nodes) {
          _locations = _nodes.reduce(function (list, node) {
            if (node.loc) {
              list.push((0, _location.getLocation)(node.loc.source, node.loc.start));
            }

            return list;
          }, []);
        }

        var _extensions = extensions;

        if (_extensions == null && originalError != null) {
          var originalExtensions = originalError.extensions;

          if ((0, _isObjectLike.default)(originalExtensions)) {
            _extensions = originalExtensions;
          }
        }

        Object.defineProperties(_assertThisInitialized(_this), {
          name: {
            value: 'GraphQLError'
          },
          message: {
            value: message,
            // By being enumerable, JSON.stringify will include `message` in the
            // resulting output. This ensures that the simplest possible GraphQL
            // service adheres to the spec.
            enumerable: true,
            writable: true
          },
          locations: {
            // Coercing falsy values to undefined ensures they will not be included
            // in JSON.stringify() when not provided.
            value: (_locations2 = _locations) !== null && _locations2 !== void 0 ? _locations2 : undefined,
            // By being enumerable, JSON.stringify will include `locations` in the
            // resulting output. This ensures that the simplest possible GraphQL
            // service adheres to the spec.
            enumerable: _locations != null
          },
          path: {
            // Coercing falsy values to undefined ensures they will not be included
            // in JSON.stringify() when not provided.
            value: path !== null && path !== void 0 ? path : undefined,
            // By being enumerable, JSON.stringify will include `path` in the
            // resulting output. This ensures that the simplest possible GraphQL
            // service adheres to the spec.
            enumerable: path != null
          },
          nodes: {
            value: _nodes !== null && _nodes !== void 0 ? _nodes : undefined
          },
          source: {
            value: (_source2 = _source) !== null && _source2 !== void 0 ? _source2 : undefined
          },
          positions: {
            value: (_positions2 = _positions) !== null && _positions2 !== void 0 ? _positions2 : undefined
          },
          originalError: {
            value: originalError
          },
          extensions: {
            // Coercing falsy values to undefined ensures they will not be included
            // in JSON.stringify() when not provided.
            value: (_extensions2 = _extensions) !== null && _extensions2 !== void 0 ? _extensions2 : undefined,
            // By being enumerable, JSON.stringify will include `path` in the
            // resulting output. This ensures that the simplest possible GraphQL
            // service adheres to the spec.
            enumerable: _extensions != null
          }
        }); // Include (non-enumerable) stack trace.

        if (originalError === null || originalError === void 0 ? void 0 : originalError.stack) {
          Object.defineProperty(_assertThisInitialized(_this), 'stack', {
            value: originalError.stack,
            writable: true,
            configurable: true
          });
          return _possibleConstructorReturn(_this);
        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')


        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError);
        } else {
          Object.defineProperty(_assertThisInitialized(_this), 'stack', {
            value: Error().stack,
            writable: true,
            configurable: true
          });
        }

        return _this;
      }

      _createClass(GraphQLError, [{
        key: "toString",
        value: function toString() {
          return printError(this);
        } // FIXME: workaround to not break chai comparisons, should be remove in v16
        // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

      }, {
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'Object';
        }
      }]);

      return GraphQLError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));
    /**
     * Prints a GraphQLError to a string, representing useful location information
     * about the error's position in the source.
     */


    exports.GraphQLError = GraphQLError;

    function printError(error) {
      var output = error.message;

      if (error.nodes) {
        for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {
          var node = _error$nodes2[_i2];

          if (node.loc) {
            output += '\n\n' + (0, _printLocation.printLocation)(node.loc);
          }
        }
      } else if (error.source && error.locations) {
        for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {
          var location = _error$locations2[_i4];
          output += '\n\n' + (0, _printLocation.printSourceLocation)(error.source, location);
        }
      }

      return output;
    }
  }, {
    "../jsutils/isObjectLike.js": "../node_modules/graphql/jsutils/isObjectLike.js",
    "../polyfills/symbols.js": "../node_modules/graphql/polyfills/symbols.js",
    "../language/location.js": "../node_modules/graphql/language/location.js",
    "../language/printLocation.js": "../node_modules/graphql/language/printLocation.js"
  }],
  "../node_modules/graphql/error/syntaxError.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.syntaxError = syntaxError;

    var _GraphQLError = require("./GraphQLError.js");
    /**
     * Produces a GraphQLError representing a syntax error, containing useful
     * descriptive information about the syntax error's position in the source.
     */


    function syntaxError(source, position, description) {
      return new _GraphQLError.GraphQLError("Syntax Error: ".concat(description), undefined, source, [position]);
    }
  }, {
    "./GraphQLError.js": "../node_modules/graphql/error/GraphQLError.js"
  }],
  "../node_modules/graphql/language/kinds.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Kind = void 0;
    /**
     * The set of allowed kind values for AST nodes.
     */

    var Kind = Object.freeze({
      // Name
      NAME: 'Name',
      // Document
      DOCUMENT: 'Document',
      OPERATION_DEFINITION: 'OperationDefinition',
      VARIABLE_DEFINITION: 'VariableDefinition',
      SELECTION_SET: 'SelectionSet',
      FIELD: 'Field',
      ARGUMENT: 'Argument',
      // Fragments
      FRAGMENT_SPREAD: 'FragmentSpread',
      INLINE_FRAGMENT: 'InlineFragment',
      FRAGMENT_DEFINITION: 'FragmentDefinition',
      // Values
      VARIABLE: 'Variable',
      INT: 'IntValue',
      FLOAT: 'FloatValue',
      STRING: 'StringValue',
      BOOLEAN: 'BooleanValue',
      NULL: 'NullValue',
      ENUM: 'EnumValue',
      LIST: 'ListValue',
      OBJECT: 'ObjectValue',
      OBJECT_FIELD: 'ObjectField',
      // Directives
      DIRECTIVE: 'Directive',
      // Types
      NAMED_TYPE: 'NamedType',
      LIST_TYPE: 'ListType',
      NON_NULL_TYPE: 'NonNullType',
      // Type System Definitions
      SCHEMA_DEFINITION: 'SchemaDefinition',
      OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',
      // Type Definitions
      SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',
      OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',
      FIELD_DEFINITION: 'FieldDefinition',
      INPUT_VALUE_DEFINITION: 'InputValueDefinition',
      INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',
      UNION_TYPE_DEFINITION: 'UnionTypeDefinition',
      ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',
      ENUM_VALUE_DEFINITION: 'EnumValueDefinition',
      INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',
      // Directive Definitions
      DIRECTIVE_DEFINITION: 'DirectiveDefinition',
      // Type System Extensions
      SCHEMA_EXTENSION: 'SchemaExtension',
      // Type Extensions
      SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',
      OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',
      INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',
      UNION_TYPE_EXTENSION: 'UnionTypeExtension',
      ENUM_TYPE_EXTENSION: 'EnumTypeExtension',
      INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'
    });
    /**
     * The enum type representing the possible kind values of AST nodes.
     */

    exports.Kind = Kind;
  }, {}],
  "../node_modules/graphql/jsutils/invariant.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = invariant;

    function invariant(condition, message) {
      var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

      if (!booleanCondition) {
        throw new Error(message != null ? message : 'Unexpected invariant triggered.');
      }
    }
  }, {}],
  "../node_modules/graphql/jsutils/nodejsCustomInspectSymbol.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

    var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;
    var _default = nodejsCustomInspectSymbol;
    exports.default = _default;
  }, {}],
  "../node_modules/graphql/jsutils/defineInspect.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = defineInspect;

    var _invariant = _interopRequireDefault(require("./invariant.js"));

    var _nodejsCustomInspectSymbol = _interopRequireDefault(require("./nodejsCustomInspectSymbol.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`
     */


    function defineInspect(classObject) {
      var fn = classObject.prototype.toJSON;
      typeof fn === 'function' || (0, _invariant.default)(0);
      classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')

      if (_nodejsCustomInspectSymbol.default) {
        classObject.prototype[_nodejsCustomInspectSymbol.default] = fn;
      }
    }
  }, {
    "./invariant.js": "../node_modules/graphql/jsutils/invariant.js",
    "./nodejsCustomInspectSymbol.js": "../node_modules/graphql/jsutils/nodejsCustomInspectSymbol.js"
  }],
  "../node_modules/graphql/language/ast.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isNode = isNode;
    exports.Token = exports.Location = void 0;

    var _defineInspect = _interopRequireDefault(require("../jsutils/defineInspect.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Contains a range of UTF-8 character offsets and token references that
     * identify the region of the source from which the AST derived.
     */


    var Location = /*#__PURE__*/function () {
      /**
       * The character offset at which this Node begins.
       */

      /**
       * The character offset at which this Node ends.
       */

      /**
       * The Token at which this Node begins.
       */

      /**
       * The Token at which this Node ends.
       */

      /**
       * The Source document the AST represents.
       */
      function Location(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }

      var _proto = Location.prototype;

      _proto.toJSON = function toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      };

      return Location;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


    exports.Location = Location;
    (0, _defineInspect.default)(Location);
    /**
     * Represents a range of characters represented by a lexical token
     * within a Source.
     */

    var Token = /*#__PURE__*/function () {
      /**
       * The kind of Token.
       */

      /**
       * The character offset at which this Node begins.
       */

      /**
       * The character offset at which this Node ends.
       */

      /**
       * The 1-indexed line number on which this Token appears.
       */

      /**
       * The 1-indexed column number at which this Token begins.
       */

      /**
       * For non-punctuation tokens, represents the interpreted value of the token.
       */

      /**
       * Tokens exist as nodes in a double-linked-list amongst all tokens
       * including ignored tokens. <SOF> is always the first node and <EOF>
       * the last.
       */
      function Token(kind, start, end, line, column, prev, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = prev;
        this.next = null;
      }

      var _proto2 = Token.prototype;

      _proto2.toJSON = function toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      };

      return Token;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


    exports.Token = Token;
    (0, _defineInspect.default)(Token);
    /**
     * @internal
     */

    function isNode(maybeNode) {
      return maybeNode != null && typeof maybeNode.kind === 'string';
    }
    /**
     * The list of all possible AST node types.
     */

  }, {
    "../jsutils/defineInspect.js": "../node_modules/graphql/jsutils/defineInspect.js"
  }],
  "../node_modules/graphql/language/tokenKind.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TokenKind = void 0;
    /**
     * An exported enum describing the different kinds of tokens that the
     * lexer emits.
     */

    var TokenKind = Object.freeze({
      SOF: '<SOF>',
      EOF: '<EOF>',
      BANG: '!',
      DOLLAR: '$',
      AMP: '&',
      PAREN_L: '(',
      PAREN_R: ')',
      SPREAD: '...',
      COLON: ':',
      EQUALS: '=',
      AT: '@',
      BRACKET_L: '[',
      BRACKET_R: ']',
      BRACE_L: '{',
      PIPE: '|',
      BRACE_R: '}',
      NAME: 'Name',
      INT: 'Int',
      FLOAT: 'Float',
      STRING: 'String',
      BLOCK_STRING: 'BlockString',
      COMMENT: 'Comment'
    });
    /**
     * The enum type representing the token kinds values.
     */

    exports.TokenKind = TokenKind;
  }, {}],
  "../node_modules/graphql/jsutils/inspect.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = inspect;

    var _nodejsCustomInspectSymbol = _interopRequireDefault(require("./nodejsCustomInspectSymbol.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    var MAX_ARRAY_LENGTH = 10;
    var MAX_RECURSIVE_DEPTH = 2;
    /**
     * Used to print values in error messages.
     */

    function inspect(value) {
      return formatValue(value, []);
    }

    function formatValue(value, seenValues) {
      switch (_typeof(value)) {
        case 'string':
          return JSON.stringify(value);

        case 'function':
          return value.name ? "[function ".concat(value.name, "]") : '[function]';

        case 'object':
          if (value === null) {
            return 'null';
          }

          return formatObjectValue(value, seenValues);

        default:
          return String(value);
      }
    }

    function formatObjectValue(value, previouslySeenValues) {
      if (previouslySeenValues.indexOf(value) !== -1) {
        return '[Circular]';
      }

      var seenValues = [].concat(previouslySeenValues, [value]);
      var customInspectFn = getCustomFn(value);

      if (customInspectFn !== undefined) {
        var customValue = customInspectFn.call(value); // check for infinite recursion

        if (customValue !== value) {
          return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);
        }
      } else if (Array.isArray(value)) {
        return formatArray(value, seenValues);
      }

      return formatObject(value, seenValues);
    }

    function formatObject(object, seenValues) {
      var keys = Object.keys(object);

      if (keys.length === 0) {
        return '{}';
      }

      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return '[' + getObjectTag(object) + ']';
      }

      var properties = keys.map(function (key) {
        var value = formatValue(object[key], seenValues);
        return key + ': ' + value;
      });
      return '{ ' + properties.join(', ') + ' }';
    }

    function formatArray(array, seenValues) {
      if (array.length === 0) {
        return '[]';
      }

      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return '[Array]';
      }

      var len = Math.min(MAX_ARRAY_LENGTH, array.length);
      var remaining = array.length - len;
      var items = [];

      for (var i = 0; i < len; ++i) {
        items.push(formatValue(array[i], seenValues));
      }

      if (remaining === 1) {
        items.push('... 1 more item');
      } else if (remaining > 1) {
        items.push("... ".concat(remaining, " more items"));
      }

      return '[' + items.join(', ') + ']';
    }

    function getCustomFn(object) {
      var customInspectFn = object[String(_nodejsCustomInspectSymbol.default)];

      if (typeof customInspectFn === 'function') {
        return customInspectFn;
      }

      if (typeof object.inspect === 'function') {
        return object.inspect;
      }
    }

    function getObjectTag(object) {
      var tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');

      if (tag === 'Object' && typeof object.constructor === 'function') {
        var name = object.constructor.name;

        if (typeof name === 'string' && name !== '') {
          return name;
        }
      }

      return tag;
    }
  }, {
    "./nodejsCustomInspectSymbol.js": "../node_modules/graphql/jsutils/nodejsCustomInspectSymbol.js"
  }],
  "../node_modules/graphql/jsutils/devAssert.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = devAssert;

    function devAssert(condition, message) {
      var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

      if (!booleanCondition) {
        throw new Error(message);
      }
    }
  }, {}],
  "../node_modules/graphql/jsutils/instanceOf.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    /**
     * A replacement for instanceof which includes an error warning when multi-realm
     * constructors are detected.
     */
    // See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
    // See: https://webpack.js.org/guides/production/

    var _default = "development" === 'production' ? // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
    // eslint-disable-next-line no-shadow
    function instanceOf(value, constructor) {
      return value instanceof constructor;
    } : // eslint-disable-next-line no-shadow
    function instanceOf(value, constructor) {
      if (value instanceof constructor) {
        return true;
      }

      if (value) {
        var valueClass = value.constructor;
        var className = constructor.name;

        if (className && valueClass && valueClass.name === className) {
          throw new Error("Cannot use ".concat(className, " \"").concat(value, "\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results."));
        }
      }

      return false;
    };

    exports.default = _default;
  }, {}],
  "../node_modules/graphql/language/source.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isSource = isSource;
    exports.Source = void 0;

    var _symbols = require("../polyfills/symbols.js");

    var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

    var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

    var _instanceOf = _interopRequireDefault(require("../jsutils/instanceOf.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    /**
     * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are
     * optional, but they are useful for clients who store GraphQL documents in source files.
     * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might
     * be useful for `name` to be `"Foo.graphql"` and location to be `{ line: 40, column: 1 }`.
     * The `line` and `column` properties in `locationOffset` are 1-indexed.
     */


    var Source = /*#__PURE__*/function () {
      function Source(body) {
        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';
        var locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          line: 1,
          column: 1
        };
        typeof body === 'string' || (0, _devAssert.default)(0, "Body must be a string. Received: ".concat((0, _inspect.default)(body), "."));
        this.body = body;
        this.name = name;
        this.locationOffset = locationOffset;
        this.locationOffset.line > 0 || (0, _devAssert.default)(0, 'line in locationOffset is 1-indexed and must be positive.');
        this.locationOffset.column > 0 || (0, _devAssert.default)(0, 'column in locationOffset is 1-indexed and must be positive.');
      } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet


      _createClass(Source, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return 'Source';
        }
      }]);

      return Source;
    }();
    /**
     * Test if the given value is a Source object.
     *
     * @internal
     */


    exports.Source = Source; // eslint-disable-next-line no-redeclare

    function isSource(source) {
      return (0, _instanceOf.default)(source, Source);
    }
  }, {
    "../polyfills/symbols.js": "../node_modules/graphql/polyfills/symbols.js",
    "../jsutils/inspect.js": "../node_modules/graphql/jsutils/inspect.js",
    "../jsutils/devAssert.js": "../node_modules/graphql/jsutils/devAssert.js",
    "../jsutils/instanceOf.js": "../node_modules/graphql/jsutils/instanceOf.js"
  }],
  "../node_modules/graphql/language/directiveLocation.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DirectiveLocation = void 0;
    /**
     * The set of allowed directive location values.
     */

    var DirectiveLocation = Object.freeze({
      // Request Definitions
      QUERY: 'QUERY',
      MUTATION: 'MUTATION',
      SUBSCRIPTION: 'SUBSCRIPTION',
      FIELD: 'FIELD',
      FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',
      FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',
      INLINE_FRAGMENT: 'INLINE_FRAGMENT',
      VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',
      // Type System Definitions
      SCHEMA: 'SCHEMA',
      SCALAR: 'SCALAR',
      OBJECT: 'OBJECT',
      FIELD_DEFINITION: 'FIELD_DEFINITION',
      ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',
      INTERFACE: 'INTERFACE',
      UNION: 'UNION',
      ENUM: 'ENUM',
      ENUM_VALUE: 'ENUM_VALUE',
      INPUT_OBJECT: 'INPUT_OBJECT',
      INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'
    });
    /**
     * The enum type representing the directive location values.
     */

    exports.DirectiveLocation = DirectiveLocation;
  }, {}],
  "../node_modules/graphql/language/blockString.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.dedentBlockStringValue = dedentBlockStringValue;
    exports.getBlockStringIndentation = getBlockStringIndentation;
    exports.printBlockString = printBlockString;
    /**
     * Produces the value of a block string from its parsed raw value, similar to
     * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
     *
     * This implements the GraphQL spec's BlockStringValue() static algorithm.
     *
     * @internal
     */

    function dedentBlockStringValue(rawString) {
      // Expand a block string's raw value into independent lines.
      var lines = rawString.split(/\r\n|[\n\r]/g); // Remove common indentation from all lines but first.

      var commonIndent = getBlockStringIndentation(rawString);

      if (commonIndent !== 0) {
        for (var i = 1; i < lines.length; i++) {
          lines[i] = lines[i].slice(commonIndent);
        }
      } // Remove leading and trailing blank lines.


      var startLine = 0;

      while (startLine < lines.length && isBlank(lines[startLine])) {
        ++startLine;
      }

      var endLine = lines.length;

      while (endLine > startLine && isBlank(lines[endLine - 1])) {
        --endLine;
      } // Return a string of the lines joined with U+000A.


      return lines.slice(startLine, endLine).join('\n');
    }

    function isBlank(str) {
      for (var i = 0; i < str.length; ++i) {
        if (str[i] !== ' ' && str[i] !== '\t') {
          return false;
        }
      }

      return true;
    }
    /**
     * @internal
     */


    function getBlockStringIndentation(value) {
      var _commonIndent;

      var isFirstLine = true;
      var isEmptyLine = true;
      var indent = 0;
      var commonIndent = null;

      for (var i = 0; i < value.length; ++i) {
        switch (value.charCodeAt(i)) {
          case 13:
            //  \r
            if (value.charCodeAt(i + 1) === 10) {
              ++i; // skip \r\n as one symbol
            }

          // falls through

          case 10:
            //  \n
            isFirstLine = false;
            isEmptyLine = true;
            indent = 0;
            break;

          case 9: //   \t

          case 32:
            //  <space>
            ++indent;
            break;

          default:
            if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {
              commonIndent = indent;
            }

            isEmptyLine = false;
        }
      }

      return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;
    }
    /**
     * Print a block string in the indented block form by adding a leading and
     * trailing blank line. However, if a block string starts with whitespace and is
     * a single-line, adding a leading blank line would strip that whitespace.
     *
     * @internal
     */


    function printBlockString(value) {
      var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var isSingleLine = value.indexOf('\n') === -1;
      var hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
      var hasTrailingQuote = value[value.length - 1] === '"';
      var hasTrailingSlash = value[value.length - 1] === '\\';
      var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
      var result = ''; // Format a multi-line block quote to account for leading space.

      if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
        result += '\n' + indentation;
      }

      result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;

      if (printAsMultipleLines) {
        result += '\n';
      }

      return '"""' + result.replace(/"""/g, '\\"""') + '"""';
    }
  }, {}],
  "../node_modules/graphql/language/lexer.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isPunctuatorTokenKind = isPunctuatorTokenKind;
    exports.Lexer = void 0;

    var _syntaxError = require("../error/syntaxError.js");

    var _ast = require("./ast.js");

    var _tokenKind = require("./tokenKind.js");

    var _blockString = require("./blockString.js");
    /**
     * Given a Source object, creates a Lexer for that source.
     * A Lexer is a stateful stream generator in that every time
     * it is advanced, it returns the next token in the Source. Assuming the
     * source lexes, the final Token emitted by the lexer will be of kind
     * EOF, after which the lexer will repeatedly return the same EOF token
     * whenever called.
     */


    var Lexer = /*#__PURE__*/function () {
      /**
       * The previously focused non-ignored token.
       */

      /**
       * The currently focused non-ignored token.
       */

      /**
       * The (1-indexed) line containing the current token.
       */

      /**
       * The character offset at which the current line begins.
       */
      function Lexer(source) {
        var startOfFileToken = new _ast.Token(_tokenKind.TokenKind.SOF, 0, 0, 0, 0, null);
        this.source = source;
        this.lastToken = startOfFileToken;
        this.token = startOfFileToken;
        this.line = 1;
        this.lineStart = 0;
      }
      /**
       * Advances the token stream to the next non-ignored token.
       */


      var _proto = Lexer.prototype;

      _proto.advance = function advance() {
        this.lastToken = this.token;
        var token = this.token = this.lookahead();
        return token;
      }
      /**
       * Looks ahead and returns the next non-ignored token, but does not change
       * the state of Lexer.
       */
      ;

      _proto.lookahead = function lookahead() {
        var token = this.token;

        if (token.kind !== _tokenKind.TokenKind.EOF) {
          do {
            var _token$next; // Note: next is only mutable during parsing, so we cast to allow this.


            token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);
          } while (token.kind === _tokenKind.TokenKind.COMMENT);
        }

        return token;
      };

      return Lexer;
    }();
    /**
     * @internal
     */


    exports.Lexer = Lexer;

    function isPunctuatorTokenKind(kind) {
      return kind === _tokenKind.TokenKind.BANG || kind === _tokenKind.TokenKind.DOLLAR || kind === _tokenKind.TokenKind.AMP || kind === _tokenKind.TokenKind.PAREN_L || kind === _tokenKind.TokenKind.PAREN_R || kind === _tokenKind.TokenKind.SPREAD || kind === _tokenKind.TokenKind.COLON || kind === _tokenKind.TokenKind.EQUALS || kind === _tokenKind.TokenKind.AT || kind === _tokenKind.TokenKind.BRACKET_L || kind === _tokenKind.TokenKind.BRACKET_R || kind === _tokenKind.TokenKind.BRACE_L || kind === _tokenKind.TokenKind.PIPE || kind === _tokenKind.TokenKind.BRACE_R;
    }

    function printCharCode(code) {
      return (// NaN/undefined represents access beyond the end of the file.
        isNaN(code) ? _tokenKind.TokenKind.EOF : // Trust JSON for ASCII.
        code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.
        "\"\\u".concat(('00' + code.toString(16).toUpperCase()).slice(-4), "\"")
      );
    }
    /**
     * Gets the next token from the source starting at the given position.
     *
     * This skips over whitespace until it finds the next lexable token, then lexes
     * punctuators immediately or calls the appropriate helper function for more
     * complicated tokens.
     */


    function readToken(lexer, prev) {
      var source = lexer.source;
      var body = source.body;
      var bodyLength = body.length;
      var pos = prev.end;

      while (pos < bodyLength) {
        var code = body.charCodeAt(pos);
        var _line = lexer.line;

        var _col = 1 + pos - lexer.lineStart; // SourceCharacter


        switch (code) {
          case 0xfeff: // <BOM>

          case 9: //   \t

          case 32: //  <space>

          case 44:
            //  ,
            ++pos;
            continue;

          case 10:
            //  \n
            ++pos;
            ++lexer.line;
            lexer.lineStart = pos;
            continue;

          case 13:
            //  \r
            if (body.charCodeAt(pos + 1) === 10) {
              pos += 2;
            } else {
              ++pos;
            }

            ++lexer.line;
            lexer.lineStart = pos;
            continue;

          case 33:
            //  !
            return new _ast.Token(_tokenKind.TokenKind.BANG, pos, pos + 1, _line, _col, prev);

          case 35:
            //  #
            return readComment(source, pos, _line, _col, prev);

          case 36:
            //  $
            return new _ast.Token(_tokenKind.TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);

          case 38:
            //  &
            return new _ast.Token(_tokenKind.TokenKind.AMP, pos, pos + 1, _line, _col, prev);

          case 40:
            //  (
            return new _ast.Token(_tokenKind.TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);

          case 41:
            //  )
            return new _ast.Token(_tokenKind.TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);

          case 46:
            //  .
            if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {
              return new _ast.Token(_tokenKind.TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);
            }

            break;

          case 58:
            //  :
            return new _ast.Token(_tokenKind.TokenKind.COLON, pos, pos + 1, _line, _col, prev);

          case 61:
            //  =
            return new _ast.Token(_tokenKind.TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);

          case 64:
            //  @
            return new _ast.Token(_tokenKind.TokenKind.AT, pos, pos + 1, _line, _col, prev);

          case 91:
            //  [
            return new _ast.Token(_tokenKind.TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);

          case 93:
            //  ]
            return new _ast.Token(_tokenKind.TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);

          case 123:
            // {
            return new _ast.Token(_tokenKind.TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);

          case 124:
            // |
            return new _ast.Token(_tokenKind.TokenKind.PIPE, pos, pos + 1, _line, _col, prev);

          case 125:
            // }
            return new _ast.Token(_tokenKind.TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);

          case 34:
            //  "
            if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {
              return readBlockString(source, pos, _line, _col, prev, lexer);
            }

            return readString(source, pos, _line, _col, prev);

          case 45: //  -

          case 48: //  0

          case 49: //  1

          case 50: //  2

          case 51: //  3

          case 52: //  4

          case 53: //  5

          case 54: //  6

          case 55: //  7

          case 56: //  8

          case 57:
            //  9
            return readNumber(source, pos, code, _line, _col, prev);

          case 65: //  A

          case 66: //  B

          case 67: //  C

          case 68: //  D

          case 69: //  E

          case 70: //  F

          case 71: //  G

          case 72: //  H

          case 73: //  I

          case 74: //  J

          case 75: //  K

          case 76: //  L

          case 77: //  M

          case 78: //  N

          case 79: //  O

          case 80: //  P

          case 81: //  Q

          case 82: //  R

          case 83: //  S

          case 84: //  T

          case 85: //  U

          case 86: //  V

          case 87: //  W

          case 88: //  X

          case 89: //  Y

          case 90: //  Z

          case 95: //  _

          case 97: //  a

          case 98: //  b

          case 99: //  c

          case 100: // d

          case 101: // e

          case 102: // f

          case 103: // g

          case 104: // h

          case 105: // i

          case 106: // j

          case 107: // k

          case 108: // l

          case 109: // m

          case 110: // n

          case 111: // o

          case 112: // p

          case 113: // q

          case 114: // r

          case 115: // s

          case 116: // t

          case 117: // u

          case 118: // v

          case 119: // w

          case 120: // x

          case 121: // y

          case 122:
            // z
            return readName(source, pos, _line, _col, prev);
        }

        throw (0, _syntaxError.syntaxError)(source, pos, unexpectedCharacterMessage(code));
      }

      var line = lexer.line;
      var col = 1 + pos - lexer.lineStart;
      return new _ast.Token(_tokenKind.TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
    }
    /**
     * Report a message that an unexpected character was encountered.
     */


    function unexpectedCharacterMessage(code) {
      if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
        return "Cannot contain the invalid character ".concat(printCharCode(code), ".");
      }

      if (code === 39) {
        // '
        return 'Unexpected single quote character (\'), did you mean to use a double quote (")?';
      }

      return "Cannot parse the unexpected character ".concat(printCharCode(code), ".");
    }
    /**
     * Reads a comment token from the source file.
     *
     * #[\u0009\u0020-\uFFFF]*
     */


    function readComment(source, start, line, col, prev) {
      var body = source.body;
      var code;
      var position = start;

      do {
        code = body.charCodeAt(++position);
      } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator
      code > 0x001f || code === 0x0009));

      return new _ast.Token(_tokenKind.TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));
    }
    /**
     * Reads a number token from the source file, either a float
     * or an int depending on whether a decimal point appears.
     *
     * Int:   -?(0|[1-9][0-9]*)
     * Float: -?(0|[1-9][0-9]*)(\.[0-9]+)?((E|e)(+|-)?[0-9]+)?
     */


    function readNumber(source, start, firstCode, line, col, prev) {
      var body = source.body;
      var code = firstCode;
      var position = start;
      var isFloat = false;

      if (code === 45) {
        // -
        code = body.charCodeAt(++position);
      }

      if (code === 48) {
        // 0
        code = body.charCodeAt(++position);

        if (code >= 48 && code <= 57) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code), "."));
        }
      } else {
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      }

      if (code === 46) {
        // .
        isFloat = true;
        code = body.charCodeAt(++position);
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      }

      if (code === 69 || code === 101) {
        // E e
        isFloat = true;
        code = body.charCodeAt(++position);

        if (code === 43 || code === 45) {
          // + -
          code = body.charCodeAt(++position);
        }

        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      } // Numbers cannot be followed by . or NameStart


      if (code === 46 || isNameStart(code)) {
        throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
      }

      return new _ast.Token(isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT, start, position, line, col, prev, body.slice(start, position));
    }
    /**
     * Returns the new position in the source after reading digits.
     */


    function readDigits(source, start, firstCode) {
      var body = source.body;
      var position = start;
      var code = firstCode;

      if (code >= 48 && code <= 57) {
        // 0 - 9
        do {
          code = body.charCodeAt(++position);
        } while (code >= 48 && code <= 57); // 0 - 9


        return position;
      }

      throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
    }
    /**
     * Reads a string token from the source file.
     *
     * "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
     */


    function readString(source, start, line, col, prev) {
      var body = source.body;
      var position = start + 1;
      var chunkStart = position;
      var code = 0;
      var value = '';

      while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator
      code !== 0x000a && code !== 0x000d) {
        // Closing Quote (")
        if (code === 34) {
          value += body.slice(chunkStart, position);
          return new _ast.Token(_tokenKind.TokenKind.STRING, start, position + 1, line, col, prev, value);
        } // SourceCharacter


        if (code < 0x0020 && code !== 0x0009) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        }

        ++position;

        if (code === 92) {
          // \
          value += body.slice(chunkStart, position - 1);
          code = body.charCodeAt(position);

          switch (code) {
            case 34:
              value += '"';
              break;

            case 47:
              value += '/';
              break;

            case 92:
              value += '\\';
              break;

            case 98:
              value += '\b';
              break;

            case 102:
              value += '\f';
              break;

            case 110:
              value += '\n';
              break;

            case 114:
              value += '\r';
              break;

            case 116:
              value += '\t';
              break;

            case 117:
              {
                // uXXXX
                var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));

                if (charCode < 0) {
                  var invalidSequence = body.slice(position + 1, position + 5);
                  throw (0, _syntaxError.syntaxError)(source, position, "Invalid character escape sequence: \\u".concat(invalidSequence, "."));
                }

                value += String.fromCharCode(charCode);
                position += 4;
                break;
              }

            default:
              throw (0, _syntaxError.syntaxError)(source, position, "Invalid character escape sequence: \\".concat(String.fromCharCode(code), "."));
          }

          ++position;
          chunkStart = position;
        }
      }

      throw (0, _syntaxError.syntaxError)(source, position, 'Unterminated string.');
    }
    /**
     * Reads a block string token from the source file.
     *
     * """("?"?(\\"""|\\(?!=""")|[^"\\]))*"""
     */


    function readBlockString(source, start, line, col, prev, lexer) {
      var body = source.body;
      var position = start + 3;
      var chunkStart = position;
      var code = 0;
      var rawValue = '';

      while (position < body.length && !isNaN(code = body.charCodeAt(position))) {
        // Closing Triple-Quote (""")
        if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
          rawValue += body.slice(chunkStart, position);
          return new _ast.Token(_tokenKind.TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockString.dedentBlockStringValue)(rawValue));
        } // SourceCharacter


        if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        }

        if (code === 10) {
          // new line
          ++position;
          ++lexer.line;
          lexer.lineStart = position;
        } else if (code === 13) {
          // carriage return
          if (body.charCodeAt(position + 1) === 10) {
            position += 2;
          } else {
            ++position;
          }

          ++lexer.line;
          lexer.lineStart = position;
        } else if ( // Escape Triple-Quote (\""")
        code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
          rawValue += body.slice(chunkStart, position) + '"""';
          position += 4;
          chunkStart = position;
        } else {
          ++position;
        }
      }

      throw (0, _syntaxError.syntaxError)(source, position, 'Unterminated string.');
    }
    /**
     * Converts four hexadecimal chars to the integer that the
     * string represents. For example, uniCharCode('0','0','0','f')
     * will return 15, and uniCharCode('0','0','f','f') returns 255.
     *
     * Returns a negative number on error, if a char was invalid.
     *
     * This is implemented by noting that char2hex() returns -1 on error,
     * which means the result of ORing the char2hex() will also be negative.
     */


    function uniCharCode(a, b, c, d) {
      return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
    }
    /**
     * Converts a hex character to its integer value.
     * '0' becomes 0, '9' becomes 9
     * 'A' becomes 10, 'F' becomes 15
     * 'a' becomes 10, 'f' becomes 15
     *
     * Returns -1 on error.
     */


    function char2hex(a) {
      return a >= 48 && a <= 57 ? a - 48 // 0-9
      : a >= 65 && a <= 70 ? a - 55 // A-F
      : a >= 97 && a <= 102 ? a - 87 // a-f
      : -1;
    }
    /**
     * Reads an alphanumeric + underscore name from the source.
     *
     * [_A-Za-z][_0-9A-Za-z]*
     */


    function readName(source, start, line, col, prev) {
      var body = source.body;
      var bodyLength = body.length;
      var position = start + 1;
      var code = 0;

      while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _
      code >= 48 && code <= 57 || // 0-9
      code >= 65 && code <= 90 || // A-Z
      code >= 97 && code <= 122) // a-z
      ) {
        ++position;
      }

      return new _ast.Token(_tokenKind.TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));
    } // _ A-Z a-z


    function isNameStart(code) {
      return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;
    }
  }, {
    "../error/syntaxError.js": "../node_modules/graphql/error/syntaxError.js",
    "./ast.js": "../node_modules/graphql/language/ast.js",
    "./tokenKind.js": "../node_modules/graphql/language/tokenKind.js",
    "./blockString.js": "../node_modules/graphql/language/blockString.js"
  }],
  "../node_modules/graphql/language/parser.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parse = parse;
    exports.parseValue = parseValue;
    exports.parseType = parseType;
    exports.Parser = void 0;

    var _syntaxError = require("../error/syntaxError.js");

    var _kinds = require("./kinds.js");

    var _ast = require("./ast.js");

    var _tokenKind = require("./tokenKind.js");

    var _source = require("./source.js");

    var _directiveLocation = require("./directiveLocation.js");

    var _lexer = require("./lexer.js");
    /**
     * Given a GraphQL source, parses it into a Document.
     * Throws GraphQLError if a syntax error is encountered.
     */


    function parse(source, options) {
      var parser = new Parser(source, options);
      return parser.parseDocument();
    }
    /**
     * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
     * that value.
     * Throws GraphQLError if a syntax error is encountered.
     *
     * This is useful within tools that operate upon GraphQL Values directly and
     * in isolation of complete GraphQL documents.
     *
     * Consider providing the results to the utility function: valueFromAST().
     */


    function parseValue(source, options) {
      var parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      var value = parser.parseValueLiteral(false);
      parser.expectToken(_tokenKind.TokenKind.EOF);
      return value;
    }
    /**
     * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
     * that type.
     * Throws GraphQLError if a syntax error is encountered.
     *
     * This is useful within tools that operate upon GraphQL Types directly and
     * in isolation of complete GraphQL documents.
     *
     * Consider providing the results to the utility function: typeFromAST().
     */


    function parseType(source, options) {
      var parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      var type = parser.parseTypeReference();
      parser.expectToken(_tokenKind.TokenKind.EOF);
      return type;
    }
    /**
     * This class is exported only to assist people in implementing their own parsers
     * without duplicating too much code and should be used only as last resort for cases
     * such as experimental syntax or if certain features could not be contributed upstream.
     *
     * It is still part of the internal API and is versioned, so any changes to it are never
     * considered breaking changes. If you still need to support multiple versions of the
     * library, please use the `versionInfo` variable for version detection.
     *
     * @internal
     */


    var Parser = /*#__PURE__*/function () {
      function Parser(source, options) {
        var sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
        this._lexer = new _lexer.Lexer(sourceObj);
        this._options = options;
      }
      /**
       * Converts a name lex token into a name parse node.
       */


      var _proto = Parser.prototype;

      _proto.parseName = function parseName() {
        var token = this.expectToken(_tokenKind.TokenKind.NAME);
        return {
          kind: _kinds.Kind.NAME,
          value: token.value,
          loc: this.loc(token)
        };
      } // Implements the parsing rules in the Document section.

      /**
       * Document : Definition+
       */
      ;

      _proto.parseDocument = function parseDocument() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.DOCUMENT,
          definitions: this.many(_tokenKind.TokenKind.SOF, this.parseDefinition, _tokenKind.TokenKind.EOF),
          loc: this.loc(start)
        };
      }
      /**
       * Definition :
       *   - ExecutableDefinition
       *   - TypeSystemDefinition
       *   - TypeSystemExtension
       *
       * ExecutableDefinition :
       *   - OperationDefinition
       *   - FragmentDefinition
       */
      ;

      _proto.parseDefinition = function parseDefinition() {
        if (this.peek(_tokenKind.TokenKind.NAME)) {
          switch (this._lexer.token.value) {
            case 'query':
            case 'mutation':
            case 'subscription':
              return this.parseOperationDefinition();

            case 'fragment':
              return this.parseFragmentDefinition();

            case 'schema':
            case 'scalar':
            case 'type':
            case 'interface':
            case 'union':
            case 'enum':
            case 'input':
            case 'directive':
              return this.parseTypeSystemDefinition();

            case 'extend':
              return this.parseTypeSystemExtension();
          }
        } else if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
          return this.parseOperationDefinition();
        } else if (this.peekDescription()) {
          return this.parseTypeSystemDefinition();
        }

        throw this.unexpected();
      } // Implements the parsing rules in the Operations section.

      /**
       * OperationDefinition :
       *  - SelectionSet
       *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
       */
      ;

      _proto.parseOperationDefinition = function parseOperationDefinition() {
        var start = this._lexer.token;

        if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
          return {
            kind: _kinds.Kind.OPERATION_DEFINITION,
            operation: 'query',
            name: undefined,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }

        var operation = this.parseOperationType();
        var name;

        if (this.peek(_tokenKind.TokenKind.NAME)) {
          name = this.parseName();
        }

        return {
          kind: _kinds.Kind.OPERATION_DEFINITION,
          operation: operation,
          name: name,
          variableDefinitions: this.parseVariableDefinitions(),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      }
      /**
       * OperationType : one of query mutation subscription
       */
      ;

      _proto.parseOperationType = function parseOperationType() {
        var operationToken = this.expectToken(_tokenKind.TokenKind.NAME);

        switch (operationToken.value) {
          case 'query':
            return 'query';

          case 'mutation':
            return 'mutation';

          case 'subscription':
            return 'subscription';
        }

        throw this.unexpected(operationToken);
      }
      /**
       * VariableDefinitions : ( VariableDefinition+ )
       */
      ;

      _proto.parseVariableDefinitions = function parseVariableDefinitions() {
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKind.TokenKind.PAREN_R);
      }
      /**
       * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
       */
      ;

      _proto.parseVariableDefinition = function parseVariableDefinition() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,
          directives: this.parseDirectives(true),
          loc: this.loc(start)
        };
      }
      /**
       * Variable : $ Name
       */
      ;

      _proto.parseVariable = function parseVariable() {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.DOLLAR);
        return {
          kind: _kinds.Kind.VARIABLE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      }
      /**
       * SelectionSet : { Selection+ }
       */
      ;

      _proto.parseSelectionSet = function parseSelectionSet() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.SELECTION_SET,
          selections: this.many(_tokenKind.TokenKind.BRACE_L, this.parseSelection, _tokenKind.TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      }
      /**
       * Selection :
       *   - Field
       *   - FragmentSpread
       *   - InlineFragment
       */
      ;

      _proto.parseSelection = function parseSelection() {
        return this.peek(_tokenKind.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
      }
      /**
       * Field : Alias? Name Arguments? Directives? SelectionSet?
       *
       * Alias : Name :
       */
      ;

      _proto.parseField = function parseField() {
        var start = this._lexer.token;
        var nameOrAlias = this.parseName();
        var alias;
        var name;

        if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {
          alias = nameOrAlias;
          name = this.parseName();
        } else {
          name = nameOrAlias;
        }

        return {
          kind: _kinds.Kind.FIELD,
          alias: alias,
          name: name,
          arguments: this.parseArguments(false),
          directives: this.parseDirectives(false),
          selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,
          loc: this.loc(start)
        };
      }
      /**
       * Arguments[Const] : ( Argument[?Const]+ )
       */
      ;

      _proto.parseArguments = function parseArguments(isConst) {
        var item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, item, _tokenKind.TokenKind.PAREN_R);
      }
      /**
       * Argument[Const] : Name : Value[?Const]
       */
      ;

      _proto.parseArgument = function parseArgument() {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        return {
          kind: _kinds.Kind.ARGUMENT,
          name: name,
          value: this.parseValueLiteral(false),
          loc: this.loc(start)
        };
      };

      _proto.parseConstArgument = function parseConstArgument() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.ARGUMENT,
          name: this.parseName(),
          value: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseValueLiteral(true)),
          loc: this.loc(start)
        };
      } // Implements the parsing rules in the Fragments section.

      /**
       * Corresponds to both FragmentSpread and InlineFragment in the spec.
       *
       * FragmentSpread : ... FragmentName Directives?
       *
       * InlineFragment : ... TypeCondition? Directives? SelectionSet
       */
      ;

      _proto.parseFragment = function parseFragment() {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.SPREAD);
        var hasTypeCondition = this.expectOptionalKeyword('on');

        if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {
          return {
            kind: _kinds.Kind.FRAGMENT_SPREAD,
            name: this.parseFragmentName(),
            directives: this.parseDirectives(false),
            loc: this.loc(start)
          };
        }

        return {
          kind: _kinds.Kind.INLINE_FRAGMENT,
          typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      }
      /**
       * FragmentDefinition :
       *   - fragment FragmentName on TypeCondition Directives? SelectionSet
       *
       * TypeCondition : NamedType
       */
      ;

      _proto.parseFragmentDefinition = function parseFragmentDefinition() {
        var _this$_options;

        var start = this._lexer.token;
        this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes
        // the grammar of FragmentDefinition:
        //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

        if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {
          return {
            kind: _kinds.Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            variableDefinitions: this.parseVariableDefinitions(),
            typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }

        return {
          kind: _kinds.Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      }
      /**
       * FragmentName : Name but not `on`
       */
      ;

      _proto.parseFragmentName = function parseFragmentName() {
        if (this._lexer.token.value === 'on') {
          throw this.unexpected();
        }

        return this.parseName();
      } // Implements the parsing rules in the Values section.

      /**
       * Value[Const] :
       *   - [~Const] Variable
       *   - IntValue
       *   - FloatValue
       *   - StringValue
       *   - BooleanValue
       *   - NullValue
       *   - EnumValue
       *   - ListValue[?Const]
       *   - ObjectValue[?Const]
       *
       * BooleanValue : one of `true` `false`
       *
       * NullValue : `null`
       *
       * EnumValue : Name but not `true`, `false` or `null`
       */
      ;

      _proto.parseValueLiteral = function parseValueLiteral(isConst) {
        var token = this._lexer.token;

        switch (token.kind) {
          case _tokenKind.TokenKind.BRACKET_L:
            return this.parseList(isConst);

          case _tokenKind.TokenKind.BRACE_L:
            return this.parseObject(isConst);

          case _tokenKind.TokenKind.INT:
            this._lexer.advance();

            return {
              kind: _kinds.Kind.INT,
              value: token.value,
              loc: this.loc(token)
            };

          case _tokenKind.TokenKind.FLOAT:
            this._lexer.advance();

            return {
              kind: _kinds.Kind.FLOAT,
              value: token.value,
              loc: this.loc(token)
            };

          case _tokenKind.TokenKind.STRING:
          case _tokenKind.TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();

          case _tokenKind.TokenKind.NAME:
            this._lexer.advance();

            switch (token.value) {
              case 'true':
                return {
                  kind: _kinds.Kind.BOOLEAN,
                  value: true,
                  loc: this.loc(token)
                };

              case 'false':
                return {
                  kind: _kinds.Kind.BOOLEAN,
                  value: false,
                  loc: this.loc(token)
                };

              case 'null':
                return {
                  kind: _kinds.Kind.NULL,
                  loc: this.loc(token)
                };

              default:
                return {
                  kind: _kinds.Kind.ENUM,
                  value: token.value,
                  loc: this.loc(token)
                };
            }

          case _tokenKind.TokenKind.DOLLAR:
            if (!isConst) {
              return this.parseVariable();
            }

            break;
        }

        throw this.unexpected();
      };

      _proto.parseStringLiteral = function parseStringLiteral() {
        var token = this._lexer.token;

        this._lexer.advance();

        return {
          kind: _kinds.Kind.STRING,
          value: token.value,
          block: token.kind === _tokenKind.TokenKind.BLOCK_STRING,
          loc: this.loc(token)
        };
      }
      /**
       * ListValue[Const] :
       *   - [ ]
       *   - [ Value[?Const]+ ]
       */
      ;

      _proto.parseList = function parseList(isConst) {
        var _this = this;

        var start = this._lexer.token;

        var item = function item() {
          return _this.parseValueLiteral(isConst);
        };

        return {
          kind: _kinds.Kind.LIST,
          values: this.any(_tokenKind.TokenKind.BRACKET_L, item, _tokenKind.TokenKind.BRACKET_R),
          loc: this.loc(start)
        };
      }
      /**
       * ObjectValue[Const] :
       *   - { }
       *   - { ObjectField[?Const]+ }
       */
      ;

      _proto.parseObject = function parseObject(isConst) {
        var _this2 = this;

        var start = this._lexer.token;

        var item = function item() {
          return _this2.parseObjectField(isConst);
        };

        return {
          kind: _kinds.Kind.OBJECT,
          fields: this.any(_tokenKind.TokenKind.BRACE_L, item, _tokenKind.TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      }
      /**
       * ObjectField[Const] : Name : Value[?Const]
       */
      ;

      _proto.parseObjectField = function parseObjectField(isConst) {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        return {
          kind: _kinds.Kind.OBJECT_FIELD,
          name: name,
          value: this.parseValueLiteral(isConst),
          loc: this.loc(start)
        };
      } // Implements the parsing rules in the Directives section.

      /**
       * Directives[Const] : Directive[?Const]+
       */
      ;

      _proto.parseDirectives = function parseDirectives(isConst) {
        var directives = [];

        while (this.peek(_tokenKind.TokenKind.AT)) {
          directives.push(this.parseDirective(isConst));
        }

        return directives;
      }
      /**
       * Directive[Const] : @ Name Arguments[?Const]?
       */
      ;

      _proto.parseDirective = function parseDirective(isConst) {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.AT);
        return {
          kind: _kinds.Kind.DIRECTIVE,
          name: this.parseName(),
          arguments: this.parseArguments(isConst),
          loc: this.loc(start)
        };
      } // Implements the parsing rules in the Types section.

      /**
       * Type :
       *   - NamedType
       *   - ListType
       *   - NonNullType
       */
      ;

      _proto.parseTypeReference = function parseTypeReference() {
        var start = this._lexer.token;
        var type;

        if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {
          type = this.parseTypeReference();
          this.expectToken(_tokenKind.TokenKind.BRACKET_R);
          type = {
            kind: _kinds.Kind.LIST_TYPE,
            type: type,
            loc: this.loc(start)
          };
        } else {
          type = this.parseNamedType();
        }

        if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {
          return {
            kind: _kinds.Kind.NON_NULL_TYPE,
            type: type,
            loc: this.loc(start)
          };
        }

        return type;
      }
      /**
       * NamedType : Name
       */
      ;

      _proto.parseNamedType = function parseNamedType() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.NAMED_TYPE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      } // Implements the parsing rules in the Type Definition section.

      /**
       * TypeSystemDefinition :
       *   - SchemaDefinition
       *   - TypeDefinition
       *   - DirectiveDefinition
       *
       * TypeDefinition :
       *   - ScalarTypeDefinition
       *   - ObjectTypeDefinition
       *   - InterfaceTypeDefinition
       *   - UnionTypeDefinition
       *   - EnumTypeDefinition
       *   - InputObjectTypeDefinition
       */
      ;

      _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
        // Many definitions begin with a description and require a lookahead.
        var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;

        if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
          switch (keywordToken.value) {
            case 'schema':
              return this.parseSchemaDefinition();

            case 'scalar':
              return this.parseScalarTypeDefinition();

            case 'type':
              return this.parseObjectTypeDefinition();

            case 'interface':
              return this.parseInterfaceTypeDefinition();

            case 'union':
              return this.parseUnionTypeDefinition();

            case 'enum':
              return this.parseEnumTypeDefinition();

            case 'input':
              return this.parseInputObjectTypeDefinition();

            case 'directive':
              return this.parseDirectiveDefinition();
          }
        }

        throw this.unexpected(keywordToken);
      };

      _proto.peekDescription = function peekDescription() {
        return this.peek(_tokenKind.TokenKind.STRING) || this.peek(_tokenKind.TokenKind.BLOCK_STRING);
      }
      /**
       * Description : StringValue
       */
      ;

      _proto.parseDescription = function parseDescription() {
        if (this.peekDescription()) {
          return this.parseStringLiteral();
        }
      }
      /**
       * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
       */
      ;

      _proto.parseSchemaDefinition = function parseSchemaDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('schema');
        var directives = this.parseDirectives(true);
        var operationTypes = this.many(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
        return {
          kind: _kinds.Kind.SCHEMA_DEFINITION,
          description: description,
          directives: directives,
          operationTypes: operationTypes,
          loc: this.loc(start)
        };
      }
      /**
       * OperationTypeDefinition : OperationType : NamedType
       */
      ;

      _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
        var start = this._lexer.token;
        var operation = this.parseOperationType();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseNamedType();
        return {
          kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
          operation: operation,
          type: type,
          loc: this.loc(start)
        };
      }
      /**
       * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
       */
      ;

      _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('scalar');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
          description: description,
          name: name,
          directives: directives,
          loc: this.loc(start)
        };
      }
      /**
       * ObjectTypeDefinition :
       *   Description?
       *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
       */
      ;

      _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('type');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
          description: description,
          name: name,
          interfaces: interfaces,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * ImplementsInterfaces :
       *   - implements `&`? NamedType
       *   - ImplementsInterfaces & NamedType
       */
      ;

      _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
        var _this$_options2;

        if (!this.expectOptionalKeyword('implements')) {
          return [];
        }

        if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
          var types = []; // Optional leading ampersand

          this.expectOptionalToken(_tokenKind.TokenKind.AMP);

          do {
            types.push(this.parseNamedType());
          } while (this.expectOptionalToken(_tokenKind.TokenKind.AMP) || this.peek(_tokenKind.TokenKind.NAME));

          return types;
        }

        return this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType);
      }
      /**
       * FieldsDefinition : { FieldDefinition+ }
       */
      ;

      _proto.parseFieldsDefinition = function parseFieldsDefinition() {
        var _this$_options3; // Legacy support for the SDL?


        if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(_tokenKind.TokenKind.BRACE_L) && this._lexer.lookahead().kind === _tokenKind.TokenKind.BRACE_R) {
          this._lexer.advance();

          this._lexer.advance();

          return [];
        }

        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKind.TokenKind.BRACE_R);
      }
      /**
       * FieldDefinition :
       *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
       */
      ;

      _proto.parseFieldDefinition = function parseFieldDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseTypeReference();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.FIELD_DEFINITION,
          description: description,
          name: name,
          arguments: args,
          type: type,
          directives: directives,
          loc: this.loc(start)
        };
      }
      /**
       * ArgumentsDefinition : ( InputValueDefinition+ )
       */
      ;

      _proto.parseArgumentDefs = function parseArgumentDefs() {
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKind.TokenKind.PAREN_R);
      }
      /**
       * InputValueDefinition :
       *   - Description? Name : Type DefaultValue? Directives[Const]?
       */
      ;

      _proto.parseInputValueDef = function parseInputValueDef() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseTypeReference();
        var defaultValue;

        if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {
          defaultValue = this.parseValueLiteral(true);
        }

        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
          description: description,
          name: name,
          type: type,
          defaultValue: defaultValue,
          directives: directives,
          loc: this.loc(start)
        };
      }
      /**
       * InterfaceTypeDefinition :
       *   - Description? interface Name Directives[Const]? FieldsDefinition?
       */
      ;

      _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('interface');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
          description: description,
          name: name,
          interfaces: interfaces,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * UnionTypeDefinition :
       *   - Description? union Name Directives[Const]? UnionMemberTypes?
       */
      ;

      _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('union');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();
        return {
          kind: _kinds.Kind.UNION_TYPE_DEFINITION,
          description: description,
          name: name,
          directives: directives,
          types: types,
          loc: this.loc(start)
        };
      }
      /**
       * UnionMemberTypes :
       *   - = `|`? NamedType
       *   - UnionMemberTypes | NamedType
       */
      ;

      _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
        return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType) : [];
      }
      /**
       * EnumTypeDefinition :
       *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
       */
      ;

      _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('enum');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();
        return {
          kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
          description: description,
          name: name,
          directives: directives,
          values: values,
          loc: this.loc(start)
        };
      }
      /**
       * EnumValuesDefinition : { EnumValueDefinition+ }
       */
      ;

      _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKind.TokenKind.BRACE_R);
      }
      /**
       * EnumValueDefinition : Description? EnumValue Directives[Const]?
       *
       * EnumValue : Name
       */
      ;

      _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
          description: description,
          name: name,
          directives: directives,
          loc: this.loc(start)
        };
      }
      /**
       * InputObjectTypeDefinition :
       *   - Description? input Name Directives[Const]? InputFieldsDefinition?
       */
      ;

      _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('input');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        return {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description: description,
          name: name,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * InputFieldsDefinition : { InputValueDefinition+ }
       */
      ;

      _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKind.TokenKind.BRACE_R);
      }
      /**
       * TypeSystemExtension :
       *   - SchemaExtension
       *   - TypeExtension
       *
       * TypeExtension :
       *   - ScalarTypeExtension
       *   - ObjectTypeExtension
       *   - InterfaceTypeExtension
       *   - UnionTypeExtension
       *   - EnumTypeExtension
       *   - InputObjectTypeDefinition
       */
      ;

      _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
        var keywordToken = this._lexer.lookahead();

        if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
          switch (keywordToken.value) {
            case 'schema':
              return this.parseSchemaExtension();

            case 'scalar':
              return this.parseScalarTypeExtension();

            case 'type':
              return this.parseObjectTypeExtension();

            case 'interface':
              return this.parseInterfaceTypeExtension();

            case 'union':
              return this.parseUnionTypeExtension();

            case 'enum':
              return this.parseEnumTypeExtension();

            case 'input':
              return this.parseInputObjectTypeExtension();
          }
        }

        throw this.unexpected(keywordToken);
      }
      /**
       * SchemaExtension :
       *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
       *  - extend schema Directives[Const]
       */
      ;

      _proto.parseSchemaExtension = function parseSchemaExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('schema');
        var directives = this.parseDirectives(true);
        var operationTypes = this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);

        if (directives.length === 0 && operationTypes.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.SCHEMA_EXTENSION,
          directives: directives,
          operationTypes: operationTypes,
          loc: this.loc(start)
        };
      }
      /**
       * ScalarTypeExtension :
       *   - extend scalar Name Directives[Const]
       */
      ;

      _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('scalar');
        var name = this.parseName();
        var directives = this.parseDirectives(true);

        if (directives.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
          name: name,
          directives: directives,
          loc: this.loc(start)
        };
      }
      /**
       * ObjectTypeExtension :
       *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
       *  - extend type Name ImplementsInterfaces? Directives[Const]
       *  - extend type Name ImplementsInterfaces
       */
      ;

      _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('type');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();

        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
          name: name,
          interfaces: interfaces,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * InterfaceTypeExtension :
       *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
       *  - extend interface Name ImplementsInterfaces? Directives[Const]
       *  - extend interface Name ImplementsInterfaces
       */
      ;

      _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('interface');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();

        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
          name: name,
          interfaces: interfaces,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * UnionTypeExtension :
       *   - extend union Name Directives[Const]? UnionMemberTypes
       *   - extend union Name Directives[Const]
       */
      ;

      _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('union');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();

        if (directives.length === 0 && types.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.UNION_TYPE_EXTENSION,
          name: name,
          directives: directives,
          types: types,
          loc: this.loc(start)
        };
      }
      /**
       * EnumTypeExtension :
       *   - extend enum Name Directives[Const]? EnumValuesDefinition
       *   - extend enum Name Directives[Const]
       */
      ;

      _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('enum');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();

        if (directives.length === 0 && values.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
          name: name,
          directives: directives,
          values: values,
          loc: this.loc(start)
        };
      }
      /**
       * InputObjectTypeExtension :
       *   - extend input Name Directives[Const]? InputFieldsDefinition
       *   - extend input Name Directives[Const]
       */
      ;

      _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('input');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();

        if (directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }

        return {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name: name,
          directives: directives,
          fields: fields,
          loc: this.loc(start)
        };
      }
      /**
       * DirectiveDefinition :
       *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
       */
      ;

      _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('directive');
        this.expectToken(_tokenKind.TokenKind.AT);
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        var repeatable = this.expectOptionalKeyword('repeatable');
        this.expectKeyword('on');
        var locations = this.parseDirectiveLocations();
        return {
          kind: _kinds.Kind.DIRECTIVE_DEFINITION,
          description: description,
          name: name,
          arguments: args,
          repeatable: repeatable,
          locations: locations,
          loc: this.loc(start)
        };
      }
      /**
       * DirectiveLocations :
       *   - `|`? DirectiveLocation
       *   - DirectiveLocations | DirectiveLocation
       */
      ;

      _proto.parseDirectiveLocations = function parseDirectiveLocations() {
        return this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseDirectiveLocation);
      }
      /*
       * DirectiveLocation :
       *   - ExecutableDirectiveLocation
       *   - TypeSystemDirectiveLocation
       *
       * ExecutableDirectiveLocation : one of
       *   `QUERY`
       *   `MUTATION`
       *   `SUBSCRIPTION`
       *   `FIELD`
       *   `FRAGMENT_DEFINITION`
       *   `FRAGMENT_SPREAD`
       *   `INLINE_FRAGMENT`
       *
       * TypeSystemDirectiveLocation : one of
       *   `SCHEMA`
       *   `SCALAR`
       *   `OBJECT`
       *   `FIELD_DEFINITION`
       *   `ARGUMENT_DEFINITION`
       *   `INTERFACE`
       *   `UNION`
       *   `ENUM`
       *   `ENUM_VALUE`
       *   `INPUT_OBJECT`
       *   `INPUT_FIELD_DEFINITION`
       */
      ;

      _proto.parseDirectiveLocation = function parseDirectiveLocation() {
        var start = this._lexer.token;
        var name = this.parseName();

        if (_directiveLocation.DirectiveLocation[name.value] !== undefined) {
          return name;
        }

        throw this.unexpected(start);
      } // Core parsing utility functions

      /**
       * Returns a location object, used to identify the place in the source that created a given parsed object.
       */
      ;

      _proto.loc = function loc(startToken) {
        var _this$_options4;

        if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {
          return new _ast.Location(startToken, this._lexer.lastToken, this._lexer.source);
        }
      }
      /**
       * Determines if the next token is of a given kind
       */
      ;

      _proto.peek = function peek(kind) {
        return this._lexer.token.kind === kind;
      }
      /**
       * If the next token is of the given kind, return that token after advancing the lexer.
       * Otherwise, do not change the parser state and throw an error.
       */
      ;

      _proto.expectToken = function expectToken(kind) {
        var token = this._lexer.token;

        if (token.kind === kind) {
          this._lexer.advance();

          return token;
        }

        throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
      }
      /**
       * If the next token is of the given kind, return that token after advancing the lexer.
       * Otherwise, do not change the parser state and return undefined.
       */
      ;

      _proto.expectOptionalToken = function expectOptionalToken(kind) {
        var token = this._lexer.token;

        if (token.kind === kind) {
          this._lexer.advance();

          return token;
        }

        return undefined;
      }
      /**
       * If the next token is a given keyword, advance the lexer.
       * Otherwise, do not change the parser state and throw an error.
       */
      ;

      _proto.expectKeyword = function expectKeyword(value) {
        var token = this._lexer.token;

        if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
          this._lexer.advance();
        } else {
          throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected \"".concat(value, "\", found ").concat(getTokenDesc(token), "."));
        }
      }
      /**
       * If the next token is a given keyword, return "true" after advancing the lexer.
       * Otherwise, do not change the parser state and return "false".
       */
      ;

      _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
        var token = this._lexer.token;

        if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
          this._lexer.advance();

          return true;
        }

        return false;
      }
      /**
       * Helper function for creating an error when an unexpected lexed token is encountered.
       */
      ;

      _proto.unexpected = function unexpected(atToken) {
        var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
        return (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
      }
      /**
       * Returns a possibly empty list of parse nodes, determined by the parseFn.
       * This list begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      ;

      _proto.any = function any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];

        while (!this.expectOptionalToken(closeKind)) {
          nodes.push(parseFn.call(this));
        }

        return nodes;
      }
      /**
       * Returns a list of parse nodes, determined by the parseFn.
       * It can be empty only if open token is missing otherwise it will always return non-empty list
       * that begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      ;

      _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
          var nodes = [];

          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));

          return nodes;
        }

        return [];
      }
      /**
       * Returns a non-empty list of parse nodes, determined by the parseFn.
       * This list begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      ;

      _proto.many = function many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];

        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));

        return nodes;
      }
      /**
       * Returns a non-empty list of parse nodes, determined by the parseFn.
       * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
       * Advances the parser to the next lex token after last item in the list.
       */
      ;

      _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        var nodes = [];

        do {
          nodes.push(parseFn.call(this));
        } while (this.expectOptionalToken(delimiterKind));

        return nodes;
      };

      return Parser;
    }();
    /**
     * A helper function to describe a token as a string for debugging.
     */


    exports.Parser = Parser;

    function getTokenDesc(token) {
      var value = token.value;
      return getTokenKindDesc(token.kind) + (value != null ? " \"".concat(value, "\"") : '');
    }
    /**
     * A helper function to describe a token kind as a string for debugging.
     */


    function getTokenKindDesc(kind) {
      return (0, _lexer.isPunctuatorTokenKind)(kind) ? "\"".concat(kind, "\"") : kind;
    }
  }, {
    "../error/syntaxError.js": "../node_modules/graphql/error/syntaxError.js",
    "./kinds.js": "../node_modules/graphql/language/kinds.js",
    "./ast.js": "../node_modules/graphql/language/ast.js",
    "./tokenKind.js": "../node_modules/graphql/language/tokenKind.js",
    "./source.js": "../node_modules/graphql/language/source.js",
    "./directiveLocation.js": "../node_modules/graphql/language/directiveLocation.js",
    "./lexer.js": "../node_modules/graphql/language/lexer.js"
  }],
  "../node_modules/graphql-tag/src/index.js": [function (require, module, exports) {
    var parser = require('graphql/language/parser');

    var parse = parser.parse; // Strip insignificant whitespace
    // Note that this could do a lot more, such as reorder fields etc.

    function normalize(string) {
      return string.replace(/[\s,]+/g, ' ').trim();
    } // A map docString -> graphql document


    var docCache = {}; // A map fragmentName -> [normalized source]

    var fragmentSourceMap = {};

    function cacheKeyFromLoc(loc) {
      return normalize(loc.source.body.substring(loc.start, loc.end));
    } // For testing.


    function resetCaches() {
      docCache = {};
      fragmentSourceMap = {};
    } // Take a unstripped parsed document (query/mutation or even fragment), and
    // check all fragment definitions, checking for name->source uniqueness.
    // We also want to make sure only unique fragments exist in the document.


    var printFragmentWarnings = true;

    function processFragments(ast) {
      var astFragmentMap = {};
      var definitions = [];

      for (var i = 0; i < ast.definitions.length; i++) {
        var fragmentDefinition = ast.definitions[i];

        if (fragmentDefinition.kind === 'FragmentDefinition') {
          var fragmentName = fragmentDefinition.name.value;
          var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc); // We know something about this fragment

          if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {
            // this is a problem because the app developer is trying to register another fragment with
            // the same name as one previously registered. So, we tell them about it.
            if (printFragmentWarnings) {
              console.warn("Warning: fragment with name " + fragmentName + " already exists.\n" + "graphql-tag enforces all fragment names across your application to be unique; read more about\n" + "this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
            }

            fragmentSourceMap[fragmentName][sourceKey] = true;
          } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {
            fragmentSourceMap[fragmentName] = {};
            fragmentSourceMap[fragmentName][sourceKey] = true;
          }

          if (!astFragmentMap[sourceKey]) {
            astFragmentMap[sourceKey] = true;
            definitions.push(fragmentDefinition);
          }
        } else {
          definitions.push(fragmentDefinition);
        }
      }

      ast.definitions = definitions;
      return ast;
    }

    function disableFragmentWarnings() {
      printFragmentWarnings = false;
    }

    function stripLoc(doc, removeLocAtThisLevel) {
      var docType = Object.prototype.toString.call(doc);

      if (docType === '[object Array]') {
        return doc.map(function (d) {
          return stripLoc(d, removeLocAtThisLevel);
        });
      }

      if (docType !== '[object Object]') {
        throw new Error('Unexpected input.');
      } // We don't want to remove the root loc field so we can use it
      // for fragment substitution (see below)


      if (removeLocAtThisLevel && doc.loc) {
        delete doc.loc;
      } // https://github.com/apollographql/graphql-tag/issues/40


      if (doc.loc) {
        delete doc.loc.startToken;
        delete doc.loc.endToken;
      }

      var keys = Object.keys(doc);
      var key;
      var value;
      var valueType;

      for (key in keys) {
        if (keys.hasOwnProperty(key)) {
          value = doc[keys[key]];
          valueType = Object.prototype.toString.call(value);

          if (valueType === '[object Object]' || valueType === '[object Array]') {
            doc[keys[key]] = stripLoc(value, true);
          }
        }
      }

      return doc;
    }

    var experimentalFragmentVariables = false;

    function parseDocument(doc) {
      var cacheKey = normalize(doc);

      if (docCache[cacheKey]) {
        return docCache[cacheKey];
      }

      var parsed = parse(doc, {
        experimentalFragmentVariables: experimentalFragmentVariables
      });

      if (!parsed || parsed.kind !== 'Document') {
        throw new Error('Not a valid GraphQL document.');
      } // check that all "new" fragments inside the documents are consistent with
      // existing fragments of the same name


      parsed = processFragments(parsed);
      parsed = stripLoc(parsed, false);
      docCache[cacheKey] = parsed;
      return parsed;
    }

    function enableExperimentalFragmentVariables() {
      experimentalFragmentVariables = true;
    }

    function disableExperimentalFragmentVariables() {
      experimentalFragmentVariables = false;
    } // XXX This should eventually disallow arbitrary string interpolation, like Relay does


    function gql()
    /* arguments */
    {
      var args = Array.prototype.slice.call(arguments);
      var literals = args[0]; // We always get literals[0] and then matching post literals for each arg given

      var result = typeof literals === "string" ? literals : literals[0];

      for (var i = 1; i < args.length; i++) {
        if (args[i] && args[i].kind && args[i].kind === 'Document') {
          result += args[i].loc.source.body;
        } else {
          result += args[i];
        }

        result += literals[i];
      }

      return parseDocument(result);
    } // Support typescript, which isn't as nice as Babel about default exports


    gql.default = gql;
    gql.resetCaches = resetCaches;
    gql.disableFragmentWarnings = disableFragmentWarnings;
    gql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;
    gql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;
    module.exports = gql;
  }, {
    "graphql/language/parser": "../node_modules/graphql/language/parser.js"
  }],
  "../node_modules/@apollo/client/core/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      resetCaches: true,
      disableFragmentWarnings: true,
      enableExperimentalFragmentVariables: true,
      disableExperimentalFragmentVariables: true,
      ApolloClient: true,
      ObservableQuery: true,
      NetworkStatus: true,
      isApolloError: true,
      ApolloError: true,
      Cache: true,
      ApolloCache: true,
      InMemoryCache: true,
      MissingFieldError: true,
      defaultDataIdFromObject: true,
      makeVar: true,
      fromError: true,
      toPromise: true,
      fromPromise: true,
      throwServerError: true,
      Observable: true,
      isReference: true,
      makeReference: true,
      gql: true
    };
    Object.defineProperty(exports, "ApolloClient", {
      enumerable: true,
      get: function get() {
        return _ApolloClient.ApolloClient;
      }
    });
    Object.defineProperty(exports, "ObservableQuery", {
      enumerable: true,
      get: function get() {
        return _ObservableQuery.ObservableQuery;
      }
    });
    Object.defineProperty(exports, "NetworkStatus", {
      enumerable: true,
      get: function get() {
        return _networkStatus.NetworkStatus;
      }
    });
    Object.defineProperty(exports, "isApolloError", {
      enumerable: true,
      get: function get() {
        return _index.isApolloError;
      }
    });
    Object.defineProperty(exports, "ApolloError", {
      enumerable: true,
      get: function get() {
        return _index.ApolloError;
      }
    });
    Object.defineProperty(exports, "Cache", {
      enumerable: true,
      get: function get() {
        return _index2.Cache;
      }
    });
    Object.defineProperty(exports, "ApolloCache", {
      enumerable: true,
      get: function get() {
        return _index2.ApolloCache;
      }
    });
    Object.defineProperty(exports, "InMemoryCache", {
      enumerable: true,
      get: function get() {
        return _index2.InMemoryCache;
      }
    });
    Object.defineProperty(exports, "MissingFieldError", {
      enumerable: true,
      get: function get() {
        return _index2.MissingFieldError;
      }
    });
    Object.defineProperty(exports, "defaultDataIdFromObject", {
      enumerable: true,
      get: function get() {
        return _index2.defaultDataIdFromObject;
      }
    });
    Object.defineProperty(exports, "makeVar", {
      enumerable: true,
      get: function get() {
        return _index2.makeVar;
      }
    });
    Object.defineProperty(exports, "fromError", {
      enumerable: true,
      get: function get() {
        return _index5.fromError;
      }
    });
    Object.defineProperty(exports, "toPromise", {
      enumerable: true,
      get: function get() {
        return _index5.toPromise;
      }
    });
    Object.defineProperty(exports, "fromPromise", {
      enumerable: true,
      get: function get() {
        return _index5.fromPromise;
      }
    });
    Object.defineProperty(exports, "throwServerError", {
      enumerable: true,
      get: function get() {
        return _index5.throwServerError;
      }
    });
    Object.defineProperty(exports, "Observable", {
      enumerable: true,
      get: function get() {
        return _index6.Observable;
      }
    });
    Object.defineProperty(exports, "isReference", {
      enumerable: true,
      get: function get() {
        return _index6.isReference;
      }
    });
    Object.defineProperty(exports, "makeReference", {
      enumerable: true,
      get: function get() {
        return _index6.makeReference;
      }
    });
    Object.defineProperty(exports, "gql", {
      enumerable: true,
      get: function get() {
        return _graphqlTag.default;
      }
    });
    exports.disableExperimentalFragmentVariables = exports.enableExperimentalFragmentVariables = exports.disableFragmentWarnings = exports.resetCaches = void 0;

    var _ApolloClient = require("./ApolloClient.js");

    var _ObservableQuery = require("./ObservableQuery.js");

    var _networkStatus = require("./networkStatus.js");

    var _types = require("./types.js");

    Object.keys(_types).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _types[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _types[key];
        }
      });
    });

    var _index = require("../errors/index.js");

    var _index2 = require("../cache/index.js");

    var _types2 = require("../cache/inmemory/types.js");

    Object.keys(_types2).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _types2[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _types2[key];
        }
      });
    });

    var _index3 = require("../link/core/index.js");

    Object.keys(_index3).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _index3[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _index3[key];
        }
      });
    });

    var _index4 = require("../link/http/index.js");

    Object.keys(_index4).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _index4[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _index4[key];
        }
      });
    });

    var _index5 = require("../link/utils/index.js");

    var _index6 = require("../utilities/index.js");

    var _graphqlTag = _interopRequireDefault(require("graphql-tag"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var resetCaches = _graphqlTag.default.resetCaches,
        disableFragmentWarnings = _graphqlTag.default.disableFragmentWarnings,
        enableExperimentalFragmentVariables = _graphqlTag.default.enableExperimentalFragmentVariables,
        disableExperimentalFragmentVariables = _graphqlTag.default.disableExperimentalFragmentVariables;
    exports.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;
    exports.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;
    exports.disableFragmentWarnings = disableFragmentWarnings;
    exports.resetCaches = resetCaches;
  }, {
    "./ApolloClient.js": "../node_modules/@apollo/client/core/ApolloClient.js",
    "./ObservableQuery.js": "../node_modules/@apollo/client/core/ObservableQuery.js",
    "./networkStatus.js": "../node_modules/@apollo/client/core/networkStatus.js",
    "./types.js": "../node_modules/@apollo/client/core/types.js",
    "../errors/index.js": "../node_modules/@apollo/client/errors/index.js",
    "../cache/index.js": "../node_modules/@apollo/client/cache/index.js",
    "../cache/inmemory/types.js": "../node_modules/@apollo/client/cache/inmemory/types.js",
    "../link/core/index.js": "../node_modules/@apollo/client/link/core/index.js",
    "../link/http/index.js": "../node_modules/@apollo/client/link/http/index.js",
    "../link/utils/index.js": "../node_modules/@apollo/client/link/utils/index.js",
    "../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js",
    "graphql-tag": "../node_modules/graphql-tag/src/index.js"
  }],
  "../node_modules/@apollo/client/react/context/ApolloContext.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.resetApolloContext = resetApolloContext;
    exports.getApolloContext = getApolloContext;

    var _react = _interopRequireDefault(require("react"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var contextSymbol = typeof Symbol === 'function' && Symbol.for ? Symbol.for('__APOLLO_CONTEXT__') : '__APOLLO_CONTEXT__';

    function resetApolloContext() {
      Object.defineProperty(_react.default, contextSymbol, {
        value: _react.default.createContext({}),
        enumerable: false,
        configurable: true,
        writable: false
      });
    }

    function getApolloContext() {
      if (!_react.default[contextSymbol]) {
        resetApolloContext();
      }

      return _react.default[contextSymbol];
    }
  }, {
    "react": "../node_modules/react/index.js"
  }],
  "../node_modules/@apollo/client/react/context/ApolloConsumer.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ApolloConsumer = void 0;

    var _react = _interopRequireDefault(require("react"));

    var _tsInvariant = require("ts-invariant");

    var _ApolloContext = require("./ApolloContext.js");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var ApolloConsumer = function ApolloConsumer(props) {
      var ApolloContext = (0, _ApolloContext.getApolloContext)();
      return _react.default.createElement(ApolloContext.Consumer, null, function (context) {
        "development" === "production" ? (0, _tsInvariant.invariant)(context && context.client, 27) : (0, _tsInvariant.invariant)(context && context.client, 'Could not find "client" in the context of ApolloConsumer. ' + 'Wrap the root component in an <ApolloProvider>.');
        return props.children(context.client);
      });
    };

    exports.ApolloConsumer = ApolloConsumer;
  }, {
    "react": "../node_modules/react/index.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "./ApolloContext.js": "../node_modules/@apollo/client/react/context/ApolloContext.js"
  }],
  "../node_modules/@apollo/client/react/context/ApolloProvider.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ApolloProvider = void 0;

    var _react = _interopRequireDefault(require("react"));

    var _tsInvariant = require("ts-invariant");

    var _ApolloContext = require("./ApolloContext.js");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var ApolloProvider = function ApolloProvider(_a) {
      var client = _a.client,
          children = _a.children;
      var ApolloContext = (0, _ApolloContext.getApolloContext)();
      return _react.default.createElement(ApolloContext.Consumer, null, function (context) {
        if (context === void 0) {
          context = {};
        }

        if (client && context.client !== client) {
          context = Object.assign({}, context, {
            client: client
          });
        }

        "development" === "production" ? (0, _tsInvariant.invariant)(context.client, 28) : (0, _tsInvariant.invariant)(context.client, 'ApolloProvider was not passed a client instance. Make ' + 'sure you pass in your client via the "client" prop.');
        return _react.default.createElement(ApolloContext.Provider, {
          value: context
        }, children);
      });
    };

    exports.ApolloProvider = ApolloProvider;
  }, {
    "react": "../node_modules/react/index.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "./ApolloContext.js": "../node_modules/@apollo/client/react/context/ApolloContext.js"
  }],
  "../node_modules/@apollo/client/react/context/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _ApolloConsumer = require("./ApolloConsumer.js");

    Object.keys(_ApolloConsumer).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _ApolloConsumer[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _ApolloConsumer[key];
        }
      });
    });

    var _ApolloContext = require("./ApolloContext.js");

    Object.keys(_ApolloContext).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _ApolloContext[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _ApolloContext[key];
        }
      });
    });

    var _ApolloProvider = require("./ApolloProvider.js");

    Object.keys(_ApolloProvider).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _ApolloProvider[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _ApolloProvider[key];
        }
      });
    });
  }, {
    "./ApolloConsumer.js": "../node_modules/@apollo/client/react/context/ApolloConsumer.js",
    "./ApolloContext.js": "../node_modules/@apollo/client/react/context/ApolloContext.js",
    "./ApolloProvider.js": "../node_modules/@apollo/client/react/context/ApolloProvider.js"
  }],
  "../node_modules/@apollo/client/react/hooks/useApolloClient.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useApolloClient = useApolloClient;

    var _react = _interopRequireDefault(require("react"));

    var _tsInvariant = require("ts-invariant");

    var _index = require("../context/index.js");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function useApolloClient() {
      var client = _react.default.useContext((0, _index.getApolloContext)()).client;

      "development" === "production" ? (0, _tsInvariant.invariant)(client, 33) : (0, _tsInvariant.invariant)(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');
      return client;
    }
  }, {
    "react": "../node_modules/react/index.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "../context/index.js": "../node_modules/@apollo/client/react/context/index.js"
  }],
  "../node_modules/@apollo/client/react/parser/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.operationName = operationName;
    exports.parser = parser;
    exports.DocumentType = void 0;

    var _tsInvariant = require("ts-invariant");

    var DocumentType;
    exports.DocumentType = DocumentType;

    (function (DocumentType) {
      DocumentType[DocumentType["Query"] = 0] = "Query";
      DocumentType[DocumentType["Mutation"] = 1] = "Mutation";
      DocumentType[DocumentType["Subscription"] = 2] = "Subscription";
    })(DocumentType || (exports.DocumentType = DocumentType = {}));

    var cache = new Map();

    function operationName(type) {
      var name;

      switch (type) {
        case DocumentType.Query:
          name = 'Query';
          break;

        case DocumentType.Mutation:
          name = 'Mutation';
          break;

        case DocumentType.Subscription:
          name = 'Subscription';
          break;
      }

      return name;
    }

    function parser(document) {
      var cached = cache.get(document);
      if (cached) return cached;
      var variables, type, name;
      "development" === "production" ? (0, _tsInvariant.invariant)(!!document && !!document.kind, 34) : (0, _tsInvariant.invariant)(!!document && !!document.kind, "Argument of " + document + " passed to parser was not a valid GraphQL " + "DocumentNode. You may need to use 'graphql-tag' or another method " + "to convert your operation into a document");
      var fragments = document.definitions.filter(function (x) {
        return x.kind === 'FragmentDefinition';
      });
      var queries = document.definitions.filter(function (x) {
        return x.kind === 'OperationDefinition' && x.operation === 'query';
      });
      var mutations = document.definitions.filter(function (x) {
        return x.kind === 'OperationDefinition' && x.operation === 'mutation';
      });
      var subscriptions = document.definitions.filter(function (x) {
        return x.kind === 'OperationDefinition' && x.operation === 'subscription';
      });
      "development" === "production" ? (0, _tsInvariant.invariant)(!fragments.length || queries.length || mutations.length || subscriptions.length, 35) : (0, _tsInvariant.invariant)(!fragments.length || queries.length || mutations.length || subscriptions.length, "Passing only a fragment to 'graphql' is not yet supported. " + "You must include a query, subscription or mutation as well");
      "development" === "production" ? (0, _tsInvariant.invariant)(queries.length + mutations.length + subscriptions.length <= 1, 36) : (0, _tsInvariant.invariant)(queries.length + mutations.length + subscriptions.length <= 1, "react-apollo only supports a query, subscription, or a mutation per HOC. " + (document + " had " + queries.length + " queries, " + subscriptions.length + " ") + ("subscriptions and " + mutations.length + " mutations. ") + "You can use 'compose' to join multiple operation types to a component");
      type = queries.length ? DocumentType.Query : DocumentType.Mutation;
      if (!queries.length && !mutations.length) type = DocumentType.Subscription;
      var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;
      "development" === "production" ? (0, _tsInvariant.invariant)(definitions.length === 1, 37) : (0, _tsInvariant.invariant)(definitions.length === 1, "react-apollo only supports one definition per HOC. " + document + " had " + (definitions.length + " definitions. ") + "You can use 'compose' to join multiple operation types to a component");
      var definition = definitions[0];
      variables = definition.variableDefinitions || [];

      if (definition.name && definition.name.kind === 'Name') {
        name = definition.name.value;
      } else {
        name = 'data';
      }

      var payload = {
        name: name,
        type: type,
        variables: variables
      };
      cache.set(document, payload);
      return payload;
    }
  }, {
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js"
  }],
  "../node_modules/@apollo/client/react/data/OperationData.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OperationData = void 0;

    var _equality = require("@wry/equality");

    var _tsInvariant = require("ts-invariant");

    var _index = require("../parser/index.js");

    var OperationData = function () {
      function OperationData(options, context) {
        this.isMounted = false;
        this.previousOptions = {};
        this.context = {};
        this.options = {};
        this.options = options || {};
        this.context = context || {};
      }

      OperationData.prototype.getOptions = function () {
        return this.options;
      };

      OperationData.prototype.setOptions = function (newOptions, storePrevious) {
        if (storePrevious === void 0) {
          storePrevious = false;
        }

        if (storePrevious && !(0, _equality.equal)(this.options, newOptions)) {
          this.previousOptions = this.options;
        }

        this.options = newOptions;
      };

      OperationData.prototype.unmount = function () {
        this.isMounted = false;
      };

      OperationData.prototype.refreshClient = function () {
        var client = this.options && this.options.client || this.context && this.context.client;
        "development" === "production" ? (0, _tsInvariant.invariant)(!!client, 29) : (0, _tsInvariant.invariant)(!!client, 'Could not find "client" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');
        var isNew = false;

        if (client !== this.client) {
          isNew = true;
          this.client = client;
          this.cleanup();
        }

        return {
          client: this.client,
          isNew: isNew
        };
      };

      OperationData.prototype.verifyDocumentType = function (document, type) {
        var operation = (0, _index.parser)(document);
        var requiredOperationName = (0, _index.operationName)(type);
        var usedOperationName = (0, _index.operationName)(operation.type);
        "development" === "production" ? (0, _tsInvariant.invariant)(operation.type === type, 30) : (0, _tsInvariant.invariant)(operation.type === type, "Running a " + requiredOperationName + " requires a graphql " + (requiredOperationName + ", but a " + usedOperationName + " was used instead."));
      };

      return OperationData;
    }();

    exports.OperationData = OperationData;
  }, {
    "@wry/equality": "../node_modules/@wry/equality/lib/equality.esm.js",
    "ts-invariant": "../node_modules/ts-invariant/lib/invariant.esm.js",
    "../parser/index.js": "../node_modules/@apollo/client/react/parser/index.js"
  }],
  "../node_modules/@apollo/client/react/data/SubscriptionData.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SubscriptionData = void 0;

    var _tslib = require("tslib");

    var _equality = require("@wry/equality");

    var _OperationData = require("./OperationData.js");

    var SubscriptionData = function (_super) {
      (0, _tslib.__extends)(SubscriptionData, _super);

      function SubscriptionData(_a) {
        var options = _a.options,
            context = _a.context,
            setResult = _a.setResult;

        var _this = _super.call(this, options, context) || this;

        _this.currentObservable = {};
        _this.setResult = setResult;

        _this.initialize(options);

        return _this;
      }

      SubscriptionData.prototype.execute = function (result) {
        if (this.getOptions().skip === true) {
          this.cleanup();
          return {
            loading: false,
            error: undefined,
            data: undefined,
            variables: this.getOptions().variables
          };
        }

        var currentResult = result;

        if (this.refreshClient().isNew) {
          currentResult = this.getLoadingResult();
        }

        var shouldResubscribe = this.getOptions().shouldResubscribe;

        if (typeof shouldResubscribe === 'function') {
          shouldResubscribe = !!shouldResubscribe(this.getOptions());
        }

        if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !(0, _equality.equal)(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {
          this.cleanup();
          currentResult = this.getLoadingResult();
        }

        this.initialize(this.getOptions());
        this.startSubscription();
        this.previousOptions = this.getOptions();
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, currentResult), {
          variables: this.getOptions().variables
        });
      };

      SubscriptionData.prototype.afterExecute = function () {
        this.isMounted = true;
      };

      SubscriptionData.prototype.cleanup = function () {
        this.endSubscription();
        delete this.currentObservable.query;
      };

      SubscriptionData.prototype.initialize = function (options) {
        if (this.currentObservable.query || this.getOptions().skip === true) return;
        this.currentObservable.query = this.refreshClient().client.subscribe({
          query: options.subscription,
          variables: options.variables,
          fetchPolicy: options.fetchPolicy
        });
      };

      SubscriptionData.prototype.startSubscription = function () {
        if (this.currentObservable.subscription) return;
        this.currentObservable.subscription = this.currentObservable.query.subscribe({
          next: this.updateCurrentData.bind(this),
          error: this.updateError.bind(this),
          complete: this.completeSubscription.bind(this)
        });
      };

      SubscriptionData.prototype.getLoadingResult = function () {
        return {
          loading: true,
          error: undefined,
          data: undefined
        };
      };

      SubscriptionData.prototype.updateResult = function (result) {
        if (this.isMounted) {
          this.setResult(result);
        }
      };

      SubscriptionData.prototype.updateCurrentData = function (result) {
        var onSubscriptionData = this.getOptions().onSubscriptionData;
        this.updateResult({
          data: result.data,
          loading: false,
          error: undefined
        });

        if (onSubscriptionData) {
          onSubscriptionData({
            client: this.refreshClient().client,
            subscriptionData: result
          });
        }
      };

      SubscriptionData.prototype.updateError = function (error) {
        this.updateResult({
          error: error,
          loading: false
        });
      };

      SubscriptionData.prototype.completeSubscription = function () {
        var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;
        if (onSubscriptionComplete) onSubscriptionComplete();
        this.endSubscription();
      };

      SubscriptionData.prototype.endSubscription = function () {
        if (this.currentObservable.subscription) {
          this.currentObservable.subscription.unsubscribe();
          delete this.currentObservable.subscription;
        }
      };

      return SubscriptionData;
    }(_OperationData.OperationData);

    exports.SubscriptionData = SubscriptionData;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "@wry/equality": "../node_modules/@wry/equality/lib/equality.esm.js",
    "./OperationData.js": "../node_modules/@apollo/client/react/data/OperationData.js"
  }],
  "../node_modules/@apollo/client/react/data/MutationData.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MutationData = void 0;

    var _tslib = require("tslib");

    var _equality = require("@wry/equality");

    var _index = require("../parser/index.js");

    var _index2 = require("../../errors/index.js");

    var _OperationData = require("./OperationData.js");

    var _index3 = require("../../utilities/index.js");

    var MutationData = function (_super) {
      (0, _tslib.__extends)(MutationData, _super);

      function MutationData(_a) {
        var options = _a.options,
            context = _a.context,
            result = _a.result,
            setResult = _a.setResult;

        var _this = _super.call(this, options, context) || this;

        _this.runMutation = function (mutationFunctionOptions) {
          if (mutationFunctionOptions === void 0) {
            mutationFunctionOptions = {};
          }

          _this.onMutationStart();

          var mutationId = _this.generateNewMutationId();

          return _this.mutate(mutationFunctionOptions).then(function (response) {
            _this.onMutationCompleted(response, mutationId);

            return response;
          }).catch(function (error) {
            _this.onMutationError(error, mutationId);

            if (!_this.getOptions().onError) throw error;
          });
        };

        _this.verifyDocumentType(options.mutation, _index.DocumentType.Mutation);

        _this.result = result;
        _this.setResult = setResult;
        _this.mostRecentMutationId = 0;
        return _this;
      }

      MutationData.prototype.execute = function (result) {
        this.isMounted = true;
        this.verifyDocumentType(this.getOptions().mutation, _index.DocumentType.Mutation);
        return [this.runMutation, (0, _tslib.__assign)((0, _tslib.__assign)({}, result), {
          client: this.refreshClient().client
        })];
      };

      MutationData.prototype.afterExecute = function () {
        this.isMounted = true;
        return this.unmount.bind(this);
      };

      MutationData.prototype.cleanup = function () {};

      MutationData.prototype.mutate = function (mutationFunctionOptions) {
        return this.refreshClient().client.mutate((0, _index3.compact)(this.getOptions(), mutationFunctionOptions));
      };

      MutationData.prototype.onMutationStart = function () {
        if (!this.result.loading && !this.getOptions().ignoreResults) {
          this.updateResult({
            loading: true,
            error: undefined,
            data: undefined,
            called: true
          });
        }
      };

      MutationData.prototype.onMutationCompleted = function (response, mutationId) {
        var _a = this.getOptions(),
            onCompleted = _a.onCompleted,
            ignoreResults = _a.ignoreResults;

        var data = response.data,
            errors = response.errors;
        var error = errors && errors.length > 0 ? new _index2.ApolloError({
          graphQLErrors: errors
        }) : undefined;

        var callOncomplete = function callOncomplete() {
          return onCompleted ? onCompleted(data) : null;
        };

        if (this.isMostRecentMutation(mutationId) && !ignoreResults) {
          this.updateResult({
            called: true,
            loading: false,
            data: data,
            error: error
          });
        }

        callOncomplete();
      };

      MutationData.prototype.onMutationError = function (error, mutationId) {
        var onError = this.getOptions().onError;

        if (this.isMostRecentMutation(mutationId)) {
          this.updateResult({
            loading: false,
            error: error,
            data: undefined,
            called: true
          });
        }

        if (onError) {
          onError(error);
        }
      };

      MutationData.prototype.generateNewMutationId = function () {
        return ++this.mostRecentMutationId;
      };

      MutationData.prototype.isMostRecentMutation = function (mutationId) {
        return this.mostRecentMutationId === mutationId;
      };

      MutationData.prototype.updateResult = function (result) {
        if (this.isMounted && (!this.previousResult || !(0, _equality.equal)(this.previousResult, result))) {
          this.setResult(result);
          this.previousResult = result;
        }
      };

      return MutationData;
    }(_OperationData.OperationData);

    exports.MutationData = MutationData;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "@wry/equality": "../node_modules/@wry/equality/lib/equality.esm.js",
    "../parser/index.js": "../node_modules/@apollo/client/react/parser/index.js",
    "../../errors/index.js": "../node_modules/@apollo/client/errors/index.js",
    "./OperationData.js": "../node_modules/@apollo/client/react/data/OperationData.js",
    "../../utilities/index.js": "../node_modules/@apollo/client/utilities/index.js"
  }],
  "../node_modules/@apollo/client/react/data/QueryData.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.QueryData = void 0;

    var _tslib = require("tslib");

    var _equality = require("@wry/equality");

    var _index = require("../../errors/index.js");

    var _index2 = require("../../core/index.js");

    var _index3 = require("../parser/index.js");

    var _OperationData = require("./OperationData.js");

    var QueryData = function (_super) {
      (0, _tslib.__extends)(QueryData, _super);

      function QueryData(_a) {
        var options = _a.options,
            context = _a.context,
            onNewData = _a.onNewData;

        var _this = _super.call(this, options, context) || this;

        _this.previousData = {};
        _this.runLazy = false;

        _this.runLazyQuery = function (options) {
          _this.cleanup();

          _this.runLazy = true;
          _this.lazyOptions = options;

          _this.onNewData();
        };

        _this.getQueryResult = function () {
          var result = _this.observableQueryFields();

          var options = _this.getOptions();

          if (options.skip) {
            result = (0, _tslib.__assign)((0, _tslib.__assign)({}, result), {
              data: undefined,
              error: undefined,
              loading: false,
              called: true
            });
          } else if (_this.currentObservable) {
            var currentResult = _this.currentObservable.getCurrentResult();

            var data = currentResult.data,
                loading = currentResult.loading,
                partial = currentResult.partial,
                networkStatus = currentResult.networkStatus,
                errors = currentResult.errors;
            var error = currentResult.error;

            if (errors && errors.length > 0) {
              error = new _index.ApolloError({
                graphQLErrors: errors
              });
            }

            result = (0, _tslib.__assign)((0, _tslib.__assign)({}, result), {
              data: data,
              loading: loading,
              networkStatus: networkStatus,
              error: error,
              called: true
            });

            if (loading) {} else if (error) {
              Object.assign(result, {
                data: (_this.currentObservable.getLastResult() || {}).data
              });
            } else {
              var fetchPolicy = _this.currentObservable.options.fetchPolicy;
              var partialRefetch = options.partialRefetch;

              if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only') {
                Object.assign(result, {
                  loading: true,
                  networkStatus: _index2.NetworkStatus.loading
                });
                result.refetch();
                return result;
              }
            }
          }

          result.client = _this.client;

          _this.setOptions(options, true);

          _this.previousData.loading = _this.previousData.result && _this.previousData.result.loading || false;
          _this.previousData.result = result;
          _this.currentObservable && _this.currentObservable.resetQueryStoreErrors();
          return result;
        };

        _this.obsRefetch = function (variables) {
          return _this.currentObservable.refetch(variables);
        };

        _this.obsFetchMore = function (fetchMoreOptions) {
          return _this.currentObservable.fetchMore(fetchMoreOptions);
        };

        _this.obsUpdateQuery = function (mapFn) {
          return _this.currentObservable.updateQuery(mapFn);
        };

        _this.obsStartPolling = function (pollInterval) {
          var _a;

          (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);
        };

        _this.obsStopPolling = function () {
          var _a;

          (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();
        };

        _this.obsSubscribeToMore = function (options) {
          return _this.currentObservable.subscribeToMore(options);
        };

        _this.onNewData = onNewData;
        return _this;
      }

      QueryData.prototype.execute = function () {
        this.refreshClient();

        var _a = this.getOptions(),
            skip = _a.skip,
            query = _a.query;

        if (skip || query !== this.previousData.query) {
          this.removeQuerySubscription();
          this.previousData.query = query;
        }

        this.updateObservableQuery();
        if (this.isMounted) this.startQuerySubscription();
        return this.getExecuteSsrResult() || this.getExecuteResult();
      };

      QueryData.prototype.executeLazy = function () {
        return !this.runLazy ? [this.runLazyQuery, {
          loading: false,
          networkStatus: _index2.NetworkStatus.ready,
          called: false,
          data: undefined
        }] : [this.runLazyQuery, this.execute()];
      };

      QueryData.prototype.fetchData = function () {
        var _this = this;

        var options = this.getOptions();
        if (options.skip || options.ssr === false) return false;
        return new Promise(function (resolve) {
          return _this.startQuerySubscription(resolve);
        });
      };

      QueryData.prototype.afterExecute = function (_a) {
        var _b = (_a === void 0 ? {} : _a).lazy,
            lazy = _b === void 0 ? false : _b;
        this.isMounted = true;

        if (!lazy || this.runLazy) {
          this.handleErrorOrCompleted();
        }

        this.previousOptions = this.getOptions();
        return this.unmount.bind(this);
      };

      QueryData.prototype.cleanup = function () {
        this.removeQuerySubscription();
        delete this.currentObservable;
        delete this.previousData.result;
      };

      QueryData.prototype.getOptions = function () {
        var options = _super.prototype.getOptions.call(this);

        if (this.lazyOptions) {
          options.variables = (0, _tslib.__assign)((0, _tslib.__assign)({}, options.variables), this.lazyOptions.variables);
          options.context = (0, _tslib.__assign)((0, _tslib.__assign)({}, options.context), this.lazyOptions.context);
        }

        if (this.runLazy) {
          delete options.skip;
        }

        return options;
      };

      QueryData.prototype.ssrInitiated = function () {
        return this.context && this.context.renderPromises;
      };

      QueryData.prototype.getExecuteResult = function () {
        var result = this.getQueryResult();
        this.startQuerySubscription();
        return result;
      };

      ;

      QueryData.prototype.getExecuteSsrResult = function () {
        var ssrDisabled = this.getOptions().ssr === false;
        var fetchDisabled = this.refreshClient().client.disableNetworkFetches;
        var ssrLoading = (0, _tslib.__assign)({
          loading: true,
          networkStatus: _index2.NetworkStatus.loading,
          called: true,
          data: undefined,
          stale: false,
          client: this.client
        }, this.observableQueryFields());

        if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {
          this.previousData.result = ssrLoading;
          return ssrLoading;
        }

        var result;

        if (this.ssrInitiated()) {
          result = this.context.renderPromises.addQueryPromise(this, this.getQueryResult) || ssrLoading;
        }

        return result;
      };

      QueryData.prototype.prepareObservableQueryOptions = function () {
        var options = this.getOptions();
        this.verifyDocumentType(options.query, _index3.DocumentType.Query);
        var displayName = options.displayName || 'Query';

        if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {
          options.fetchPolicy = 'cache-first';
        }

        return (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
          displayName: displayName,
          context: options.context
        });
      };

      QueryData.prototype.initializeObservableQuery = function () {
        if (this.ssrInitiated()) {
          this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());
        }

        if (!this.currentObservable) {
          var observableQueryOptions = this.prepareObservableQueryOptions();
          this.previousData.observableQueryOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, observableQueryOptions), {
            children: null
          });
          this.currentObservable = this.refreshClient().client.watchQuery((0, _tslib.__assign)({}, observableQueryOptions));

          if (this.ssrInitiated()) {
            this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);
          }
        }
      };

      QueryData.prototype.updateObservableQuery = function () {
        if (!this.currentObservable) {
          this.initializeObservableQuery();
          return;
        }

        if (this.getOptions().skip) return;
        var newObservableQueryOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.prepareObservableQueryOptions()), {
          children: null
        });

        if (!(0, _equality.equal)(newObservableQueryOptions, this.previousData.observableQueryOptions)) {
          this.previousData.observableQueryOptions = newObservableQueryOptions;
          this.currentObservable.setOptions(newObservableQueryOptions).catch(function () {});
        }
      };

      QueryData.prototype.startQuerySubscription = function (onNewData) {
        var _this = this;

        if (onNewData === void 0) {
          onNewData = this.onNewData;
        }

        if (this.currentSubscription || this.getOptions().skip) return;
        this.currentSubscription = this.currentObservable.subscribe({
          next: function next(_a) {
            var loading = _a.loading,
                networkStatus = _a.networkStatus,
                data = _a.data;
            var previousResult = _this.previousData.result;

            if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && (0, _equality.equal)(previousResult.data, data)) {
              return;
            }

            onNewData();
          },
          error: function error(_error7) {
            _this.resubscribeToQuery();

            if (!_error7.hasOwnProperty('graphQLErrors')) throw _error7;
            var previousResult = _this.previousData.result;

            if (previousResult && previousResult.loading || !(0, _equality.equal)(_error7, _this.previousData.error)) {
              _this.previousData.error = _error7;
              onNewData();
            }
          }
        });
      };

      QueryData.prototype.resubscribeToQuery = function () {
        this.removeQuerySubscription();
        var currentObservable = this.currentObservable;

        if (currentObservable) {
          var lastError = currentObservable.getLastError();
          var lastResult = currentObservable.getLastResult();
          currentObservable.resetLastResults();
          this.startQuerySubscription();
          Object.assign(currentObservable, {
            lastError: lastError,
            lastResult: lastResult
          });
        }
      };

      QueryData.prototype.handleErrorOrCompleted = function () {
        if (!this.currentObservable || !this.previousData.result) return;
        var _a = this.previousData.result,
            data = _a.data,
            loading = _a.loading,
            error = _a.error;

        if (!loading) {
          var _b = this.getOptions(),
              query = _b.query,
              variables = _b.variables,
              onCompleted = _b.onCompleted,
              onError = _b.onError,
              skip = _b.skip;

          if (this.previousOptions && !this.previousData.loading && (0, _equality.equal)(this.previousOptions.query, query) && (0, _equality.equal)(this.previousOptions.variables, variables)) {
            return;
          }

          if (onCompleted && !error && !skip) {
            onCompleted(data);
          } else if (onError && error) {
            onError(error);
          }
        }
      };

      QueryData.prototype.removeQuerySubscription = function () {
        if (this.currentSubscription) {
          this.currentSubscription.unsubscribe();
          delete this.currentSubscription;
        }
      };

      QueryData.prototype.observableQueryFields = function () {
        var _a;

        return {
          variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,
          refetch: this.obsRefetch,
          fetchMore: this.obsFetchMore,
          updateQuery: this.obsUpdateQuery,
          startPolling: this.obsStartPolling,
          stopPolling: this.obsStopPolling,
          subscribeToMore: this.obsSubscribeToMore
        };
      };

      return QueryData;
    }(_OperationData.OperationData);

    exports.QueryData = QueryData;
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "@wry/equality": "../node_modules/@wry/equality/lib/equality.esm.js",
    "../../errors/index.js": "../node_modules/@apollo/client/errors/index.js",
    "../../core/index.js": "../node_modules/@apollo/client/core/index.js",
    "../parser/index.js": "../node_modules/@apollo/client/react/parser/index.js",
    "./OperationData.js": "../node_modules/@apollo/client/react/data/OperationData.js"
  }],
  "../node_modules/@apollo/client/react/data/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "SubscriptionData", {
      enumerable: true,
      get: function get() {
        return _SubscriptionData.SubscriptionData;
      }
    });
    Object.defineProperty(exports, "OperationData", {
      enumerable: true,
      get: function get() {
        return _OperationData.OperationData;
      }
    });
    Object.defineProperty(exports, "MutationData", {
      enumerable: true,
      get: function get() {
        return _MutationData.MutationData;
      }
    });
    Object.defineProperty(exports, "QueryData", {
      enumerable: true,
      get: function get() {
        return _QueryData.QueryData;
      }
    });

    var _SubscriptionData = require("./SubscriptionData.js");

    var _OperationData = require("./OperationData.js");

    var _MutationData = require("./MutationData.js");

    var _QueryData = require("./QueryData.js");
  }, {
    "./SubscriptionData.js": "../node_modules/@apollo/client/react/data/SubscriptionData.js",
    "./OperationData.js": "../node_modules/@apollo/client/react/data/OperationData.js",
    "./MutationData.js": "../node_modules/@apollo/client/react/data/MutationData.js",
    "./QueryData.js": "../node_modules/@apollo/client/react/data/QueryData.js"
  }],
  "../node_modules/@apollo/client/react/hooks/utils/useDeepMemo.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useDeepMemo = useDeepMemo;

    var _react = require("react");

    var _equality = require("@wry/equality");

    function useDeepMemo(memoFn, key) {
      var ref = (0, _react.useRef)();

      if (!ref.current || !(0, _equality.equal)(key, ref.current.key)) {
        ref.current = {
          key: key,
          value: memoFn()
        };
      }

      return ref.current.value;
    }
  }, {
    "react": "../node_modules/react/index.js",
    "@wry/equality": "../node_modules/@wry/equality/lib/equality.esm.js"
  }],
  "../node_modules/@apollo/client/react/hooks/utils/useBaseQuery.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useBaseQuery = useBaseQuery;

    var _tslib = require("tslib");

    var _react = require("react");

    var _index = require("../../data/index.js");

    var _useDeepMemo = require("./useDeepMemo.js");

    var _index2 = require("../../context/index.js");

    function useBaseQuery(query, options, lazy) {
      if (lazy === void 0) {
        lazy = false;
      }

      var context = (0, _react.useContext)((0, _index2.getApolloContext)());

      var _a = (0, _react.useReducer)(function (x) {
        return x + 1;
      }, 0),
          tick = _a[0],
          forceUpdate = _a[1];

      var updatedOptions = options ? (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
        query: query
      }) : {
        query: query
      };
      var queryDataRef = (0, _react.useRef)();
      var queryData = queryDataRef.current || new _index.QueryData({
        options: updatedOptions,
        context: context,
        onNewData: function onNewData() {
          if (!queryData.ssrInitiated()) {
            Promise.resolve().then(forceUpdate);
          } else {
            forceUpdate();
          }
        }
      });
      queryData.setOptions(updatedOptions);
      queryData.context = context;

      if (queryData.ssrInitiated() && !queryDataRef.current) {
        queryDataRef.current = queryData;
      }

      var memo = {
        options: (0, _tslib.__assign)((0, _tslib.__assign)({}, updatedOptions), {
          onError: undefined,
          onCompleted: undefined
        }),
        context: context,
        tick: tick
      };
      var result = (0, _useDeepMemo.useDeepMemo)(function () {
        return lazy ? queryData.executeLazy() : queryData.execute();
      }, memo);
      var queryResult = lazy ? result[1] : result;
      (0, _react.useEffect)(function () {
        if (!queryDataRef.current) {
          queryDataRef.current = queryData;
        }

        return function () {
          return queryData.cleanup();
        };
      }, []);
      (0, _react.useEffect)(function () {
        return queryData.afterExecute({
          lazy: lazy
        });
      }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);
      return result;
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "react": "../node_modules/react/index.js",
    "../../data/index.js": "../node_modules/@apollo/client/react/data/index.js",
    "./useDeepMemo.js": "../node_modules/@apollo/client/react/hooks/utils/useDeepMemo.js",
    "../../context/index.js": "../node_modules/@apollo/client/react/context/index.js"
  }],
  "../node_modules/@apollo/client/react/hooks/useLazyQuery.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useLazyQuery = useLazyQuery;

    var _useBaseQuery = require("./utils/useBaseQuery.js");

    function useLazyQuery(query, options) {
      return (0, _useBaseQuery.useBaseQuery)(query, options, true);
    }
  }, {
    "./utils/useBaseQuery.js": "../node_modules/@apollo/client/react/hooks/utils/useBaseQuery.js"
  }],
  "../node_modules/@apollo/client/react/hooks/useMutation.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useMutation = useMutation;

    var _tslib = require("tslib");

    var _react = require("react");

    var _index = require("../data/index.js");

    var _index2 = require("../context/index.js");

    function useMutation(mutation, options) {
      var context = (0, _react.useContext)((0, _index2.getApolloContext)());

      var _a = (0, _react.useState)({
        called: false,
        loading: false
      }),
          result = _a[0],
          setResult = _a[1];

      var updatedOptions = options ? (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
        mutation: mutation
      }) : {
        mutation: mutation
      };
      var mutationDataRef = (0, _react.useRef)();

      function getMutationDataRef() {
        if (!mutationDataRef.current) {
          mutationDataRef.current = new _index.MutationData({
            options: updatedOptions,
            context: context,
            result: result,
            setResult: setResult
          });
        }

        return mutationDataRef.current;
      }

      var mutationData = getMutationDataRef();
      mutationData.setOptions(updatedOptions);
      mutationData.context = context;
      (0, _react.useEffect)(function () {
        return mutationData.afterExecute();
      });
      return mutationData.execute(result);
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "react": "../node_modules/react/index.js",
    "../data/index.js": "../node_modules/@apollo/client/react/data/index.js",
    "../context/index.js": "../node_modules/@apollo/client/react/context/index.js"
  }],
  "../node_modules/@apollo/client/react/hooks/useQuery.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useQuery = useQuery;

    var _useBaseQuery = require("./utils/useBaseQuery.js");

    function useQuery(query, options) {
      return (0, _useBaseQuery.useBaseQuery)(query, options, false);
    }
  }, {
    "./utils/useBaseQuery.js": "../node_modules/@apollo/client/react/hooks/utils/useBaseQuery.js"
  }],
  "../node_modules/@apollo/client/react/hooks/useSubscription.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useSubscription = useSubscription;

    var _tslib = require("tslib");

    var _react = require("react");

    var _index = require("../data/index.js");

    var _index2 = require("../context/index.js");

    function useSubscription(subscription, options) {
      var context = (0, _react.useContext)((0, _index2.getApolloContext)());
      var updatedOptions = options ? (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
        subscription: subscription
      }) : {
        subscription: subscription
      };

      var _a = (0, _react.useState)({
        loading: !updatedOptions.skip,
        error: undefined,
        data: undefined
      }),
          result = _a[0],
          setResult = _a[1];

      var subscriptionDataRef = (0, _react.useRef)();

      function getSubscriptionDataRef() {
        if (!subscriptionDataRef.current) {
          subscriptionDataRef.current = new _index.SubscriptionData({
            options: updatedOptions,
            context: context,
            setResult: setResult
          });
        }

        return subscriptionDataRef.current;
      }

      var subscriptionData = getSubscriptionDataRef();
      subscriptionData.setOptions(updatedOptions, true);
      subscriptionData.context = context;
      (0, _react.useEffect)(function () {
        return subscriptionData.afterExecute();
      });
      (0, _react.useEffect)(function () {
        return subscriptionData.cleanup.bind(subscriptionData);
      }, []);
      return subscriptionData.execute(result);
    }
  }, {
    "tslib": "../node_modules/tslib/tslib.es6.js",
    "react": "../node_modules/react/index.js",
    "../data/index.js": "../node_modules/@apollo/client/react/data/index.js",
    "../context/index.js": "../node_modules/@apollo/client/react/context/index.js"
  }],
  "../node_modules/@apollo/client/react/hooks/useReactiveVar.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useReactiveVar = useReactiveVar;

    var _react = require("react");

    function useReactiveVar(rv) {
      var value = rv();
      var mute = rv.onNextChange((0, _react.useState)(value)[1]);
      (0, _react.useEffect)(function () {
        return mute;
      }, []);
      return value;
    }
  }, {
    "react": "../node_modules/react/index.js"
  }],
  "../node_modules/@apollo/client/react/hooks/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _useApolloClient = require("./useApolloClient.js");

    Object.keys(_useApolloClient).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _useApolloClient[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _useApolloClient[key];
        }
      });
    });

    var _useLazyQuery = require("./useLazyQuery.js");

    Object.keys(_useLazyQuery).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _useLazyQuery[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _useLazyQuery[key];
        }
      });
    });

    var _useMutation = require("./useMutation.js");

    Object.keys(_useMutation).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _useMutation[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _useMutation[key];
        }
      });
    });

    var _useQuery = require("./useQuery.js");

    Object.keys(_useQuery).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _useQuery[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _useQuery[key];
        }
      });
    });

    var _useSubscription = require("./useSubscription.js");

    Object.keys(_useSubscription).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _useSubscription[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _useSubscription[key];
        }
      });
    });

    var _useReactiveVar = require("./useReactiveVar.js");

    Object.keys(_useReactiveVar).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _useReactiveVar[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _useReactiveVar[key];
        }
      });
    });
  }, {
    "./useApolloClient.js": "../node_modules/@apollo/client/react/hooks/useApolloClient.js",
    "./useLazyQuery.js": "../node_modules/@apollo/client/react/hooks/useLazyQuery.js",
    "./useMutation.js": "../node_modules/@apollo/client/react/hooks/useMutation.js",
    "./useQuery.js": "../node_modules/@apollo/client/react/hooks/useQuery.js",
    "./useSubscription.js": "../node_modules/@apollo/client/react/hooks/useSubscription.js",
    "./useReactiveVar.js": "../node_modules/@apollo/client/react/hooks/useReactiveVar.js"
  }],
  "../node_modules/@apollo/client/react/types/types.js": [function (require, module, exports) {}, {}],
  "../node_modules/@apollo/client/react/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      ApolloProvider: true,
      ApolloConsumer: true,
      getApolloContext: true,
      resetApolloContext: true,
      DocumentType: true,
      operationName: true,
      parser: true
    };
    Object.defineProperty(exports, "ApolloProvider", {
      enumerable: true,
      get: function get() {
        return _index.ApolloProvider;
      }
    });
    Object.defineProperty(exports, "ApolloConsumer", {
      enumerable: true,
      get: function get() {
        return _index.ApolloConsumer;
      }
    });
    Object.defineProperty(exports, "getApolloContext", {
      enumerable: true,
      get: function get() {
        return _index.getApolloContext;
      }
    });
    Object.defineProperty(exports, "resetApolloContext", {
      enumerable: true,
      get: function get() {
        return _index.resetApolloContext;
      }
    });
    Object.defineProperty(exports, "DocumentType", {
      enumerable: true,
      get: function get() {
        return _index3.DocumentType;
      }
    });
    Object.defineProperty(exports, "operationName", {
      enumerable: true,
      get: function get() {
        return _index3.operationName;
      }
    });
    Object.defineProperty(exports, "parser", {
      enumerable: true,
      get: function get() {
        return _index3.parser;
      }
    });

    var _index = require("./context/index.js");

    var _index2 = require("./hooks/index.js");

    Object.keys(_index2).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _index2[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _index2[key];
        }
      });
    });

    var _index3 = require("./parser/index.js");

    var _types = require("./types/types.js");

    Object.keys(_types).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _types[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _types[key];
        }
      });
    });
  }, {
    "./context/index.js": "../node_modules/@apollo/client/react/context/index.js",
    "./hooks/index.js": "../node_modules/@apollo/client/react/hooks/index.js",
    "./parser/index.js": "../node_modules/@apollo/client/react/parser/index.js",
    "./types/types.js": "../node_modules/@apollo/client/react/types/types.js"
  }],
  "../node_modules/@apollo/client/index.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _index = require("./core/index.js");

    Object.keys(_index).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _index[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _index[key];
        }
      });
    });

    var _index2 = require("./react/index.js");

    Object.keys(_index2).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _index2[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _index2[key];
        }
      });
    });
  }, {
    "./core/index.js": "../node_modules/@apollo/client/core/index.js",
    "./react/index.js": "../node_modules/@apollo/client/react/index.js"
  }],
  "../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _inheritsLoose;

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
  }, {}],
  "../node_modules/react-is/cjs/react-is.development.js": [function (require, module, exports) {
    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    'use strict';

    if ("development" !== "production") {
      (function () {
        'use strict'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.

        var hasSymbol = typeof Symbol === 'function' && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
        // (unstable) APIs that have been removed. Can we remove the symbols?

        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

        function isValidElementType(type) {
          return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || _typeof3(type) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }

        function typeOf(object) {
          if (_typeof3(object) === 'object' && object !== null) {
            var $$typeof = object.$$typeof;

            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;

                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;

                  default:
                    var $$typeofType = type && type.$$typeof;

                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;

                      default:
                        return $$typeof;
                    }

                }

              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }

          return undefined;
        } // AsyncMode is deprecated along with isAsyncMode


        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

              console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }

        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }

        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }

        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }

        function isElement(object) {
          return _typeof3(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }

        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }

        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }

        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }

        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }

        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }

        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }

        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }

        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }

        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }, {}],
  "../node_modules/react-is/index.js": [function (require, module, exports) {
    'use strict';

    if ("development" === 'production') {
      module.exports = require('./cjs/react-is.production.min.js');
    } else {
      module.exports = require('./cjs/react-is.development.js');
    }
  }, {
    "./cjs/react-is.development.js": "../node_modules/react-is/cjs/react-is.development.js"
  }],
  "../node_modules/prop-types/factoryWithTypeCheckers.js": [function (require, module, exports) {
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    'use strict';

    var ReactIs = require('react-is');

    var assign = require('object-assign');

    var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

    var checkPropTypes = require('./checkPropTypes');

    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    var printWarning = function printWarning() {};

    if ("development" !== 'production') {
      printWarning = function printWarning(text) {
        var message = 'Warning: ' + text;

        if (typeof console !== 'undefined') {
          console.error(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }

    function emptyFunctionThatReturnsNull() {
      return null;
    }

    module.exports = function (isValidElement, throwOnDirectAccess) {
      /* global Symbol */
      var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

      /**
       * Returns the iterator method function contained on the iterable object.
       *
       * Be sure to invoke the function with the iterable as context:
       *
       *     var iteratorFn = getIteratorFn(myIterable);
       *     if (iteratorFn) {
       *       var iterator = iteratorFn.call(myIterable);
       *       ...
       *     }
       *
       * @param {?object} maybeIterable
       * @return {?function}
       */

      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

        if (typeof iteratorFn === 'function') {
          return iteratorFn;
        }
      }
      /**
       * Collection of methods that allow declaration and validation of props that are
       * supplied to React components. Example usage:
       *
       *   var Props = require('ReactPropTypes');
       *   var MyArticle = React.createClass({
       *     propTypes: {
       *       // An optional string prop named "description".
       *       description: Props.string,
       *
       *       // A required enum prop named "category".
       *       category: Props.oneOf(['News','Photos']).isRequired,
       *
       *       // A prop named "dialog" that requires an instance of Dialog.
       *       dialog: Props.instanceOf(Dialog).isRequired
       *     },
       *     render: function() { ... }
       *   });
       *
       * A more formal specification of how these methods are used:
       *
       *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
       *   decl := ReactPropTypes.{type}(.isRequired)?
       *
       * Each and every declaration produces a function with the same signature. This
       * allows the creation of custom validation functions. For example:
       *
       *  var MyLink = React.createClass({
       *    propTypes: {
       *      // An optional string or URI prop named "href".
       *      href: function(props, propName, componentName) {
       *        var propValue = props[propName];
       *        if (propValue != null && typeof propValue !== 'string' &&
       *            !(propValue instanceof URI)) {
       *          return new Error(
       *            'Expected a string or an URI for ' + propName + ' in ' +
       *            componentName
       *          );
       *        }
       *      }
       *    },
       *    render: function() {...}
       *  });
       *
       * @internal
       */


      var ANONYMOUS = '<<anonymous>>'; // Important!
      // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

      var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      /**
       * inlined Object.is polyfill to avoid requiring consumers ship their own
       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
       */

      /*eslint-disable no-self-compare*/

      function is(x, y) {
        // SameValue algorithm
        if (x === y) {
          // Steps 1-5, 7-10
          // Steps 6.b-6.e: +0 != -0
          return x !== 0 || 1 / x === 1 / y;
        } else {
          // Step 6.a: NaN == NaN
          return x !== x && y !== y;
        }
      }
      /*eslint-enable no-self-compare*/

      /**
       * We use an Error-like object for backward compatibility as people may call
       * PropTypes directly and inspect their output. However, we don't use real
       * Errors anymore. We don't inspect their stack anyway, and creating them
       * is prohibitively expensive if they are created too often, such as what
       * happens in oneOfType() for any type before the one that matched.
       */


      function PropTypeError(message) {
        this.message = message;
        this.stack = '';
      } // Make `instanceof Error` still work for returned errors.


      PropTypeError.prototype = Error.prototype;

      function createChainableTypeChecker(validate) {
        if ("development" !== 'production') {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }

        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;

          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              // New behavior only for users of `prop-types` package
              var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
              err.name = 'Invariant Violation';
              throw err;
            } else if ("development" !== 'production' && typeof console !== 'undefined') {
              // Old behavior for people using React.PropTypes
              var cacheKey = componentName + ':' + propName;

              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }

          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
              }

              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
            }

            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }

        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }

      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);

          if (propType !== expectedType) {
            // `propValue` being instance of, say, date/regexp, pass the 'object'
            // check, but we can offer a more precise error message here rather than
            // 'of type `object`'.
            var preciseType = getPreciseType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }

      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
          }

          var propValue = props[propName];

          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
          }

          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

            if (error instanceof Error) {
              return error;
            }
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];

          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];

          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if ("development" !== 'production') {
            if (arguments.length > 1) {
              printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
            } else {
              printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
          }

          return emptyFunctionThatReturnsNull;
        }

        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];

          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }

          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);

            if (type === 'symbol') {
              return String(value);
            }

            return value;
          });
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }

        return createChainableTypeChecker(validate);
      }

      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
          }

          var propValue = props[propName];
          var propType = getPropType(propValue);

          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
          }

          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

              if (error instanceof Error) {
                return error;
              }
            }
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          "development" !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
          return emptyFunctionThatReturnsNull;
        }

        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];

          if (typeof checker !== 'function') {
            printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
            return emptyFunctionThatReturnsNull;
          }
        }

        function validate(props, propName, componentName, location, propFullName) {
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];

            if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
              return null;
            }
          }

          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }

        return createChainableTypeChecker(validate);
      }

      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);

          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }

          for (var key in shapeTypes) {
            var checker = shapeTypes[key];

            if (!checker) {
              continue;
            }

            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

            if (error) {
              return error;
            }
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);

          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          } // We need to check all keys in case some are required but missing from
          // props.


          var allKeys = assign({}, props[propName], shapeTypes);

          for (var key in allKeys) {
            var checker = shapeTypes[key];

            if (!checker) {
              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
            }

            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

            if (error) {
              return error;
            }
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function isNode(propValue) {
        switch (_typeof3(propValue)) {
          case 'number':
          case 'string':
          case 'undefined':
            return true;

          case 'boolean':
            return !propValue;

          case 'object':
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }

            if (propValue === null || isValidElement(propValue)) {
              return true;
            }

            var iteratorFn = getIteratorFn(propValue);

            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;

              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                // Iterator will provide entry [k,v] tuples rather than values.
                while (!(step = iterator.next()).done) {
                  var entry = step.value;

                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }

            return true;

          default:
            return false;
        }
      }

      function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') {
          return true;
        } // falsy value can't be a Symbol


        if (!propValue) {
          return false;
        } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


        if (propValue['@@toStringTag'] === 'Symbol') {
          return true;
        } // Fallback for non-spec compliant Symbols which are polyfilled.


        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
          return true;
        }

        return false;
      } // Equivalent of `typeof` but with special handling for array and regexp.


      function getPropType(propValue) {
        var propType = _typeof3(propValue);

        if (Array.isArray(propValue)) {
          return 'array';
        }

        if (propValue instanceof RegExp) {
          // Old webkits (at least until Android 4.0) return 'function' rather than
          // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
          // passes PropTypes.object.
          return 'object';
        }

        if (isSymbol(propType, propValue)) {
          return 'symbol';
        }

        return propType;
      } // This handles more types than `getPropType`. Only used for error messages.
      // See `createPrimitiveTypeChecker`.


      function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
          return '' + propValue;
        }

        var propType = getPropType(propValue);

        if (propType === 'object') {
          if (propValue instanceof Date) {
            return 'date';
          } else if (propValue instanceof RegExp) {
            return 'regexp';
          }
        }

        return propType;
      } // Returns a string that is postfixed to a warning about an invalid type.
      // For example, "undefined" or "of type array"


      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);

        switch (type) {
          case 'array':
          case 'object':
            return 'an ' + type;

          case 'boolean':
          case 'date':
          case 'regexp':
            return 'a ' + type;

          default:
            return type;
        }
      } // Returns class name of the object, if any.


      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }

        return propValue.constructor.name;
      }

      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }, {
    "react-is": "../node_modules/react-is/index.js",
    "object-assign": "../node_modules/object-assign/index.js",
    "./lib/ReactPropTypesSecret": "../node_modules/prop-types/lib/ReactPropTypesSecret.js",
    "./checkPropTypes": "../node_modules/prop-types/checkPropTypes.js"
  }],
  "../node_modules/prop-types/index.js": [function (require, module, exports) {
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    if ("development" !== 'production') {
      var ReactIs = require('react-is'); // By explicitly using `prop-types` you are opting into new development behavior.
      // http://fb.me/prop-types-in-prod


      var throwOnDirectAccess = true;
      module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);
    } else {
      // By explicitly using `prop-types` you are opting into new production behavior.
      // http://fb.me/prop-types-in-prod
      module.exports = require('./factoryWithThrowingShims')();
    }
  }, {
    "react-is": "../node_modules/react-is/index.js",
    "./factoryWithTypeCheckers": "../node_modules/prop-types/factoryWithTypeCheckers.js"
  }],
  "../node_modules/@babel/runtime/helpers/esm/extends.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _extends;

    function _extends() {
      exports.default = _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends.apply(this, arguments);
    }
  }, {}],
  "../node_modules/resolve-pathname/esm/resolve-pathname.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    function isAbsolute(pathname) {
      return pathname.charAt(0) === '/';
    } // About 1.5x faster than the two-arg version of Array#splice()


    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
        list[i] = list[k];
      }

      list.pop();
    } // This implementation is based heavily on node's url.parse


    function resolvePathname(to, from) {
      if (from === undefined) from = '';
      var toParts = to && to.split('/') || [];
      var fromParts = from && from.split('/') || [];
      var isToAbs = to && isAbsolute(to);
      var isFromAbs = from && isAbsolute(from);
      var mustEndAbs = isToAbs || isFromAbs;

      if (to && isAbsolute(to)) {
        // to is absolute
        fromParts = toParts;
      } else if (toParts.length) {
        // to is relative, drop the filename
        fromParts.pop();
        fromParts = fromParts.concat(toParts);
      }

      if (!fromParts.length) return '/';
      var hasTrailingSlash;

      if (fromParts.length) {
        var last = fromParts[fromParts.length - 1];
        hasTrailingSlash = last === '.' || last === '..' || last === '';
      } else {
        hasTrailingSlash = false;
      }

      var up = 0;

      for (var i = fromParts.length; i >= 0; i--) {
        var part = fromParts[i];

        if (part === '.') {
          spliceOne(fromParts, i);
        } else if (part === '..') {
          spliceOne(fromParts, i);
          up++;
        } else if (up) {
          spliceOne(fromParts, i);
          up--;
        }
      }

      if (!mustEndAbs) for (; up--; up) {
        fromParts.unshift('..');
      }
      if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
      var result = fromParts.join('/');
      if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
      return result;
    }

    var _default = resolvePathname;
    exports.default = _default;
  }, {}],
  "../node_modules/value-equal/esm/value-equal.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    function valueOf(obj) {
      return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
    }

    function valueEqual(a, b) {
      // Test for strict equality first.
      if (a === b) return true; // Otherwise, if either of them == null they are not equal.

      if (a == null || b == null) return false;

      if (Array.isArray(a)) {
        return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
          return valueEqual(item, b[index]);
        });
      }

      if (_typeof3(a) === 'object' || _typeof3(b) === 'object') {
        var aValue = valueOf(a);
        var bValue = valueOf(b);
        if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);
        return Object.keys(Object.assign({}, a, b)).every(function (key) {
          return valueEqual(a[key], b[key]);
        });
      }

      return false;
    }

    var _default = valueEqual;
    exports.default = _default;
  }, {}],
  "../node_modules/tiny-warning/dist/tiny-warning.esm.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var isProduction = "development" === 'production';

    function warning(condition, message) {
      if (!isProduction) {
        if (condition) {
          return;
        }

        var text = "Warning: " + message;

        if (typeof console !== 'undefined') {
          console.warn(text);
        }

        try {
          throw Error(text);
        } catch (x) {}
      }
    }

    var _default = warning;
    exports.default = _default;
  }, {}],
  "../node_modules/tiny-invariant/dist/tiny-invariant.esm.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var isProduction = "development" === 'production';
    var prefix = 'Invariant failed';

    function invariant(condition, message) {
      if (condition) {
        return;
      }

      if (isProduction) {
        throw new Error(prefix);
      }

      throw new Error(prefix + ": " + (message || ''));
    }

    var _default = invariant;
    exports.default = _default;
  }, {}],
  "../node_modules/history/esm/history.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createBrowserHistory = createBrowserHistory;
    exports.createHashHistory = createHashHistory;
    exports.createMemoryHistory = createMemoryHistory;
    exports.createLocation = createLocation;
    exports.locationsAreEqual = locationsAreEqual;
    exports.parsePath = parsePath;
    exports.createPath = createPath;

    var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/extends"));

    var _resolvePathname = _interopRequireDefault(require("resolve-pathname"));

    var _valueEqual = _interopRequireDefault(require("value-equal"));

    var _tinyWarning = _interopRequireDefault(require("tiny-warning"));

    var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function addLeadingSlash(path) {
      return path.charAt(0) === '/' ? path : '/' + path;
    }

    function stripLeadingSlash(path) {
      return path.charAt(0) === '/' ? path.substr(1) : path;
    }

    function hasBasename(path, prefix) {
      return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
    }

    function stripBasename(path, prefix) {
      return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
    }

    function stripTrailingSlash(path) {
      return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
    }

    function parsePath(path) {
      var pathname = path || '/';
      var search = '';
      var hash = '';
      var hashIndex = pathname.indexOf('#');

      if (hashIndex !== -1) {
        hash = pathname.substr(hashIndex);
        pathname = pathname.substr(0, hashIndex);
      }

      var searchIndex = pathname.indexOf('?');

      if (searchIndex !== -1) {
        search = pathname.substr(searchIndex);
        pathname = pathname.substr(0, searchIndex);
      }

      return {
        pathname: pathname,
        search: search === '?' ? '' : search,
        hash: hash === '#' ? '' : hash
      };
    }

    function createPath(location) {
      var pathname = location.pathname,
          search = location.search,
          hash = location.hash;
      var path = pathname || '/';
      if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
      if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
      return path;
    }

    function createLocation(path, state, key, currentLocation) {
      var location;

      if (typeof path === 'string') {
        // Two-arg form: push(path, state)
        location = parsePath(path);
        location.state = state;
      } else {
        // One-arg form: push(location)
        location = (0, _extends2.default)({}, path);
        if (location.pathname === undefined) location.pathname = '';

        if (location.search) {
          if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
        } else {
          location.search = '';
        }

        if (location.hash) {
          if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
        } else {
          location.hash = '';
        }

        if (state !== undefined && location.state === undefined) location.state = state;
      }

      try {
        location.pathname = decodeURI(location.pathname);
      } catch (e) {
        if (e instanceof URIError) {
          throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
        } else {
          throw e;
        }
      }

      if (key) location.key = key;

      if (currentLocation) {
        // Resolve incomplete/relative pathname relative to current location.
        if (!location.pathname) {
          location.pathname = currentLocation.pathname;
        } else if (location.pathname.charAt(0) !== '/') {
          location.pathname = (0, _resolvePathname.default)(location.pathname, currentLocation.pathname);
        }
      } else {
        // When there is no prior location and pathname is empty, set it to /
        if (!location.pathname) {
          location.pathname = '/';
        }
      }

      return location;
    }

    function locationsAreEqual(a, b) {
      return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual.default)(a.state, b.state);
    }

    function createTransitionManager() {
      var prompt = null;

      function setPrompt(nextPrompt) {
        "development" !== "production" ? (0, _tinyWarning.default)(prompt == null, 'A history supports only one prompt at a time') : void 0;
        prompt = nextPrompt;
        return function () {
          if (prompt === nextPrompt) prompt = null;
        };
      }

      function confirmTransitionTo(location, action, getUserConfirmation, callback) {
        // TODO: If another transition starts while we're still confirming
        // the previous one, we may end up in a weird state. Figure out the
        // best way to handle this.
        if (prompt != null) {
          var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

          if (typeof result === 'string') {
            if (typeof getUserConfirmation === 'function') {
              getUserConfirmation(result, callback);
            } else {
              "development" !== "production" ? (0, _tinyWarning.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : void 0;
              callback(true);
            }
          } else {
            // Return false from a transition hook to cancel the transition.
            callback(result !== false);
          }
        } else {
          callback(true);
        }
      }

      var listeners = [];

      function appendListener(fn) {
        var isActive = true;

        function listener() {
          if (isActive) fn.apply(void 0, arguments);
        }

        listeners.push(listener);
        return function () {
          isActive = false;
          listeners = listeners.filter(function (item) {
            return item !== listener;
          });
        };
      }

      function notifyListeners() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        listeners.forEach(function (listener) {
          return listener.apply(void 0, args);
        });
      }

      return {
        setPrompt: setPrompt,
        confirmTransitionTo: confirmTransitionTo,
        appendListener: appendListener,
        notifyListeners: notifyListeners
      };
    }

    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

    function getConfirmation(message, callback) {
      callback(window.confirm(message)); // eslint-disable-line no-alert
    }
    /**
     * Returns true if the HTML5 history API is supported. Taken from Modernizr.
     *
     * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
     * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
     * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
     */


    function supportsHistory() {
      var ua = window.navigator.userAgent;
      if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
      return window.history && 'pushState' in window.history;
    }
    /**
     * Returns true if browser fires popstate on hash change.
     * IE10 and IE11 do not.
     */


    function supportsPopStateOnHashChange() {
      return window.navigator.userAgent.indexOf('Trident') === -1;
    }
    /**
     * Returns false if using go(n) with hash history causes a full page reload.
     */


    function supportsGoWithoutReloadUsingHash() {
      return window.navigator.userAgent.indexOf('Firefox') === -1;
    }
    /**
     * Returns true if a given popstate event is an extraneous WebKit event.
     * Accounts for the fact that Chrome on iOS fires real popstate events
     * containing undefined state when pressing the back button.
     */


    function isExtraneousPopstateEvent(event) {
      return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
    }

    var PopStateEvent = 'popstate';
    var HashChangeEvent = 'hashchange';

    function getHistoryState() {
      try {
        return window.history.state || {};
      } catch (e) {
        // IE 11 sometimes throws when accessing window.history.state
        // See https://github.com/ReactTraining/history/pull/289
        return {};
      }
    }
    /**
     * Creates a history object that uses the HTML5 history API including
     * pushState, replaceState, and the popstate event.
     */


    function createBrowserHistory(props) {
      if (props === void 0) {
        props = {};
      }

      !canUseDOM ? "development" !== "production" ? (0, _tinyInvariant.default)(false, 'Browser history needs a DOM') : (0, _tinyInvariant.default)(false) : void 0;
      var globalHistory = window.history;
      var canUseHistory = supportsHistory();
      var needsHashChangeListener = !supportsPopStateOnHashChange();
      var _props = props,
          _props$forceRefresh = _props.forceRefresh,
          forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
          _props$getUserConfirm = _props.getUserConfirmation,
          getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
          _props$keyLength = _props.keyLength,
          keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
      var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

      function getDOMLocation(historyState) {
        var _ref = historyState || {},
            key = _ref.key,
            state = _ref.state;

        var _window$location = window.location,
            pathname = _window$location.pathname,
            search = _window$location.search,
            hash = _window$location.hash;
        var path = pathname + search + hash;
        "development" !== "production" ? (0, _tinyWarning.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : void 0;
        if (basename) path = stripBasename(path, basename);
        return createLocation(path, state, key);
      }

      function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
      }

      var transitionManager = createTransitionManager();

      function setState(nextState) {
        (0, _extends2.default)(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
      }

      function handlePopState(event) {
        // Ignore extraneous popstate events in WebKit.
        if (isExtraneousPopstateEvent(event)) return;
        handlePop(getDOMLocation(event.state));
      }

      function handleHashChange() {
        handlePop(getDOMLocation(getHistoryState()));
      }

      var forceNextPop = false;

      function handlePop(location) {
        if (forceNextPop) {
          forceNextPop = false;
          setState();
        } else {
          var action = 'POP';
          transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (ok) {
              setState({
                action: action,
                location: location
              });
            } else {
              revertPop(location);
            }
          });
        }
      }

      function revertPop(fromLocation) {
        var toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of keys we've seen in sessionStorage.
        // Instead, we just default to 0 for keys we don't know.

        var toIndex = allKeys.indexOf(toLocation.key);
        if (toIndex === -1) toIndex = 0;
        var fromIndex = allKeys.indexOf(fromLocation.key);
        if (fromIndex === -1) fromIndex = 0;
        var delta = toIndex - fromIndex;

        if (delta) {
          forceNextPop = true;
          go(delta);
        }
      }

      var initialLocation = getDOMLocation(getHistoryState());
      var allKeys = [initialLocation.key]; // Public interface

      function createHref(location) {
        return basename + createPath(location);
      }

      function push(path, state) {
        "development" !== "production" ? (0, _tinyWarning.default)(!(_typeof3(path) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
        var action = 'PUSH';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          var href = createHref(location);
          var key = location.key,
              state = location.state;

          if (canUseHistory) {
            globalHistory.pushState({
              key: key,
              state: state
            }, null, href);

            if (forceRefresh) {
              window.location.href = href;
            } else {
              var prevIndex = allKeys.indexOf(history.location.key);
              var nextKeys = allKeys.slice(0, prevIndex + 1);
              nextKeys.push(location.key);
              allKeys = nextKeys;
              setState({
                action: action,
                location: location
              });
            }
          } else {
            "development" !== "production" ? (0, _tinyWarning.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : void 0;
            window.location.href = href;
          }
        });
      }

      function replace(path, state) {
        "development" !== "production" ? (0, _tinyWarning.default)(!(_typeof3(path) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
        var action = 'REPLACE';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          var href = createHref(location);
          var key = location.key,
              state = location.state;

          if (canUseHistory) {
            globalHistory.replaceState({
              key: key,
              state: state
            }, null, href);

            if (forceRefresh) {
              window.location.replace(href);
            } else {
              var prevIndex = allKeys.indexOf(history.location.key);
              if (prevIndex !== -1) allKeys[prevIndex] = location.key;
              setState({
                action: action,
                location: location
              });
            }
          } else {
            "development" !== "production" ? (0, _tinyWarning.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : void 0;
            window.location.replace(href);
          }
        });
      }

      function go(n) {
        globalHistory.go(n);
      }

      function goBack() {
        go(-1);
      }

      function goForward() {
        go(1);
      }

      var listenerCount = 0;

      function checkDOMListeners(delta) {
        listenerCount += delta;

        if (listenerCount === 1 && delta === 1) {
          window.addEventListener(PopStateEvent, handlePopState);
          if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
        } else if (listenerCount === 0) {
          window.removeEventListener(PopStateEvent, handlePopState);
          if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
        }
      }

      var isBlocked = false;

      function block(prompt) {
        if (prompt === void 0) {
          prompt = false;
        }

        var unblock = transitionManager.setPrompt(prompt);

        if (!isBlocked) {
          checkDOMListeners(1);
          isBlocked = true;
        }

        return function () {
          if (isBlocked) {
            isBlocked = false;
            checkDOMListeners(-1);
          }

          return unblock();
        };
      }

      function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function () {
          checkDOMListeners(-1);
          unlisten();
        };
      }

      var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
      };
      return history;
    }

    var HashChangeEvent$1 = 'hashchange';
    var HashPathCoders = {
      hashbang: {
        encodePath: function encodePath(path) {
          return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
        },
        decodePath: function decodePath(path) {
          return path.charAt(0) === '!' ? path.substr(1) : path;
        }
      },
      noslash: {
        encodePath: stripLeadingSlash,
        decodePath: addLeadingSlash
      },
      slash: {
        encodePath: addLeadingSlash,
        decodePath: addLeadingSlash
      }
    };

    function stripHash(url) {
      var hashIndex = url.indexOf('#');
      return hashIndex === -1 ? url : url.slice(0, hashIndex);
    }

    function getHashPath() {
      // We can't use window.location.hash here because it's not
      // consistent across browsers - Firefox will pre-decode it!
      var href = window.location.href;
      var hashIndex = href.indexOf('#');
      return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
    }

    function pushHashPath(path) {
      window.location.hash = path;
    }

    function replaceHashPath(path) {
      window.location.replace(stripHash(window.location.href) + '#' + path);
    }

    function createHashHistory(props) {
      if (props === void 0) {
        props = {};
      }

      !canUseDOM ? "development" !== "production" ? (0, _tinyInvariant.default)(false, 'Hash history needs a DOM') : (0, _tinyInvariant.default)(false) : void 0;
      var globalHistory = window.history;
      var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
      var _props = props,
          _props$getUserConfirm = _props.getUserConfirmation,
          getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
          _props$hashType = _props.hashType,
          hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
      var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
      var _HashPathCoders$hashT = HashPathCoders[hashType],
          encodePath = _HashPathCoders$hashT.encodePath,
          decodePath = _HashPathCoders$hashT.decodePath;

      function getDOMLocation() {
        var path = decodePath(getHashPath());
        "development" !== "production" ? (0, _tinyWarning.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : void 0;
        if (basename) path = stripBasename(path, basename);
        return createLocation(path);
      }

      var transitionManager = createTransitionManager();

      function setState(nextState) {
        (0, _extends2.default)(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
      }

      var forceNextPop = false;
      var ignorePath = null;

      function locationsAreEqual$$1(a, b) {
        return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
      }

      function handleHashChange() {
        var path = getHashPath();
        var encodedPath = encodePath(path);

        if (path !== encodedPath) {
          // Ensure we always have a properly-encoded hash.
          replaceHashPath(encodedPath);
        } else {
          var location = getDOMLocation();
          var prevLocation = history.location;
          if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.

          if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

          ignorePath = null;
          handlePop(location);
        }
      }

      function handlePop(location) {
        if (forceNextPop) {
          forceNextPop = false;
          setState();
        } else {
          var action = 'POP';
          transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (ok) {
              setState({
                action: action,
                location: location
              });
            } else {
              revertPop(location);
            }
          });
        }
      }

      function revertPop(fromLocation) {
        var toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of paths we've seen in sessionStorage.
        // Instead, we just default to 0 for paths we don't know.

        var toIndex = allPaths.lastIndexOf(createPath(toLocation));
        if (toIndex === -1) toIndex = 0;
        var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
        if (fromIndex === -1) fromIndex = 0;
        var delta = toIndex - fromIndex;

        if (delta) {
          forceNextPop = true;
          go(delta);
        }
      } // Ensure the hash is encoded properly before doing anything else.


      var path = getHashPath();
      var encodedPath = encodePath(path);
      if (path !== encodedPath) replaceHashPath(encodedPath);
      var initialLocation = getDOMLocation();
      var allPaths = [createPath(initialLocation)]; // Public interface

      function createHref(location) {
        var baseTag = document.querySelector('base');
        var href = '';

        if (baseTag && baseTag.getAttribute('href')) {
          href = stripHash(window.location.href);
        }

        return href + '#' + encodePath(basename + createPath(location));
      }

      function push(path, state) {
        "development" !== "production" ? (0, _tinyWarning.default)(state === undefined, 'Hash history cannot push state; it is ignored') : void 0;
        var action = 'PUSH';
        var location = createLocation(path, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          var path = createPath(location);
          var encodedPath = encodePath(basename + path);
          var hashChanged = getHashPath() !== encodedPath;

          if (hashChanged) {
            // We cannot tell if a hashchange was caused by a PUSH, so we'd
            // rather setState here and ignore the hashchange. The caveat here
            // is that other hash histories in the page will consider it a POP.
            ignorePath = path;
            pushHashPath(encodedPath);
            var prevIndex = allPaths.lastIndexOf(createPath(history.location));
            var nextPaths = allPaths.slice(0, prevIndex + 1);
            nextPaths.push(path);
            allPaths = nextPaths;
            setState({
              action: action,
              location: location
            });
          } else {
            "development" !== "production" ? (0, _tinyWarning.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : void 0;
            setState();
          }
        });
      }

      function replace(path, state) {
        "development" !== "production" ? (0, _tinyWarning.default)(state === undefined, 'Hash history cannot replace state; it is ignored') : void 0;
        var action = 'REPLACE';
        var location = createLocation(path, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          var path = createPath(location);
          var encodedPath = encodePath(basename + path);
          var hashChanged = getHashPath() !== encodedPath;

          if (hashChanged) {
            // We cannot tell if a hashchange was caused by a REPLACE, so we'd
            // rather setState here and ignore the hashchange. The caveat here
            // is that other hash histories in the page will consider it a POP.
            ignorePath = path;
            replaceHashPath(encodedPath);
          }

          var prevIndex = allPaths.indexOf(createPath(history.location));
          if (prevIndex !== -1) allPaths[prevIndex] = path;
          setState({
            action: action,
            location: location
          });
        });
      }

      function go(n) {
        "development" !== "production" ? (0, _tinyWarning.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;
        globalHistory.go(n);
      }

      function goBack() {
        go(-1);
      }

      function goForward() {
        go(1);
      }

      var listenerCount = 0;

      function checkDOMListeners(delta) {
        listenerCount += delta;

        if (listenerCount === 1 && delta === 1) {
          window.addEventListener(HashChangeEvent$1, handleHashChange);
        } else if (listenerCount === 0) {
          window.removeEventListener(HashChangeEvent$1, handleHashChange);
        }
      }

      var isBlocked = false;

      function block(prompt) {
        if (prompt === void 0) {
          prompt = false;
        }

        var unblock = transitionManager.setPrompt(prompt);

        if (!isBlocked) {
          checkDOMListeners(1);
          isBlocked = true;
        }

        return function () {
          if (isBlocked) {
            isBlocked = false;
            checkDOMListeners(-1);
          }

          return unblock();
        };
      }

      function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function () {
          checkDOMListeners(-1);
          unlisten();
        };
      }

      var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
      };
      return history;
    }

    function clamp(n, lowerBound, upperBound) {
      return Math.min(Math.max(n, lowerBound), upperBound);
    }
    /**
     * Creates a history object that stores locations in memory.
     */


    function createMemoryHistory(props) {
      if (props === void 0) {
        props = {};
      }

      var _props = props,
          getUserConfirmation = _props.getUserConfirmation,
          _props$initialEntries = _props.initialEntries,
          initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
          _props$initialIndex = _props.initialIndex,
          initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
          _props$keyLength = _props.keyLength,
          keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
      var transitionManager = createTransitionManager();

      function setState(nextState) {
        (0, _extends2.default)(history, nextState);
        history.length = history.entries.length;
        transitionManager.notifyListeners(history.location, history.action);
      }

      function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
      }

      var index = clamp(initialIndex, 0, initialEntries.length - 1);
      var entries = initialEntries.map(function (entry) {
        return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
      }); // Public interface

      var createHref = createPath;

      function push(path, state) {
        "development" !== "production" ? (0, _tinyWarning.default)(!(_typeof3(path) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
        var action = 'PUSH';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          var prevIndex = history.index;
          var nextIndex = prevIndex + 1;
          var nextEntries = history.entries.slice(0);

          if (nextEntries.length > nextIndex) {
            nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
          } else {
            nextEntries.push(location);
          }

          setState({
            action: action,
            location: location,
            index: nextIndex,
            entries: nextEntries
          });
        });
      }

      function replace(path, state) {
        "development" !== "production" ? (0, _tinyWarning.default)(!(_typeof3(path) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
        var action = 'REPLACE';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          history.entries[history.index] = location;
          setState({
            action: action,
            location: location
          });
        });
      }

      function go(n) {
        var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
        var action = 'POP';
        var location = history.entries[nextIndex];
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (ok) {
            setState({
              action: action,
              location: location,
              index: nextIndex
            });
          } else {
            // Mimic the behavior of DOM histories by
            // causing a render after a cancelled POP.
            setState();
          }
        });
      }

      function goBack() {
        go(-1);
      }

      function goForward() {
        go(1);
      }

      function canGo(n) {
        var nextIndex = history.index + n;
        return nextIndex >= 0 && nextIndex < history.entries.length;
      }

      function block(prompt) {
        if (prompt === void 0) {
          prompt = false;
        }

        return transitionManager.setPrompt(prompt);
      }

      function listen(listener) {
        return transitionManager.appendListener(listener);
      }

      var history = {
        length: entries.length,
        action: 'POP',
        location: entries[index],
        index: index,
        entries: entries,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        canGo: canGo,
        block: block,
        listen: listen
      };
      return history;
    }
  }, {
    "@babel/runtime/helpers/esm/extends": "../node_modules/@babel/runtime/helpers/esm/extends.js",
    "resolve-pathname": "../node_modules/resolve-pathname/esm/resolve-pathname.js",
    "value-equal": "../node_modules/value-equal/esm/value-equal.js",
    "tiny-warning": "../node_modules/tiny-warning/dist/tiny-warning.esm.js",
    "tiny-invariant": "../node_modules/tiny-invariant/dist/tiny-invariant.esm.js"
  }],
  "../node_modules/mini-create-react-context/dist/esm/index.js": [function (require, module, exports) {
    var global = arguments[3];
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _react = _interopRequireWildcard(require("react"));

    var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/inheritsLoose"));

    var _propTypes = _interopRequireDefault(require("prop-types"));

    var _tinyWarning = _interopRequireDefault(require("tiny-warning"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = new WeakMap();

      _getRequireWildcardCache = function _getRequireWildcardCache() {
        return cache;
      };

      return cache;
    }

    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache();

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};

    function getUniqueId() {
      var key = '__global_unique_id__';
      return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
    }

    function objectIs(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }

    function createEventEmitter(value) {
      var handlers = [];
      return {
        on: function on(handler) {
          handlers.push(handler);
        },
        off: function off(handler) {
          handlers = handlers.filter(function (h) {
            return h !== handler;
          });
        },
        get: function get() {
          return value;
        },
        set: function set(newValue, changedBits) {
          value = newValue;
          handlers.forEach(function (handler) {
            return handler(value, changedBits);
          });
        }
      };
    }

    function onlyChild(children) {
      return Array.isArray(children) ? children[0] : children;
    }

    function createReactContext(defaultValue, calculateChangedBits) {
      var _Provider$childContex, _Consumer$contextType;

      var contextProp = '__create-react-context-' + getUniqueId() + '__';

      var Provider = /*#__PURE__*/function (_Component) {
        (0, _inheritsLoose2.default)(Provider, _Component);

        function Provider() {
          var _this;

          _this = _Component.apply(this, arguments) || this;
          _this.emitter = createEventEmitter(_this.props.value);
          return _this;
        }

        var _proto = Provider.prototype;

        _proto.getChildContext = function getChildContext() {
          var _ref;

          return _ref = {}, _ref[contextProp] = this.emitter, _ref;
        };

        _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
          if (this.props.value !== nextProps.value) {
            var oldValue = this.props.value;
            var newValue = nextProps.value;
            var changedBits;

            if (objectIs(oldValue, newValue)) {
              changedBits = 0;
            } else {
              changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

              if ("development" !== 'production') {
                (0, _tinyWarning.default)((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);
              }

              changedBits |= 0;

              if (changedBits !== 0) {
                this.emitter.set(nextProps.value, changedBits);
              }
            }
          }
        };

        _proto.render = function render() {
          return this.props.children;
        };

        return Provider;
      }(_react.Component);

      Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes.default.object.isRequired, _Provider$childContex);

      var Consumer = /*#__PURE__*/function (_Component2) {
        (0, _inheritsLoose2.default)(Consumer, _Component2);

        function Consumer() {
          var _this2;

          _this2 = _Component2.apply(this, arguments) || this;
          _this2.state = {
            value: _this2.getValue()
          };

          _this2.onUpdate = function (newValue, changedBits) {
            var observedBits = _this2.observedBits | 0;

            if ((observedBits & changedBits) !== 0) {
              _this2.setState({
                value: _this2.getValue()
              });
            }
          };

          return _this2;
        }

        var _proto2 = Consumer.prototype;

        _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
          var observedBits = nextProps.observedBits;
          this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
        };

        _proto2.componentDidMount = function componentDidMount() {
          if (this.context[contextProp]) {
            this.context[contextProp].on(this.onUpdate);
          }

          var observedBits = this.props.observedBits;
          this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
        };

        _proto2.componentWillUnmount = function componentWillUnmount() {
          if (this.context[contextProp]) {
            this.context[contextProp].off(this.onUpdate);
          }
        };

        _proto2.getValue = function getValue() {
          if (this.context[contextProp]) {
            return this.context[contextProp].get();
          } else {
            return defaultValue;
          }
        };

        _proto2.render = function render() {
          return onlyChild(this.props.children)(this.state.value);
        };

        return Consumer;
      }(_react.Component);

      Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes.default.object, _Consumer$contextType);
      return {
        Provider: Provider,
        Consumer: Consumer
      };
    }

    var index = _react.default.createContext || createReactContext;
    var _default = index;
    exports.default = _default;
  }, {
    "react": "../node_modules/react/index.js",
    "@babel/runtime/helpers/esm/inheritsLoose": "../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js",
    "prop-types": "../node_modules/prop-types/index.js",
    "tiny-warning": "../node_modules/tiny-warning/dist/tiny-warning.esm.js"
  }],
  "../node_modules/path-to-regexp/node_modules/isarray/index.js": [function (require, module, exports) {
    module.exports = Array.isArray || function (arr) {
      return Object.prototype.toString.call(arr) == '[object Array]';
    };
  }, {}],
  "../node_modules/path-to-regexp/index.js": [function (require, module, exports) {
    var isarray = require('isarray');
    /**
     * Expose `pathToRegexp`.
     */


    module.exports = pathToRegexp;
    module.exports.parse = parse;
    module.exports.compile = compile;
    module.exports.tokensToFunction = tokensToFunction;
    module.exports.tokensToRegExp = tokensToRegExp;
    /**
     * The main path matching regexp utility.
     *
     * @type {RegExp}
     */

    var PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.
    // This allows the user to escape special characters that won't transform.
    '(\\\\.)', // Match Express-style parameters and un-named parameters with a prefix
    // and optional suffixes. Matches appear as:
    //
    // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
    // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
    // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
    '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
    /**
     * Parse a string for the raw tokens.
     *
     * @param  {string}  str
     * @param  {Object=} options
     * @return {!Array}
     */

    function parse(str, options) {
      var tokens = [];
      var key = 0;
      var index = 0;
      var path = '';
      var defaultDelimiter = options && options.delimiter || '/';
      var res;

      while ((res = PATH_REGEXP.exec(str)) != null) {
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length; // Ignore already escaped sequences.

        if (escaped) {
          path += escaped[1];
          continue;
        }

        var next = str[index];
        var prefix = res[2];
        var name = res[3];
        var capture = res[4];
        var group = res[5];
        var modifier = res[6];
        var asterisk = res[7]; // Push the current path onto the tokens.

        if (path) {
          tokens.push(path);
          path = '';
        }

        var partial = prefix != null && next != null && next !== prefix;
        var repeat = modifier === '+' || modifier === '*';
        var optional = modifier === '?' || modifier === '*';
        var delimiter = res[2] || defaultDelimiter;
        var pattern = capture || group;
        tokens.push({
          name: name || key++,
          prefix: prefix || '',
          delimiter: delimiter,
          optional: optional,
          repeat: repeat,
          partial: partial,
          asterisk: !!asterisk,
          pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
        });
      } // Match any characters still remaining.


      if (index < str.length) {
        path += str.substr(index);
      } // If the path exists, push it onto the end.


      if (path) {
        tokens.push(path);
      }

      return tokens;
    }
    /**
     * Compile a string to a template function for the path.
     *
     * @param  {string}             str
     * @param  {Object=}            options
     * @return {!function(Object=, Object=)}
     */


    function compile(str, options) {
      return tokensToFunction(parse(str, options), options);
    }
    /**
     * Prettier encoding of URI path segments.
     *
     * @param  {string}
     * @return {string}
     */


    function encodeURIComponentPretty(str) {
      return encodeURI(str).replace(/[\/?#]/g, function (c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    /**
     * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
     *
     * @param  {string}
     * @return {string}
     */


    function encodeAsterisk(str) {
      return encodeURI(str).replace(/[?#]/g, function (c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    /**
     * Expose a method for transforming tokens into the path function.
     */


    function tokensToFunction(tokens, options) {
      // Compile all the tokens into regexps.
      var matches = new Array(tokens.length); // Compile all the patterns before compilation.

      for (var i = 0; i < tokens.length; i++) {
        if (_typeof3(tokens[i]) === 'object') {
          matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
        }
      }

      return function (obj, opts) {
        var path = '';
        var data = obj || {};
        var options = opts || {};
        var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

        for (var i = 0; i < tokens.length; i++) {
          var token = tokens[i];

          if (typeof token === 'string') {
            path += token;
            continue;
          }

          var value = data[token.name];
          var segment;

          if (value == null) {
            if (token.optional) {
              // Prepend partial segment prefixes.
              if (token.partial) {
                path += token.prefix;
              }

              continue;
            } else {
              throw new TypeError('Expected "' + token.name + '" to be defined');
            }
          }

          if (isarray(value)) {
            if (!token.repeat) {
              throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
            }

            if (value.length === 0) {
              if (token.optional) {
                continue;
              } else {
                throw new TypeError('Expected "' + token.name + '" to not be empty');
              }
            }

            for (var j = 0; j < value.length; j++) {
              segment = encode(value[j]);

              if (!matches[i].test(segment)) {
                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
              }

              path += (j === 0 ? token.prefix : token.delimiter) + segment;
            }

            continue;
          }

          segment = token.asterisk ? encodeAsterisk(value) : encode(value);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
          }

          path += token.prefix + segment;
        }

        return path;
      };
    }
    /**
     * Escape a regular expression string.
     *
     * @param  {string} str
     * @return {string}
     */


    function escapeString(str) {
      return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
    }
    /**
     * Escape the capturing group by escaping special characters and meaning.
     *
     * @param  {string} group
     * @return {string}
     */


    function escapeGroup(group) {
      return group.replace(/([=!:$\/()])/g, '\\$1');
    }
    /**
     * Attach the keys as a property of the regexp.
     *
     * @param  {!RegExp} re
     * @param  {Array}   keys
     * @return {!RegExp}
     */


    function attachKeys(re, keys) {
      re.keys = keys;
      return re;
    }
    /**
     * Get the flags for a regexp from the options.
     *
     * @param  {Object} options
     * @return {string}
     */


    function flags(options) {
      return options && options.sensitive ? '' : 'i';
    }
    /**
     * Pull out keys from a regexp.
     *
     * @param  {!RegExp} path
     * @param  {!Array}  keys
     * @return {!RegExp}
     */


    function regexpToRegexp(path, keys) {
      // Use a negative lookahead to match only capturing groups.
      var groups = path.source.match(/\((?!\?)/g);

      if (groups) {
        for (var i = 0; i < groups.length; i++) {
          keys.push({
            name: i,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            partial: false,
            asterisk: false,
            pattern: null
          });
        }
      }

      return attachKeys(path, keys);
    }
    /**
     * Transform an array into a regexp.
     *
     * @param  {!Array}  path
     * @param  {Array}   keys
     * @param  {!Object} options
     * @return {!RegExp}
     */


    function arrayToRegexp(path, keys, options) {
      var parts = [];

      for (var i = 0; i < path.length; i++) {
        parts.push(pathToRegexp(path[i], keys, options).source);
      }

      var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
      return attachKeys(regexp, keys);
    }
    /**
     * Create a path regexp from string input.
     *
     * @param  {string}  path
     * @param  {!Array}  keys
     * @param  {!Object} options
     * @return {!RegExp}
     */


    function stringToRegexp(path, keys, options) {
      return tokensToRegExp(parse(path, options), keys, options);
    }
    /**
     * Expose a function for taking tokens and returning a RegExp.
     *
     * @param  {!Array}          tokens
     * @param  {(Array|Object)=} keys
     * @param  {Object=}         options
     * @return {!RegExp}
     */


    function tokensToRegExp(tokens, keys, options) {
      if (!isarray(keys)) {
        options =
        /** @type {!Object} */
        keys || options;
        keys = [];
      }

      options = options || {};
      var strict = options.strict;
      var end = options.end !== false;
      var route = ''; // Iterate over the tokens and create our regexp string.

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          route += escapeString(token);
        } else {
          var prefix = escapeString(token.prefix);
          var capture = '(?:' + token.pattern + ')';
          keys.push(token);

          if (token.repeat) {
            capture += '(?:' + prefix + capture + ')*';
          }

          if (token.optional) {
            if (!token.partial) {
              capture = '(?:' + prefix + '(' + capture + '))?';
            } else {
              capture = prefix + '(' + capture + ')?';
            }
          } else {
            capture = prefix + '(' + capture + ')';
          }

          route += capture;
        }
      }

      var delimiter = escapeString(options.delimiter || '/');
      var endsWithDelimiter = route.slice(-delimiter.length) === delimiter; // In non-strict mode we allow a slash at the end of match. If the path to
      // match already ends with a slash, we remove it for consistency. The slash
      // is valid at the end of a path match, not in the middle. This is important
      // in non-ending mode, where "/test/" shouldn't match "/test//route".

      if (!strict) {
        route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
      }

      if (end) {
        route += '$';
      } else {
        // In non-ending mode, we need the capturing groups to match as much as
        // possible by using a positive lookahead to the end or next path segment.
        route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
      }

      return attachKeys(new RegExp('^' + route, flags(options)), keys);
    }
    /**
     * Normalize the given path string, returning a regular expression.
     *
     * An empty array can be passed in for the keys, which will hold the
     * placeholder key descriptions. For example, using `/user/:id`, `keys` will
     * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
     *
     * @param  {(string|RegExp|Array)} path
     * @param  {(Array|Object)=}       keys
     * @param  {Object=}               options
     * @return {!RegExp}
     */


    function pathToRegexp(path, keys, options) {
      if (!isarray(keys)) {
        options =
        /** @type {!Object} */
        keys || options;
        keys = [];
      }

      options = options || {};

      if (path instanceof RegExp) {
        return regexpToRegexp(path,
        /** @type {!Array} */
        keys);
      }

      if (isarray(path)) {
        return arrayToRegexp(
        /** @type {!Array} */
        path,
        /** @type {!Array} */
        keys, options);
      }

      return stringToRegexp(
      /** @type {string} */
      path,
      /** @type {!Array} */
      keys, options);
    }
  }, {
    "isarray": "../node_modules/path-to-regexp/node_modules/isarray/index.js"
  }],
  "../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _objectWithoutPropertiesLoose;

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }
  }, {}],
  "../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js": [function (require, module, exports) {
    'use strict';

    var reactIs = require('react-is');
    /**
     * Copyright 2015, Yahoo! Inc.
     * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
     */


    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      '$$typeof': true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      '$$typeof': true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

    function getStatics(component) {
      // React v16.11 and below
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      } // React v16.12 and above


      return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
    }

    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;

    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);

          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);

        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];

          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

            try {
              // Avoid failures from read-only properties
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {}
          }
        }
      }

      return targetComponent;
    }

    module.exports = hoistNonReactStatics;
  }, {
    "react-is": "../node_modules/react-is/index.js"
  }],
  "../node_modules/react-router/esm/react-router.js": [function (require, module, exports) {
    var global = arguments[3];
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Prompt = Prompt;
    exports.Redirect = Redirect;
    exports.generatePath = generatePath;
    exports.matchPath = matchPath;
    exports.useHistory = useHistory;
    exports.useLocation = useLocation;
    exports.useParams = useParams;
    exports.useRouteMatch = useRouteMatch;
    exports.withRouter = withRouter;
    exports.__RouterContext = exports.__HistoryContext = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.MemoryRouter = void 0;

    var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/inheritsLoose"));

    var _react = _interopRequireDefault(require("react"));

    var _propTypes = _interopRequireDefault(require("prop-types"));

    var _history = require("history");

    var _tinyWarning = _interopRequireDefault(require("tiny-warning"));

    var _miniCreateReactContext = _interopRequireDefault(require("mini-create-react-context"));

    var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));

    var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/extends"));

    var _pathToRegexp = _interopRequireDefault(require("path-to-regexp"));

    var _reactIs = require("react-is");

    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose"));

    var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    } // TODO: Replace with React.createContext once we can assume React 16+


    var createNamedContext = function createNamedContext(name) {
      var context = (0, _miniCreateReactContext.default)();
      context.displayName = name;
      return context;
    };

    var historyContext = /*#__PURE__*/createNamedContext("Router-History"); // TODO: Replace with React.createContext once we can assume React 16+

    exports.__HistoryContext = historyContext;

    var createNamedContext$1 = function createNamedContext(name) {
      var context = (0, _miniCreateReactContext.default)();
      context.displayName = name;
      return context;
    };

    var context = /*#__PURE__*/createNamedContext$1("Router");
    /**
     * The public API for putting history on context.
     */

    exports.__RouterContext = context;

    var Router = /*#__PURE__*/function (_React$Component) {
      (0, _inheritsLoose2.default)(Router, _React$Component);

      Router.computeRootMatch = function computeRootMatch(pathname) {
        return {
          path: "/",
          url: "/",
          params: {},
          isExact: pathname === "/"
        };
      };

      function Router(props) {
        var _this;

        _this = _React$Component.call(this, props) || this;
        _this.state = {
          location: props.history.location
        }; // This is a bit of a hack. We have to start listening for location
        // changes here in the constructor in case there are any <Redirect>s
        // on the initial render. If there are, they will replace/push when
        // they mount and since cDM fires in children before parents, we may
        // get a new location before the <Router> is mounted.

        _this._isMounted = false;
        _this._pendingLocation = null;

        if (!props.staticContext) {
          _this.unlisten = props.history.listen(function (location) {
            if (_this._isMounted) {
              _this.setState({
                location: location
              });
            } else {
              _this._pendingLocation = location;
            }
          });
        }

        return _this;
      }

      var _proto = Router.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this._isMounted = true;

        if (this._pendingLocation) {
          this.setState({
            location: this._pendingLocation
          });
        }
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.unlisten) this.unlisten();
      };

      _proto.render = function render() {
        return _react.default.createElement(context.Provider, {
          value: {
            history: this.props.history,
            location: this.state.location,
            match: Router.computeRootMatch(this.state.location.pathname),
            staticContext: this.props.staticContext
          }
        }, _react.default.createElement(historyContext.Provider, {
          children: this.props.children || null,
          value: this.props.history
        }));
      };

      return Router;
    }(_react.default.Component);

    exports.Router = Router;

    if ("development" !== "production") {
      Router.propTypes = {
        children: _propTypes.default.node,
        history: _propTypes.default.object.isRequired,
        staticContext: _propTypes.default.object
      };

      Router.prototype.componentDidUpdate = function (prevProps) {
        "development" !== "production" ? (0, _tinyWarning.default)(prevProps.history === this.props.history, "You cannot change <Router history>") : void 0;
      };
    }
    /**
     * The public API for a <Router> that stores location in memory.
     */


    var MemoryRouter = /*#__PURE__*/function (_React$Component) {
      (0, _inheritsLoose2.default)(MemoryRouter, _React$Component);

      function MemoryRouter() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.history = (0, _history.createMemoryHistory)(_this.props);
        return _this;
      }

      var _proto = MemoryRouter.prototype;

      _proto.render = function render() {
        return _react.default.createElement(Router, {
          history: this.history,
          children: this.props.children
        });
      };

      return MemoryRouter;
    }(_react.default.Component);

    exports.MemoryRouter = MemoryRouter;

    if ("development" !== "production") {
      MemoryRouter.propTypes = {
        initialEntries: _propTypes.default.array,
        initialIndex: _propTypes.default.number,
        getUserConfirmation: _propTypes.default.func,
        keyLength: _propTypes.default.number,
        children: _propTypes.default.node
      };

      MemoryRouter.prototype.componentDidMount = function () {
        "development" !== "production" ? (0, _tinyWarning.default)(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.") : void 0;
      };
    }

    var Lifecycle = /*#__PURE__*/function (_React$Component) {
      (0, _inheritsLoose2.default)(Lifecycle, _React$Component);

      function Lifecycle() {
        return _React$Component.apply(this, arguments) || this;
      }

      var _proto = Lifecycle.prototype;

      _proto.componentDidMount = function componentDidMount() {
        if (this.props.onMount) this.props.onMount.call(this, this);
      };

      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.props.onUnmount) this.props.onUnmount.call(this, this);
      };

      _proto.render = function render() {
        return null;
      };

      return Lifecycle;
    }(_react.default.Component);
    /**
     * The public API for prompting the user before navigating away from a screen.
     */


    function Prompt(_ref) {
      var message = _ref.message,
          _ref$when = _ref.when,
          when = _ref$when === void 0 ? true : _ref$when;
      return _react.default.createElement(context.Consumer, null, function (context) {
        !context ? "development" !== "production" ? (0, _tinyInvariant.default)(false, "You should not use <Prompt> outside a <Router>") : (0, _tinyInvariant.default)(false) : void 0;
        if (!when || context.staticContext) return null;
        var method = context.history.block;
        return _react.default.createElement(Lifecycle, {
          onMount: function onMount(self) {
            self.release = method(message);
          },
          onUpdate: function onUpdate(self, prevProps) {
            if (prevProps.message !== message) {
              self.release();
              self.release = method(message);
            }
          },
          onUnmount: function onUnmount(self) {
            self.release();
          },
          message: message
        });
      });
    }

    if ("development" !== "production") {
      var messageType = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]);

      Prompt.propTypes = {
        when: _propTypes.default.bool,
        message: messageType.isRequired
      };
    }

    var cache = {};
    var cacheLimit = 10000;
    var cacheCount = 0;

    function compilePath(path) {
      if (cache[path]) return cache[path];

      var generator = _pathToRegexp.default.compile(path);

      if (cacheCount < cacheLimit) {
        cache[path] = generator;
        cacheCount++;
      }

      return generator;
    }
    /**
     * Public API for generating a URL pathname from a path and parameters.
     */


    function generatePath(path, params) {
      if (path === void 0) {
        path = "/";
      }

      if (params === void 0) {
        params = {};
      }

      return path === "/" ? path : compilePath(path)(params, {
        pretty: true
      });
    }
    /**
     * The public API for navigating programmatically with a component.
     */


    function Redirect(_ref) {
      var computedMatch = _ref.computedMatch,
          to = _ref.to,
          _ref$push = _ref.push,
          push = _ref$push === void 0 ? false : _ref$push;
      return _react.default.createElement(context.Consumer, null, function (context) {
        !context ? "development" !== "production" ? (0, _tinyInvariant.default)(false, "You should not use <Redirect> outside a <Router>") : (0, _tinyInvariant.default)(false) : void 0;
        var history = context.history,
            staticContext = context.staticContext;
        var method = push ? history.push : history.replace;
        var location = (0, _history.createLocation)(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : (0, _extends2.default)({}, to, {
          pathname: generatePath(to.pathname, computedMatch.params)
        }) : to); // When rendering in a static context,
        // set the new location immediately.

        if (staticContext) {
          method(location);
          return null;
        }

        return _react.default.createElement(Lifecycle, {
          onMount: function onMount() {
            method(location);
          },
          onUpdate: function onUpdate(self, prevProps) {
            var prevLocation = (0, _history.createLocation)(prevProps.to);

            if (!(0, _history.locationsAreEqual)(prevLocation, (0, _extends2.default)({}, location, {
              key: prevLocation.key
            }))) {
              method(location);
            }
          },
          to: to
        });
      });
    }

    if ("development" !== "production") {
      Redirect.propTypes = {
        push: _propTypes.default.bool,
        from: _propTypes.default.string,
        to: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]).isRequired
      };
    }

    var cache$1 = {};
    var cacheLimit$1 = 10000;
    var cacheCount$1 = 0;

    function compilePath$1(path, options) {
      var cacheKey = "" + options.end + options.strict + options.sensitive;
      var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
      if (pathCache[path]) return pathCache[path];
      var keys = [];
      var regexp = (0, _pathToRegexp.default)(path, keys, options);
      var result = {
        regexp: regexp,
        keys: keys
      };

      if (cacheCount$1 < cacheLimit$1) {
        pathCache[path] = result;
        cacheCount$1++;
      }

      return result;
    }
    /**
     * Public API for matching a URL pathname to a path.
     */


    function matchPath(pathname, options) {
      if (options === void 0) {
        options = {};
      }

      if (typeof options === "string" || Array.isArray(options)) {
        options = {
          path: options
        };
      }

      var _options = options,
          path = _options.path,
          _options$exact = _options.exact,
          exact = _options$exact === void 0 ? false : _options$exact,
          _options$strict = _options.strict,
          strict = _options$strict === void 0 ? false : _options$strict,
          _options$sensitive = _options.sensitive,
          sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
      var paths = [].concat(path);
      return paths.reduce(function (matched, path) {
        if (!path && path !== "") return null;
        if (matched) return matched;

        var _compilePath = compilePath$1(path, {
          end: exact,
          strict: strict,
          sensitive: sensitive
        }),
            regexp = _compilePath.regexp,
            keys = _compilePath.keys;

        var match = regexp.exec(pathname);
        if (!match) return null;
        var url = match[0],
            values = match.slice(1);
        var isExact = pathname === url;
        if (exact && !isExact) return null;
        return {
          path: path,
          // the path used to match
          url: path === "/" && url === "" ? "/" : url,
          // the matched portion of the URL
          isExact: isExact,
          // whether or not we matched exactly
          params: keys.reduce(function (memo, key, index) {
            memo[key.name] = values[index];
            return memo;
          }, {})
        };
      }, null);
    }

    function isEmptyChildren(children) {
      return _react.default.Children.count(children) === 0;
    }

    function evalChildrenDev(children, props, path) {
      var value = children(props);
      "development" !== "production" ? (0, _tinyWarning.default)(value !== undefined, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`") : void 0;
      return value || null;
    }
    /**
     * The public API for matching a single path and rendering.
     */


    var Route = /*#__PURE__*/function (_React$Component) {
      (0, _inheritsLoose2.default)(Route, _React$Component);

      function Route() {
        return _React$Component.apply(this, arguments) || this;
      }

      var _proto = Route.prototype;

      _proto.render = function render() {
        var _this = this;

        return _react.default.createElement(context.Consumer, null, function (context$1) {
          !context$1 ? "development" !== "production" ? (0, _tinyInvariant.default)(false, "You should not use <Route> outside a <Router>") : (0, _tinyInvariant.default)(false) : void 0;
          var location = _this.props.location || context$1.location;
          var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
          : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;
          var props = (0, _extends2.default)({}, context$1, {
            location: location,
            match: match
          });
          var _this$props = _this.props,
              children = _this$props.children,
              component = _this$props.component,
              render = _this$props.render; // Preact uses an empty array as children by
          // default, so use null if that's the case.

          if (Array.isArray(children) && children.length === 0) {
            children = null;
          }

          return _react.default.createElement(context.Provider, {
            value: props
          }, props.match ? children ? typeof children === "function" ? "development" !== "production" ? evalChildrenDev(children, props, _this.props.path) : children(props) : children : component ? _react.default.createElement(component, props) : render ? render(props) : null : typeof children === "function" ? "development" !== "production" ? evalChildrenDev(children, props, _this.props.path) : children(props) : null);
        });
      };

      return Route;
    }(_react.default.Component);

    exports.Route = Route;

    if ("development" !== "production") {
      Route.propTypes = {
        children: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node]),
        component: function component(props, propName) {
          if (props[propName] && !(0, _reactIs.isValidElementType)(props[propName])) {
            return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
          }
        },
        exact: _propTypes.default.bool,
        location: _propTypes.default.object,
        path: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),
        render: _propTypes.default.func,
        sensitive: _propTypes.default.bool,
        strict: _propTypes.default.bool
      };

      Route.prototype.componentDidMount = function () {
        "development" !== "production" ? (0, _tinyWarning.default)(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") : void 0;
        "development" !== "production" ? (0, _tinyWarning.default)(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") : void 0;
        "development" !== "production" ? (0, _tinyWarning.default)(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") : void 0;
      };

      Route.prototype.componentDidUpdate = function (prevProps) {
        "development" !== "production" ? (0, _tinyWarning.default)(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : void 0;
        "development" !== "production" ? (0, _tinyWarning.default)(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : void 0;
      };
    }

    function addLeadingSlash(path) {
      return path.charAt(0) === "/" ? path : "/" + path;
    }

    function addBasename(basename, location) {
      if (!basename) return location;
      return (0, _extends2.default)({}, location, {
        pathname: addLeadingSlash(basename) + location.pathname
      });
    }

    function stripBasename(basename, location) {
      if (!basename) return location;
      var base = addLeadingSlash(basename);
      if (location.pathname.indexOf(base) !== 0) return location;
      return (0, _extends2.default)({}, location, {
        pathname: location.pathname.substr(base.length)
      });
    }

    function createURL(location) {
      return typeof location === "string" ? location : (0, _history.createPath)(location);
    }

    function staticHandler(methodName) {
      return function () {
        "development" !== "production" ? (0, _tinyInvariant.default)(false, "You cannot %s with <StaticRouter>", methodName) : (0, _tinyInvariant.default)(false);
      };
    }

    function noop() {}
    /**
     * The public top-level API for a "static" <Router>, so-called because it
     * can't actually change the current location. Instead, it just records
     * location changes in a context object. Useful mainly in testing and
     * server-rendering scenarios.
     */


    var StaticRouter = /*#__PURE__*/function (_React$Component) {
      (0, _inheritsLoose2.default)(StaticRouter, _React$Component);

      function StaticRouter() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

        _this.handlePush = function (location) {
          return _this.navigateTo(location, "PUSH");
        };

        _this.handleReplace = function (location) {
          return _this.navigateTo(location, "REPLACE");
        };

        _this.handleListen = function () {
          return noop;
        };

        _this.handleBlock = function () {
          return noop;
        };

        return _this;
      }

      var _proto = StaticRouter.prototype;

      _proto.navigateTo = function navigateTo(location, action) {
        var _this$props = this.props,
            _this$props$basename = _this$props.basename,
            basename = _this$props$basename === void 0 ? "" : _this$props$basename,
            _this$props$context = _this$props.context,
            context = _this$props$context === void 0 ? {} : _this$props$context;
        context.action = action;
        context.location = addBasename(basename, (0, _history.createLocation)(location));
        context.url = createURL(context.location);
      };

      _proto.render = function render() {
        var _this$props2 = this.props,
            _this$props2$basename = _this$props2.basename,
            basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,
            _this$props2$context = _this$props2.context,
            context = _this$props2$context === void 0 ? {} : _this$props2$context,
            _this$props2$location = _this$props2.location,
            location = _this$props2$location === void 0 ? "/" : _this$props2$location,
            rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props2, ["basename", "context", "location"]);
        var history = {
          createHref: function createHref(path) {
            return addLeadingSlash(basename + createURL(path));
          },
          action: "POP",
          location: stripBasename(basename, (0, _history.createLocation)(location)),
          push: this.handlePush,
          replace: this.handleReplace,
          go: staticHandler("go"),
          goBack: staticHandler("goBack"),
          goForward: staticHandler("goForward"),
          listen: this.handleListen,
          block: this.handleBlock
        };
        return _react.default.createElement(Router, (0, _extends2.default)({}, rest, {
          history: history,
          staticContext: context
        }));
      };

      return StaticRouter;
    }(_react.default.Component);

    exports.StaticRouter = StaticRouter;

    if ("development" !== "production") {
      StaticRouter.propTypes = {
        basename: _propTypes.default.string,
        context: _propTypes.default.object,
        location: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object])
      };

      StaticRouter.prototype.componentDidMount = function () {
        "development" !== "production" ? (0, _tinyWarning.default)(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.") : void 0;
      };
    }
    /**
     * The public API for rendering the first <Route> that matches.
     */


    var Switch = /*#__PURE__*/function (_React$Component) {
      (0, _inheritsLoose2.default)(Switch, _React$Component);

      function Switch() {
        return _React$Component.apply(this, arguments) || this;
      }

      var _proto = Switch.prototype;

      _proto.render = function render() {
        var _this = this;

        return _react.default.createElement(context.Consumer, null, function (context) {
          !context ? "development" !== "production" ? (0, _tinyInvariant.default)(false, "You should not use <Switch> outside a <Router>") : (0, _tinyInvariant.default)(false) : void 0;
          var location = _this.props.location || context.location;
          var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
          // here because toArray adds keys to all child elements and we do not want
          // to trigger an unmount/remount for two <Route>s that render the same
          // component at different URLs.

          _react.default.Children.forEach(_this.props.children, function (child) {
            if (match == null && _react.default.isValidElement(child)) {
              element = child;
              var path = child.props.path || child.props.from;
              match = path ? matchPath(location.pathname, (0, _extends2.default)({}, child.props, {
                path: path
              })) : context.match;
            }
          });

          return match ? _react.default.cloneElement(element, {
            location: location,
            computedMatch: match
          }) : null;
        });
      };

      return Switch;
    }(_react.default.Component);

    exports.Switch = Switch;

    if ("development" !== "production") {
      Switch.propTypes = {
        children: _propTypes.default.node,
        location: _propTypes.default.object
      };

      Switch.prototype.componentDidUpdate = function (prevProps) {
        "development" !== "production" ? (0, _tinyWarning.default)(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : void 0;
        "development" !== "production" ? (0, _tinyWarning.default)(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : void 0;
      };
    }
    /**
     * A public higher-order component to access the imperative API
     */


    function withRouter(Component) {
      var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";

      var C = function C(props) {
        var wrappedComponentRef = props.wrappedComponentRef,
            remainingProps = (0, _objectWithoutPropertiesLoose2.default)(props, ["wrappedComponentRef"]);
        return _react.default.createElement(context.Consumer, null, function (context) {
          !context ? "development" !== "production" ? (0, _tinyInvariant.default)(false, "You should not use <" + displayName + " /> outside a <Router>") : (0, _tinyInvariant.default)(false) : void 0;
          return _react.default.createElement(Component, (0, _extends2.default)({}, remainingProps, context, {
            ref: wrappedComponentRef
          }));
        });
      };

      C.displayName = displayName;
      C.WrappedComponent = Component;

      if ("development" !== "production") {
        C.propTypes = {
          wrappedComponentRef: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object])
        };
      }

      return (0, _hoistNonReactStatics.default)(C, Component);
    }

    var useContext = _react.default.useContext;

    function useHistory() {
      if ("development" !== "production") {
        !(typeof useContext === "function") ? "development" !== "production" ? (0, _tinyInvariant.default)(false, "You must use React >= 16.8 in order to use useHistory()") : (0, _tinyInvariant.default)(false) : void 0;
      }

      return useContext(historyContext);
    }

    function useLocation() {
      if ("development" !== "production") {
        !(typeof useContext === "function") ? "development" !== "production" ? (0, _tinyInvariant.default)(false, "You must use React >= 16.8 in order to use useLocation()") : (0, _tinyInvariant.default)(false) : void 0;
      }

      return useContext(context).location;
    }

    function useParams() {
      if ("development" !== "production") {
        !(typeof useContext === "function") ? "development" !== "production" ? (0, _tinyInvariant.default)(false, "You must use React >= 16.8 in order to use useParams()") : (0, _tinyInvariant.default)(false) : void 0;
      }

      var match = useContext(context).match;
      return match ? match.params : {};
    }

    function useRouteMatch(path) {
      if ("development" !== "production") {
        !(typeof useContext === "function") ? "development" !== "production" ? (0, _tinyInvariant.default)(false, "You must use React >= 16.8 in order to use useRouteMatch()") : (0, _tinyInvariant.default)(false) : void 0;
      }

      var location = useLocation();
      var match = useContext(context).match;
      return path ? matchPath(location.pathname, path) : match;
    }

    if ("development" !== "production") {
      if (typeof window !== "undefined") {
        var global = window;
        var key = "__react_router_build__";
        var buildNames = {
          cjs: "CommonJS",
          esm: "ES modules",
          umd: "UMD"
        };

        if (global[key] && global[key] !== "esm") {
          var initialBuildName = buildNames[global[key]];
          var secondaryBuildName = buildNames["esm"]; // TODO: Add link to article that explains in detail how to avoid
          // loading 2 different builds.

          throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
        }

        global[key] = "esm";
      }
    }
  }, {
    "@babel/runtime/helpers/esm/inheritsLoose": "../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js",
    "react": "../node_modules/react/index.js",
    "prop-types": "../node_modules/prop-types/index.js",
    "history": "../node_modules/history/esm/history.js",
    "tiny-warning": "../node_modules/tiny-warning/dist/tiny-warning.esm.js",
    "mini-create-react-context": "../node_modules/mini-create-react-context/dist/esm/index.js",
    "tiny-invariant": "../node_modules/tiny-invariant/dist/tiny-invariant.esm.js",
    "@babel/runtime/helpers/esm/extends": "../node_modules/@babel/runtime/helpers/esm/extends.js",
    "path-to-regexp": "../node_modules/path-to-regexp/index.js",
    "react-is": "../node_modules/react-is/index.js",
    "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose": "../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js",
    "hoist-non-react-statics": "../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"
  }],
  "../node_modules/react-router-dom/esm/react-router-dom.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "MemoryRouter", {
      enumerable: true,
      get: function get() {
        return _reactRouter.MemoryRouter;
      }
    });
    Object.defineProperty(exports, "Prompt", {
      enumerable: true,
      get: function get() {
        return _reactRouter.Prompt;
      }
    });
    Object.defineProperty(exports, "Redirect", {
      enumerable: true,
      get: function get() {
        return _reactRouter.Redirect;
      }
    });
    Object.defineProperty(exports, "Route", {
      enumerable: true,
      get: function get() {
        return _reactRouter.Route;
      }
    });
    Object.defineProperty(exports, "Router", {
      enumerable: true,
      get: function get() {
        return _reactRouter.Router;
      }
    });
    Object.defineProperty(exports, "StaticRouter", {
      enumerable: true,
      get: function get() {
        return _reactRouter.StaticRouter;
      }
    });
    Object.defineProperty(exports, "Switch", {
      enumerable: true,
      get: function get() {
        return _reactRouter.Switch;
      }
    });
    Object.defineProperty(exports, "generatePath", {
      enumerable: true,
      get: function get() {
        return _reactRouter.generatePath;
      }
    });
    Object.defineProperty(exports, "matchPath", {
      enumerable: true,
      get: function get() {
        return _reactRouter.matchPath;
      }
    });
    Object.defineProperty(exports, "useHistory", {
      enumerable: true,
      get: function get() {
        return _reactRouter.useHistory;
      }
    });
    Object.defineProperty(exports, "useLocation", {
      enumerable: true,
      get: function get() {
        return _reactRouter.useLocation;
      }
    });
    Object.defineProperty(exports, "useParams", {
      enumerable: true,
      get: function get() {
        return _reactRouter.useParams;
      }
    });
    Object.defineProperty(exports, "useRouteMatch", {
      enumerable: true,
      get: function get() {
        return _reactRouter.useRouteMatch;
      }
    });
    Object.defineProperty(exports, "withRouter", {
      enumerable: true,
      get: function get() {
        return _reactRouter.withRouter;
      }
    });
    exports.NavLink = exports.Link = exports.HashRouter = exports.BrowserRouter = void 0;

    var _reactRouter = require("react-router");

    var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/inheritsLoose"));

    var _react = _interopRequireDefault(require("react"));

    var _history = require("history");

    var _propTypes = _interopRequireDefault(require("prop-types"));

    var _tinyWarning = _interopRequireDefault(require("tiny-warning"));

    var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/extends"));

    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose"));

    var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * The public API for a <Router> that uses HTML5 history.
     */


    var BrowserRouter = /*#__PURE__*/function (_React$Component) {
      (0, _inheritsLoose2.default)(BrowserRouter, _React$Component);

      function BrowserRouter() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.history = (0, _history.createBrowserHistory)(_this.props);
        return _this;
      }

      var _proto = BrowserRouter.prototype;

      _proto.render = function render() {
        return _react.default.createElement(_reactRouter.Router, {
          history: this.history,
          children: this.props.children
        });
      };

      return BrowserRouter;
    }(_react.default.Component);

    exports.BrowserRouter = BrowserRouter;

    if ("development" !== "production") {
      BrowserRouter.propTypes = {
        basename: _propTypes.default.string,
        children: _propTypes.default.node,
        forceRefresh: _propTypes.default.bool,
        getUserConfirmation: _propTypes.default.func,
        keyLength: _propTypes.default.number
      };

      BrowserRouter.prototype.componentDidMount = function () {
        "development" !== "production" ? (0, _tinyWarning.default)(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.") : void 0;
      };
    }
    /**
     * The public API for a <Router> that uses window.location.hash.
     */


    var HashRouter = /*#__PURE__*/function (_React$Component) {
      (0, _inheritsLoose2.default)(HashRouter, _React$Component);

      function HashRouter() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.history = (0, _history.createHashHistory)(_this.props);
        return _this;
      }

      var _proto = HashRouter.prototype;

      _proto.render = function render() {
        return _react.default.createElement(_reactRouter.Router, {
          history: this.history,
          children: this.props.children
        });
      };

      return HashRouter;
    }(_react.default.Component);

    exports.HashRouter = HashRouter;

    if ("development" !== "production") {
      HashRouter.propTypes = {
        basename: _propTypes.default.string,
        children: _propTypes.default.node,
        getUserConfirmation: _propTypes.default.func,
        hashType: _propTypes.default.oneOf(["hashbang", "noslash", "slash"])
      };

      HashRouter.prototype.componentDidMount = function () {
        "development" !== "production" ? (0, _tinyWarning.default)(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.") : void 0;
      };
    }

    var resolveToLocation = function resolveToLocation(to, currentLocation) {
      return typeof to === "function" ? to(currentLocation) : to;
    };

    var normalizeToLocation = function normalizeToLocation(to, currentLocation) {
      return typeof to === "string" ? (0, _history.createLocation)(to, null, null, currentLocation) : to;
    };

    var forwardRefShim = function forwardRefShim(C) {
      return C;
    };

    var forwardRef = _react.default.forwardRef;

    if (typeof forwardRef === "undefined") {
      forwardRef = forwardRefShim;
    }

    function isModifiedEvent(event) {
      return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
    }

    var LinkAnchor = forwardRef(function (_ref, forwardedRef) {
      var innerRef = _ref.innerRef,
          navigate = _ref.navigate,
          _onClick = _ref.onClick,
          rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["innerRef", "navigate", "onClick"]);
      var target = rest.target;
      var props = (0, _extends2.default)({}, rest, {
        onClick: function onClick(event) {
          try {
            if (_onClick) _onClick(event);
          } catch (ex) {
            event.preventDefault();
            throw ex;
          }

          if (!event.defaultPrevented && // onClick prevented default
          event.button === 0 && ( // ignore everything but left clicks
          !target || target === "_self") && // let browser handle "target=_blank" etc.
          !isModifiedEvent(event) // ignore clicks with modifier keys
          ) {
              event.preventDefault();
              navigate();
            }
        }
      }); // React 15 compat

      if (forwardRefShim !== forwardRef) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.ref = innerRef;
      }
      /* eslint-disable-next-line jsx-a11y/anchor-has-content */


      return _react.default.createElement("a", props);
    });

    if ("development" !== "production") {
      LinkAnchor.displayName = "LinkAnchor";
    }
    /**
     * The public API for rendering a history-aware <a>.
     */


    var Link = forwardRef(function (_ref2, forwardedRef) {
      var _ref2$component = _ref2.component,
          component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,
          replace = _ref2.replace,
          to = _ref2.to,
          innerRef = _ref2.innerRef,
          rest = (0, _objectWithoutPropertiesLoose2.default)(_ref2, ["component", "replace", "to", "innerRef"]);
      return _react.default.createElement(_reactRouter.__RouterContext.Consumer, null, function (context) {
        !context ? "development" !== "production" ? (0, _tinyInvariant.default)(false, "You should not use <Link> outside a <Router>") : (0, _tinyInvariant.default)(false) : void 0;
        var history = context.history;
        var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
        var href = location ? history.createHref(location) : "";
        var props = (0, _extends2.default)({}, rest, {
          href: href,
          navigate: function navigate() {
            var location = resolveToLocation(to, context.location);
            var method = replace ? history.replace : history.push;
            method(location);
          }
        }); // React 15 compat

        if (forwardRefShim !== forwardRef) {
          props.ref = forwardedRef || innerRef;
        } else {
          props.innerRef = innerRef;
        }

        return _react.default.createElement(component, props);
      });
    });
    exports.Link = Link;

    if ("development" !== "production") {
      var toType = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.func]);

      var refType = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.shape({
        current: _propTypes.default.any
      })]);

      Link.displayName = "Link";
      Link.propTypes = {
        innerRef: refType,
        onClick: _propTypes.default.func,
        replace: _propTypes.default.bool,
        target: _propTypes.default.string,
        to: toType.isRequired
      };
    }

    var forwardRefShim$1 = function forwardRefShim(C) {
      return C;
    };

    var forwardRef$1 = _react.default.forwardRef;

    if (typeof forwardRef$1 === "undefined") {
      forwardRef$1 = forwardRefShim$1;
    }

    function joinClassnames() {
      for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
        classnames[_key] = arguments[_key];
      }

      return classnames.filter(function (i) {
        return i;
      }).join(" ");
    }
    /**
     * A <Link> wrapper that knows if it's "active" or not.
     */


    var NavLink = forwardRef$1(function (_ref, forwardedRef) {
      var _ref$ariaCurrent = _ref["aria-current"],
          ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,
          _ref$activeClassName = _ref.activeClassName,
          activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,
          activeStyle = _ref.activeStyle,
          classNameProp = _ref.className,
          exact = _ref.exact,
          isActiveProp = _ref.isActive,
          locationProp = _ref.location,
          sensitive = _ref.sensitive,
          strict = _ref.strict,
          styleProp = _ref.style,
          to = _ref.to,
          innerRef = _ref.innerRef,
          rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);
      return _react.default.createElement(_reactRouter.__RouterContext.Consumer, null, function (context) {
        !context ? "development" !== "production" ? (0, _tinyInvariant.default)(false, "You should not use <NavLink> outside a <Router>") : (0, _tinyInvariant.default)(false) : void 0;
        var currentLocation = locationProp || context.location;
        var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
        var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

        var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
        var match = escapedPath ? (0, _reactRouter.matchPath)(currentLocation.pathname, {
          path: escapedPath,
          exact: exact,
          sensitive: sensitive,
          strict: strict
        }) : null;
        var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
        var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
        var style = isActive ? (0, _extends2.default)({}, styleProp, {}, activeStyle) : styleProp;
        var props = (0, _extends2.default)({
          "aria-current": isActive && ariaCurrent || null,
          className: className,
          style: style,
          to: toLocation
        }, rest); // React 15 compat

        if (forwardRefShim$1 !== forwardRef$1) {
          props.ref = forwardedRef || innerRef;
        } else {
          props.innerRef = innerRef;
        }

        return _react.default.createElement(Link, props);
      });
    });
    exports.NavLink = NavLink;

    if ("development" !== "production") {
      NavLink.displayName = "NavLink";

      var ariaCurrentType = _propTypes.default.oneOf(["page", "step", "location", "date", "time", "true"]);

      NavLink.propTypes = (0, _extends2.default)({}, Link.propTypes, {
        "aria-current": ariaCurrentType,
        activeClassName: _propTypes.default.string,
        activeStyle: _propTypes.default.object,
        className: _propTypes.default.string,
        exact: _propTypes.default.bool,
        isActive: _propTypes.default.func,
        location: _propTypes.default.object,
        sensitive: _propTypes.default.bool,
        strict: _propTypes.default.bool,
        style: _propTypes.default.object
      });
    }
  }, {
    "react-router": "../node_modules/react-router/esm/react-router.js",
    "@babel/runtime/helpers/esm/inheritsLoose": "../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js",
    "react": "../node_modules/react/index.js",
    "history": "../node_modules/history/esm/history.js",
    "prop-types": "../node_modules/prop-types/index.js",
    "tiny-warning": "../node_modules/tiny-warning/dist/tiny-warning.esm.js",
    "@babel/runtime/helpers/esm/extends": "../node_modules/@babel/runtime/helpers/esm/extends.js",
    "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose": "../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js",
    "tiny-invariant": "../node_modules/tiny-invariant/dist/tiny-invariant.esm.js"
  }],
  "api/client.ts": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.client = void 0;

    var client_1 = require("@apollo/client"); // declare let inMemoryToken: any;

    /** Define the api url where the graphql calls will be sent. */


    var httpLink = new client_1.HttpLink({
      uri: "http://localhost:8000" + "/graphql"
    });
    /** Create auth middleware to concat cached token into every graphql request header. */
    // const authMiddleware = new ApolloLink((operation, forward) => {
    //     if (inMemoryToken) {
    //         operation.setContext({
    //             headers: {
    //                 Authorization: `Bearer ${inMemoryToken}`,
    //             }
    //         });
    //     }
    //     return forward(operation);
    // });

    exports.client = new client_1.ApolloClient({
      link: httpLink,
      cache: new client_1.InMemoryCache()
    });
  }, {
    "@apollo/client": "../node_modules/@apollo/client/index.js"
  }],
  "api/queries/hello.ts": [function (require, module, exports) {
    "use strict";

    var __makeTemplateObject = this && this.__makeTemplateObject || function (cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {
          value: raw
        });
      } else {
        cooked.raw = raw;
      }

      return cooked;
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TEST_QUERY = void 0;

    var client_1 = require("@apollo/client");

    exports.TEST_QUERY = client_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    query {\n        hello\n    }\n"], ["\n    query {\n        hello\n    }\n"])));
    var templateObject_1;
  }, {
    "@apollo/client": "../node_modules/@apollo/client/index.js"
  }],
  "components/Login/Login.tsx": [function (require, module, exports) {
    "use strict";

    var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, {
        enumerable: true,
        get: function get() {
          return m[k];
        }
      });
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });

    var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    });

    var __importStar = this && this.__importStar || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) {
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }

      __setModuleDefault(result, mod);

      return result;
    };

    var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }

      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };

    var __generator = this && this.__generator || function (thisArg, body) {
      var _ = {
        label: 0,
        sent: function sent() {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) {
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];

            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;

              case 4:
                _.label++;
                return {
                  value: op[1],
                  done: false
                };

              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;

              case 7:
                op = _.ops.pop();

                _.trys.pop();

                continue;

              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }

                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }

                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }

                if (t && _.label < t[2]) {
                  _.label = t[2];

                  _.ops.push(op);

                  break;
                }

                if (t[2]) _.ops.pop();

                _.trys.pop();

                continue;
            }

            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Login = void 0;

    var client_1 = require("@apollo/client");

    var react_1 = __importStar(require("react"));

    var hello_1 = require("../../api/queries/hello");

    exports.Login = function (_a) {
      var history = _a.history;

      var _b = react_1.useState(""),
          username = _b[0],
          setUsername = _b[1];

      var _c = react_1.useState(""),
          password = _c[0],
          setPassword = _c[1];

      var _d = client_1.useQuery(hello_1.TEST_QUERY),
          data = _d.data,
          loading = _d.loading,
          error = _d.error;

      if (loading) {
        return react_1.default.createElement("div", null, "Is still loading");
      } else if (error || !data) {
        return react_1.default.createElement("div", null, "No data found");
      }
      /** Handles updating username input */


      var handleUsernameChange = function handleUsernameChange(e) {
        return setUsername(e.currentTarget.value);
      };
      /** Handles updating password input */


      var handlePasswordChange = function handlePasswordChange(e) {
        return setPassword(e.currentTarget.value);
      };
      /** Handles submitting loging form */


      var handleSubmit = function handleSubmit() {
        return __awaiter(void 0, void 0, void 0, function () {
          return __generator(this, function (_a) {
            /** Make the login API call */
            // const response = await fetch(`/auth/login`, {
            //     method: 'POST',
            //     body: JSON.stringify({ username, password })
            // })
            // /** Extract the JWT from the response */
            // const { jwtToken } = await response.json()
            // /** Do something the token in the login method */
            // await login({ jwtToken })
            console.log("USERNAME", username);
            console.log("PASSWORD", password);
            history.push("/home");
            return [2
            /*return*/
            ];
          });
        });
      };

      return react_1.default.createElement("div", {
        className: "Login"
      }, react_1.default.createElement("div", {
        className: "Login-Form"
      }, react_1.default.createElement("div", {
        className: "Login-Input"
      }, react_1.default.createElement("span", null, "Username"), react_1.default.createElement("input", {
        value: username,
        onChange: handleUsernameChange
      })), react_1.default.createElement("div", {
        className: "Login-Input"
      }, react_1.default.createElement("span", null, "Password"), react_1.default.createElement("input", {
        type: "password",
        value: password,
        onChange: handlePasswordChange
      })), react_1.default.createElement("div", {
        className: "Login-SubmitButton",
        onClick: handleSubmit
      }, "Submit")));
    };
  }, {
    "@apollo/client": "../node_modules/@apollo/client/index.js",
    "react": "../node_modules/react/index.js",
    "../../api/queries/hello": "api/queries/hello.ts"
  }],
  "components/Header/Header.tsx": [function (require, module, exports) {
    "use strict";

    var __importDefault = this && this.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Header = void 0;

    var react_1 = __importDefault(require("react"));

    exports.Header = function () {
      return react_1.default.createElement("header", {
        className: "Header"
      }, react_1.default.createElement("div", {
        className: "Header-Icon"
      }, "ICON"), react_1.default.createElement("div", {
        className: "Header-Menu"
      }, "Side Menu"));
    };
  }, {
    "react": "../node_modules/react/index.js"
  }],
  "../node_modules/@fortawesome/free-solid-svg-icons/index.es.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.faBorderAll = exports.faBookmark = exports.faBookReader = exports.faBookOpen = exports.faBookMedical = exports.faBookDead = exports.faBook = exports.faBong = exports.faBone = exports.faBomb = exports.faBolt = exports.faBold = exports.faBlog = exports.faBlind = exports.faBlenderPhone = exports.faBlender = exports.faBirthdayCake = exports.faBiohazard = exports.faBinoculars = exports.faBiking = exports.faBicycle = exports.faBible = exports.faBezierCurve = exports.faBellSlash = exports.faBell = exports.faBeer = exports.faBed = exports.faBatteryThreeQuarters = exports.faBatteryQuarter = exports.faBatteryHalf = exports.faBatteryFull = exports.faBatteryEmpty = exports.faBath = exports.faBasketballBall = exports.faBaseballBall = exports.faBars = exports.faBarcode = exports.faBandAid = exports.faBan = exports.faBalanceScaleRight = exports.faBalanceScaleLeft = exports.faBalanceScale = exports.faBahai = exports.faBacterium = exports.faBacteria = exports.faBacon = exports.faBackward = exports.faBackspace = exports.faBabyCarriage = exports.faBaby = exports.faAward = exports.faAudioDescription = exports.faAtom = exports.faAtlas = exports.faAt = exports.faAsterisk = exports.faAssistiveListeningSystems = exports.faArrowsAltV = exports.faArrowsAltH = exports.faArrowsAlt = exports.faArrowUp = exports.faArrowRight = exports.faArrowLeft = exports.faArrowDown = exports.faArrowCircleUp = exports.faArrowCircleRight = exports.faArrowCircleLeft = exports.faArrowCircleDown = exports.faArrowAltCircleUp = exports.faArrowAltCircleRight = exports.faArrowAltCircleLeft = exports.faArrowAltCircleDown = exports.faArchway = exports.faArchive = exports.faAppleAlt = exports.faAnkh = exports.faAngry = exports.faAngleUp = exports.faAngleRight = exports.faAngleLeft = exports.faAngleDown = exports.faAngleDoubleUp = exports.faAngleDoubleRight = exports.faAngleDoubleLeft = exports.faAngleDoubleDown = exports.faAnchor = exports.faAmericanSignLanguageInterpreting = exports.faAmbulance = exports.faAllergies = exports.faAlignRight = exports.faAlignLeft = exports.faAlignJustify = exports.faAlignCenter = exports.faAirFreshener = exports.faAdjust = exports.faAddressCard = exports.faAddressBook = exports.faAd = exports.prefix = exports.fas = void 0;
    exports.faCloud = exports.faClosedCaptioning = exports.faClone = exports.faClock = exports.faClipboardList = exports.faClipboardCheck = exports.faClipboard = exports.faClinicMedical = exports.faCity = exports.faCircleNotch = exports.faCircle = exports.faChurch = exports.faChild = exports.faChevronUp = exports.faChevronRight = exports.faChevronLeft = exports.faChevronDown = exports.faChevronCircleUp = exports.faChevronCircleRight = exports.faChevronCircleLeft = exports.faChevronCircleDown = exports.faChessRook = exports.faChessQueen = exports.faChessPawn = exports.faChessKnight = exports.faChessKing = exports.faChessBoard = exports.faChessBishop = exports.faChess = exports.faCheese = exports.faCheckSquare = exports.faCheckDouble = exports.faCheckCircle = exports.faCheck = exports.faChartPie = exports.faChartLine = exports.faChartBar = exports.faChartArea = exports.faChargingStation = exports.faChalkboardTeacher = exports.faChalkboard = exports.faChair = exports.faCertificate = exports.faCat = exports.faCashRegister = exports.faCartPlus = exports.faCartArrowDown = exports.faCarrot = exports.faCaretUp = exports.faCaretSquareUp = exports.faCaretSquareRight = exports.faCaretSquareLeft = exports.faCaretSquareDown = exports.faCaretRight = exports.faCaretLeft = exports.faCaretDown = exports.faCaravan = exports.faCarSide = exports.faCarCrash = exports.faCarBattery = exports.faCarAlt = exports.faCar = exports.faCapsules = exports.faCannabis = exports.faCandyCane = exports.faCampground = exports.faCameraRetro = exports.faCamera = exports.faCalendarWeek = exports.faCalendarTimes = exports.faCalendarPlus = exports.faCalendarMinus = exports.faCalendarDay = exports.faCalendarCheck = exports.faCalendarAlt = exports.faCalendar = exports.faCalculator = exports.faBusinessTime = exports.faBusAlt = exports.faBus = exports.faBurn = exports.faBullseye = exports.faBullhorn = exports.faBuilding = exports.faBug = exports.faBrush = exports.faBroom = exports.faBroadcastTower = exports.faBriefcaseMedical = exports.faBriefcase = exports.faBreadSlice = exports.faBrain = exports.faBraille = exports.faBoxes = exports.faBoxTissue = exports.faBoxOpen = exports.faBox = exports.faBowlingBall = exports.faBorderStyle = exports.faBorderNone = void 0;
    exports.faEthernet = exports.faEraser = exports.faEquals = exports.faEnvelopeSquare = exports.faEnvelopeOpenText = exports.faEnvelopeOpen = exports.faEnvelope = exports.faEllipsisV = exports.faEllipsisH = exports.faEject = exports.faEgg = exports.faEdit = exports.faDungeon = exports.faDumpsterFire = exports.faDumpster = exports.faDumbbell = exports.faDrumstickBite = exports.faDrumSteelpan = exports.faDrum = exports.faDrawPolygon = exports.faDragon = exports.faDraftingCompass = exports.faDownload = exports.faDove = exports.faDotCircle = exports.faDoorOpen = exports.faDoorClosed = exports.faDonate = exports.faDollyFlatbed = exports.faDolly = exports.faDollarSign = exports.faDog = exports.faDna = exports.faDizzy = exports.faDivide = exports.faDisease = exports.faDirections = exports.faDigitalTachograph = exports.faDiceTwo = exports.faDiceThree = exports.faDiceSix = exports.faDiceOne = exports.faDiceFour = exports.faDiceFive = exports.faDiceD6 = exports.faDiceD20 = exports.faDice = exports.faDiagnoses = exports.faDharmachakra = exports.faDesktop = exports.faDemocrat = exports.faDeaf = exports.faDatabase = exports.faCut = exports.faCubes = exports.faCube = exports.faCrutch = exports.faCrown = exports.faCrow = exports.faCrosshairs = exports.faCross = exports.faCropAlt = exports.faCrop = exports.faCreditCard = exports.faCouch = exports.faCopyright = exports.faCopy = exports.faCookieBite = exports.faCookie = exports.faConciergeBell = exports.faCompressArrowsAlt = exports.faCompressAlt = exports.faCompress = exports.faCompass = exports.faCompactDisc = exports.faCommentsDollar = exports.faComments = exports.faCommentSlash = exports.faCommentMedical = exports.faCommentDots = exports.faCommentDollar = exports.faCommentAlt = exports.faComment = exports.faColumns = exports.faCoins = exports.faCogs = exports.faCog = exports.faCoffee = exports.faCodeBranch = exports.faCode = exports.faCocktail = exports.faCloudUploadAlt = exports.faCloudSunRain = exports.faCloudSun = exports.faCloudShowersHeavy = exports.faCloudRain = exports.faCloudMoonRain = exports.faCloudMoon = exports.faCloudMeatball = exports.faCloudDownloadAlt = void 0;
    exports.faGrinAlt = exports.faGrin = exports.faGrimace = exports.faGreaterThanEqual = exports.faGreaterThan = exports.faGraduationCap = exports.faGopuram = exports.faGolfBall = exports.faGlobeEurope = exports.faGlobeAsia = exports.faGlobeAmericas = exports.faGlobeAfrica = exports.faGlobe = exports.faGlasses = exports.faGlassWhiskey = exports.faGlassMartiniAlt = exports.faGlassMartini = exports.faGlassCheers = exports.faGifts = exports.faGift = exports.faGhost = exports.faGenderless = exports.faGem = exports.faGavel = exports.faGasPump = exports.faGamepad = exports.faFutbol = exports.faFunnelDollar = exports.faFrownOpen = exports.faFrown = exports.faFrog = exports.faForward = exports.faFootballBall = exports.faFontAwesomeLogoFull = exports.faFont = exports.faFolderPlus = exports.faFolderOpen = exports.faFolderMinus = exports.faFolder = exports.faFlushed = exports.faFlask = exports.faFlagUsa = exports.faFlagCheckered = exports.faFlag = exports.faFistRaised = exports.faFish = exports.faFirstAid = exports.faFireExtinguisher = exports.faFireAlt = exports.faFire = exports.faFingerprint = exports.faFilter = exports.faFilm = exports.faFillDrip = exports.faFill = exports.faFileWord = exports.faFileVideo = exports.faFileUpload = exports.faFileSignature = exports.faFilePrescription = exports.faFilePowerpoint = exports.faFilePdf = exports.faFileMedicalAlt = exports.faFileMedical = exports.faFileInvoiceDollar = exports.faFileInvoice = exports.faFileImport = exports.faFileImage = exports.faFileExport = exports.faFileExcel = exports.faFileDownload = exports.faFileCsv = exports.faFileContract = exports.faFileCode = exports.faFileAudio = exports.faFileArchive = exports.faFileAlt = exports.faFile = exports.faFighterJet = exports.faFemale = exports.faFeatherAlt = exports.faFeather = exports.faFax = exports.faFaucet = exports.faFastForward = exports.faFastBackward = exports.faFan = exports.faEyeSlash = exports.faEyeDropper = exports.faEye = exports.faExternalLinkSquareAlt = exports.faExternalLinkAlt = exports.faExpandArrowsAlt = exports.faExpandAlt = exports.faExpand = exports.faExclamationTriangle = exports.faExclamationCircle = exports.faExclamation = exports.faExchangeAlt = exports.faEuroSign = void 0;
    exports.faInfinity = exports.faIndustry = exports.faIndent = exports.faInbox = exports.faImages = exports.faImage = exports.faIgloo = exports.faIdCardAlt = exports.faIdCard = exports.faIdBadge = exports.faIcons = exports.faIcicles = exports.faIceCream = exports.faICursor = exports.faHryvnia = exports.faHouseUser = exports.faHouseDamage = exports.faHourglassStart = exports.faHourglassHalf = exports.faHourglassEnd = exports.faHourglass = exports.faHotel = exports.faHotdog = exports.faHotTub = exports.faHospitalUser = exports.faHospitalSymbol = exports.faHospitalAlt = exports.faHospital = exports.faHorseHead = exports.faHorse = exports.faHome = exports.faHollyBerry = exports.faHockeyPuck = exports.faHistory = exports.faHippo = exports.faHiking = exports.faHighlighter = exports.faHelicopter = exports.faHeartbeat = exports.faHeartBroken = exports.faHeart = exports.faHeadset = exports.faHeadphonesAlt = exports.faHeadphones = exports.faHeading = exports.faHeadSideVirus = exports.faHeadSideMask = exports.faHeadSideCoughSlash = exports.faHeadSideCough = exports.faHdd = exports.faHatWizard = exports.faHatCowboySide = exports.faHatCowboy = exports.faHashtag = exports.faHardHat = exports.faHanukiah = exports.faHandshakeSlash = exports.faHandshakeAltSlash = exports.faHandshake = exports.faHandsWash = exports.faHandsHelping = exports.faHands = exports.faHandSpock = exports.faHandSparkles = exports.faHandScissors = exports.faHandRock = exports.faHandPointer = exports.faHandPointUp = exports.faHandPointRight = exports.faHandPointLeft = exports.faHandPointDown = exports.faHandPeace = exports.faHandPaper = exports.faHandMiddleFinger = exports.faHandLizard = exports.faHandHoldingWater = exports.faHandHoldingUsd = exports.faHandHoldingMedical = exports.faHandHoldingHeart = exports.faHandHolding = exports.faHamsa = exports.faHammer = exports.faHamburger = exports.faHSquare = exports.faGuitar = exports.faGripVertical = exports.faGripLinesVertical = exports.faGripLines = exports.faGripHorizontal = exports.faGrinWink = exports.faGrinTongueWink = exports.faGrinTongueSquint = exports.faGrinTongue = exports.faGrinTears = exports.faGrinStars = exports.faGrinSquintTears = exports.faGrinSquint = exports.faGrinHearts = exports.faGrinBeamSweat = exports.faGrinBeam = void 0;
    exports.faMotorcycle = exports.faMosque = exports.faMortarPestle = exports.faMoon = exports.faMonument = exports.faMoneyCheckAlt = exports.faMoneyCheck = exports.faMoneyBillWaveAlt = exports.faMoneyBillWave = exports.faMoneyBillAlt = exports.faMoneyBill = exports.faMobileAlt = exports.faMobile = exports.faMitten = exports.faMinusSquare = exports.faMinusCircle = exports.faMinus = exports.faMicroscope = exports.faMicrophoneSlash = exports.faMicrophoneAltSlash = exports.faMicrophoneAlt = exports.faMicrophone = exports.faMicrochip = exports.faMeteor = exports.faMercury = exports.faMenorah = exports.faMemory = exports.faMehRollingEyes = exports.faMehBlank = exports.faMeh = exports.faMedkit = exports.faMedal = exports.faMask = exports.faMarsStrokeV = exports.faMarsStrokeH = exports.faMarsStroke = exports.faMarsDouble = exports.faMars = exports.faMarker = exports.faMapSigns = exports.faMapPin = exports.faMapMarkerAlt = exports.faMapMarker = exports.faMapMarkedAlt = exports.faMapMarked = exports.faMap = exports.faMale = exports.faMailBulk = exports.faMagnet = exports.faMagic = exports.faLungsVirus = exports.faLungs = exports.faLuggageCart = exports.faLowVision = exports.faLongArrowAltUp = exports.faLongArrowAltRight = exports.faLongArrowAltLeft = exports.faLongArrowAltDown = exports.faLockOpen = exports.faLock = exports.faLocationArrow = exports.faListUl = exports.faListOl = exports.faListAlt = exports.faList = exports.faLiraSign = exports.faLink = exports.faLightbulb = exports.faLifeRing = exports.faLevelUpAlt = exports.faLevelDownAlt = exports.faLessThanEqual = exports.faLessThan = exports.faLemon = exports.faLeaf = exports.faLayerGroup = exports.faLaughWink = exports.faLaughSquint = exports.faLaughBeam = exports.faLaugh = exports.faLaptopMedical = exports.faLaptopHouse = exports.faLaptopCode = exports.faLaptop = exports.faLanguage = exports.faLandmark = exports.faKiwiBird = exports.faKissWinkHeart = exports.faKissBeam = exports.faKiss = exports.faKhanda = exports.faKeyboard = exports.faKey = exports.faKaaba = exports.faJournalWhills = exports.faJoint = exports.faJedi = exports.faItalic = exports.faInfoCircle = exports.faInfo = void 0;
    exports.faRecordVinyl = exports.faReceipt = exports.faRandom = exports.faRainbow = exports.faRadiationAlt = exports.faRadiation = exports.faQuran = exports.faQuoteRight = exports.faQuoteLeft = exports.faQuidditch = exports.faQuestionCircle = exports.faQuestion = exports.faQrcode = exports.faPuzzlePiece = exports.faPumpSoap = exports.faPumpMedical = exports.faProjectDiagram = exports.faProcedures = exports.faPrint = exports.faPrescriptionBottleAlt = exports.faPrescriptionBottle = exports.faPrescription = exports.faPrayingHands = exports.faPray = exports.faPowerOff = exports.faPoundSign = exports.faPortrait = exports.faPoop = exports.faPooStorm = exports.faPoo = exports.faPollH = exports.faPoll = exports.faPodcast = exports.faPlusSquare = exports.faPlusCircle = exports.faPlus = exports.faPlug = exports.faPlayCircle = exports.faPlay = exports.faPlaneSlash = exports.faPlaneDeparture = exports.faPlaneArrival = exports.faPlane = exports.faPlaceOfWorship = exports.faPizzaSlice = exports.faPills = exports.faPiggyBank = exports.faPhotoVideo = exports.faPhoneVolume = exports.faPhoneSquareAlt = exports.faPhoneSquare = exports.faPhoneSlash = exports.faPhoneAlt = exports.faPhone = exports.faPersonBooth = exports.faPercentage = exports.faPercent = exports.faPepperHot = exports.faPeopleCarry = exports.faPeopleArrows = exports.faPencilRuler = exports.faPencilAlt = exports.faPenSquare = exports.faPenNib = exports.faPenFancy = exports.faPenAlt = exports.faPen = exports.faPeace = exports.faPaw = exports.faPauseCircle = exports.faPause = exports.faPaste = exports.faPastafarianism = exports.faPassport = exports.faParking = exports.faParagraph = exports.faParachuteBox = exports.faPaperclip = exports.faPaperPlane = exports.faPallet = exports.faPalette = exports.faPaintRoller = exports.faPaintBrush = exports.faPager = exports.faOutdent = exports.faOtter = exports.faOm = exports.faOilCan = exports.faObjectUngroup = exports.faObjectGroup = exports.faNotesMedical = exports.faNotEqual = exports.faNewspaper = exports.faNeuter = exports.faNetworkWired = exports.faMusic = exports.faMugHot = exports.faMousePointer = exports.faMouse = exports.faMountain = void 0;
    exports.faSortNumericDownAlt = exports.faSortNumericDown = exports.faSortDown = exports.faSortAmountUpAlt = exports.faSortAmountUp = exports.faSortAmountDownAlt = exports.faSortAmountDown = exports.faSortAlphaUpAlt = exports.faSortAlphaUp = exports.faSortAlphaDownAlt = exports.faSortAlphaDown = exports.faSort = exports.faSolarPanel = exports.faSocks = exports.faSoap = exports.faSnowplow = exports.faSnowman = exports.faSnowflake = exports.faSnowboarding = exports.faSms = exports.faSmokingBan = exports.faSmoking = exports.faSmog = exports.faSmileWink = exports.faSmileBeam = exports.faSmile = exports.faSlidersH = exports.faSleigh = exports.faSlash = exports.faSkullCrossbones = exports.faSkull = exports.faSkiingNordic = exports.faSkiing = exports.faSkating = exports.faSitemap = exports.faSink = exports.faSimCard = exports.faSignature = exports.faSignal = exports.faSignOutAlt = exports.faSignLanguage = exports.faSignInAlt = exports.faSign = exports.faShuttleVan = exports.faShower = exports.faShoppingCart = exports.faShoppingBasket = exports.faShoppingBag = exports.faShoePrints = exports.faShippingFast = exports.faShip = exports.faShieldVirus = exports.faShieldAlt = exports.faShekelSign = exports.faShareSquare = exports.faShareAltSquare = exports.faShareAlt = exports.faShare = exports.faShapes = exports.faServer = exports.faSeedling = exports.faSearchPlus = exports.faSearchMinus = exports.faSearchLocation = exports.faSearchDollar = exports.faSearch = exports.faSdCard = exports.faScroll = exports.faScrewdriver = exports.faSchool = exports.faSave = exports.faSatelliteDish = exports.faSatellite = exports.faSadTear = exports.faSadCry = exports.faRupeeSign = exports.faRunning = exports.faRulerVertical = exports.faRulerHorizontal = exports.faRulerCombined = exports.faRuler = exports.faRubleSign = exports.faRssSquare = exports.faRss = exports.faRoute = exports.faRocket = exports.faRobot = exports.faRoad = exports.faRing = exports.faRibbon = exports.faRetweet = exports.faRestroom = exports.faRepublican = exports.faReplyAll = exports.faReply = exports.faRemoveFormat = exports.faRegistered = exports.faRedoAlt = exports.faRedo = exports.faRecycle = void 0;
    exports.faTrademark = exports.faTractor = exports.faToriiGate = exports.faTorah = exports.faTooth = exports.faTools = exports.faToolbox = exports.faToiletPaperSlash = exports.faToiletPaper = exports.faToilet = exports.faToggleOn = exports.faToggleOff = exports.faTired = exports.faTintSlash = exports.faTint = exports.faTimesCircle = exports.faTimes = exports.faTicketAlt = exports.faThumbtack = exports.faThumbsUp = exports.faThumbsDown = exports.faThermometerThreeQuarters = exports.faThermometerQuarter = exports.faThermometerHalf = exports.faThermometerFull = exports.faThermometerEmpty = exports.faThermometer = exports.faTheaterMasks = exports.faThList = exports.faThLarge = exports.faTh = exports.faTextWidth = exports.faTextHeight = exports.faTerminal = exports.faTenge = exports.faTemperatureLow = exports.faTemperatureHigh = exports.faTeethOpen = exports.faTeeth = exports.faTaxi = exports.faTasks = exports.faTape = exports.faTags = exports.faTag = exports.faTachometerAlt = exports.faTablets = exports.faTabletAlt = exports.faTablet = exports.faTableTennis = exports.faTable = exports.faSyringe = exports.faSyncAlt = exports.faSync = exports.faSynagogue = exports.faSwimmingPool = exports.faSwimmer = exports.faSwatchbook = exports.faSurprise = exports.faSuperscript = exports.faSun = exports.faSuitcaseRolling = exports.faSuitcase = exports.faSubway = exports.faSubscript = exports.faStroopwafel = exports.faStrikethrough = exports.faStreetView = exports.faStream = exports.faStoreSlash = exports.faStoreAltSlash = exports.faStoreAlt = exports.faStore = exports.faStopwatch20 = exports.faStopwatch = exports.faStopCircle = exports.faStop = exports.faStickyNote = exports.faStethoscope = exports.faStepForward = exports.faStepBackward = exports.faStarOfLife = exports.faStarOfDavid = exports.faStarHalfAlt = exports.faStarHalf = exports.faStarAndCrescent = exports.faStar = exports.faStamp = exports.faSquareRootAlt = exports.faSquareFull = exports.faSquare = exports.faSprayCan = exports.faSplotch = exports.faSpinner = exports.faSpider = exports.faSpellCheck = exports.faSpaceShuttle = exports.faSpa = exports.faSortUp = exports.faSortNumericUpAlt = exports.faSortNumericUp = void 0;
    exports.faWonSign = exports.faWineGlassAlt = exports.faWineGlass = exports.faWineBottle = exports.faWindowRestore = exports.faWindowMinimize = exports.faWindowMaximize = exports.faWindowClose = exports.faWind = exports.faWifi = exports.faWheelchair = exports.faWeightHanging = exports.faWeight = exports.faWaveSquare = exports.faWater = exports.faWarehouse = exports.faWallet = exports.faWalking = exports.faVrCardboard = exports.faVoteYea = exports.faVolumeUp = exports.faVolumeOff = exports.faVolumeMute = exports.faVolumeDown = exports.faVolleyballBall = exports.faVoicemail = exports.faViruses = exports.faVirusSlash = exports.faVirus = exports.faVihara = exports.faVideoSlash = exports.faVideo = exports.faVials = exports.faVial = exports.faVestPatches = exports.faVest = exports.faVenusMars = exports.faVenusDouble = exports.faVenus = exports.faVectorSquare = exports.faUtensils = exports.faUtensilSpoon = exports.faUsersSlash = exports.faUsersCog = exports.faUsers = exports.faUserTimes = exports.faUserTie = exports.faUserTag = exports.faUserSlash = exports.faUserShield = exports.faUserSecret = exports.faUserPlus = exports.faUserNurse = exports.faUserNinja = exports.faUserMinus = exports.faUserMd = exports.faUserLock = exports.faUserInjured = exports.faUserGraduate = exports.faUserFriends = exports.faUserEdit = exports.faUserCog = exports.faUserClock = exports.faUserCircle = exports.faUserCheck = exports.faUserAstronaut = exports.faUserAltSlash = exports.faUserAlt = exports.faUser = exports.faUpload = exports.faUnlockAlt = exports.faUnlock = exports.faUnlink = exports.faUniversity = exports.faUniversalAccess = exports.faUndoAlt = exports.faUndo = exports.faUnderline = exports.faUmbrellaBeach = exports.faUmbrella = exports.faTv = exports.faTty = exports.faTshirt = exports.faTruckPickup = exports.faTruckMoving = exports.faTruckMonster = exports.faTruckLoading = exports.faTruck = exports.faTrophy = exports.faTree = exports.faTrashRestoreAlt = exports.faTrashRestore = exports.faTrashAlt = exports.faTrash = exports.faTransgenderAlt = exports.faTransgender = exports.faTram = exports.faTrain = exports.faTrailer = exports.faTrafficLight = void 0;
    exports.faYinYang = exports.faYenSign = exports.faXRay = exports.faWrench = void 0;
    /*!
     * Font Awesome Free 5.15.1 by @fontawesome - https://fontawesome.com
     * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
     */

    var prefix = "fas";
    exports.prefix = prefix;
    var faAd = {
      prefix: 'fas',
      iconName: 'ad',
      icon: [512, 512, [], "f641", "M157.52 272h36.96L176 218.78 157.52 272zM352 256c-13.23 0-24 10.77-24 24s10.77 24 24 24 24-10.77 24-24-10.77-24-24-24zM464 64H48C21.5 64 0 85.5 0 112v288c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM250.58 352h-16.94c-6.81 0-12.88-4.32-15.12-10.75L211.15 320h-70.29l-7.38 21.25A16 16 0 0 1 118.36 352h-16.94c-11.01 0-18.73-10.85-15.12-21.25L140 176.12A23.995 23.995 0 0 1 162.67 160h26.66A23.99 23.99 0 0 1 212 176.13l53.69 154.62c3.61 10.4-4.11 21.25-15.11 21.25zM424 336c0 8.84-7.16 16-16 16h-16c-4.85 0-9.04-2.27-11.98-5.68-8.62 3.66-18.09 5.68-28.02 5.68-39.7 0-72-32.3-72-72s32.3-72 72-72c8.46 0 16.46 1.73 24 4.42V176c0-8.84 7.16-16 16-16h16c8.84 0 16 7.16 16 16v160z"]
    };
    exports.faAd = faAd;
    var faAddressBook = {
      prefix: 'fas',
      iconName: 'address-book',
      icon: [448, 512, [], "f2b9", "M436 160c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-20V48c0-26.5-21.5-48-48-48H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h320c26.5 0 48-21.5 48-48v-48h20c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-20v-64h20c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-20v-64h20zm-228-32c35.3 0 64 28.7 64 64s-28.7 64-64 64-64-28.7-64-64 28.7-64 64-64zm112 236.8c0 10.6-10 19.2-22.4 19.2H118.4C106 384 96 375.4 96 364.8v-19.2c0-31.8 30.1-57.6 67.2-57.6h5c12.3 5.1 25.7 8 39.8 8s27.6-2.9 39.8-8h5c37.1 0 67.2 25.8 67.2 57.6v19.2z"]
    };
    exports.faAddressBook = faAddressBook;
    var faAddressCard = {
      prefix: 'fas',
      iconName: 'address-card',
      icon: [576, 512, [], "f2bb", "M528 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h480c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-352 96c35.3 0 64 28.7 64 64s-28.7 64-64 64-64-28.7-64-64 28.7-64 64-64zm112 236.8c0 10.6-10 19.2-22.4 19.2H86.4C74 384 64 375.4 64 364.8v-19.2c0-31.8 30.1-57.6 67.2-57.6h5c12.3 5.1 25.7 8 39.8 8s27.6-2.9 39.8-8h5c37.1 0 67.2 25.8 67.2 57.6v19.2zM512 312c0 4.4-3.6 8-8 8H360c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16zm0-64c0 4.4-3.6 8-8 8H360c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16zm0-64c0 4.4-3.6 8-8 8H360c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16z"]
    };
    exports.faAddressCard = faAddressCard;
    var faAdjust = {
      prefix: 'fas',
      iconName: 'adjust',
      icon: [512, 512, [], "f042", "M8 256c0 136.966 111.033 248 248 248s248-111.034 248-248S392.966 8 256 8 8 119.033 8 256zm248 184V72c101.705 0 184 82.311 184 184 0 101.705-82.311 184-184 184z"]
    };
    exports.faAdjust = faAdjust;
    var faAirFreshener = {
      prefix: 'fas',
      iconName: 'air-freshener',
      icon: [384, 512, [], "f5d0", "M378.94 321.41L284.7 224h49.22c15.3 0 23.66-16.6 13.86-27.53L234.45 69.96c3.43-6.61 5.55-14 5.55-21.96 0-26.51-21.49-48-48-48s-48 21.49-48 48c0 7.96 2.12 15.35 5.55 21.96L36.22 196.47C26.42 207.4 34.78 224 50.08 224H99.3L5.06 321.41C-6.69 333.56 3.34 352 21.7 352H160v32H48c-8.84 0-16 7.16-16 16v96c0 8.84 7.16 16 16 16h288c8.84 0 16-7.16 16-16v-96c0-8.84-7.16-16-16-16H224v-32h138.3c18.36 0 28.39-18.44 16.64-30.59zM192 31.98c8.85 0 16.02 7.17 16.02 16.02 0 8.84-7.17 16.02-16.02 16.02S175.98 56.84 175.98 48c0-8.85 7.17-16.02 16.02-16.02zM304 432v32H80v-32h224z"]
    };
    exports.faAirFreshener = faAirFreshener;
    var faAlignCenter = {
      prefix: 'fas',
      iconName: 'align-center',
      icon: [448, 512, [], "f037", "M432 160H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0 256H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM108.1 96h231.81A12.09 12.09 0 0 0 352 83.9V44.09A12.09 12.09 0 0 0 339.91 32H108.1A12.09 12.09 0 0 0 96 44.09V83.9A12.1 12.1 0 0 0 108.1 96zm231.81 256A12.09 12.09 0 0 0 352 339.9v-39.81A12.09 12.09 0 0 0 339.91 288H108.1A12.09 12.09 0 0 0 96 300.09v39.81a12.1 12.1 0 0 0 12.1 12.1z"]
    };
    exports.faAlignCenter = faAlignCenter;
    var faAlignJustify = {
      prefix: 'fas',
      iconName: 'align-justify',
      icon: [448, 512, [], "f039", "M432 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-128H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-128H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-128H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"]
    };
    exports.faAlignJustify = faAlignJustify;
    var faAlignLeft = {
      prefix: 'fas',
      iconName: 'align-left',
      icon: [448, 512, [], "f036", "M12.83 352h262.34A12.82 12.82 0 0 0 288 339.17v-38.34A12.82 12.82 0 0 0 275.17 288H12.83A12.82 12.82 0 0 0 0 300.83v38.34A12.82 12.82 0 0 0 12.83 352zm0-256h262.34A12.82 12.82 0 0 0 288 83.17V44.83A12.82 12.82 0 0 0 275.17 32H12.83A12.82 12.82 0 0 0 0 44.83v38.34A12.82 12.82 0 0 0 12.83 96zM432 160H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0 256H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z"]
    };
    exports.faAlignLeft = faAlignLeft;
    var faAlignRight = {
      prefix: 'fas',
      iconName: 'align-right',
      icon: [448, 512, [], "f038", "M16 224h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16zm416 192H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm3.17-384H172.83A12.82 12.82 0 0 0 160 44.83v38.34A12.82 12.82 0 0 0 172.83 96h262.34A12.82 12.82 0 0 0 448 83.17V44.83A12.82 12.82 0 0 0 435.17 32zm0 256H172.83A12.82 12.82 0 0 0 160 300.83v38.34A12.82 12.82 0 0 0 172.83 352h262.34A12.82 12.82 0 0 0 448 339.17v-38.34A12.82 12.82 0 0 0 435.17 288z"]
    };
    exports.faAlignRight = faAlignRight;
    var faAllergies = {
      prefix: 'fas',
      iconName: 'allergies',
      icon: [448, 512, [], "f461", "M416 112c-17.6 0-32 14.4-32 32v72c0 4.4-3.6 8-8 8h-16c-4.4 0-8-3.6-8-8V64c0-17.6-14.4-32-32-32s-32 14.4-32 32v152c0 4.4-3.6 8-8 8h-16c-4.4 0-8-3.6-8-8V32c0-17.6-14.4-32-32-32s-32 14.4-32 32v184c0 4.4-3.6 8-8 8h-16c-4.4 0-8-3.6-8-8V64c0-17.6-14.4-32-32-32S96 46.4 96 64v241l-23.6-32.5c-13-17.9-38-21.8-55.9-8.8s-21.8 38-8.8 55.9l125.6 172.7c9 12.4 23.5 19.8 38.8 19.8h197.6c22.3 0 41.6-15.3 46.7-37l26.5-112.7c3.2-13.7 4.9-28.3 5.1-42.3V144c0-17.6-14.4-32-32-32zM176 416c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm0-96c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm64 128c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm0-96c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm64 32c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm32 64c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm32-128c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16z"]
    };
    exports.faAllergies = faAllergies;
    var faAmbulance = {
      prefix: 'fas',
      iconName: 'ambulance',
      icon: [640, 512, [], "f0f9", "M624 352h-16V243.9c0-12.7-5.1-24.9-14.1-33.9L494 110.1c-9-9-21.2-14.1-33.9-14.1H416V48c0-26.5-21.5-48-48-48H48C21.5 0 0 21.5 0 48v320c0 26.5 21.5 48 48 48h16c0 53 43 96 96 96s96-43 96-96h128c0 53 43 96 96 96s96-43 96-96h48c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zM160 464c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm144-248c0 4.4-3.6 8-8 8h-56v56c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-56h-56c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h56v-56c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v56h56c4.4 0 8 3.6 8 8v48zm176 248c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm80-208H416V144h44.1l99.9 99.9V256z"]
    };
    exports.faAmbulance = faAmbulance;
    var faAmericanSignLanguageInterpreting = {
      prefix: 'fas',
      iconName: 'american-sign-language-interpreting',
      icon: [640, 512, [], "f2a3", "M290.547 189.039c-20.295-10.149-44.147-11.199-64.739-3.89 42.606 0 71.208 20.475 85.578 50.576 8.576 17.899-5.148 38.071-23.617 38.071 18.429 0 32.211 20.136 23.617 38.071-14.725 30.846-46.123 50.854-80.298 50.854-.557 0-94.471-8.615-94.471-8.615l-66.406 33.347c-9.384 4.693-19.815.379-23.895-7.781L1.86 290.747c-4.167-8.615-1.111-18.897 6.946-23.621l58.072-33.069L108 159.861c6.39-57.245 34.731-109.767 79.743-146.726 11.391-9.448 28.341-7.781 37.51 3.613 9.446 11.394 7.78 28.067-3.612 37.516-12.503 10.559-23.618 22.509-32.509 35.57 21.672-14.729 46.679-24.732 74.186-28.067 14.725-1.945 28.063 8.336 29.73 23.065 1.945 14.728-8.336 28.067-23.062 29.734-16.116 1.945-31.12 7.503-44.178 15.284 26.114-5.713 58.712-3.138 88.079 11.115 13.336 6.669 18.893 22.509 12.224 35.848-6.389 13.06-22.504 18.617-35.564 12.226zm-27.229 69.472c-6.112-12.505-18.338-20.286-32.231-20.286a35.46 35.46 0 0 0-35.565 35.57c0 21.428 17.808 35.57 35.565 35.57 13.893 0 26.119-7.781 32.231-20.286 4.446-9.449 13.614-15.006 23.339-15.284-9.725-.277-18.893-5.835-23.339-15.284zm374.821-37.237c4.168 8.615 1.111 18.897-6.946 23.621l-58.071 33.069L532 352.16c-6.39 57.245-34.731 109.767-79.743 146.726-10.932 9.112-27.799 8.144-37.51-3.613-9.446-11.394-7.78-28.067 3.613-37.516 12.503-10.559 23.617-22.509 32.508-35.57-21.672 14.729-46.679 24.732-74.186 28.067-10.021 2.506-27.552-5.643-29.73-23.065-1.945-14.728 8.336-28.067 23.062-29.734 16.116-1.946 31.12-7.503 44.178-15.284-26.114 5.713-58.712 3.138-88.079-11.115-13.336-6.669-18.893-22.509-12.224-35.848 6.389-13.061 22.505-18.619 35.565-12.227 20.295 10.149 44.147 11.199 64.739 3.89-42.606 0-71.208-20.475-85.578-50.576-8.576-17.899 5.148-38.071 23.617-38.071-18.429 0-32.211-20.136-23.617-38.071 14.033-29.396 44.039-50.887 81.966-50.854l92.803 8.615 66.406-33.347c9.408-4.704 19.828-.354 23.894 7.781l44.455 88.926zm-229.227-18.618c-13.893 0-26.119 7.781-32.231 20.286-4.446 9.449-13.614 15.006-23.339 15.284 9.725.278 18.893 5.836 23.339 15.284 6.112 12.505 18.338 20.286 32.231 20.286a35.46 35.46 0 0 0 35.565-35.57c0-21.429-17.808-35.57-35.565-35.57z"]
    };
    exports.faAmericanSignLanguageInterpreting = faAmericanSignLanguageInterpreting;
    var faAnchor = {
      prefix: 'fas',
      iconName: 'anchor',
      icon: [576, 512, [], "f13d", "M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z"]
    };
    exports.faAnchor = faAnchor;
    var faAngleDoubleDown = {
      prefix: 'fas',
      iconName: 'angle-double-down',
      icon: [320, 512, [], "f103", "M143 256.3L7 120.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0L313 86.3c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.4 9.5-24.6 9.5-34 .1zm34 192l136-136c9.4-9.4 9.4-24.6 0-33.9l-22.6-22.6c-9.4-9.4-24.6-9.4-33.9 0L160 352.1l-96.4-96.4c-9.4-9.4-24.6-9.4-33.9 0L7 278.3c-9.4 9.4-9.4 24.6 0 33.9l136 136c9.4 9.5 24.6 9.5 34 .1z"]
    };
    exports.faAngleDoubleDown = faAngleDoubleDown;
    var faAngleDoubleLeft = {
      prefix: 'fas',
      iconName: 'angle-double-left',
      icon: [448, 512, [], "f100", "M223.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L319.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L393.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34zm-192 34l136 136c9.4 9.4 24.6 9.4 33.9 0l22.6-22.6c9.4-9.4 9.4-24.6 0-33.9L127.9 256l96.4-96.4c9.4-9.4 9.4-24.6 0-33.9L201.7 103c-9.4-9.4-24.6-9.4-33.9 0l-136 136c-9.5 9.4-9.5 24.6-.1 34z"]
    };
    exports.faAngleDoubleLeft = faAngleDoubleLeft;
    var faAngleDoubleRight = {
      prefix: 'fas',
      iconName: 'angle-double-right',
      icon: [448, 512, [], "f101", "M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34zm192-34l-136-136c-9.4-9.4-24.6-9.4-33.9 0l-22.6 22.6c-9.4 9.4-9.4 24.6 0 33.9l96.4 96.4-96.4 96.4c-9.4 9.4-9.4 24.6 0 33.9l22.6 22.6c9.4 9.4 24.6 9.4 33.9 0l136-136c9.4-9.2 9.4-24.4 0-33.8z"]
    };
    exports.faAngleDoubleRight = faAngleDoubleRight;
    var faAngleDoubleUp = {
      prefix: 'fas',
      iconName: 'angle-double-up',
      icon: [320, 512, [], "f102", "M177 255.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 351.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 425.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1zm-34-192L7 199.7c-9.4 9.4-9.4 24.6 0 33.9l22.6 22.6c9.4 9.4 24.6 9.4 33.9 0l96.4-96.4 96.4 96.4c9.4 9.4 24.6 9.4 33.9 0l22.6-22.6c9.4-9.4 9.4-24.6 0-33.9l-136-136c-9.2-9.4-24.4-9.4-33.8 0z"]
    };
    exports.faAngleDoubleUp = faAngleDoubleUp;
    var faAngleDown = {
      prefix: 'fas',
      iconName: 'angle-down',
      icon: [320, 512, [], "f107", "M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z"]
    };
    exports.faAngleDown = faAngleDown;
    var faAngleLeft = {
      prefix: 'fas',
      iconName: 'angle-left',
      icon: [256, 512, [], "f104", "M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z"]
    };
    exports.faAngleLeft = faAngleLeft;
    var faAngleRight = {
      prefix: 'fas',
      iconName: 'angle-right',
      icon: [256, 512, [], "f105", "M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"]
    };
    exports.faAngleRight = faAngleRight;
    var faAngleUp = {
      prefix: 'fas',
      iconName: 'angle-up',
      icon: [320, 512, [], "f106", "M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z"]
    };
    exports.faAngleUp = faAngleUp;
    var faAngry = {
      prefix: 'fas',
      iconName: 'angry',
      icon: [496, 512, [], "f556", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM136 240c0-9.3 4.1-17.5 10.5-23.4l-31-9.3c-8.5-2.5-13.3-11.5-10.7-19.9 2.5-8.5 11.4-13.2 19.9-10.7l80 24c8.5 2.5 13.3 11.5 10.7 19.9-2.1 6.9-8.4 11.4-15.3 11.4-.5 0-1.1-.2-1.7-.2.7 2.7 1.7 5.3 1.7 8.2 0 17.7-14.3 32-32 32S136 257.7 136 240zm168 154.2c-27.8-33.4-84.2-33.4-112.1 0-13.5 16.3-38.2-4.2-24.6-20.5 20-24 49.4-37.8 80.6-37.8s60.6 13.8 80.6 37.8c13.8 16.5-11.1 36.6-24.5 20.5zm76.6-186.9l-31 9.3c6.3 5.8 10.5 14.1 10.5 23.4 0 17.7-14.3 32-32 32s-32-14.3-32-32c0-2.9.9-5.6 1.7-8.2-.6.1-1.1.2-1.7.2-6.9 0-13.2-4.5-15.3-11.4-2.5-8.5 2.3-17.4 10.7-19.9l80-24c8.4-2.5 17.4 2.3 19.9 10.7 2.5 8.5-2.3 17.4-10.8 19.9z"]
    };
    exports.faAngry = faAngry;
    var faAnkh = {
      prefix: 'fas',
      iconName: 'ankh',
      icon: [320, 512, [], "f644", "M296 256h-44.62C272.46 222.01 288 181.65 288 144 288 55.63 230.69 0 160 0S32 55.63 32 144c0 37.65 15.54 78.01 36.62 112H24c-13.25 0-24 10.74-24 24v32c0 13.25 10.75 24 24 24h96v152c0 13.25 10.75 24 24 24h32c13.25 0 24-10.75 24-24V336h96c13.25 0 24-10.75 24-24v-32c0-13.26-10.75-24-24-24zM160 80c29.61 0 48 24.52 48 64 0 34.66-27.14 78.14-48 100.87-20.86-22.72-48-66.21-48-100.87 0-39.48 18.39-64 48-64z"]
    };
    exports.faAnkh = faAnkh;
    var faAppleAlt = {
      prefix: 'fas',
      iconName: 'apple-alt',
      icon: [448, 512, [], "f5d1", "M350.85 129c25.97 4.67 47.27 18.67 63.92 42 14.65 20.67 24.64 46.67 29.96 78 4.67 28.67 4.32 57.33-1 86-7.99 47.33-23.97 87-47.94 119-28.64 38.67-64.59 58-107.87 58-10.66 0-22.3-3.33-34.96-10-8.66-5.33-18.31-8-28.97-8s-20.3 2.67-28.97 8c-12.66 6.67-24.3 10-34.96 10-43.28 0-79.23-19.33-107.87-58-23.97-32-39.95-71.67-47.94-119-5.32-28.67-5.67-57.33-1-86 5.32-31.33 15.31-57.33 29.96-78 16.65-23.33 37.95-37.33 63.92-42 15.98-2.67 37.95-.33 65.92 7 23.97 6.67 44.28 14.67 60.93 24 16.65-9.33 36.96-17.33 60.93-24 27.98-7.33 49.96-9.67 65.94-7zm-54.94-41c-9.32 8.67-21.65 15-36.96 19-10.66 3.33-22.3 5-34.96 5l-14.98-1c-1.33-9.33-1.33-20 0-32 2.67-24 10.32-42.33 22.97-55 9.32-8.67 21.65-15 36.96-19 10.66-3.33 22.3-5 34.96-5l14.98 1 1 15c0 12.67-1.67 24.33-4.99 35-3.99 15.33-10.31 27.67-18.98 37z"]
    };
    exports.faAppleAlt = faAppleAlt;
    var faArchive = {
      prefix: 'fas',
      iconName: 'archive',
      icon: [512, 512, [], "f187", "M32 448c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V160H32v288zm160-212c0-6.6 5.4-12 12-12h104c6.6 0 12 5.4 12 12v8c0 6.6-5.4 12-12 12H204c-6.6 0-12-5.4-12-12v-8zM480 32H32C14.3 32 0 46.3 0 64v48c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16V64c0-17.7-14.3-32-32-32z"]
    };
    exports.faArchive = faArchive;
    var faArchway = {
      prefix: 'fas',
      iconName: 'archway',
      icon: [576, 512, [], "f557", "M560 448h-16V96H32v352H16.02c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16H176c8.84 0 16-7.16 16-16V320c0-53.02 42.98-96 96-96s96 42.98 96 96l.02 160v16c0 8.84 7.16 16 16 16H560c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zm0-448H16C7.16 0 0 7.16 0 16v32c0 8.84 7.16 16 16 16h544c8.84 0 16-7.16 16-16V16c0-8.84-7.16-16-16-16z"]
    };
    exports.faArchway = faArchway;
    var faArrowAltCircleDown = {
      prefix: 'fas',
      iconName: 'arrow-alt-circle-down',
      icon: [512, 512, [], "f358", "M504 256c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zM212 140v116h-70.9c-10.7 0-16.1 13-8.5 20.5l114.9 114.3c4.7 4.7 12.2 4.7 16.9 0l114.9-114.3c7.6-7.6 2.2-20.5-8.5-20.5H300V140c0-6.6-5.4-12-12-12h-64c-6.6 0-12 5.4-12 12z"]
    };
    exports.faArrowAltCircleDown = faArrowAltCircleDown;
    var faArrowAltCircleLeft = {
      prefix: 'fas',
      iconName: 'arrow-alt-circle-left',
      icon: [512, 512, [], "f359", "M256 504C119 504 8 393 8 256S119 8 256 8s248 111 248 248-111 248-248 248zm116-292H256v-70.9c0-10.7-13-16.1-20.5-8.5L121.2 247.5c-4.7 4.7-4.7 12.2 0 16.9l114.3 114.9c7.6 7.6 20.5 2.2 20.5-8.5V300h116c6.6 0 12-5.4 12-12v-64c0-6.6-5.4-12-12-12z"]
    };
    exports.faArrowAltCircleLeft = faArrowAltCircleLeft;
    var faArrowAltCircleRight = {
      prefix: 'fas',
      iconName: 'arrow-alt-circle-right',
      icon: [512, 512, [], "f35a", "M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zM140 300h116v70.9c0 10.7 13 16.1 20.5 8.5l114.3-114.9c4.7-4.7 4.7-12.2 0-16.9l-114.3-115c-7.6-7.6-20.5-2.2-20.5 8.5V212H140c-6.6 0-12 5.4-12 12v64c0 6.6 5.4 12 12 12z"]
    };
    exports.faArrowAltCircleRight = faArrowAltCircleRight;
    var faArrowAltCircleUp = {
      prefix: 'fas',
      iconName: 'arrow-alt-circle-up',
      icon: [512, 512, [], "f35b", "M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm292 116V256h70.9c10.7 0 16.1-13 8.5-20.5L264.5 121.2c-4.7-4.7-12.2-4.7-16.9 0l-115 114.3c-7.6 7.6-2.2 20.5 8.5 20.5H212v116c0 6.6 5.4 12 12 12h64c6.6 0 12-5.4 12-12z"]
    };
    exports.faArrowAltCircleUp = faArrowAltCircleUp;
    var faArrowCircleDown = {
      prefix: 'fas',
      iconName: 'arrow-circle-down',
      icon: [512, 512, [], "f0ab", "M504 256c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zm-143.6-28.9L288 302.6V120c0-13.3-10.7-24-24-24h-16c-13.3 0-24 10.7-24 24v182.6l-72.4-75.5c-9.3-9.7-24.8-9.9-34.3-.4l-10.9 11c-9.4 9.4-9.4 24.6 0 33.9L239 404.3c9.4 9.4 24.6 9.4 33.9 0l132.7-132.7c9.4-9.4 9.4-24.6 0-33.9l-10.9-11c-9.5-9.5-25-9.3-34.3.4z"]
    };
    exports.faArrowCircleDown = faArrowCircleDown;
    var faArrowCircleLeft = {
      prefix: 'fas',
      iconName: 'arrow-circle-left',
      icon: [512, 512, [], "f0a8", "M256 504C119 504 8 393 8 256S119 8 256 8s248 111 248 248-111 248-248 248zm28.9-143.6L209.4 288H392c13.3 0 24-10.7 24-24v-16c0-13.3-10.7-24-24-24H209.4l75.5-72.4c9.7-9.3 9.9-24.8.4-34.3l-11-10.9c-9.4-9.4-24.6-9.4-33.9 0L107.7 239c-9.4 9.4-9.4 24.6 0 33.9l132.7 132.7c9.4 9.4 24.6 9.4 33.9 0l11-10.9c9.5-9.5 9.3-25-.4-34.3z"]
    };
    exports.faArrowCircleLeft = faArrowCircleLeft;
    var faArrowCircleRight = {
      prefix: 'fas',
      iconName: 'arrow-circle-right',
      icon: [512, 512, [], "f0a9", "M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zm-28.9 143.6l75.5 72.4H120c-13.3 0-24 10.7-24 24v16c0 13.3 10.7 24 24 24h182.6l-75.5 72.4c-9.7 9.3-9.9 24.8-.4 34.3l11 10.9c9.4 9.4 24.6 9.4 33.9 0L404.3 273c9.4-9.4 9.4-24.6 0-33.9L271.6 106.3c-9.4-9.4-24.6-9.4-33.9 0l-11 10.9c-9.5 9.6-9.3 25.1.4 34.4z"]
    };
    exports.faArrowCircleRight = faArrowCircleRight;
    var faArrowCircleUp = {
      prefix: 'fas',
      iconName: 'arrow-circle-up',
      icon: [512, 512, [], "f0aa", "M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm143.6 28.9l72.4-75.5V392c0 13.3 10.7 24 24 24h16c13.3 0 24-10.7 24-24V209.4l72.4 75.5c9.3 9.7 24.8 9.9 34.3.4l10.9-11c9.4-9.4 9.4-24.6 0-33.9L273 107.7c-9.4-9.4-24.6-9.4-33.9 0L106.3 240.4c-9.4 9.4-9.4 24.6 0 33.9l10.9 11c9.6 9.5 25.1 9.3 34.4-.4z"]
    };
    exports.faArrowCircleUp = faArrowCircleUp;
    var faArrowDown = {
      prefix: 'fas',
      iconName: 'arrow-down',
      icon: [448, 512, [], "f063", "M413.1 222.5l22.2 22.2c9.4 9.4 9.4 24.6 0 33.9L241 473c-9.4 9.4-24.6 9.4-33.9 0L12.7 278.6c-9.4-9.4-9.4-24.6 0-33.9l22.2-22.2c9.5-9.5 25-9.3 34.3.4L184 343.4V56c0-13.3 10.7-24 24-24h32c13.3 0 24 10.7 24 24v287.4l114.8-120.5c9.3-9.8 24.8-10 34.3-.4z"]
    };
    exports.faArrowDown = faArrowDown;
    var faArrowLeft = {
      prefix: 'fas',
      iconName: 'arrow-left',
      icon: [448, 512, [], "f060", "M257.5 445.1l-22.2 22.2c-9.4 9.4-24.6 9.4-33.9 0L7 273c-9.4-9.4-9.4-24.6 0-33.9L201.4 44.7c9.4-9.4 24.6-9.4 33.9 0l22.2 22.2c9.5 9.5 9.3 25-.4 34.3L136.6 216H424c13.3 0 24 10.7 24 24v32c0 13.3-10.7 24-24 24H136.6l120.5 114.8c9.8 9.3 10 24.8.4 34.3z"]
    };
    exports.faArrowLeft = faArrowLeft;
    var faArrowRight = {
      prefix: 'fas',
      iconName: 'arrow-right',
      icon: [448, 512, [], "f061", "M190.5 66.9l22.2-22.2c9.4-9.4 24.6-9.4 33.9 0L441 239c9.4 9.4 9.4 24.6 0 33.9L246.6 467.3c-9.4 9.4-24.6 9.4-33.9 0l-22.2-22.2c-9.5-9.5-9.3-25 .4-34.3L311.4 296H24c-13.3 0-24-10.7-24-24v-32c0-13.3 10.7-24 24-24h287.4L190.9 101.2c-9.8-9.3-10-24.8-.4-34.3z"]
    };
    exports.faArrowRight = faArrowRight;
    var faArrowUp = {
      prefix: 'fas',
      iconName: 'arrow-up',
      icon: [448, 512, [], "f062", "M34.9 289.5l-22.2-22.2c-9.4-9.4-9.4-24.6 0-33.9L207 39c9.4-9.4 24.6-9.4 33.9 0l194.3 194.3c9.4 9.4 9.4 24.6 0 33.9L413 289.4c-9.5 9.5-25 9.3-34.3-.4L264 168.6V456c0 13.3-10.7 24-24 24h-32c-13.3 0-24-10.7-24-24V168.6L69.2 289.1c-9.3 9.8-24.8 10-34.3.4z"]
    };
    exports.faArrowUp = faArrowUp;
    var faArrowsAlt = {
      prefix: 'fas',
      iconName: 'arrows-alt',
      icon: [512, 512, [], "f0b2", "M352.201 425.775l-79.196 79.196c-9.373 9.373-24.568 9.373-33.941 0l-79.196-79.196c-15.119-15.119-4.411-40.971 16.971-40.97h51.162L228 284H127.196v51.162c0 21.382-25.851 32.09-40.971 16.971L7.029 272.937c-9.373-9.373-9.373-24.569 0-33.941L86.225 159.8c15.119-15.119 40.971-4.411 40.971 16.971V228H228V127.196h-51.23c-21.382 0-32.09-25.851-16.971-40.971l79.196-79.196c9.373-9.373 24.568-9.373 33.941 0l79.196 79.196c15.119 15.119 4.411 40.971-16.971 40.971h-51.162V228h100.804v-51.162c0-21.382 25.851-32.09 40.97-16.971l79.196 79.196c9.373 9.373 9.373 24.569 0 33.941L425.773 352.2c-15.119 15.119-40.971 4.411-40.97-16.971V284H284v100.804h51.23c21.382 0 32.09 25.851 16.971 40.971z"]
    };
    exports.faArrowsAlt = faArrowsAlt;
    var faArrowsAltH = {
      prefix: 'fas',
      iconName: 'arrows-alt-h',
      icon: [512, 512, [], "f337", "M377.941 169.941V216H134.059v-46.059c0-21.382-25.851-32.09-40.971-16.971L7.029 239.029c-9.373 9.373-9.373 24.568 0 33.941l86.059 86.059c15.119 15.119 40.971 4.411 40.971-16.971V296h243.882v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.568 0-33.941l-86.059-86.059c-15.119-15.12-40.971-4.412-40.971 16.97z"]
    };
    exports.faArrowsAltH = faArrowsAltH;
    var faArrowsAltV = {
      prefix: 'fas',
      iconName: 'arrows-alt-v',
      icon: [256, 512, [], "f338", "M214.059 377.941H168V134.059h46.059c21.382 0 32.09-25.851 16.971-40.971L144.971 7.029c-9.373-9.373-24.568-9.373-33.941 0L24.971 93.088c-15.119 15.119-4.411 40.971 16.971 40.971H88v243.882H41.941c-21.382 0-32.09 25.851-16.971 40.971l86.059 86.059c9.373 9.373 24.568 9.373 33.941 0l86.059-86.059c15.12-15.119 4.412-40.971-16.97-40.971z"]
    };
    exports.faArrowsAltV = faArrowsAltV;
    var faAssistiveListeningSystems = {
      prefix: 'fas',
      iconName: 'assistive-listening-systems',
      icon: [512, 512, [], "f2a2", "M216 260c0 15.464-12.536 28-28 28s-28-12.536-28-28c0-44.112 35.888-80 80-80s80 35.888 80 80c0 15.464-12.536 28-28 28s-28-12.536-28-28c0-13.234-10.767-24-24-24s-24 10.766-24 24zm24-176c-97.047 0-176 78.953-176 176 0 15.464 12.536 28 28 28s28-12.536 28-28c0-66.168 53.832-120 120-120s120 53.832 120 120c0 75.164-71.009 70.311-71.997 143.622L288 404c0 28.673-23.327 52-52 52-15.464 0-28 12.536-28 28s12.536 28 28 28c59.475 0 107.876-48.328 108-107.774.595-34.428 72-48.24 72-144.226 0-97.047-78.953-176-176-176zm-80 236c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zM32 448c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm480-187.993c0-1.518-.012-3.025-.045-4.531C510.076 140.525 436.157 38.47 327.994 1.511c-14.633-4.998-30.549 2.809-35.55 17.442-5 14.633 2.81 30.549 17.442 35.55 85.906 29.354 144.61 110.513 146.077 201.953l.003.188c.026 1.118.033 2.236.033 3.363 0 15.464 12.536 28 28 28s28.001-12.536 28.001-28zM152.971 439.029l-80-80L39.03 392.97l80 80 33.941-33.941z"]
    };
    exports.faAssistiveListeningSystems = faAssistiveListeningSystems;
    var faAsterisk = {
      prefix: 'fas',
      iconName: 'asterisk',
      icon: [512, 512, [], "f069", "M478.21 334.093L336 256l142.21-78.093c11.795-6.477 15.961-21.384 9.232-33.037l-19.48-33.741c-6.728-11.653-21.72-15.499-33.227-8.523L296 186.718l3.475-162.204C299.763 11.061 288.937 0 275.48 0h-38.96c-13.456 0-24.283 11.061-23.994 24.514L216 186.718 77.265 102.607c-11.506-6.976-26.499-3.13-33.227 8.523l-19.48 33.741c-6.728 11.653-2.562 26.56 9.233 33.037L176 256 33.79 334.093c-11.795 6.477-15.961 21.384-9.232 33.037l19.48 33.741c6.728 11.653 21.721 15.499 33.227 8.523L216 325.282l-3.475 162.204C212.237 500.939 223.064 512 236.52 512h38.961c13.456 0 24.283-11.061 23.995-24.514L296 325.282l138.735 84.111c11.506 6.976 26.499 3.13 33.227-8.523l19.48-33.741c6.728-11.653 2.563-26.559-9.232-33.036z"]
    };
    exports.faAsterisk = faAsterisk;
    var faAt = {
      prefix: 'fas',
      iconName: 'at',
      icon: [512, 512, [], "f1fa", "M256 8C118.941 8 8 118.919 8 256c0 137.059 110.919 248 248 248 48.154 0 95.342-14.14 135.408-40.223 12.005-7.815 14.625-24.288 5.552-35.372l-10.177-12.433c-7.671-9.371-21.179-11.667-31.373-5.129C325.92 429.757 291.314 440 256 440c-101.458 0-184-82.542-184-184S154.542 72 256 72c100.139 0 184 57.619 184 160 0 38.786-21.093 79.742-58.17 83.693-17.349-.454-16.91-12.857-13.476-30.024l23.433-121.11C394.653 149.75 383.308 136 368.225 136h-44.981a13.518 13.518 0 0 0-13.432 11.993l-.01.092c-14.697-17.901-40.448-21.775-59.971-21.775-74.58 0-137.831 62.234-137.831 151.46 0 65.303 36.785 105.87 96 105.87 26.984 0 57.369-15.637 74.991-38.333 9.522 34.104 40.613 34.103 70.71 34.103C462.609 379.41 504 307.798 504 232 504 95.653 394.023 8 256 8zm-21.68 304.43c-22.249 0-36.07-15.623-36.07-40.771 0-44.993 30.779-72.729 58.63-72.729 22.292 0 35.601 15.241 35.601 40.77 0 45.061-33.875 72.73-58.161 72.73z"]
    };
    exports.faAt = faAt;
    var faAtlas = {
      prefix: 'fas',
      iconName: 'atlas',
      icon: [448, 512, [], "f558", "M318.38 208h-39.09c-1.49 27.03-6.54 51.35-14.21 70.41 27.71-13.24 48.02-39.19 53.3-70.41zm0-32c-5.29-31.22-25.59-57.17-53.3-70.41 7.68 19.06 12.72 43.38 14.21 70.41h39.09zM224 97.31c-7.69 7.45-20.77 34.42-23.43 78.69h46.87c-2.67-44.26-15.75-71.24-23.44-78.69zm-41.08 8.28c-27.71 13.24-48.02 39.19-53.3 70.41h39.09c1.49-27.03 6.53-51.35 14.21-70.41zm0 172.82c-7.68-19.06-12.72-43.38-14.21-70.41h-39.09c5.28 31.22 25.59 57.17 53.3 70.41zM247.43 208h-46.87c2.66 44.26 15.74 71.24 23.43 78.69 7.7-7.45 20.78-34.43 23.44-78.69zM448 358.4V25.6c0-16-9.6-25.6-25.6-25.6H96C41.6 0 0 41.6 0 96v320c0 54.4 41.6 96 96 96h326.4c12.8 0 25.6-9.6 25.6-25.6v-16c0-6.4-3.2-12.8-9.6-19.2-3.2-16-3.2-60.8 0-73.6 6.4-3.2 9.6-9.6 9.6-19.2zM224 64c70.69 0 128 57.31 128 128s-57.31 128-128 128S96 262.69 96 192 153.31 64 224 64zm160 384H96c-19.2 0-32-12.8-32-32s16-32 32-32h288v64z"]
    };
    exports.faAtlas = faAtlas;
    var faAtom = {
      prefix: 'fas',
      iconName: 'atom',
      icon: [448, 512, [], "f5d2", "M223.99908,224a32,32,0,1,0,32.00782,32A32.06431,32.06431,0,0,0,223.99908,224Zm214.172-96c-10.877-19.5-40.50979-50.75-116.27544-41.875C300.39168,34.875,267.63386,0,223.99908,0s-76.39066,34.875-97.89653,86.125C50.3369,77.375,20.706,108.5,9.82907,128-6.54984,157.375-5.17484,201.125,34.958,256-5.17484,310.875-6.54984,354.625,9.82907,384c29.13087,52.375,101.64652,43.625,116.27348,41.875C147.60842,477.125,180.36429,512,223.99908,512s76.3926-34.875,97.89652-86.125c14.62891,1.75,87.14456,10.5,116.27544-41.875C454.55,354.625,453.175,310.875,413.04017,256,453.175,201.125,454.55,157.375,438.171,128ZM63.33886,352c-4-7.25-.125-24.75,15.00391-48.25,6.87695,6.5,14.12891,12.875,21.88087,19.125,1.625,13.75,4,27.125,6.75,40.125C82.34472,363.875,67.09081,358.625,63.33886,352Zm36.88478-162.875c-7.752,6.25-15.00392,12.625-21.88087,19.125-15.12891-23.5-19.00392-41-15.00391-48.25,3.377-6.125,16.37891-11.5,37.88478-11.5,1.75,0,3.875.375,5.75.375C104.09864,162.25,101.84864,175.625,100.22364,189.125ZM223.99908,64c9.50195,0,22.25586,13.5,33.88282,37.25-11.252,3.75-22.50391,8-33.88282,12.875-11.377-4.875-22.62892-9.125-33.88283-12.875C201.74516,77.5,214.49712,64,223.99908,64Zm0,384c-9.502,0-22.25392-13.5-33.88283-37.25,11.25391-3.75,22.50587-8,33.88283-12.875C235.378,402.75,246.62994,407,257.8819,410.75,246.25494,434.5,233.501,448,223.99908,448Zm0-112a80,80,0,1,1,80-80A80.00023,80.00023,0,0,1,223.99908,336ZM384.6593,352c-3.625,6.625-19.00392,11.875-43.63479,11,2.752-13,5.127-26.375,6.752-40.125,7.75195-6.25,15.00391-12.625,21.87891-19.125C384.7843,327.25,388.6593,344.75,384.6593,352ZM369.65538,208.25c-6.875-6.5-14.127-12.875-21.87891-19.125-1.625-13.5-3.875-26.875-6.752-40.25,1.875,0,4.002-.375,5.752-.375,21.50391,0,34.50782,5.375,37.88283,11.5C388.6593,167.25,384.7843,184.75,369.65538,208.25Z"]
    };
    exports.faAtom = faAtom;
    var faAudioDescription = {
      prefix: 'fas',
      iconName: 'audio-description',
      icon: [512, 512, [], "f29e", "M162.925 238.709l8.822 30.655h-25.606l9.041-30.652c1.277-4.421 2.651-9.994 3.872-15.245 1.22 5.251 2.594 10.823 3.871 15.242zm166.474-32.099h-14.523v98.781h14.523c29.776 0 46.175-17.678 46.175-49.776 0-32.239-17.49-49.005-46.175-49.005zM512 112v288c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48zM245.459 336.139l-57.097-168A12.001 12.001 0 0 0 177 160h-35.894a12.001 12.001 0 0 0-11.362 8.139l-57.097 168C70.003 343.922 75.789 352 84.009 352h29.133a12 12 0 0 0 11.535-8.693l8.574-29.906h51.367l8.793 29.977A12 12 0 0 0 204.926 352h29.172c8.22 0 14.006-8.078 11.361-15.861zm184.701-80.525c0-58.977-37.919-95.614-98.96-95.614h-57.366c-6.627 0-12 5.373-12 12v168c0 6.627 5.373 12 12 12H331.2c61.041 0 98.96-36.933 98.96-96.386z"]
    };
    exports.faAudioDescription = faAudioDescription;
    var faAward = {
      prefix: 'fas',
      iconName: 'award',
      icon: [384, 512, [], "f559", "M97.12 362.63c-8.69-8.69-4.16-6.24-25.12-11.85-9.51-2.55-17.87-7.45-25.43-13.32L1.2 448.7c-4.39 10.77 3.81 22.47 15.43 22.03l52.69-2.01L105.56 507c8 8.44 22.04 5.81 26.43-4.96l52.05-127.62c-10.84 6.04-22.87 9.58-35.31 9.58-19.5 0-37.82-7.59-51.61-21.37zM382.8 448.7l-45.37-111.24c-7.56 5.88-15.92 10.77-25.43 13.32-21.07 5.64-16.45 3.18-25.12 11.85-13.79 13.78-32.12 21.37-51.62 21.37-12.44 0-24.47-3.55-35.31-9.58L252 502.04c4.39 10.77 18.44 13.4 26.43 4.96l36.25-38.28 52.69 2.01c11.62.44 19.82-11.27 15.43-22.03zM263 340c15.28-15.55 17.03-14.21 38.79-20.14 13.89-3.79 24.75-14.84 28.47-28.98 7.48-28.4 5.54-24.97 25.95-45.75 10.17-10.35 14.14-25.44 10.42-39.58-7.47-28.38-7.48-24.42 0-52.83 3.72-14.14-.25-29.23-10.42-39.58-20.41-20.78-18.47-17.36-25.95-45.75-3.72-14.14-14.58-25.19-28.47-28.98-27.88-7.61-24.52-5.62-44.95-26.41-10.17-10.35-25-14.4-38.89-10.61-27.87 7.6-23.98 7.61-51.9 0-13.89-3.79-28.72.25-38.89 10.61-20.41 20.78-17.05 18.8-44.94 26.41-13.89 3.79-24.75 14.84-28.47 28.98-7.47 28.39-5.54 24.97-25.95 45.75-10.17 10.35-14.15 25.44-10.42 39.58 7.47 28.36 7.48 24.4 0 52.82-3.72 14.14.25 29.23 10.42 39.59 20.41 20.78 18.47 17.35 25.95 45.75 3.72 14.14 14.58 25.19 28.47 28.98C104.6 325.96 106.27 325 121 340c13.23 13.47 33.84 15.88 49.74 5.82a39.676 39.676 0 0 1 42.53 0c15.89 10.06 36.5 7.65 49.73-5.82zM97.66 175.96c0-53.03 42.24-96.02 94.34-96.02s94.34 42.99 94.34 96.02-42.24 96.02-94.34 96.02-94.34-42.99-94.34-96.02z"]
    };
    exports.faAward = faAward;
    var faBaby = {
      prefix: 'fas',
      iconName: 'baby',
      icon: [384, 512, [], "f77c", "M192 160c44.2 0 80-35.8 80-80S236.2 0 192 0s-80 35.8-80 80 35.8 80 80 80zm-53.4 248.8l25.6-32-61.5-51.2L56.8 383c-11.4 14.2-11.7 34.4-.8 49l48 64c7.9 10.5 19.9 16 32 16 8.3 0 16.8-2.6 24-8 17.7-13.2 21.2-38.3 8-56l-29.4-39.2zm142.7-83.2l-61.5 51.2 25.6 32L216 448c-13.2 17.7-9.7 42.8 8 56 7.2 5.4 15.6 8 24 8 12.2 0 24.2-5.5 32-16l48-64c10.9-14.6 10.6-34.8-.8-49l-45.9-57.4zM376.7 145c-12.7-18.1-37.6-22.4-55.7-9.8l-40.6 28.5c-52.7 37-124.2 37-176.8 0L63 135.3C44.9 122.6 20 127 7.3 145-5.4 163.1-1 188 17 200.7l40.6 28.5c17 11.9 35.4 20.9 54.4 27.9V288h160v-30.8c19-7 37.4-16 54.4-27.9l40.6-28.5c18.1-12.8 22.4-37.7 9.7-55.8z"]
    };
    exports.faBaby = faBaby;
    var faBabyCarriage = {
      prefix: 'fas',
      iconName: 'baby-carriage',
      icon: [512, 512, [], "f77d", "M144.8 17c-11.3-17.8-37.2-22.8-54-9.4C35.3 51.9 0 118 0 192h256L144.8 17zM496 96h-48c-35.3 0-64 28.7-64 64v64H0c0 50.6 23 96.4 60.3 130.7C25.7 363.6 0 394.7 0 432c0 44.2 35.8 80 80 80s80-35.8 80-80c0-8.9-1.8-17.2-4.4-25.2 21.6 5.9 44.6 9.2 68.4 9.2s46.9-3.3 68.4-9.2c-2.7 8-4.4 16.3-4.4 25.2 0 44.2 35.8 80 80 80s80-35.8 80-80c0-37.3-25.7-68.4-60.3-77.3C425 320.4 448 274.6 448 224v-64h48c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zM80 464c-17.6 0-32-14.4-32-32s14.4-32 32-32 32 14.4 32 32-14.4 32-32 32zm320-32c0 17.6-14.4 32-32 32s-32-14.4-32-32 14.4-32 32-32 32 14.4 32 32z"]
    };
    exports.faBabyCarriage = faBabyCarriage;
    var faBackspace = {
      prefix: 'fas',
      iconName: 'backspace',
      icon: [640, 512, [], "f55a", "M576 64H205.26A63.97 63.97 0 0 0 160 82.75L9.37 233.37c-12.5 12.5-12.5 32.76 0 45.25L160 429.25c12 12 28.28 18.75 45.25 18.75H576c35.35 0 64-28.65 64-64V128c0-35.35-28.65-64-64-64zm-84.69 254.06c6.25 6.25 6.25 16.38 0 22.63l-22.62 22.62c-6.25 6.25-16.38 6.25-22.63 0L384 301.25l-62.06 62.06c-6.25 6.25-16.38 6.25-22.63 0l-22.62-22.62c-6.25-6.25-6.25-16.38 0-22.63L338.75 256l-62.06-62.06c-6.25-6.25-6.25-16.38 0-22.63l22.62-22.62c6.25-6.25 16.38-6.25 22.63 0L384 210.75l62.06-62.06c6.25-6.25 16.38-6.25 22.63 0l22.62 22.62c6.25 6.25 6.25 16.38 0 22.63L429.25 256l62.06 62.06z"]
    };
    exports.faBackspace = faBackspace;
    var faBackward = {
      prefix: 'fas',
      iconName: 'backward',
      icon: [512, 512, [], "f04a", "M11.5 280.6l192 160c20.6 17.2 52.5 2.8 52.5-24.6V96c0-27.4-31.9-41.8-52.5-24.6l-192 160c-15.3 12.8-15.3 36.4 0 49.2zm256 0l192 160c20.6 17.2 52.5 2.8 52.5-24.6V96c0-27.4-31.9-41.8-52.5-24.6l-192 160c-15.3 12.8-15.3 36.4 0 49.2z"]
    };
    exports.faBackward = faBackward;
    var faBacon = {
      prefix: 'fas',
      iconName: 'bacon',
      icon: [576, 512, [], "f7e5", "M218.92 336.39c34.89-34.89 44.2-59.7 54.05-86 10.61-28.29 21.59-57.54 61.37-97.34s69.05-50.77 97.35-61.38c23.88-9 46.64-17.68 76.79-45.37L470.81 8.91a31 31 0 0 0-40.18-2.83c-13.64 10.1-25.15 14.39-41 20.3C247 79.52 209.26 191.29 200.65 214.1c-29.75 78.83-89.55 94.68-98.72 98.09-24.86 9.26-54.73 20.38-91.07 50.36C-3 374-3.63 395 9.07 407.61l35.76 35.51C80 410.52 107 400.15 133 390.39c26.27-9.84 51.06-19.12 85.92-54zm348-232l-35.75-35.51c-35.19 32.63-62.18 43-88.25 52.79-26.26 9.85-51.06 19.16-85.95 54s-44.19 59.69-54 86C292.33 290 281.34 319.22 241.55 359s-69 50.73-97.3 61.32c-23.86 9-46.61 17.66-76.72 45.33l37.68 37.43a31 31 0 0 0 40.18 2.82c13.6-10.06 25.09-14.34 40.94-20.24 142.2-53 180-164.1 188.94-187.69C405 219.18 464.8 203.3 474 199.86c24.87-9.27 54.74-20.4 91.11-50.41 13.89-11.4 14.52-32.45 1.82-45.05z"]
    };
    exports.faBacon = faBacon;
    var faBacteria = {
      prefix: 'fas',
      iconName: 'bacteria',
      icon: [640, 512, [], "e059", "M272.35,226.4A17.71,17.71,0,0,0,281.46,203l-4-9.08a121.29,121.29,0,0,1,12.36-3.08A83.34,83.34,0,0,0,323.57,177l10,9a17.76,17.76,0,1,0,23.92-26.27l-9.72-8.76a83.12,83.12,0,0,0,11.65-48.18l11.85-3.51a17.73,17.73,0,1,0-10.15-34l-11.34,3.36a84,84,0,0,0-36.38-35.57l2.84-10.85a17.8,17.8,0,0,0-34.47-8.93l-2.82,10.78a83.25,83.25,0,0,0-16.74,1.1C250.83,27,240,30.22,229.1,33.39l-3.38-9.46a17.8,17.8,0,0,0-33.56,11.89l3.49,9.8a286.74,286.74,0,0,0-43.94,23.57l-6.32-8.43a17.9,17.9,0,0,0-24.94-3.6A17.69,17.69,0,0,0,116.84,82l6.45,8.61a286.59,286.59,0,0,0-34.95,35.33l-8.82-6.42a17.84,17.84,0,0,0-24.89,3.86,17.66,17.66,0,0,0,3.88,24.77l8.88,6.47a286.6,286.6,0,0,0-23,43.91l-10.48-3.59a17.73,17.73,0,1,0-11.59,33.52L32.67,232c-2.79,10-5.79,19.84-7.52,30.22a83.16,83.16,0,0,0-.82,19l-11.58,3.43a17.73,17.73,0,1,0,10.13,34l11.27-3.33a83.51,83.51,0,0,0,36.39,35.43l-2.88,11.06a17.81,17.81,0,0,0,34.48,8.92l2.87-11c1,0,2.07.26,3.1.26a83.39,83.39,0,0,0,45.65-13.88l8.59,8.8a17.77,17.77,0,0,0,25.56-24.7l-9.14-9.37a83.41,83.41,0,0,0,12.08-31.05,119.08,119.08,0,0,1,3.87-15.53l9,4.22a17.74,17.74,0,1,0,15.15-32.09l-8.8-4.11c.67-1,1.2-2.08,1.9-3.05a119.89,119.89,0,0,1,7.87-9.41,121.73,121.73,0,0,1,11.65-11.4,119.49,119.49,0,0,1,9.94-7.82c1.12-.77,2.32-1.42,3.47-2.15l3.92,8.85a17.86,17.86,0,0,0,16.32,10.58A18.14,18.14,0,0,0,272.35,226.4ZM128,256a32,32,0,1,1,32-32A32,32,0,0,1,128,256Zm80-96a16,16,0,1,1,16-16A16,16,0,0,1,208,160Zm431.26,45.3a17.79,17.79,0,0,0-17.06-12.69,17.55,17.55,0,0,0-5.08.74l-11.27,3.33a83.61,83.61,0,0,0-36.39-35.43l2.88-11.06a17.81,17.81,0,0,0-34.48-8.91l-2.87,11c-1,0-2.07-.26-3.1-.26a83.32,83.32,0,0,0-45.65,13.89l-8.59-8.81a17.77,17.77,0,0,0-25.56,24.7l9.14,9.37a83.28,83.28,0,0,0-12.08,31.06,119.34,119.34,0,0,1-3.87,15.52l-9-4.22a17.74,17.74,0,1,0-15.15,32.09l8.8,4.11c-.67,1-1.2,2.08-1.89,3.05a117.71,117.71,0,0,1-7.94,9.47,119,119,0,0,1-11.57,11.33,121.59,121.59,0,0,1-10,7.83c-1.12.77-2.32,1.42-3.47,2.15l-3.92-8.85a17.86,17.86,0,0,0-16.32-10.58,18.14,18.14,0,0,0-7.18,1.5A17.71,17.71,0,0,0,358.54,309l4,9.08a118.71,118.71,0,0,1-12.36,3.08,83.34,83.34,0,0,0-33.77,13.9l-10-9a17.77,17.77,0,1,0-23.92,26.28l9.72,8.75a83.12,83.12,0,0,0-11.65,48.18l-11.86,3.51a17.73,17.73,0,1,0,10.16,34l11.34-3.36A84,84,0,0,0,326.61,479l-2.84,10.85a17.8,17.8,0,0,0,34.47,8.93L361.06,488a83.3,83.3,0,0,0,16.74-1.1c11.37-1.89,22.24-5.07,33.1-8.24l3.38,9.46a17.8,17.8,0,0,0,33.56-11.89l-3.49-9.79a287.66,287.66,0,0,0,43.94-23.58l6.32,8.43a17.88,17.88,0,0,0,24.93,3.6A17.67,17.67,0,0,0,523.16,430l-6.45-8.61a287.37,287.37,0,0,0,34.95-35.34l8.82,6.42a17.76,17.76,0,1,0,21-28.63l-8.88-6.46a287.17,287.17,0,0,0,23-43.92l10.48,3.59a17.73,17.73,0,1,0,11.59-33.52L607.33,280c2.79-10,5.79-19.84,7.52-30.21a83.27,83.27,0,0,0,.82-19.05l11.58-3.43A17.7,17.7,0,0,0,639.26,205.3ZM416,416a32,32,0,1,1,32-32A32,32,0,0,1,416,416Z"]
    };
    exports.faBacteria = faBacteria;
    var faBacterium = {
      prefix: 'fas',
      iconName: 'bacterium',
      icon: [512, 512, [], "e05a", "M511,102.93A23.76,23.76,0,0,0,481.47,87l-15.12,4.48a111.85,111.85,0,0,0-48.5-47.42l3.79-14.47a23.74,23.74,0,0,0-46-11.91l-3.76,14.37a111.94,111.94,0,0,0-22.33,1.47,386.74,386.74,0,0,0-44.33,10.41l-4.3-12a23.74,23.74,0,0,0-44.75,15.85l4.3,12.05a383.4,383.4,0,0,0-58.69,31.83l-8-10.63a23.85,23.85,0,0,0-33.24-4.8,23.57,23.57,0,0,0-4.83,33.09l8,10.63a386.14,386.14,0,0,0-46.7,47.44l-11-8a23.68,23.68,0,1,0-28,38.17l11.09,8.06a383.45,383.45,0,0,0-30.92,58.75l-12.93-4.43a23.65,23.65,0,1,0-15.47,44.69l13,4.48a385.81,385.81,0,0,0-9.3,40.53A111.58,111.58,0,0,0,32.44,375L17,379.56a23.64,23.64,0,0,0,13.51,45.31l15-4.44a111.49,111.49,0,0,0,48.53,47.24l-3.85,14.75a23.66,23.66,0,0,0,17,28.83,24.7,24.7,0,0,0,6,.75,23.73,23.73,0,0,0,23-17.7L140,479.67c1.37.05,2.77.35,4.13.35A111.22,111.22,0,0,0,205,461.5l11.45,11.74a23.7,23.7,0,0,0,34.08-32.93l-12.19-12.5a111,111,0,0,0,16.11-41.4,158.69,158.69,0,0,1,5.16-20.71l12,5.64a23.66,23.66,0,1,0,20.19-42.79l-11.72-5.49c.89-1.32,1.59-2.77,2.52-4.06a157.86,157.86,0,0,1,10.46-12.49,159.5,159.5,0,0,1,15.59-15.28,162.18,162.18,0,0,1,13.23-10.4c1.5-1,3.1-1.89,4.63-2.87l5.23,11.8a23.74,23.74,0,0,0,43.48-19.08l-5.36-12.11a158.87,158.87,0,0,1,16.49-4.1,111,111,0,0,0,45-18.54l13.33,12a23.69,23.69,0,1,0,31.88-35l-12.94-11.67A110.83,110.83,0,0,0,479.21,137L495,132.32A23.61,23.61,0,0,0,511,102.93ZM160,368a48,48,0,1,1,48-48A48,48,0,0,1,160,368Zm80-136a24,24,0,1,1,24-24A24,24,0,0,1,240,232Z"]
    };
    exports.faBacterium = faBacterium;
    var faBahai = {
      prefix: 'fas',
      iconName: 'bahai',
      icon: [512, 512, [], "f666", "M496.25 202.52l-110-15.44 41.82-104.34c6.67-16.64-11.6-32.18-26.59-22.63L307.44 120 273.35 12.82C270.64 4.27 263.32 0 256 0c-7.32 0-14.64 4.27-17.35 12.82l-34.09 107.19-94.04-59.89c-14.99-9.55-33.25 5.99-26.59 22.63l41.82 104.34-110 15.43c-17.54 2.46-21.68 26.27-6.03 34.67l98.16 52.66-74.48 83.54c-10.92 12.25-1.72 30.93 13.29 30.93 1.31 0 2.67-.14 4.07-.45l108.57-23.65-4.11 112.55c-.43 11.65 8.87 19.22 18.41 19.22 5.15 0 10.39-2.21 14.2-7.18l68.18-88.9 68.18 88.9c3.81 4.97 9.04 7.18 14.2 7.18 9.54 0 18.84-7.57 18.41-19.22l-4.11-112.55 108.57 23.65c17.36 3.76 29.21-17.2 17.35-30.49l-74.48-83.54 98.16-52.66c15.64-8.39 11.5-32.2-6.04-34.66zM338.51 311.68l-51.89-11.3 1.97 53.79L256 311.68l-32.59 42.49 1.96-53.79-51.89 11.3 35.6-39.93-46.92-25.17 52.57-7.38-19.99-49.87 44.95 28.62L256 166.72l16.29 51.23 44.95-28.62-19.99 49.87 52.57 7.38-46.92 25.17 35.61 39.93z"]
    };
    exports.faBahai = faBahai;
    var faBalanceScale = {
      prefix: 'fas',
      iconName: 'balance-scale',
      icon: [640, 512, [], "f24e", "M256 336h-.02c0-16.18 1.34-8.73-85.05-181.51-17.65-35.29-68.19-35.36-85.87 0C-2.06 328.75.02 320.33.02 336H0c0 44.18 57.31 80 128 80s128-35.82 128-80zM128 176l72 144H56l72-144zm511.98 160c0-16.18 1.34-8.73-85.05-181.51-17.65-35.29-68.19-35.36-85.87 0-87.12 174.26-85.04 165.84-85.04 181.51H384c0 44.18 57.31 80 128 80s128-35.82 128-80h-.02zM440 320l72-144 72 144H440zm88 128H352V153.25c23.51-10.29 41.16-31.48 46.39-57.25H528c8.84 0 16-7.16 16-16V48c0-8.84-7.16-16-16-16H383.64C369.04 12.68 346.09 0 320 0s-49.04 12.68-63.64 32H112c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h129.61c5.23 25.76 22.87 46.96 46.39 57.25V448H112c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h416c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16z"]
    };
    exports.faBalanceScale = faBalanceScale;
    var faBalanceScaleLeft = {
      prefix: 'fas',
      iconName: 'balance-scale-left',
      icon: [640, 512, [], "f515", "M528 448H352V153.25c20.42-8.94 36.1-26.22 43.38-47.47l132-44.26c8.38-2.81 12.89-11.88 10.08-20.26l-10.17-30.34C524.48 2.54 515.41-1.97 507.03.84L389.11 40.37C375.3 16.36 349.69 0 320 0c-44.18 0-80 35.82-80 80 0 3.43.59 6.71 1.01 10.03l-128.39 43.05c-8.38 2.81-12.89 11.88-10.08 20.26l10.17 30.34c2.81 8.38 11.88 12.89 20.26 10.08l142.05-47.63c4.07 2.77 8.43 5.12 12.99 7.12V496c0 8.84 7.16 16 16 16h224c8.84 0 16-7.16 16-16v-32c-.01-8.84-7.17-16-16.01-16zm111.98-144c0-16.18 1.34-8.73-85.05-181.51-17.65-35.29-68.19-35.36-85.87 0-87.12 174.26-85.04 165.84-85.04 181.51H384c0 44.18 57.31 80 128 80s128-35.82 128-80h-.02zM440 288l72-144 72 144H440zm-269.07-37.51c-17.65-35.29-68.19-35.36-85.87 0C-2.06 424.75.02 416.33.02 432H0c0 44.18 57.31 80 128 80s128-35.82 128-80h-.02c0-16.18 1.34-8.73-85.05-181.51zM56 416l72-144 72 144H56z"]
    };
    exports.faBalanceScaleLeft = faBalanceScaleLeft;
    var faBalanceScaleRight = {
      prefix: 'fas',
      iconName: 'balance-scale-right',
      icon: [640, 512, [], "f516", "M96 464v32c0 8.84 7.16 16 16 16h224c8.84 0 16-7.16 16-16V153.25c4.56-2 8.92-4.35 12.99-7.12l142.05 47.63c8.38 2.81 17.45-1.71 20.26-10.08l10.17-30.34c2.81-8.38-1.71-17.45-10.08-20.26l-128.4-43.05c.42-3.32 1.01-6.6 1.01-10.03 0-44.18-35.82-80-80-80-29.69 0-55.3 16.36-69.11 40.37L132.96.83c-8.38-2.81-17.45 1.71-20.26 10.08l-10.17 30.34c-2.81 8.38 1.71 17.45 10.08 20.26l132 44.26c7.28 21.25 22.96 38.54 43.38 47.47V448H112c-8.84 0-16 7.16-16 16zM0 304c0 44.18 57.31 80 128 80s128-35.82 128-80h-.02c0-15.67 2.08-7.25-85.05-181.51-17.68-35.36-68.22-35.29-85.87 0C-1.32 295.27.02 287.82.02 304H0zm56-16l72-144 72 144H56zm328.02 144H384c0 44.18 57.31 80 128 80s128-35.82 128-80h-.02c0-15.67 2.08-7.25-85.05-181.51-17.68-35.36-68.22-35.29-85.87 0-86.38 172.78-85.04 165.33-85.04 181.51zM440 416l72-144 72 144H440z"]
    };
    exports.faBalanceScaleRight = faBalanceScaleRight;
    var faBan = {
      prefix: 'fas',
      iconName: 'ban',
      icon: [512, 512, [], "f05e", "M256 8C119.034 8 8 119.033 8 256s111.034 248 248 248 248-111.034 248-248S392.967 8 256 8zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676zM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676z"]
    };
    exports.faBan = faBan;
    var faBandAid = {
      prefix: 'fas',
      iconName: 'band-aid',
      icon: [640, 512, [], "f462", "M0 160v192c0 35.3 28.7 64 64 64h96V96H64c-35.3 0-64 28.7-64 64zm576-64h-96v320h96c35.3 0 64-28.7 64-64V160c0-35.3-28.7-64-64-64zM192 416h256V96H192v320zm176-232c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm0 96c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm-96-96c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm0 96c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24z"]
    };
    exports.faBandAid = faBandAid;
    var faBarcode = {
      prefix: 'fas',
      iconName: 'barcode',
      icon: [512, 512, [], "f02a", "M0 448V64h18v384H0zm26.857-.273V64H36v383.727h-9.143zm27.143 0V64h8.857v383.727H54zm44.857 0V64h8.857v383.727h-8.857zm36 0V64h17.714v383.727h-17.714zm44.857 0V64h8.857v383.727h-8.857zm18 0V64h8.857v383.727h-8.857zm18 0V64h8.857v383.727h-8.857zm35.715 0V64h18v383.727h-18zm44.857 0V64h18v383.727h-18zm35.999 0V64h18.001v383.727h-18.001zm36.001 0V64h18.001v383.727h-18.001zm26.857 0V64h18v383.727h-18zm45.143 0V64h26.857v383.727h-26.857zm35.714 0V64h9.143v383.727H476zm18 .273V64h18v384h-18z"]
    };
    exports.faBarcode = faBarcode;
    var faBars = {
      prefix: 'fas',
      iconName: 'bars',
      icon: [448, 512, [], "f0c9", "M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"]
    };
    exports.faBars = faBars;
    var faBaseballBall = {
      prefix: 'fas',
      iconName: 'baseball-ball',
      icon: [496, 512, [], "f433", "M368.5 363.9l28.8-13.9c11.1 22.9 26 43.2 44.1 60.9 34-42.5 54.5-96.3 54.5-154.9 0-58.5-20.4-112.2-54.2-154.6-17.8 17.3-32.6 37.1-43.6 59.5l-28.7-14.1c12.8-26 30-49 50.8-69C375.6 34.7 315 8 248 8 181.1 8 120.5 34.6 75.9 77.7c20.7 19.9 37.9 42.9 50.7 68.8l-28.7 14.1c-11-22.3-25.7-42.1-43.5-59.4C20.4 143.7 0 197.4 0 256c0 58.6 20.4 112.3 54.4 154.7 18.2-17.7 33.2-38 44.3-61l28.8 13.9c-12.9 26.7-30.3 50.3-51.5 70.7 44.5 43.1 105.1 69.7 172 69.7 66.8 0 127.3-26.5 171.9-69.5-21.1-20.4-38.5-43.9-51.4-70.6zm-228.3-32l-30.5-9.8c14.9-46.4 12.7-93.8-.6-134l30.4-10c15 45.6 18 99.9.7 153.8zm216.3-153.4l30.4 10c-13.2 40.1-15.5 87.5-.6 134l-30.5 9.8c-17.3-54-14.3-108.3.7-153.8z"]
    };
    exports.faBaseballBall = faBaseballBall;
    var faBasketballBall = {
      prefix: 'fas',
      iconName: 'basketball-ball',
      icon: [496, 512, [], "f434", "M212.3 10.3c-43.8 6.3-86.2 24.1-122.2 53.8l77.4 77.4c27.8-35.8 43.3-81.2 44.8-131.2zM248 222L405.9 64.1c-42.4-35-93.6-53.5-145.5-56.1-1.2 63.9-21.5 122.3-58.7 167.7L248 222zM56.1 98.1c-29.7 36-47.5 78.4-53.8 122.2 50-1.5 95.5-17 131.2-44.8L56.1 98.1zm272.2 204.2c45.3-37.1 103.7-57.4 167.7-58.7-2.6-51.9-21.1-103.1-56.1-145.5L282 256l46.3 46.3zM248 290L90.1 447.9c42.4 34.9 93.6 53.5 145.5 56.1 1.3-64 21.6-122.4 58.7-167.7L248 290zm191.9 123.9c29.7-36 47.5-78.4 53.8-122.2-50.1 1.6-95.5 17.1-131.2 44.8l77.4 77.4zM167.7 209.7C122.3 246.9 63.9 267.3 0 268.4c2.6 51.9 21.1 103.1 56.1 145.5L214 256l-46.3-46.3zm116 292c43.8-6.3 86.2-24.1 122.2-53.8l-77.4-77.4c-27.7 35.7-43.2 81.2-44.8 131.2z"]
    };
    exports.faBasketballBall = faBasketballBall;
    var faBath = {
      prefix: 'fas',
      iconName: 'bath',
      icon: [512, 512, [], "f2cd", "M32,384a95.4,95.4,0,0,0,32,71.09V496a16,16,0,0,0,16,16h32a16,16,0,0,0,16-16V480H384v16a16,16,0,0,0,16,16h32a16,16,0,0,0,16-16V455.09A95.4,95.4,0,0,0,480,384V336H32ZM496,256H80V69.25a21.26,21.26,0,0,1,36.28-15l19.27,19.26c-13.13,29.88-7.61,59.11,8.62,79.73l-.17.17A16,16,0,0,0,144,176l11.31,11.31a16,16,0,0,0,22.63,0L283.31,81.94a16,16,0,0,0,0-22.63L272,48a16,16,0,0,0-22.62,0l-.17.17c-20.62-16.23-49.83-21.75-79.73-8.62L150.22,20.28A69.25,69.25,0,0,0,32,69.25V256H16A16,16,0,0,0,0,272v16a16,16,0,0,0,16,16H496a16,16,0,0,0,16-16V272A16,16,0,0,0,496,256Z"]
    };
    exports.faBath = faBath;
    var faBatteryEmpty = {
      prefix: 'fas',
      iconName: 'battery-empty',
      icon: [640, 512, [], "f244", "M544 160v64h32v64h-32v64H64V160h480m16-64H48c-26.51 0-48 21.49-48 48v224c0 26.51 21.49 48 48 48h512c26.51 0 48-21.49 48-48v-16h8c13.255 0 24-10.745 24-24V184c0-13.255-10.745-24-24-24h-8v-16c0-26.51-21.49-48-48-48z"]
    };
    exports.faBatteryEmpty = faBatteryEmpty;
    var faBatteryFull = {
      prefix: 'fas',
      iconName: 'battery-full',
      icon: [640, 512, [], "f240", "M544 160v64h32v64h-32v64H64V160h480m16-64H48c-26.51 0-48 21.49-48 48v224c0 26.51 21.49 48 48 48h512c26.51 0 48-21.49 48-48v-16h8c13.255 0 24-10.745 24-24V184c0-13.255-10.745-24-24-24h-8v-16c0-26.51-21.49-48-48-48zm-48 96H96v128h416V192z"]
    };
    exports.faBatteryFull = faBatteryFull;
    var faBatteryHalf = {
      prefix: 'fas',
      iconName: 'battery-half',
      icon: [640, 512, [], "f242", "M544 160v64h32v64h-32v64H64V160h480m16-64H48c-26.51 0-48 21.49-48 48v224c0 26.51 21.49 48 48 48h512c26.51 0 48-21.49 48-48v-16h8c13.255 0 24-10.745 24-24V184c0-13.255-10.745-24-24-24h-8v-16c0-26.51-21.49-48-48-48zm-240 96H96v128h224V192z"]
    };
    exports.faBatteryHalf = faBatteryHalf;
    var faBatteryQuarter = {
      prefix: 'fas',
      iconName: 'battery-quarter',
      icon: [640, 512, [], "f243", "M544 160v64h32v64h-32v64H64V160h480m16-64H48c-26.51 0-48 21.49-48 48v224c0 26.51 21.49 48 48 48h512c26.51 0 48-21.49 48-48v-16h8c13.255 0 24-10.745 24-24V184c0-13.255-10.745-24-24-24h-8v-16c0-26.51-21.49-48-48-48zm-336 96H96v128h128V192z"]
    };
    exports.faBatteryQuarter = faBatteryQuarter;
    var faBatteryThreeQuarters = {
      prefix: 'fas',
      iconName: 'battery-three-quarters',
      icon: [640, 512, [], "f241", "M544 160v64h32v64h-32v64H64V160h480m16-64H48c-26.51 0-48 21.49-48 48v224c0 26.51 21.49 48 48 48h512c26.51 0 48-21.49 48-48v-16h8c13.255 0 24-10.745 24-24V184c0-13.255-10.745-24-24-24h-8v-16c0-26.51-21.49-48-48-48zm-144 96H96v128h320V192z"]
    };
    exports.faBatteryThreeQuarters = faBatteryThreeQuarters;
    var faBed = {
      prefix: 'fas',
      iconName: 'bed',
      icon: [640, 512, [], "f236", "M176 256c44.11 0 80-35.89 80-80s-35.89-80-80-80-80 35.89-80 80 35.89 80 80 80zm352-128H304c-8.84 0-16 7.16-16 16v144H64V80c0-8.84-7.16-16-16-16H16C7.16 64 0 71.16 0 80v352c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-48h512v48c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16V240c0-61.86-50.14-112-112-112z"]
    };
    exports.faBed = faBed;
    var faBeer = {
      prefix: 'fas',
      iconName: 'beer',
      icon: [448, 512, [], "f0fc", "M368 96h-48V56c0-13.255-10.745-24-24-24H24C10.745 32 0 42.745 0 56v400c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24v-42.11l80.606-35.977C429.396 365.063 448 336.388 448 304.86V176c0-44.112-35.888-80-80-80zm16 208.86a16.018 16.018 0 0 1-9.479 14.611L320 343.805V160h48c8.822 0 16 7.178 16 16v128.86zM208 384c-8.836 0-16-7.164-16-16V144c0-8.836 7.164-16 16-16s16 7.164 16 16v224c0 8.836-7.164 16-16 16zm-96 0c-8.836 0-16-7.164-16-16V144c0-8.836 7.164-16 16-16s16 7.164 16 16v224c0 8.836-7.164 16-16 16z"]
    };
    exports.faBeer = faBeer;
    var faBell = {
      prefix: 'fas',
      iconName: 'bell',
      icon: [448, 512, [], "f0f3", "M224 512c35.32 0 63.97-28.65 63.97-64H160.03c0 35.35 28.65 64 63.97 64zm215.39-149.71c-19.32-20.76-55.47-51.99-55.47-154.29 0-77.7-54.48-139.9-127.94-155.16V32c0-17.67-14.32-32-31.98-32s-31.98 14.33-31.98 32v20.84C118.56 68.1 64.08 130.3 64.08 208c0 102.3-36.15 133.53-55.47 154.29-6 6.45-8.66 14.16-8.61 21.71.11 16.4 12.98 32 32.1 32h383.8c19.12 0 32-15.6 32.1-32 .05-7.55-2.61-15.27-8.61-21.71z"]
    };
    exports.faBell = faBell;
    var faBellSlash = {
      prefix: 'fas',
      iconName: 'bell-slash',
      icon: [640, 512, [], "f1f6", "M633.82 458.1l-90.62-70.05c.19-1.38.8-2.66.8-4.06.05-7.55-2.61-15.27-8.61-21.71-19.32-20.76-55.47-51.99-55.47-154.29 0-77.7-54.48-139.9-127.94-155.16V32c0-17.67-14.32-32-31.98-32s-31.98 14.33-31.98 32v20.84c-40.33 8.38-74.66 31.07-97.59 62.57L45.47 3.37C38.49-2.05 28.43-.8 23.01 6.18L3.37 31.45C-2.05 38.42-.8 48.47 6.18 53.9l588.35 454.73c6.98 5.43 17.03 4.17 22.46-2.81l19.64-25.27c5.42-6.97 4.17-17.02-2.81-22.45zM157.23 251.54c-8.61 67.96-36.41 93.33-52.62 110.75-6 6.45-8.66 14.16-8.61 21.71.11 16.4 12.98 32 32.1 32h241.92L157.23 251.54zM320 512c35.32 0 63.97-28.65 63.97-64H256.03c0 35.35 28.65 64 63.97 64z"]
    };
    exports.faBellSlash = faBellSlash;
    var faBezierCurve = {
      prefix: 'fas',
      iconName: 'bezier-curve',
      icon: [640, 512, [], "f55b", "M368 32h-96c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zM208 88h-84.75C113.75 64.56 90.84 48 64 48 28.66 48 0 76.65 0 112s28.66 64 64 64c26.84 0 49.75-16.56 59.25-40h79.73c-55.37 32.52-95.86 87.32-109.54 152h49.4c11.3-41.61 36.77-77.21 71.04-101.56-3.7-8.08-5.88-16.99-5.88-26.44V88zm-48 232H64c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32zM576 48c-26.84 0-49.75 16.56-59.25 40H432v72c0 9.45-2.19 18.36-5.88 26.44 34.27 24.35 59.74 59.95 71.04 101.56h49.4c-13.68-64.68-54.17-119.48-109.54-152h79.73c9.5 23.44 32.41 40 59.25 40 35.34 0 64-28.65 64-64s-28.66-64-64-64zm0 272h-96c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32z"]
    };
    exports.faBezierCurve = faBezierCurve;
    var faBible = {
      prefix: 'fas',
      iconName: 'bible',
      icon: [448, 512, [], "f647", "M448 358.4V25.6c0-16-9.6-25.6-25.6-25.6H96C41.6 0 0 41.6 0 96v320c0 54.4 41.6 96 96 96h326.4c12.8 0 25.6-9.6 25.6-25.6v-16c0-6.4-3.2-12.8-9.6-19.2-3.2-16-3.2-60.8 0-73.6 6.4-3.2 9.6-9.6 9.6-19.2zM144 144c0-8.84 7.16-16 16-16h48V80c0-8.84 7.16-16 16-16h32c8.84 0 16 7.16 16 16v48h48c8.84 0 16 7.16 16 16v32c0 8.84-7.16 16-16 16h-48v112c0 8.84-7.16 16-16 16h-32c-8.84 0-16-7.16-16-16V192h-48c-8.84 0-16-7.16-16-16v-32zm236.8 304H96c-19.2 0-32-12.8-32-32s16-32 32-32h284.8v64z"]
    };
    exports.faBible = faBible;
    var faBicycle = {
      prefix: 'fas',
      iconName: 'bicycle',
      icon: [640, 512, [], "f206", "M512.509 192.001c-16.373-.064-32.03 2.955-46.436 8.495l-77.68-125.153A24 24 0 0 0 368.001 64h-64c-8.837 0-16 7.163-16 16v16c0 8.837 7.163 16 16 16h50.649l14.896 24H256.002v-16c0-8.837-7.163-16-16-16h-87.459c-13.441 0-24.777 10.999-24.536 24.437.232 13.044 10.876 23.563 23.995 23.563h48.726l-29.417 47.52c-13.433-4.83-27.904-7.483-42.992-7.52C58.094 191.83.412 249.012.002 319.236-.413 390.279 57.055 448 128.002 448c59.642 0 109.758-40.793 123.967-96h52.033a24 24 0 0 0 20.406-11.367L410.37 201.77l14.938 24.067c-25.455 23.448-41.385 57.081-41.307 94.437.145 68.833 57.899 127.051 126.729 127.719 70.606.685 128.181-55.803 129.255-125.996 1.086-70.941-56.526-129.72-127.476-129.996zM186.75 265.772c9.727 10.529 16.673 23.661 19.642 38.228h-43.306l23.664-38.228zM128.002 400c-44.112 0-80-35.888-80-80s35.888-80 80-80c5.869 0 11.586.653 17.099 1.859l-45.505 73.509C89.715 331.327 101.213 352 120.002 352h81.3c-12.37 28.225-40.562 48-73.3 48zm162.63-96h-35.624c-3.96-31.756-19.556-59.894-42.383-80.026L237.371 184h127.547l-74.286 120zm217.057 95.886c-41.036-2.165-74.049-35.692-75.627-76.755-.812-21.121 6.633-40.518 19.335-55.263l44.433 71.586c4.66 7.508 14.524 9.816 22.032 5.156l13.594-8.437c7.508-4.66 9.817-14.524 5.156-22.032l-44.468-71.643a79.901 79.901 0 0 1 19.858-2.497c44.112 0 80 35.888 80 80-.001 45.54-38.252 82.316-84.313 79.885z"]
    };
    exports.faBicycle = faBicycle;
    var faBiking = {
      prefix: 'fas',
      iconName: 'biking',
      icon: [640, 512, [], "f84a", "M400 96a48 48 0 1 0-48-48 48 48 0 0 0 48 48zm-4 121a31.9 31.9 0 0 0 20 7h64a32 32 0 0 0 0-64h-52.78L356 103a31.94 31.94 0 0 0-40.81.68l-112 96a32 32 0 0 0 3.08 50.92L288 305.12V416a32 32 0 0 0 64 0V288a32 32 0 0 0-14.25-26.62l-41.36-27.57 58.25-49.92zm116 39a128 128 0 1 0 128 128 128 128 0 0 0-128-128zm0 192a64 64 0 1 1 64-64 64 64 0 0 1-64 64zM128 256a128 128 0 1 0 128 128 128 128 0 0 0-128-128zm0 192a64 64 0 1 1 64-64 64 64 0 0 1-64 64z"]
    };
    exports.faBiking = faBiking;
    var faBinoculars = {
      prefix: 'fas',
      iconName: 'binoculars',
      icon: [512, 512, [], "f1e5", "M416 48c0-8.84-7.16-16-16-16h-64c-8.84 0-16 7.16-16 16v48h96V48zM63.91 159.99C61.4 253.84 3.46 274.22 0 404v44c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32V288h32V128H95.84c-17.63 0-31.45 14.37-31.93 31.99zm384.18 0c-.48-17.62-14.3-31.99-31.93-31.99H320v160h32v160c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-44c-3.46-129.78-61.4-150.16-63.91-244.01zM176 32h-64c-8.84 0-16 7.16-16 16v48h96V48c0-8.84-7.16-16-16-16zm48 256h64V128h-64v160z"]
    };
    exports.faBinoculars = faBinoculars;
    var faBiohazard = {
      prefix: 'fas',
      iconName: 'biohazard',
      icon: [576, 512, [], "f780", "M287.9 112c18.6 0 36.2 3.8 52.8 9.6 13.3-10.3 23.6-24.3 29.5-40.7-25.2-10.9-53-17-82.2-17-29.1 0-56.9 6-82.1 16.9 5.9 16.4 16.2 30.4 29.5 40.7 16.5-5.7 34-9.5 52.5-9.5zM163.6 438.7c12-11.8 20.4-26.4 24.5-42.4-32.9-26.4-54.8-65.3-58.9-109.6-8.5-2.8-17.2-4.6-26.4-4.6-7.6 0-15.2 1-22.5 3.1 4.1 62.8 35.8 118 83.3 153.5zm224.2-42.6c4.1 16 12.5 30.7 24.5 42.5 47.4-35.5 79.1-90.7 83-153.5-7.2-2-14.7-3-22.2-3-9.2 0-18 1.9-26.6 4.7-4.1 44.2-26 82.9-58.7 109.3zm113.5-205c-17.6-10.4-36.3-16.6-55.3-19.9 6-17.7 10-36.4 10-56.2 0-41-14.5-80.8-41-112.2-2.5-3-6.6-3.7-10-1.8-3.3 1.9-4.8 6-3.6 9.7 4.5 13.8 6.6 26.3 6.6 38.5 0 67.8-53.8 122.9-120 122.9S168 117 168 49.2c0-12.1 2.2-24.7 6.6-38.5 1.2-3.7-.3-7.8-3.6-9.7-3.4-1.9-7.5-1.2-10 1.8C134.6 34.2 120 74 120 115c0 19.8 3.9 38.5 10 56.2-18.9 3.3-37.7 9.5-55.3 19.9-34.6 20.5-61 53.3-74.3 92.4-1.3 3.7.2 7.7 3.5 9.8 3.3 2 7.5 1.3 10-1.6 9.4-10.8 19-19.1 29.2-25.1 57.3-33.9 130.8-13.7 163.9 45 33.1 58.7 13.4 134-43.9 167.9-10.2 6.1-22 10.4-35.8 13.4-3.7.8-6.4 4.2-6.4 8.1.1 4 2.7 7.3 6.5 8 39.7 7.8 80.6.8 115.2-19.7 18-10.6 32.9-24.5 45.3-40.1 12.4 15.6 27.3 29.5 45.3 40.1 34.6 20.5 75.5 27.5 115.2 19.7 3.8-.7 6.4-4 6.5-8 0-3.9-2.6-7.3-6.4-8.1-13.9-2.9-25.6-7.3-35.8-13.4-57.3-33.9-77-109.2-43.9-167.9s106.6-78.9 163.9-45c10.2 6.1 19.8 14.3 29.2 25.1 2.5 2.9 6.7 3.6 10 1.6s4.8-6.1 3.5-9.8c-13.1-39.1-39.5-72-74.1-92.4zm-213.4 129c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z"]
    };
    exports.faBiohazard = faBiohazard;
    var faBirthdayCake = {
      prefix: 'fas',
      iconName: 'birthday-cake',
      icon: [448, 512, [], "f1fd", "M448 384c-28.02 0-31.26-32-74.5-32-43.43 0-46.825 32-74.75 32-27.695 0-31.454-32-74.75-32-42.842 0-47.218 32-74.5 32-28.148 0-31.202-32-74.75-32-43.547 0-46.653 32-74.75 32v-80c0-26.5 21.5-48 48-48h16V112h64v144h64V112h64v144h64V112h64v144h16c26.5 0 48 21.5 48 48v80zm0 128H0v-96c43.356 0 46.767-32 74.75-32 27.951 0 31.253 32 74.75 32 42.843 0 47.217-32 74.5-32 28.148 0 31.201 32 74.75 32 43.357 0 46.767-32 74.75-32 27.488 0 31.252 32 74.5 32v96zM96 96c-17.75 0-32-14.25-32-32 0-31 32-23 32-64 12 0 32 29.5 32 56s-14.25 40-32 40zm128 0c-17.75 0-32-14.25-32-32 0-31 32-23 32-64 12 0 32 29.5 32 56s-14.25 40-32 40zm128 0c-17.75 0-32-14.25-32-32 0-31 32-23 32-64 12 0 32 29.5 32 56s-14.25 40-32 40z"]
    };
    exports.faBirthdayCake = faBirthdayCake;
    var faBlender = {
      prefix: 'fas',
      iconName: 'blender',
      icon: [512, 512, [], "f517", "M416 384H160c-35.35 0-64 28.65-64 64v32c0 17.67 14.33 32 32 32h320c17.67 0 32-14.33 32-32v-32c0-35.35-28.65-64-64-64zm-128 96c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm40-416h166.54L512 0H48C21.49 0 0 21.49 0 48v160c0 26.51 21.49 48 48 48h103.27l8.73 96h256l17.46-64H328c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h114.18l17.46-64H328c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h140.36l17.46-64H328c-4.42 0-8-3.58-8-8V72c0-4.42 3.58-8 8-8zM64 192V64h69.82l11.64 128H64z"]
    };
    exports.faBlender = faBlender;
    var faBlenderPhone = {
      prefix: 'fas',
      iconName: 'blender-phone',
      icon: [576, 512, [], "f6b6", "M392 64h166.54L576 0H192v352h288l17.46-64H392c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h114.18l17.46-64H392c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h140.36l17.46-64H392c-4.42 0-8-3.58-8-8V72c0-4.42 3.58-8 8-8zM158.8 335.01l-25.78-63.26c-2.78-6.81-9.8-10.99-17.24-10.26l-45.03 4.42c-17.28-46.94-17.65-99.78 0-147.72l45.03 4.42c7.43.73 14.46-3.46 17.24-10.26l25.78-63.26c3.02-7.39.2-15.85-6.68-20.07l-39.28-24.1C98.51-3.87 80.09-.5 68.95 11.97c-92.57 103.6-92 259.55 2.1 362.49 9.87 10.8 29.12 12.48 41.65 4.8l39.41-24.18c6.89-4.22 9.7-12.67 6.69-20.07zM480 384H192c-35.35 0-64 28.65-64 64v32c0 17.67 14.33 32 32 32h352c17.67 0 32-14.33 32-32v-32c0-35.35-28.65-64-64-64zm-144 96c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faBlenderPhone = faBlenderPhone;
    var faBlind = {
      prefix: 'fas',
      iconName: 'blind',
      icon: [384, 512, [], "f29d", "M380.15 510.837a8 8 0 0 1-10.989-2.687l-125.33-206.427a31.923 31.923 0 0 0 12.958-9.485l126.048 207.608a8 8 0 0 1-2.687 10.991zM142.803 314.338l-32.54 89.485 36.12 88.285c6.693 16.36 25.377 24.192 41.733 17.501 16.357-6.692 24.193-25.376 17.501-41.734l-62.814-153.537zM96 88c24.301 0 44-19.699 44-44S120.301 0 96 0 52 19.699 52 44s19.699 44 44 44zm154.837 169.128l-120-152c-4.733-5.995-11.75-9.108-18.837-9.112V96H80v.026c-7.146.003-14.217 3.161-18.944 9.24L0 183.766v95.694c0 13.455 11.011 24.791 24.464 24.536C37.505 303.748 48 293.1 48 280v-79.766l16-20.571v140.698L9.927 469.055c-6.04 16.609 2.528 34.969 19.138 41.009 16.602 6.039 34.968-2.524 41.009-19.138L136 309.638V202.441l-31.406-39.816a4 4 0 1 1 6.269-4.971l102.3 129.217c9.145 11.584 24.368 11.339 33.708 3.965 10.41-8.216 12.159-23.334 3.966-33.708z"]
    };
    exports.faBlind = faBlind;
    var faBlog = {
      prefix: 'fas',
      iconName: 'blog',
      icon: [512, 512, [], "f781", "M172.2 226.8c-14.6-2.9-28.2 8.9-28.2 23.8V301c0 10.2 7.1 18.4 16.7 22 18.2 6.8 31.3 24.4 31.3 45 0 26.5-21.5 48-48 48s-48-21.5-48-48V120c0-13.3-10.7-24-24-24H24c-13.3 0-24 10.7-24 24v248c0 89.5 82.1 160.2 175 140.7 54.4-11.4 98.3-55.4 109.7-109.7 17.4-82.9-37-157.2-112.5-172.2zM209 0c-9.2-.5-17 6.8-17 16v31.6c0 8.5 6.6 15.5 15 15.9 129.4 7 233.4 112 240.9 241.5.5 8.4 7.5 15 15.9 15h32.1c9.2 0 16.5-7.8 16-17C503.4 139.8 372.2 8.6 209 0zm.3 96c-9.3-.7-17.3 6.7-17.3 16.1v32.1c0 8.4 6.5 15.3 14.8 15.9 76.8 6.3 138 68.2 144.9 145.2.8 8.3 7.6 14.7 15.9 14.7h32.2c9.3 0 16.8-8 16.1-17.3-8.4-110.1-96.5-198.2-206.6-206.7z"]
    };
    exports.faBlog = faBlog;
    var faBold = {
      prefix: 'fas',
      iconName: 'bold',
      icon: [384, 512, [], "f032", "M333.49 238a122 122 0 0 0 27-65.21C367.87 96.49 308 32 233.42 32H34a16 16 0 0 0-16 16v48a16 16 0 0 0 16 16h31.87v288H34a16 16 0 0 0-16 16v48a16 16 0 0 0 16 16h209.32c70.8 0 134.14-51.75 141-122.4 4.74-48.45-16.39-92.06-50.83-119.6zM145.66 112h87.76a48 48 0 0 1 0 96h-87.76zm87.76 288h-87.76V288h87.76a56 56 0 0 1 0 112z"]
    };
    exports.faBold = faBold;
    var faBolt = {
      prefix: 'fas',
      iconName: 'bolt',
      icon: [320, 512, [], "f0e7", "M296 160H180.6l42.6-129.8C227.2 15 215.7 0 200 0H56C44 0 33.8 8.9 32.2 20.8l-32 240C-1.7 275.2 9.5 288 24 288h118.7L96.6 482.5c-3.6 15.2 8 29.5 23.3 29.5 8.4 0 16.4-4.4 20.8-12l176-304c9.3-15.9-2.2-36-20.7-36z"]
    };
    exports.faBolt = faBolt;
    var faBomb = {
      prefix: 'fas',
      iconName: 'bomb',
      icon: [512, 512, [], "f1e2", "M440.5 88.5l-52 52L415 167c9.4 9.4 9.4 24.6 0 33.9l-17.4 17.4c11.8 26.1 18.4 55.1 18.4 85.6 0 114.9-93.1 208-208 208S0 418.9 0 304 93.1 96 208 96c30.5 0 59.5 6.6 85.6 18.4L311 97c9.4-9.4 24.6-9.4 33.9 0l26.5 26.5 52-52 17.1 17zM500 60h-24c-6.6 0-12 5.4-12 12s5.4 12 12 12h24c6.6 0 12-5.4 12-12s-5.4-12-12-12zM440 0c-6.6 0-12 5.4-12 12v24c0 6.6 5.4 12 12 12s12-5.4 12-12V12c0-6.6-5.4-12-12-12zm33.9 55l17-17c4.7-4.7 4.7-12.3 0-17-4.7-4.7-12.3-4.7-17 0l-17 17c-4.7 4.7-4.7 12.3 0 17 4.8 4.7 12.4 4.7 17 0zm-67.8 0c4.7 4.7 12.3 4.7 17 0 4.7-4.7 4.7-12.3 0-17l-17-17c-4.7-4.7-12.3-4.7-17 0-4.7 4.7-4.7 12.3 0 17l17 17zm67.8 34c-4.7-4.7-12.3-4.7-17 0-4.7 4.7-4.7 12.3 0 17l17 17c4.7 4.7 12.3 4.7 17 0 4.7-4.7 4.7-12.3 0-17l-17-17zM112 272c0-35.3 28.7-64 64-64 8.8 0 16-7.2 16-16s-7.2-16-16-16c-52.9 0-96 43.1-96 96 0 8.8 7.2 16 16 16s16-7.2 16-16z"]
    };
    exports.faBomb = faBomb;
    var faBone = {
      prefix: 'fas',
      iconName: 'bone',
      icon: [640, 512, [], "f5d7", "M598.88 244.56c25.2-12.6 41.12-38.36 41.12-66.53v-7.64C640 129.3 606.7 96 565.61 96c-32.02 0-60.44 20.49-70.57 50.86-7.68 23.03-11.6 45.14-38.11 45.14H183.06c-27.38 0-31.58-25.54-38.11-45.14C134.83 116.49 106.4 96 74.39 96 33.3 96 0 129.3 0 170.39v7.64c0 28.17 15.92 53.93 41.12 66.53 9.43 4.71 9.43 18.17 0 22.88C15.92 280.04 0 305.8 0 333.97v7.64C0 382.7 33.3 416 74.38 416c32.02 0 60.44-20.49 70.57-50.86 7.68-23.03 11.6-45.14 38.11-45.14h273.87c27.38 0 31.58 25.54 38.11 45.14C505.17 395.51 533.6 416 565.61 416c41.08 0 74.38-33.3 74.38-74.39v-7.64c0-28.18-15.92-53.93-41.12-66.53-9.42-4.71-9.42-18.17.01-22.88z"]
    };
    exports.faBone = faBone;
    var faBong = {
      prefix: 'fas',
      iconName: 'bong',
      icon: [448, 512, [], "f55c", "M302.5 512c23.18 0 44.43-12.58 56-32.66C374.69 451.26 384 418.75 384 384c0-36.12-10.08-69.81-27.44-98.62L400 241.94l9.38 9.38c6.25 6.25 16.38 6.25 22.63 0l11.3-11.32c6.25-6.25 6.25-16.38 0-22.63l-52.69-52.69c-6.25-6.25-16.38-6.25-22.63 0l-11.31 11.31c-6.25 6.25-6.25 16.38 0 22.63l9.38 9.38-39.41 39.41c-11.56-11.37-24.53-21.33-38.65-29.51V63.74l15.97-.02c8.82-.01 15.97-7.16 15.98-15.98l.04-31.72C320 7.17 312.82-.01 303.97 0L80.03.26c-8.82.01-15.97 7.16-15.98 15.98l-.04 31.73c-.01 8.85 7.17 16.02 16.02 16.01L96 63.96v153.93C38.67 251.1 0 312.97 0 384c0 34.75 9.31 67.27 25.5 95.34C37.08 499.42 58.33 512 81.5 512h221zM120.06 259.43L144 245.56V63.91l96-.11v181.76l23.94 13.87c24.81 14.37 44.12 35.73 56.56 60.57h-257c12.45-24.84 31.75-46.2 56.56-60.57z"]
    };
    exports.faBong = faBong;
    var faBook = {
      prefix: 'fas',
      iconName: 'book',
      icon: [448, 512, [], "f02d", "M448 360V24c0-13.3-10.7-24-24-24H96C43 0 0 43 0 96v320c0 53 43 96 96 96h328c13.3 0 24-10.7 24-24v-16c0-7.5-3.5-14.3-8.9-18.7-4.2-15.4-4.2-59.3 0-74.7 5.4-4.3 8.9-11.1 8.9-18.6zM128 134c0-3.3 2.7-6 6-6h212c3.3 0 6 2.7 6 6v20c0 3.3-2.7 6-6 6H134c-3.3 0-6-2.7-6-6v-20zm0 64c0-3.3 2.7-6 6-6h212c3.3 0 6 2.7 6 6v20c0 3.3-2.7 6-6 6H134c-3.3 0-6-2.7-6-6v-20zm253.4 250H96c-17.7 0-32-14.3-32-32 0-17.6 14.4-32 32-32h285.4c-1.9 17.1-1.9 46.9 0 64z"]
    };
    exports.faBook = faBook;
    var faBookDead = {
      prefix: 'fas',
      iconName: 'book-dead',
      icon: [448, 512, [], "f6b7", "M272 136c8.8 0 16-7.2 16-16s-7.2-16-16-16-16 7.2-16 16 7.2 16 16 16zm176 222.4V25.6c0-16-9.6-25.6-25.6-25.6H96C41.6 0 0 41.6 0 96v320c0 54.4 41.6 96 96 96h326.4c12.8 0 25.6-9.6 25.6-25.6v-16c0-6.4-3.2-12.8-9.6-19.2-3.2-16-3.2-60.8 0-73.6 6.4-3.2 9.6-9.6 9.6-19.2zM240 56c44.2 0 80 28.7 80 64 0 20.9-12.7 39.2-32 50.9V184c0 8.8-7.2 16-16 16h-64c-8.8 0-16-7.2-16-16v-13.1c-19.3-11.7-32-30-32-50.9 0-35.3 35.8-64 80-64zM124.8 223.3l6.3-14.7c1.7-4.1 6.4-5.9 10.5-4.2l98.3 42.1 98.4-42.1c4.1-1.7 8.8.1 10.5 4.2l6.3 14.7c1.7 4.1-.1 8.8-4.2 10.5L280.6 264l70.3 30.1c4.1 1.7 5.9 6.4 4.2 10.5l-6.3 14.7c-1.7 4.1-6.4 5.9-10.5 4.2L240 281.4l-98.3 42.2c-4.1 1.7-8.8-.1-10.5-4.2l-6.3-14.7c-1.7-4.1.1-8.8 4.2-10.5l70.4-30.1-70.5-30.3c-4.1-1.7-5.9-6.4-4.2-10.5zm256 224.7H96c-19.2 0-32-12.8-32-32s16-32 32-32h284.8zM208 136c8.8 0 16-7.2 16-16s-7.2-16-16-16-16 7.2-16 16 7.2 16 16 16z"]
    };
    exports.faBookDead = faBookDead;
    var faBookMedical = {
      prefix: 'fas',
      iconName: 'book-medical',
      icon: [448, 512, [], "f7e6", "M448 358.4V25.6c0-16-9.6-25.6-25.6-25.6H96C41.6 0 0 41.6 0 96v320c0 54.4 41.6 96 96 96h326.4c12.8 0 25.6-9.6 25.6-25.6v-16q0-9.6-9.6-19.2c-3.2-16-3.2-60.8 0-73.6q9.6-4.8 9.6-19.2zM144 168a8 8 0 0 1 8-8h56v-56a8 8 0 0 1 8-8h48a8 8 0 0 1 8 8v56h56a8 8 0 0 1 8 8v48a8 8 0 0 1-8 8h-56v56a8 8 0 0 1-8 8h-48a8 8 0 0 1-8-8v-56h-56a8 8 0 0 1-8-8zm236.8 280H96c-19.2 0-32-12.8-32-32s16-32 32-32h284.8z"]
    };
    exports.faBookMedical = faBookMedical;
    var faBookOpen = {
      prefix: 'fas',
      iconName: 'book-open',
      icon: [576, 512, [], "f518", "M542.22 32.05c-54.8 3.11-163.72 14.43-230.96 55.59-4.64 2.84-7.27 7.89-7.27 13.17v363.87c0 11.55 12.63 18.85 23.28 13.49 69.18-34.82 169.23-44.32 218.7-46.92 16.89-.89 30.02-14.43 30.02-30.66V62.75c.01-17.71-15.35-31.74-33.77-30.7zM264.73 87.64C197.5 46.48 88.58 35.17 33.78 32.05 15.36 31.01 0 45.04 0 62.75V400.6c0 16.24 13.13 29.78 30.02 30.66 49.49 2.6 149.59 12.11 218.77 46.95 10.62 5.35 23.21-1.94 23.21-13.46V100.63c0-5.29-2.62-10.14-7.27-12.99z"]
    };
    exports.faBookOpen = faBookOpen;
    var faBookReader = {
      prefix: 'fas',
      iconName: 'book-reader',
      icon: [512, 512, [], "f5da", "M352 96c0-53.02-42.98-96-96-96s-96 42.98-96 96 42.98 96 96 96 96-42.98 96-96zM233.59 241.1c-59.33-36.32-155.43-46.3-203.79-49.05C13.55 191.13 0 203.51 0 219.14v222.8c0 14.33 11.59 26.28 26.49 27.05 43.66 2.29 131.99 10.68 193.04 41.43 9.37 4.72 20.48-1.71 20.48-11.87V252.56c-.01-4.67-2.32-8.95-6.42-11.46zm248.61-49.05c-48.35 2.74-144.46 12.73-203.78 49.05-4.1 2.51-6.41 6.96-6.41 11.63v245.79c0 10.19 11.14 16.63 20.54 11.9 61.04-30.72 149.32-39.11 192.97-41.4 14.9-.78 26.49-12.73 26.49-27.06V219.14c-.01-15.63-13.56-28.01-29.81-27.09z"]
    };
    exports.faBookReader = faBookReader;
    var faBookmark = {
      prefix: 'fas',
      iconName: 'bookmark',
      icon: [384, 512, [], "f02e", "M0 512V48C0 21.49 21.49 0 48 0h288c26.51 0 48 21.49 48 48v464L192 400 0 512z"]
    };
    exports.faBookmark = faBookmark;
    var faBorderAll = {
      prefix: 'fas',
      iconName: 'border-all',
      icon: [448, 512, [], "f84c", "M416 32H32A32 32 0 0 0 0 64v384a32 32 0 0 0 32 32h384a32 32 0 0 0 32-32V64a32 32 0 0 0-32-32zm-32 64v128H256V96zm-192 0v128H64V96zM64 416V288h128v128zm192 0V288h128v128z"]
    };
    exports.faBorderAll = faBorderAll;
    var faBorderNone = {
      prefix: 'fas',
      iconName: 'border-none',
      icon: [448, 512, [], "f850", "M240 224h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-288 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96 192h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-96h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-192h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM240 320h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-192h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-96 288h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96-384h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM48 224H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0 192H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-96H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-192H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-96H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"]
    };
    exports.faBorderNone = faBorderNone;
    var faBorderStyle = {
      prefix: 'fas',
      iconName: 'border-style',
      icon: [448, 512, [], "f853", "M240 416h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm192 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96-192h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0 96h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0 96h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-288h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-96H32A32 32 0 0 0 0 64v400a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V96h368a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"]
    };
    exports.faBorderStyle = faBorderStyle;
    var faBowlingBall = {
      prefix: 'fas',
      iconName: 'bowling-ball',
      icon: [496, 512, [], "f436", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM120 192c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm64-96c0-17.7 14.3-32 32-32s32 14.3 32 32-14.3 32-32 32-32-14.3-32-32zm48 144c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faBowlingBall = faBowlingBall;
    var faBox = {
      prefix: 'fas',
      iconName: 'box',
      icon: [512, 512, [], "f466", "M509.5 184.6L458.9 32.8C452.4 13.2 434.1 0 413.4 0H272v192h238.7c-.4-2.5-.4-5-1.2-7.4zM240 0H98.6c-20.7 0-39 13.2-45.5 32.8L2.5 184.6c-.8 2.4-.8 4.9-1.2 7.4H240V0zM0 224v240c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V224H0z"]
    };
    exports.faBox = faBox;
    var faBoxOpen = {
      prefix: 'fas',
      iconName: 'box-open',
      icon: [640, 512, [], "f49e", "M425.7 256c-16.9 0-32.8-9-41.4-23.4L320 126l-64.2 106.6c-8.7 14.5-24.6 23.5-41.5 23.5-4.5 0-9-.6-13.3-1.9L64 215v178c0 14.7 10 27.5 24.2 31l216.2 54.1c10.2 2.5 20.9 2.5 31 0L551.8 424c14.2-3.6 24.2-16.4 24.2-31V215l-137 39.1c-4.3 1.3-8.8 1.9-13.3 1.9zm212.6-112.2L586.8 41c-3.1-6.2-9.8-9.8-16.7-8.9L320 64l91.7 152.1c3.8 6.3 11.4 9.3 18.5 7.3l197.9-56.5c9.9-2.9 14.7-13.9 10.2-23.1zM53.2 41L1.7 143.8c-4.6 9.2.3 20.2 10.1 23l197.9 56.5c7.1 2 14.7-1 18.5-7.3L320 64 69.8 32.1c-6.9-.8-13.5 2.7-16.6 8.9z"]
    };
    exports.faBoxOpen = faBoxOpen;
    var faBoxTissue = {
      prefix: 'fas',
      iconName: 'box-tissue',
      icon: [512, 512, [], "e05b", "M383.88,287.82l64-192H338.47a70.2,70.2,0,0,1-66.59-48,70.21,70.21,0,0,0-66.6-48H63.88l64,288Zm-384,192a32,32,0,0,0,32,32h448a32,32,0,0,0,32-32v-64H-.12Zm480-256H438.94l-21.33,64h14.27a16,16,0,0,1,0,32h-352a16,16,0,1,1,0-32H95.09l-14.22-64h-49a32,32,0,0,0-32,32v128h512v-128A32,32,0,0,0,479.88,223.82Z"]
    };
    exports.faBoxTissue = faBoxTissue;
    var faBoxes = {
      prefix: 'fas',
      iconName: 'boxes',
      icon: [576, 512, [], "f468", "M560 288h-80v96l-32-21.3-32 21.3v-96h-80c-8.8 0-16 7.2-16 16v192c0 8.8 7.2 16 16 16h224c8.8 0 16-7.2 16-16V304c0-8.8-7.2-16-16-16zm-384-64h224c8.8 0 16-7.2 16-16V16c0-8.8-7.2-16-16-16h-80v96l-32-21.3L256 96V0h-80c-8.8 0-16 7.2-16 16v192c0 8.8 7.2 16 16 16zm64 64h-80v96l-32-21.3L96 384v-96H16c-8.8 0-16 7.2-16 16v192c0 8.8 7.2 16 16 16h224c8.8 0 16-7.2 16-16V304c0-8.8-7.2-16-16-16z"]
    };
    exports.faBoxes = faBoxes;
    var faBraille = {
      prefix: 'fas',
      iconName: 'braille',
      icon: [640, 512, [], "f2a1", "M128 256c0 35.346-28.654 64-64 64S0 291.346 0 256s28.654-64 64-64 64 28.654 64 64zM64 384c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0-352C28.654 32 0 60.654 0 96s28.654 64 64 64 64-28.654 64-64-28.654-64-64-64zm160 192c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0 160c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0-352c-35.346 0-64 28.654-64 64s28.654 64 64 64 64-28.654 64-64-28.654-64-64-64zm224 192c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0 160c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0-352c-35.346 0-64 28.654-64 64s28.654 64 64 64 64-28.654 64-64-28.654-64-64-64zm160 192c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0 160c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0-320c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32z"]
    };
    exports.faBraille = faBraille;
    var faBrain = {
      prefix: 'fas',
      iconName: 'brain',
      icon: [576, 512, [], "f5dc", "M208 0c-29.9 0-54.7 20.5-61.8 48.2-.8 0-1.4-.2-2.2-.2-35.3 0-64 28.7-64 64 0 4.8.6 9.5 1.7 14C52.5 138 32 166.6 32 200c0 12.6 3.2 24.3 8.3 34.9C16.3 248.7 0 274.3 0 304c0 33.3 20.4 61.9 49.4 73.9-.9 4.6-1.4 9.3-1.4 14.1 0 39.8 32.2 72 72 72 4.1 0 8.1-.5 12-1.2 9.6 28.5 36.2 49.2 68 49.2 39.8 0 72-32.2 72-72V64c0-35.3-28.7-64-64-64zm368 304c0-29.7-16.3-55.3-40.3-69.1 5.2-10.6 8.3-22.3 8.3-34.9 0-33.4-20.5-62-49.7-74 1-4.5 1.7-9.2 1.7-14 0-35.3-28.7-64-64-64-.8 0-1.5.2-2.2.2C422.7 20.5 397.9 0 368 0c-35.3 0-64 28.6-64 64v376c0 39.8 32.2 72 72 72 31.8 0 58.4-20.7 68-49.2 3.9.7 7.9 1.2 12 1.2 39.8 0 72-32.2 72-72 0-4.8-.5-9.5-1.4-14.1 29-12 49.4-40.6 49.4-73.9z"]
    };
    exports.faBrain = faBrain;
    var faBreadSlice = {
      prefix: 'fas',
      iconName: 'bread-slice',
      icon: [576, 512, [], "f7ec", "M288 0C108 0 0 93.4 0 169.14 0 199.44 24.24 224 64 224v256c0 17.67 16.12 32 36 32h376c19.88 0 36-14.33 36-32V224c39.76 0 64-24.56 64-54.86C576 93.4 468 0 288 0z"]
    };
    exports.faBreadSlice = faBreadSlice;
    var faBriefcase = {
      prefix: 'fas',
      iconName: 'briefcase',
      icon: [512, 512, [], "f0b1", "M320 336c0 8.84-7.16 16-16 16h-96c-8.84 0-16-7.16-16-16v-48H0v144c0 25.6 22.4 48 48 48h416c25.6 0 48-22.4 48-48V288H320v48zm144-208h-80V80c0-25.6-22.4-48-48-48H176c-25.6 0-48 22.4-48 48v48H48c-25.6 0-48 22.4-48 48v80h512v-80c0-25.6-22.4-48-48-48zm-144 0H192V96h128v32z"]
    };
    exports.faBriefcase = faBriefcase;
    var faBriefcaseMedical = {
      prefix: 'fas',
      iconName: 'briefcase-medical',
      icon: [512, 512, [], "f469", "M464 128h-80V80c0-26.5-21.5-48-48-48H176c-26.5 0-48 21.5-48 48v48H48c-26.5 0-48 21.5-48 48v288c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V176c0-26.5-21.5-48-48-48zM192 96h128v32H192V96zm160 248c0 4.4-3.6 8-8 8h-56v56c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-56h-56c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h56v-56c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v56h56c4.4 0 8 3.6 8 8v48z"]
    };
    exports.faBriefcaseMedical = faBriefcaseMedical;
    var faBroadcastTower = {
      prefix: 'fas',
      iconName: 'broadcast-tower',
      icon: [640, 512, [], "f519", "M150.94 192h33.73c11.01 0 18.61-10.83 14.86-21.18-4.93-13.58-7.55-27.98-7.55-42.82s2.62-29.24 7.55-42.82C203.29 74.83 195.68 64 184.67 64h-33.73c-7.01 0-13.46 4.49-15.41 11.23C130.64 92.21 128 109.88 128 128c0 18.12 2.64 35.79 7.54 52.76 1.94 6.74 8.39 11.24 15.4 11.24zM89.92 23.34C95.56 12.72 87.97 0 75.96 0H40.63c-6.27 0-12.14 3.59-14.74 9.31C9.4 45.54 0 85.65 0 128c0 24.75 3.12 68.33 26.69 118.86 2.62 5.63 8.42 9.14 14.61 9.14h34.84c12.02 0 19.61-12.74 13.95-23.37-49.78-93.32-16.71-178.15-.17-209.29zM614.06 9.29C611.46 3.58 605.6 0 599.33 0h-35.42c-11.98 0-19.66 12.66-14.02 23.25 18.27 34.29 48.42 119.42.28 209.23-5.72 10.68 1.8 23.52 13.91 23.52h35.23c6.27 0 12.13-3.58 14.73-9.29C630.57 210.48 640 170.36 640 128s-9.42-82.48-25.94-118.71zM489.06 64h-33.73c-11.01 0-18.61 10.83-14.86 21.18 4.93 13.58 7.55 27.98 7.55 42.82s-2.62 29.24-7.55 42.82c-3.76 10.35 3.85 21.18 14.86 21.18h33.73c7.02 0 13.46-4.49 15.41-11.24 4.9-16.97 7.53-34.64 7.53-52.76 0-18.12-2.64-35.79-7.54-52.76-1.94-6.75-8.39-11.24-15.4-11.24zm-116.3 100.12c7.05-10.29 11.2-22.71 11.2-36.12 0-35.35-28.63-64-63.96-64-35.32 0-63.96 28.65-63.96 64 0 13.41 4.15 25.83 11.2 36.12l-130.5 313.41c-3.4 8.15.46 17.52 8.61 20.92l29.51 12.31c8.15 3.4 17.52-.46 20.91-8.61L244.96 384h150.07l49.2 118.15c3.4 8.16 12.76 12.01 20.91 8.61l29.51-12.31c8.15-3.4 12-12.77 8.61-20.92l-130.5-313.41zM271.62 320L320 203.81 368.38 320h-96.76z"]
    };
    exports.faBroadcastTower = faBroadcastTower;
    var faBroom = {
      prefix: 'fas',
      iconName: 'broom',
      icon: [640, 512, [], "f51a", "M256.47 216.77l86.73 109.18s-16.6 102.36-76.57 150.12C206.66 523.85 0 510.19 0 510.19s3.8-23.14 11-55.43l94.62-112.17c3.97-4.7-.87-11.62-6.65-9.5l-60.4 22.09c14.44-41.66 32.72-80.04 54.6-97.47 59.97-47.76 163.3-40.94 163.3-40.94zM636.53 31.03l-19.86-25c-5.49-6.9-15.52-8.05-22.41-2.56l-232.48 177.8-34.14-42.97c-5.09-6.41-15.14-5.21-18.59 2.21l-25.33 54.55 86.73 109.18 58.8-12.45c8-1.69 11.42-11.2 6.34-17.6l-34.09-42.92 232.48-177.8c6.89-5.48 8.04-15.53 2.55-22.44z"]
    };
    exports.faBroom = faBroom;
    var faBrush = {
      prefix: 'fas',
      iconName: 'brush',
      icon: [384, 512, [], "f55d", "M352 0H32C14.33 0 0 14.33 0 32v224h384V32c0-17.67-14.33-32-32-32zM0 320c0 35.35 28.66 64 64 64h64v64c0 35.35 28.66 64 64 64s64-28.65 64-64v-64h64c35.34 0 64-28.65 64-64v-32H0v32zm192 104c13.25 0 24 10.74 24 24 0 13.25-10.75 24-24 24s-24-10.75-24-24c0-13.26 10.75-24 24-24z"]
    };
    exports.faBrush = faBrush;
    var faBug = {
      prefix: 'fas',
      iconName: 'bug',
      icon: [512, 512, [], "f188", "M511.988 288.9c-.478 17.43-15.217 31.1-32.653 31.1H424v16c0 21.864-4.882 42.584-13.6 61.145l60.228 60.228c12.496 12.497 12.496 32.758 0 45.255-12.498 12.497-32.759 12.496-45.256 0l-54.736-54.736C345.886 467.965 314.351 480 280 480V236c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v244c-34.351 0-65.886-12.035-90.636-32.108l-54.736 54.736c-12.498 12.497-32.759 12.496-45.256 0-12.496-12.497-12.496-32.758 0-45.255l60.228-60.228C92.882 378.584 88 357.864 88 336v-16H32.666C15.23 320 .491 306.33.013 288.9-.484 270.816 14.028 256 32 256h56v-58.745l-46.628-46.628c-12.496-12.497-12.496-32.758 0-45.255 12.498-12.497 32.758-12.497 45.256 0L141.255 160h229.489l54.627-54.627c12.498-12.497 32.758-12.497 45.256 0 12.496 12.497 12.496 32.758 0 45.255L424 197.255V256h56c17.972 0 32.484 14.816 31.988 32.9zM257 0c-61.856 0-112 50.144-112 112h224C369 50.144 318.856 0 257 0z"]
    };
    exports.faBug = faBug;
    var faBuilding = {
      prefix: 'fas',
      iconName: 'building',
      icon: [448, 512, [], "f1ad", "M436 480h-20V24c0-13.255-10.745-24-24-24H56C42.745 0 32 10.745 32 24v456H12c-6.627 0-12 5.373-12 12v20h448v-20c0-6.627-5.373-12-12-12zM128 76c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12h-40c-6.627 0-12-5.373-12-12V76zm0 96c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12h-40c-6.627 0-12-5.373-12-12v-40zm52 148h-40c-6.627 0-12-5.373-12-12v-40c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12zm76 160h-64v-84c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v84zm64-172c0 6.627-5.373 12-12 12h-40c-6.627 0-12-5.373-12-12v-40c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40zm0-96c0 6.627-5.373 12-12 12h-40c-6.627 0-12-5.373-12-12v-40c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40zm0-96c0 6.627-5.373 12-12 12h-40c-6.627 0-12-5.373-12-12V76c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40z"]
    };
    exports.faBuilding = faBuilding;
    var faBullhorn = {
      prefix: 'fas',
      iconName: 'bullhorn',
      icon: [576, 512, [], "f0a1", "M576 240c0-23.63-12.95-44.04-32-55.12V32.01C544 23.26 537.02 0 512 0c-7.12 0-14.19 2.38-19.98 7.02l-85.03 68.03C364.28 109.19 310.66 128 256 128H64c-35.35 0-64 28.65-64 64v96c0 35.35 28.65 64 64 64h33.7c-1.39 10.48-2.18 21.14-2.18 32 0 39.77 9.26 77.35 25.56 110.94 5.19 10.69 16.52 17.06 28.4 17.06h74.28c26.05 0 41.69-29.84 25.9-50.56-16.4-21.52-26.15-48.36-26.15-77.44 0-11.11 1.62-21.79 4.41-32H256c54.66 0 108.28 18.81 150.98 52.95l85.03 68.03a32.023 32.023 0 0 0 19.98 7.02c24.92 0 32-22.78 32-32V295.13C563.05 284.04 576 263.63 576 240zm-96 141.42l-33.05-26.44C392.95 311.78 325.12 288 256 288v-96c69.12 0 136.95-23.78 190.95-66.98L480 98.58v282.84z"]
    };
    exports.faBullhorn = faBullhorn;
    var faBullseye = {
      prefix: 'fas',
      iconName: 'bullseye',
      icon: [496, 512, [], "f140", "M248 8C111.03 8 0 119.03 0 256s111.03 248 248 248 248-111.03 248-248S384.97 8 248 8zm0 432c-101.69 0-184-82.29-184-184 0-101.69 82.29-184 184-184 101.69 0 184 82.29 184 184 0 101.69-82.29 184-184 184zm0-312c-70.69 0-128 57.31-128 128s57.31 128 128 128 128-57.31 128-128-57.31-128-128-128zm0 192c-35.29 0-64-28.71-64-64s28.71-64 64-64 64 28.71 64 64-28.71 64-64 64z"]
    };
    exports.faBullseye = faBullseye;
    var faBurn = {
      prefix: 'fas',
      iconName: 'burn',
      icon: [384, 512, [], "f46a", "M192 0C79.7 101.3 0 220.9 0 300.5 0 425 79 512 192 512s192-87 192-211.5c0-79.9-80.2-199.6-192-300.5zm0 448c-56.5 0-96-39-96-94.8 0-13.5 4.6-61.5 96-161.2 91.4 99.7 96 147.7 96 161.2 0 55.8-39.5 94.8-96 94.8z"]
    };
    exports.faBurn = faBurn;
    var faBus = {
      prefix: 'fas',
      iconName: 'bus',
      icon: [512, 512, [], "f207", "M488 128h-8V80c0-44.8-99.2-80-224-80S32 35.2 32 80v48h-8c-13.25 0-24 10.74-24 24v80c0 13.25 10.75 24 24 24h8v160c0 17.67 14.33 32 32 32v32c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32v-32h192v32c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32v-32h6.4c16 0 25.6-12.8 25.6-25.6V256h8c13.25 0 24-10.75 24-24v-80c0-13.26-10.75-24-24-24zM112 400c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm16-112c-17.67 0-32-14.33-32-32V128c0-17.67 14.33-32 32-32h256c17.67 0 32 14.33 32 32v128c0 17.67-14.33 32-32 32H128zm272 112c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faBus = faBus;
    var faBusAlt = {
      prefix: 'fas',
      iconName: 'bus-alt',
      icon: [512, 512, [], "f55e", "M488 128h-8V80c0-44.8-99.2-80-224-80S32 35.2 32 80v48h-8c-13.25 0-24 10.74-24 24v80c0 13.25 10.75 24 24 24h8v160c0 17.67 14.33 32 32 32v32c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32v-32h192v32c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32v-32h6.4c16 0 25.6-12.8 25.6-25.6V256h8c13.25 0 24-10.75 24-24v-80c0-13.26-10.75-24-24-24zM160 72c0-4.42 3.58-8 8-8h176c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8H168c-4.42 0-8-3.58-8-8V72zm-48 328c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm128-112H128c-17.67 0-32-14.33-32-32v-96c0-17.67 14.33-32 32-32h112v160zm32 0V128h112c17.67 0 32 14.33 32 32v96c0 17.67-14.33 32-32 32H272zm128 112c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faBusAlt = faBusAlt;
    var faBusinessTime = {
      prefix: 'fas',
      iconName: 'business-time',
      icon: [640, 512, [], "f64a", "M496 224c-79.59 0-144 64.41-144 144s64.41 144 144 144 144-64.41 144-144-64.41-144-144-144zm64 150.29c0 5.34-4.37 9.71-9.71 9.71h-60.57c-5.34 0-9.71-4.37-9.71-9.71v-76.57c0-5.34 4.37-9.71 9.71-9.71h12.57c5.34 0 9.71 4.37 9.71 9.71V352h38.29c5.34 0 9.71 4.37 9.71 9.71v12.58zM496 192c5.4 0 10.72.33 16 .81V144c0-25.6-22.4-48-48-48h-80V48c0-25.6-22.4-48-48-48H176c-25.6 0-48 22.4-48 48v48H48c-25.6 0-48 22.4-48 48v80h395.12c28.6-20.09 63.35-32 100.88-32zM320 96H192V64h128v32zm6.82 224H208c-8.84 0-16-7.16-16-16v-48H0v144c0 25.6 22.4 48 48 48h291.43C327.1 423.96 320 396.82 320 368c0-16.66 2.48-32.72 6.82-48z"]
    };
    exports.faBusinessTime = faBusinessTime;
    var faCalculator = {
      prefix: 'fas',
      iconName: 'calculator',
      icon: [448, 512, [], "f1ec", "M400 0H48C22.4 0 0 22.4 0 48v416c0 25.6 22.4 48 48 48h352c25.6 0 48-22.4 48-48V48c0-25.6-22.4-48-48-48zM128 435.2c0 6.4-6.4 12.8-12.8 12.8H76.8c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4zm0-128c0 6.4-6.4 12.8-12.8 12.8H76.8c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4zm128 128c0 6.4-6.4 12.8-12.8 12.8h-38.4c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4zm0-128c0 6.4-6.4 12.8-12.8 12.8h-38.4c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4zm128 128c0 6.4-6.4 12.8-12.8 12.8h-38.4c-6.4 0-12.8-6.4-12.8-12.8V268.8c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v166.4zm0-256c0 6.4-6.4 12.8-12.8 12.8H76.8c-6.4 0-12.8-6.4-12.8-12.8V76.8C64 70.4 70.4 64 76.8 64h294.4c6.4 0 12.8 6.4 12.8 12.8v102.4z"]
    };
    exports.faCalculator = faCalculator;
    var faCalendar = {
      prefix: 'fas',
      iconName: 'calendar',
      icon: [448, 512, [], "f133", "M12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm436-44v-36c0-26.5-21.5-48-48-48h-48V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H160V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H48C21.5 64 0 85.5 0 112v36c0 6.6 5.4 12 12 12h424c6.6 0 12-5.4 12-12z"]
    };
    exports.faCalendar = faCalendar;
    var faCalendarAlt = {
      prefix: 'fas',
      iconName: 'calendar-alt',
      icon: [448, 512, [], "f073", "M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm320-196c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM192 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM64 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z"]
    };
    exports.faCalendarAlt = faCalendarAlt;
    var faCalendarCheck = {
      prefix: 'fas',
      iconName: 'calendar-check',
      icon: [448, 512, [], "f274", "M436 160H12c-6.627 0-12-5.373-12-12v-36c0-26.51 21.49-48 48-48h48V12c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v52h128V12c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v52h48c26.51 0 48 21.49 48 48v36c0 6.627-5.373 12-12 12zM12 192h424c6.627 0 12 5.373 12 12v260c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V204c0-6.627 5.373-12 12-12zm333.296 95.947l-28.169-28.398c-4.667-4.705-12.265-4.736-16.97-.068L194.12 364.665l-45.98-46.352c-4.667-4.705-12.266-4.736-16.971-.068l-28.397 28.17c-4.705 4.667-4.736 12.265-.068 16.97l82.601 83.269c4.667 4.705 12.265 4.736 16.97.068l142.953-141.805c4.705-4.667 4.736-12.265.068-16.97z"]
    };
    exports.faCalendarCheck = faCalendarCheck;
    var faCalendarDay = {
      prefix: 'fas',
      iconName: 'calendar-day',
      icon: [448, 512, [], "f783", "M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm64-192c0-8.8 7.2-16 16-16h96c8.8 0 16 7.2 16 16v96c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16v-96zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z"]
    };
    exports.faCalendarDay = faCalendarDay;
    var faCalendarMinus = {
      prefix: 'fas',
      iconName: 'calendar-minus',
      icon: [448, 512, [], "f272", "M436 160H12c-6.6 0-12-5.4-12-12v-36c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48v36c0 6.6-5.4 12-12 12zM12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm304 192c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H132c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h184z"]
    };
    exports.faCalendarMinus = faCalendarMinus;
    var faCalendarPlus = {
      prefix: 'fas',
      iconName: 'calendar-plus',
      icon: [448, 512, [], "f271", "M436 160H12c-6.6 0-12-5.4-12-12v-36c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48v36c0 6.6-5.4 12-12 12zM12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm316 140c0-6.6-5.4-12-12-12h-60v-60c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v60h-60c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h60v60c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-60h60c6.6 0 12-5.4 12-12v-40z"]
    };
    exports.faCalendarPlus = faCalendarPlus;
    var faCalendarTimes = {
      prefix: 'fas',
      iconName: 'calendar-times',
      icon: [448, 512, [], "f273", "M436 160H12c-6.6 0-12-5.4-12-12v-36c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48v36c0 6.6-5.4 12-12 12zM12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm257.3 160l48.1-48.1c4.7-4.7 4.7-12.3 0-17l-28.3-28.3c-4.7-4.7-12.3-4.7-17 0L224 306.7l-48.1-48.1c-4.7-4.7-12.3-4.7-17 0l-28.3 28.3c-4.7 4.7-4.7 12.3 0 17l48.1 48.1-48.1 48.1c-4.7 4.7-4.7 12.3 0 17l28.3 28.3c4.7 4.7 12.3 4.7 17 0l48.1-48.1 48.1 48.1c4.7 4.7 12.3 4.7 17 0l28.3-28.3c4.7-4.7 4.7-12.3 0-17L269.3 352z"]
    };
    exports.faCalendarTimes = faCalendarTimes;
    var faCalendarWeek = {
      prefix: 'fas',
      iconName: 'calendar-week',
      icon: [448, 512, [], "f784", "M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm64-192c0-8.8 7.2-16 16-16h288c8.8 0 16 7.2 16 16v64c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16v-64zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z"]
    };
    exports.faCalendarWeek = faCalendarWeek;
    var faCamera = {
      prefix: 'fas',
      iconName: 'camera',
      icon: [512, 512, [], "f030", "M512 144v288c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V144c0-26.5 21.5-48 48-48h88l12.3-32.9c7-18.7 24.9-31.1 44.9-31.1h125.5c20 0 37.9 12.4 44.9 31.1L376 96h88c26.5 0 48 21.5 48 48zM376 288c0-66.2-53.8-120-120-120s-120 53.8-120 120 53.8 120 120 120 120-53.8 120-120zm-32 0c0 48.5-39.5 88-88 88s-88-39.5-88-88 39.5-88 88-88 88 39.5 88 88z"]
    };
    exports.faCamera = faCamera;
    var faCameraRetro = {
      prefix: 'fas',
      iconName: 'camera-retro',
      icon: [512, 512, [], "f083", "M48 32C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48H48zm0 32h106c3.3 0 6 2.7 6 6v20c0 3.3-2.7 6-6 6H38c-3.3 0-6-2.7-6-6V80c0-8.8 7.2-16 16-16zm426 96H38c-3.3 0-6-2.7-6-6v-36c0-3.3 2.7-6 6-6h138l30.2-45.3c1.1-1.7 3-2.7 5-2.7H464c8.8 0 16 7.2 16 16v74c0 3.3-2.7 6-6 6zM256 424c-66.2 0-120-53.8-120-120s53.8-120 120-120 120 53.8 120 120-53.8 120-120 120zm0-208c-48.5 0-88 39.5-88 88s39.5 88 88 88 88-39.5 88-88-39.5-88-88-88zm-48 104c-8.8 0-16-7.2-16-16 0-35.3 28.7-64 64-64 8.8 0 16 7.2 16 16s-7.2 16-16 16c-17.6 0-32 14.4-32 32 0 8.8-7.2 16-16 16z"]
    };
    exports.faCameraRetro = faCameraRetro;
    var faCampground = {
      prefix: 'fas',
      iconName: 'campground',
      icon: [640, 512, [], "f6bb", "M624 448h-24.68L359.54 117.75l53.41-73.55c5.19-7.15 3.61-17.16-3.54-22.35l-25.9-18.79c-7.15-5.19-17.15-3.61-22.35 3.55L320 63.3 278.83 6.6c-5.19-7.15-15.2-8.74-22.35-3.55l-25.88 18.8c-7.15 5.19-8.74 15.2-3.54 22.35l53.41 73.55L40.68 448H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h608c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM320 288l116.36 160H203.64L320 288z"]
    };
    exports.faCampground = faCampground;
    var faCandyCane = {
      prefix: 'fas',
      iconName: 'candy-cane',
      icon: [512, 512, [], "f786", "M497.5 92C469.6 33.1 411.8 0 352.4 0c-27.9 0-56.2 7.3-81.8 22.6L243.1 39c-15.2 9.1-20.1 28.7-11 43.9l32.8 54.9c6 10 16.6 15.6 27.5 15.6 5.6 0 11.2-1.5 16.4-4.5l27.5-16.4c5.1-3.1 10.8-4.5 16.4-4.5 10.9 0 21.5 5.6 27.5 15.6 9.1 15.1 4.1 34.8-11 43.9L15.6 397.6c-15.2 9.1-20.1 28.7-11 43.9l32.8 54.9c6 10 16.6 15.6 27.5 15.6 5.6 0 11.2-1.5 16.4-4.5L428.6 301c71.7-42.9 104.6-133.5 68.9-209zm-177.7 13l-2.5 1.5L296.8 45c9.7-4.7 19.8-8.1 30.3-10.2l20.6 61.8c-9.8.8-19.4 3.3-27.9 8.4zM145.9 431.8l-60.5-38.5 30.8-18.3 60.5 38.5-30.8 18.3zm107.5-63.9l-60.5-38.5 30.8-18.3 60.5 38.5-30.8 18.3zM364.3 302l-60.5-38.5 30.8-18.3 60.5 38.5-30.8 18.3zm20.4-197.3l46-46c8.4 6.5 16 14.1 22.6 22.6L407.6 127c-5.7-9.3-13.7-16.9-22.9-22.3zm82.1 107.8l-59.5-19.8c3.2-5.3 5.8-10.9 7.4-17.1 1.1-4.5 1.7-9.1 1.8-13.6l60.4 20.1c-2.1 10.4-5.5 20.6-10.1 30.4z"]
    };
    exports.faCandyCane = faCandyCane;
    var faCannabis = {
      prefix: 'fas',
      iconName: 'cannabis',
      icon: [512, 512, [], "f55f", "M503.47 360.25c-1.56-.82-32.39-16.89-76.78-25.81 64.25-75.12 84.05-161.67 84.93-165.64 1.18-5.33-.44-10.9-4.3-14.77-3.03-3.04-7.12-4.7-11.32-4.7-1.14 0-2.29.12-3.44.38-3.88.85-86.54 19.59-160.58 79.76.01-1.46.01-2.93.01-4.4 0-118.79-59.98-213.72-62.53-217.7A15.973 15.973 0 0 0 256 0c-5.45 0-10.53 2.78-13.47 7.37-2.55 3.98-62.53 98.91-62.53 217.7 0 1.47.01 2.94.01 4.4-74.03-60.16-156.69-78.9-160.58-79.76-1.14-.25-2.29-.38-3.44-.38-4.2 0-8.29 1.66-11.32 4.7A15.986 15.986 0 0 0 .38 168.8c.88 3.97 20.68 90.52 84.93 165.64-44.39 8.92-75.21 24.99-76.78 25.81a16.003 16.003 0 0 0-.02 28.29c2.45 1.29 60.76 31.72 133.49 31.72 6.14 0 11.96-.1 17.5-.31-11.37 22.23-16.52 38.31-16.81 39.22-1.8 5.68-.29 11.89 3.91 16.11a16.019 16.019 0 0 0 16.1 3.99c1.83-.57 37.72-11.99 77.3-39.29V504c0 4.42 3.58 8 8 8h16c4.42 0 8-3.58 8-8v-64.01c39.58 27.3 75.47 38.71 77.3 39.29a16.019 16.019 0 0 0 16.1-3.99c4.2-4.22 5.71-10.43 3.91-16.11-.29-.91-5.45-16.99-16.81-39.22 5.54.21 11.37.31 17.5.31 72.72 0 131.04-30.43 133.49-31.72 5.24-2.78 8.52-8.22 8.51-14.15-.01-5.94-3.29-11.39-8.53-14.15z"]
    };
    exports.faCannabis = faCannabis;
    var faCapsules = {
      prefix: 'fas',
      iconName: 'capsules',
      icon: [576, 512, [], "f46b", "M555.3 300.1L424.2 112.8C401.9 81 366.4 64 330.4 64c-22.6 0-45.5 6.7-65.5 20.7-19.7 13.8-33.7 32.8-41.5 53.8C220.5 79.2 172 32 112 32 50.1 32 0 82.1 0 144v224c0 61.9 50.1 112 112 112s112-50.1 112-112V218.9c3.3 8.6 7.3 17.1 12.8 25L368 431.2c22.2 31.8 57.7 48.8 93.8 48.8 22.7 0 45.5-6.7 65.5-20.7 51.7-36.2 64.2-107.5 28-159.2zM160 256H64V144c0-26.5 21.5-48 48-48s48 21.5 48 48v112zm194.8 44.9l-65.6-93.7c-7.7-11-10.7-24.4-8.3-37.6 2.3-13.2 9.7-24.8 20.7-32.5 8.5-6 18.5-9.1 28.8-9.1 16.5 0 31.9 8 41.3 21.5l65.6 93.7-82.5 57.7z"]
    };
    exports.faCapsules = faCapsules;
    var faCar = {
      prefix: 'fas',
      iconName: 'car',
      icon: [512, 512, [], "f1b9", "M499.99 176h-59.87l-16.64-41.6C406.38 91.63 365.57 64 319.5 64h-127c-46.06 0-86.88 27.63-103.99 70.4L71.87 176H12.01C4.2 176-1.53 183.34.37 190.91l6 24C7.7 220.25 12.5 224 18.01 224h20.07C24.65 235.73 16 252.78 16 272v48c0 16.12 6.16 30.67 16 41.93V416c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32v-32h256v32c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32v-54.07c9.84-11.25 16-25.8 16-41.93v-48c0-19.22-8.65-36.27-22.07-48H494c5.51 0 10.31-3.75 11.64-9.09l6-24c1.89-7.57-3.84-14.91-11.65-14.91zm-352.06-17.83c7.29-18.22 24.94-30.17 44.57-30.17h127c19.63 0 37.28 11.95 44.57 30.17L384 208H128l19.93-49.83zM96 319.8c-19.2 0-32-12.76-32-31.9S76.8 256 96 256s48 28.71 48 47.85-28.8 15.95-48 15.95zm320 0c-19.2 0-48 3.19-48-15.95S396.8 256 416 256s32 12.76 32 31.9-12.8 31.9-32 31.9z"]
    };
    exports.faCar = faCar;
    var faCarAlt = {
      prefix: 'fas',
      iconName: 'car-alt',
      icon: [480, 512, [], "f5de", "M438.66 212.33l-11.24-28.1-19.93-49.83C390.38 91.63 349.57 64 303.5 64h-127c-46.06 0-86.88 27.63-103.99 70.4l-19.93 49.83-11.24 28.1C17.22 221.5 0 244.66 0 272v48c0 16.12 6.16 30.67 16 41.93V416c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32v-32h256v32c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32v-54.07c9.84-11.25 16-25.8 16-41.93v-48c0-27.34-17.22-50.5-41.34-59.67zm-306.73-54.16c7.29-18.22 24.94-30.17 44.57-30.17h127c19.63 0 37.28 11.95 44.57 30.17L368 208H112l19.93-49.83zM80 319.8c-19.2 0-32-12.76-32-31.9S60.8 256 80 256s48 28.71 48 47.85-28.8 15.95-48 15.95zm320 0c-19.2 0-48 3.19-48-15.95S380.8 256 400 256s32 12.76 32 31.9-12.8 31.9-32 31.9z"]
    };
    exports.faCarAlt = faCarAlt;
    var faCarBattery = {
      prefix: 'fas',
      iconName: 'car-battery',
      icon: [512, 512, [], "f5df", "M480 128h-32V80c0-8.84-7.16-16-16-16h-96c-8.84 0-16 7.16-16 16v48H192V80c0-8.84-7.16-16-16-16H80c-8.84 0-16 7.16-16 16v48H32c-17.67 0-32 14.33-32 32v256c0 17.67 14.33 32 32 32h448c17.67 0 32-14.33 32-32V160c0-17.67-14.33-32-32-32zM192 264c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h112c4.42 0 8 3.58 8 8v16zm256 0c0 4.42-3.58 8-8 8h-40v40c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8v-40h-40c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h40v-40c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v40h40c4.42 0 8 3.58 8 8v16z"]
    };
    exports.faCarBattery = faCarBattery;
    var faCarCrash = {
      prefix: 'fas',
      iconName: 'car-crash',
      icon: [640, 512, [], "f5e1", "M143.25 220.81l-12.42 46.37c-3.01 11.25-3.63 22.89-2.41 34.39l-35.2 28.98c-6.57 5.41-16.31-.43-14.62-8.77l15.44-76.68c1.06-5.26-2.66-10.28-8-10.79l-77.86-7.55c-8.47-.82-11.23-11.83-4.14-16.54l65.15-43.3c4.46-2.97 5.38-9.15 1.98-13.29L21.46 93.22c-5.41-6.57.43-16.3 8.78-14.62l76.68 15.44c5.26 1.06 10.28-2.66 10.8-8l7.55-77.86c.82-8.48 11.83-11.23 16.55-4.14l43.3 65.14c2.97 4.46 9.15 5.38 13.29 1.98l60.4-49.71c6.57-5.41 16.3.43 14.62 8.77L262.1 86.38c-2.71 3.05-5.43 6.09-7.91 9.4l-32.15 42.97-10.71 14.32c-32.73 8.76-59.18 34.53-68.08 67.74zm494.57 132.51l-12.42 46.36c-3.13 11.68-9.38 21.61-17.55 29.36a66.876 66.876 0 0 1-8.76 7l-13.99 52.23c-1.14 4.27-3.1 8.1-5.65 11.38-7.67 9.84-20.74 14.68-33.54 11.25L515 502.62c-17.07-4.57-27.2-22.12-22.63-39.19l8.28-30.91-247.28-66.26-8.28 30.91c-4.57 17.07-22.12 27.2-39.19 22.63l-30.91-8.28c-12.8-3.43-21.7-14.16-23.42-26.51-.57-4.12-.35-8.42.79-12.68l13.99-52.23a66.62 66.62 0 0 1-4.09-10.45c-3.2-10.79-3.65-22.52-.52-34.2l12.42-46.37c5.31-19.8 19.36-34.83 36.89-42.21a64.336 64.336 0 0 1 18.49-4.72l18.13-24.23 32.15-42.97c3.45-4.61 7.19-8.9 11.2-12.84 8-7.89 17.03-14.44 26.74-19.51 4.86-2.54 9.89-4.71 15.05-6.49 10.33-3.58 21.19-5.63 32.24-6.04 11.05-.41 22.31.82 33.43 3.8l122.68 32.87c11.12 2.98 21.48 7.54 30.85 13.43a111.11 111.11 0 0 1 34.69 34.5c8.82 13.88 14.64 29.84 16.68 46.99l6.36 53.29 3.59 30.05a64.49 64.49 0 0 1 22.74 29.93c4.39 11.88 5.29 25.19 1.75 38.39zM255.58 234.34c-18.55-4.97-34.21 4.04-39.17 22.53-4.96 18.49 4.11 34.12 22.65 39.09 18.55 4.97 45.54 15.51 50.49-2.98 4.96-18.49-15.43-53.67-33.97-58.64zm290.61 28.17l-6.36-53.29c-.58-4.87-1.89-9.53-3.82-13.86-5.8-12.99-17.2-23.01-31.42-26.82l-122.68-32.87a48.008 48.008 0 0 0-50.86 17.61l-32.15 42.97 172 46.08 75.29 20.18zm18.49 54.65c-18.55-4.97-53.8 15.31-58.75 33.79-4.95 18.49 23.69 22.86 42.24 27.83 18.55 4.97 34.21-4.04 39.17-22.53 4.95-18.48-4.11-34.12-22.66-39.09z"]
    };
    exports.faCarCrash = faCarCrash;
    var faCarSide = {
      prefix: 'fas',
      iconName: 'car-side',
      icon: [640, 512, [], "f5e4", "M544 192h-16L419.22 56.02A64.025 64.025 0 0 0 369.24 32H155.33c-26.17 0-49.7 15.93-59.42 40.23L48 194.26C20.44 201.4 0 226.21 0 256v112c0 8.84 7.16 16 16 16h48c0 53.02 42.98 96 96 96s96-42.98 96-96h128c0 53.02 42.98 96 96 96s96-42.98 96-96h48c8.84 0 16-7.16 16-16v-80c0-53.02-42.98-96-96-96zM160 432c-26.47 0-48-21.53-48-48s21.53-48 48-48 48 21.53 48 48-21.53 48-48 48zm72-240H116.93l38.4-96H232v96zm48 0V96h89.24l76.8 96H280zm200 240c-26.47 0-48-21.53-48-48s21.53-48 48-48 48 21.53 48 48-21.53 48-48 48z"]
    };
    exports.faCarSide = faCarSide;
    var faCaravan = {
      prefix: 'fas',
      iconName: 'caravan',
      icon: [640, 512, [], "f8ff", "M416,208a16,16,0,1,0,16,16A16,16,0,0,0,416,208ZM624,320H576V160A160,160,0,0,0,416,0H64A64,64,0,0,0,0,64V320a64,64,0,0,0,64,64H96a96,96,0,0,0,192,0H624a16,16,0,0,0,16-16V336A16,16,0,0,0,624,320ZM192,432a48,48,0,1,1,48-48A48.05,48.05,0,0,1,192,432Zm64-240a32,32,0,0,1-32,32H96a32,32,0,0,1-32-32V128A32,32,0,0,1,96,96H224a32,32,0,0,1,32,32ZM448,320H320V128a32,32,0,0,1,32-32h64a32,32,0,0,1,32,32Z"]
    };
    exports.faCaravan = faCaravan;
    var faCaretDown = {
      prefix: 'fas',
      iconName: 'caret-down',
      icon: [320, 512, [], "f0d7", "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"]
    };
    exports.faCaretDown = faCaretDown;
    var faCaretLeft = {
      prefix: 'fas',
      iconName: 'caret-left',
      icon: [192, 512, [], "f0d9", "M192 127.338v257.324c0 17.818-21.543 26.741-34.142 14.142L29.196 270.142c-7.81-7.81-7.81-20.474 0-28.284l128.662-128.662c12.599-12.6 34.142-3.676 34.142 14.142z"]
    };
    exports.faCaretLeft = faCaretLeft;
    var faCaretRight = {
      prefix: 'fas',
      iconName: 'caret-right',
      icon: [192, 512, [], "f0da", "M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z"]
    };
    exports.faCaretRight = faCaretRight;
    var faCaretSquareDown = {
      prefix: 'fas',
      iconName: 'caret-square-down',
      icon: [448, 512, [], "f150", "M448 80v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zM92.5 220.5l123 123c4.7 4.7 12.3 4.7 17 0l123-123c7.6-7.6 2.2-20.5-8.5-20.5H101c-10.7 0-16.1 12.9-8.5 20.5z"]
    };
    exports.faCaretSquareDown = faCaretSquareDown;
    var faCaretSquareLeft = {
      prefix: 'fas',
      iconName: 'caret-square-left',
      icon: [448, 512, [], "f191", "M400 480H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48zM259.515 124.485l-123.03 123.03c-4.686 4.686-4.686 12.284 0 16.971l123.029 123.029c7.56 7.56 20.485 2.206 20.485-8.485V132.971c.001-10.691-12.925-16.045-20.484-8.486z"]
    };
    exports.faCaretSquareLeft = faCaretSquareLeft;
    var faCaretSquareRight = {
      prefix: 'fas',
      iconName: 'caret-square-right',
      icon: [448, 512, [], "f152", "M48 32h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48zm140.485 355.515l123.029-123.029c4.686-4.686 4.686-12.284 0-16.971l-123.029-123.03c-7.56-7.56-20.485-2.206-20.485 8.485v246.059c0 10.691 12.926 16.045 20.485 8.486z"]
    };
    exports.faCaretSquareRight = faCaretSquareRight;
    var faCaretSquareUp = {
      prefix: 'fas',
      iconName: 'caret-square-up',
      icon: [448, 512, [], "f151", "M0 432V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48zm355.515-140.485l-123.03-123.03c-4.686-4.686-12.284-4.686-16.971 0L92.485 291.515c-7.56 7.56-2.206 20.485 8.485 20.485h246.059c10.691 0 16.045-12.926 8.486-20.485z"]
    };
    exports.faCaretSquareUp = faCaretSquareUp;
    var faCaretUp = {
      prefix: 'fas',
      iconName: 'caret-up',
      icon: [320, 512, [], "f0d8", "M288.662 352H31.338c-17.818 0-26.741-21.543-14.142-34.142l128.662-128.662c7.81-7.81 20.474-7.81 28.284 0l128.662 128.662c12.6 12.599 3.676 34.142-14.142 34.142z"]
    };
    exports.faCaretUp = faCaretUp;
    var faCarrot = {
      prefix: 'fas',
      iconName: 'carrot',
      icon: [512, 512, [], "f787", "M298.2 156.6c-52.7-25.7-114.5-10.5-150.2 32.8l55.2 55.2c6.3 6.3 6.3 16.4 0 22.6-3.1 3.1-7.2 4.7-11.3 4.7s-8.2-1.6-11.3-4.7L130.4 217 2.3 479.7c-2.9 6-3.1 13.3 0 19.7 5.4 11.1 18.9 15.7 30 10.3l133.6-65.2-49.2-49.2c-6.3-6.2-6.3-16.4 0-22.6 6.3-6.2 16.4-6.2 22.6 0l57 57 102-49.8c24-11.7 44.5-31.3 57.1-57.1 30.1-61.7 4.5-136.1-57.2-166.2zm92.1-34.9C409.8 81 399.7 32.9 360 0c-50.3 41.7-52.5 107.5-7.9 151.9l8 8c44.4 44.6 110.3 42.4 151.9-7.9-32.9-39.7-81-49.8-121.7-30.3z"]
    };
    exports.faCarrot = faCarrot;
    var faCartArrowDown = {
      prefix: 'fas',
      iconName: 'cart-arrow-down',
      icon: [576, 512, [], "f218", "M504.717 320H211.572l6.545 32h268.418c15.401 0 26.816 14.301 23.403 29.319l-5.517 24.276C523.112 414.668 536 433.828 536 456c0 31.202-25.519 56.444-56.824 55.994-29.823-.429-54.35-24.631-55.155-54.447-.44-16.287 6.085-31.049 16.803-41.548H231.176C241.553 426.165 248 440.326 248 456c0 31.813-26.528 57.431-58.67 55.938-28.54-1.325-51.751-24.385-53.251-52.917-1.158-22.034 10.436-41.455 28.051-51.586L93.883 64H24C10.745 64 0 53.255 0 40V24C0 10.745 10.745 0 24 0h102.529c11.401 0 21.228 8.021 23.513 19.19L159.208 64H551.99c15.401 0 26.816 14.301 23.403 29.319l-47.273 208C525.637 312.246 515.923 320 504.717 320zM403.029 192H360v-60c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v60h-43.029c-10.691 0-16.045 12.926-8.485 20.485l67.029 67.029c4.686 4.686 12.284 4.686 16.971 0l67.029-67.029c7.559-7.559 2.205-20.485-8.486-20.485z"]
    };
    exports.faCartArrowDown = faCartArrowDown;
    var faCartPlus = {
      prefix: 'fas',
      iconName: 'cart-plus',
      icon: [576, 512, [], "f217", "M504.717 320H211.572l6.545 32h268.418c15.401 0 26.816 14.301 23.403 29.319l-5.517 24.276C523.112 414.668 536 433.828 536 456c0 31.202-25.519 56.444-56.824 55.994-29.823-.429-54.35-24.631-55.155-54.447-.44-16.287 6.085-31.049 16.803-41.548H231.176C241.553 426.165 248 440.326 248 456c0 31.813-26.528 57.431-58.67 55.938-28.54-1.325-51.751-24.385-53.251-52.917-1.158-22.034 10.436-41.455 28.051-51.586L93.883 64H24C10.745 64 0 53.255 0 40V24C0 10.745 10.745 0 24 0h102.529c11.401 0 21.228 8.021 23.513 19.19L159.208 64H551.99c15.401 0 26.816 14.301 23.403 29.319l-47.273 208C525.637 312.246 515.923 320 504.717 320zM408 168h-48v-40c0-8.837-7.163-16-16-16h-16c-8.837 0-16 7.163-16 16v40h-48c-8.837 0-16 7.163-16 16v16c0 8.837 7.163 16 16 16h48v40c0 8.837 7.163 16 16 16h16c8.837 0 16-7.163 16-16v-40h48c8.837 0 16-7.163 16-16v-16c0-8.837-7.163-16-16-16z"]
    };
    exports.faCartPlus = faCartPlus;
    var faCashRegister = {
      prefix: 'fas',
      iconName: 'cash-register',
      icon: [512, 512, [], "f788", "M511.1 378.8l-26.7-160c-2.6-15.4-15.9-26.7-31.6-26.7H208v-64h96c8.8 0 16-7.2 16-16V16c0-8.8-7.2-16-16-16H48c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h96v64H59.1c-15.6 0-29 11.3-31.6 26.7L.8 378.7c-.6 3.5-.9 7-.9 10.5V480c0 17.7 14.3 32 32 32h448c17.7 0 32-14.3 32-32v-90.7c.1-3.5-.2-7-.8-10.5zM280 248c0-8.8 7.2-16 16-16h16c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16h-16c-8.8 0-16-7.2-16-16v-16zm-32 64h16c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16h-16c-8.8 0-16-7.2-16-16v-16c0-8.8 7.2-16 16-16zm-32-80c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16h-16c-8.8 0-16-7.2-16-16v-16c0-8.8 7.2-16 16-16h16zM80 80V48h192v32H80zm40 200h-16c-8.8 0-16-7.2-16-16v-16c0-8.8 7.2-16 16-16h16c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16zm16 64v-16c0-8.8 7.2-16 16-16h16c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16h-16c-8.8 0-16-7.2-16-16zm216 112c0 4.4-3.6 8-8 8H168c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h176c4.4 0 8 3.6 8 8v16zm24-112c0 8.8-7.2 16-16 16h-16c-8.8 0-16-7.2-16-16v-16c0-8.8 7.2-16 16-16h16c8.8 0 16 7.2 16 16v16zm48-80c0 8.8-7.2 16-16 16h-16c-8.8 0-16-7.2-16-16v-16c0-8.8 7.2-16 16-16h16c8.8 0 16 7.2 16 16v16z"]
    };
    exports.faCashRegister = faCashRegister;
    var faCat = {
      prefix: 'fas',
      iconName: 'cat',
      icon: [512, 512, [], "f6be", "M290.59 192c-20.18 0-106.82 1.98-162.59 85.95V192c0-52.94-43.06-96-96-96-17.67 0-32 14.33-32 32s14.33 32 32 32c17.64 0 32 14.36 32 32v256c0 35.3 28.7 64 64 64h176c8.84 0 16-7.16 16-16v-16c0-17.67-14.33-32-32-32h-32l128-96v144c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16V289.86c-10.29 2.67-20.89 4.54-32 4.54-61.81 0-113.52-44.05-125.41-102.4zM448 96h-64l-64-64v134.4c0 53.02 42.98 96 96 96s96-42.98 96-96V32l-64 64zm-72 80c-8.84 0-16-7.16-16-16s7.16-16 16-16 16 7.16 16 16-7.16 16-16 16zm80 0c-8.84 0-16-7.16-16-16s7.16-16 16-16 16 7.16 16 16-7.16 16-16 16z"]
    };
    exports.faCat = faCat;
    var faCertificate = {
      prefix: 'fas',
      iconName: 'certificate',
      icon: [512, 512, [], "f0a3", "M458.622 255.92l45.985-45.005c13.708-12.977 7.316-36.039-10.664-40.339l-62.65-15.99 17.661-62.015c4.991-17.838-11.829-34.663-29.661-29.671l-61.994 17.667-15.984-62.671C337.085.197 313.765-6.276 300.99 7.228L256 53.57 211.011 7.229c-12.63-13.351-36.047-7.234-40.325 10.668l-15.984 62.671-61.995-17.667C74.87 57.907 58.056 74.738 63.046 92.572l17.661 62.015-62.65 15.99C.069 174.878-6.31 197.944 7.392 210.915l45.985 45.005-45.985 45.004c-13.708 12.977-7.316 36.039 10.664 40.339l62.65 15.99-17.661 62.015c-4.991 17.838 11.829 34.663 29.661 29.671l61.994-17.667 15.984 62.671c4.439 18.575 27.696 24.018 40.325 10.668L256 458.61l44.989 46.001c12.5 13.488 35.987 7.486 40.325-10.668l15.984-62.671 61.994 17.667c17.836 4.994 34.651-11.837 29.661-29.671l-17.661-62.015 62.65-15.99c17.987-4.302 24.366-27.367 10.664-40.339l-45.984-45.004z"]
    };
    exports.faCertificate = faCertificate;
    var faChair = {
      prefix: 'fas',
      iconName: 'chair',
      icon: [448, 512, [], "f6c0", "M112 128c0-29.5 16.2-55 40-68.9V256h48V48h48v208h48V59.1c23.8 13.9 40 39.4 40 68.9v128h48V128C384 57.3 326.7 0 256 0h-64C121.3 0 64 57.3 64 128v128h48zm334.3 213.9l-10.7-32c-4.4-13.1-16.6-21.9-30.4-21.9H42.7c-13.8 0-26 8.8-30.4 21.9l-10.7 32C-5.2 362.6 10.2 384 32 384v112c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V384h256v112c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V384c21.8 0 37.2-21.4 30.3-42.1z"]
    };
    exports.faChair = faChair;
    var faChalkboard = {
      prefix: 'fas',
      iconName: 'chalkboard',
      icon: [640, 512, [], "f51b", "M96 64h448v352h64V40c0-22.06-17.94-40-40-40H72C49.94 0 32 17.94 32 40v376h64V64zm528 384H480v-64H288v64H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h608c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16z"]
    };
    exports.faChalkboard = faChalkboard;
    var faChalkboardTeacher = {
      prefix: 'fas',
      iconName: 'chalkboard-teacher',
      icon: [640, 512, [], "f51c", "M208 352c-2.39 0-4.78.35-7.06 1.09C187.98 357.3 174.35 360 160 360c-14.35 0-27.98-2.7-40.95-6.91-2.28-.74-4.66-1.09-7.05-1.09C49.94 352-.33 402.48 0 464.62.14 490.88 21.73 512 48 512h224c26.27 0 47.86-21.12 48-47.38.33-62.14-49.94-112.62-112-112.62zm-48-32c53.02 0 96-42.98 96-96s-42.98-96-96-96-96 42.98-96 96 42.98 96 96 96zM592 0H208c-26.47 0-48 22.25-48 49.59V96c23.42 0 45.1 6.78 64 17.8V64h352v288h-64v-64H384v64h-76.24c19.1 16.69 33.12 38.73 39.69 64H592c26.47 0 48-22.25 48-49.59V49.59C640 22.25 618.47 0 592 0z"]
    };
    exports.faChalkboardTeacher = faChalkboardTeacher;
    var faChargingStation = {
      prefix: 'fas',
      iconName: 'charging-station',
      icon: [576, 512, [], "f5e7", "M336 448H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h320c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zm208-320V80c0-8.84-7.16-16-16-16s-16 7.16-16 16v48h-32V80c0-8.84-7.16-16-16-16s-16 7.16-16 16v48h-16c-8.84 0-16 7.16-16 16v32c0 35.76 23.62 65.69 56 75.93v118.49c0 13.95-9.5 26.92-23.26 29.19C431.22 402.5 416 388.99 416 372v-28c0-48.6-39.4-88-88-88h-8V64c0-35.35-28.65-64-64-64H96C60.65 0 32 28.65 32 64v352h288V304h8c22.09 0 40 17.91 40 40v24.61c0 39.67 28.92 75.16 68.41 79.01C481.71 452.05 520 416.41 520 372V251.93c32.38-10.24 56-40.17 56-75.93v-32c0-8.84-7.16-16-16-16h-16zm-283.91 47.76l-93.7 139c-2.2 3.33-6.21 5.24-10.39 5.24-7.67 0-13.47-6.28-11.67-12.92L167.35 224H108c-7.25 0-12.85-5.59-11.89-11.89l16-107C112.9 99.9 117.98 96 124 96h68c7.88 0 13.62 6.54 11.6 13.21L192 160h57.7c9.24 0 15.01 8.78 10.39 15.76z"]
    };
    exports.faChargingStation = faChargingStation;
    var faChartArea = {
      prefix: 'fas',
      iconName: 'chart-area',
      icon: [512, 512, [], "f1fe", "M500 384c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12V76c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v308h436zM372.7 159.5L288 216l-85.3-113.7c-5.1-6.8-15.5-6.3-19.9 1L96 248v104h384l-89.9-187.8c-3.2-6.5-11.4-8.7-17.4-4.7z"]
    };
    exports.faChartArea = faChartArea;
    var faChartBar = {
      prefix: 'fas',
      iconName: 'chart-bar',
      icon: [512, 512, [], "f080", "M332.8 320h38.4c6.4 0 12.8-6.4 12.8-12.8V172.8c0-6.4-6.4-12.8-12.8-12.8h-38.4c-6.4 0-12.8 6.4-12.8 12.8v134.4c0 6.4 6.4 12.8 12.8 12.8zm96 0h38.4c6.4 0 12.8-6.4 12.8-12.8V76.8c0-6.4-6.4-12.8-12.8-12.8h-38.4c-6.4 0-12.8 6.4-12.8 12.8v230.4c0 6.4 6.4 12.8 12.8 12.8zm-288 0h38.4c6.4 0 12.8-6.4 12.8-12.8v-70.4c0-6.4-6.4-12.8-12.8-12.8h-38.4c-6.4 0-12.8 6.4-12.8 12.8v70.4c0 6.4 6.4 12.8 12.8 12.8zm96 0h38.4c6.4 0 12.8-6.4 12.8-12.8V108.8c0-6.4-6.4-12.8-12.8-12.8h-38.4c-6.4 0-12.8 6.4-12.8 12.8v198.4c0 6.4 6.4 12.8 12.8 12.8zM496 384H64V80c0-8.84-7.16-16-16-16H16C7.16 64 0 71.16 0 80v336c0 17.67 14.33 32 32 32h464c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16z"]
    };
    exports.faChartBar = faChartBar;
    var faChartLine = {
      prefix: 'fas',
      iconName: 'chart-line',
      icon: [512, 512, [], "f201", "M496 384H64V80c0-8.84-7.16-16-16-16H16C7.16 64 0 71.16 0 80v336c0 17.67 14.33 32 32 32h464c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM464 96H345.94c-21.38 0-32.09 25.85-16.97 40.97l32.4 32.4L288 242.75l-73.37-73.37c-12.5-12.5-32.76-12.5-45.25 0l-68.69 68.69c-6.25 6.25-6.25 16.38 0 22.63l22.62 22.62c6.25 6.25 16.38 6.25 22.63 0L192 237.25l73.37 73.37c12.5 12.5 32.76 12.5 45.25 0l96-96 32.4 32.4c15.12 15.12 40.97 4.41 40.97-16.97V112c.01-8.84-7.15-16-15.99-16z"]
    };
    exports.faChartLine = faChartLine;
    var faChartPie = {
      prefix: 'fas',
      iconName: 'chart-pie',
      icon: [544, 512, [], "f200", "M527.79 288H290.5l158.03 158.03c6.04 6.04 15.98 6.53 22.19.68 38.7-36.46 65.32-85.61 73.13-140.86 1.34-9.46-6.51-17.85-16.06-17.85zm-15.83-64.8C503.72 103.74 408.26 8.28 288.8.04 279.68-.59 272 7.1 272 16.24V240h223.77c9.14 0 16.82-7.68 16.19-16.8zM224 288V50.71c0-9.55-8.39-17.4-17.84-16.06C86.99 51.49-4.1 155.6.14 280.37 4.5 408.51 114.83 513.59 243.03 511.98c50.4-.63 96.97-16.87 135.26-44.03 7.9-5.6 8.42-17.23 1.57-24.08L224 288z"]
    };
    exports.faChartPie = faChartPie;
    var faCheck = {
      prefix: 'fas',
      iconName: 'check',
      icon: [512, 512, [], "f00c", "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"]
    };
    exports.faCheck = faCheck;
    var faCheckCircle = {
      prefix: 'fas',
      iconName: 'check-circle',
      icon: [512, 512, [], "f058", "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"]
    };
    exports.faCheckCircle = faCheckCircle;
    var faCheckDouble = {
      prefix: 'fas',
      iconName: 'check-double',
      icon: [512, 512, [], "f560", "M505 174.8l-39.6-39.6c-9.4-9.4-24.6-9.4-33.9 0L192 374.7 80.6 263.2c-9.4-9.4-24.6-9.4-33.9 0L7 302.9c-9.4 9.4-9.4 24.6 0 34L175 505c9.4 9.4 24.6 9.4 33.9 0l296-296.2c9.4-9.5 9.4-24.7.1-34zm-324.3 106c6.2 6.3 16.4 6.3 22.6 0l208-208.2c6.2-6.3 6.2-16.4 0-22.6L366.1 4.7c-6.2-6.3-16.4-6.3-22.6 0L192 156.2l-55.4-55.5c-6.2-6.3-16.4-6.3-22.6 0L68.7 146c-6.2 6.3-6.2 16.4 0 22.6l112 112.2z"]
    };
    exports.faCheckDouble = faCheckDouble;
    var faCheckSquare = {
      prefix: 'fas',
      iconName: 'check-square',
      icon: [448, 512, [], "f14a", "M400 480H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48zm-204.686-98.059l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.248-16.379-6.249-22.628 0L184 302.745l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.25 16.379 6.25 22.628.001z"]
    };
    exports.faCheckSquare = faCheckSquare;
    var faCheese = {
      prefix: 'fas',
      iconName: 'cheese',
      icon: [512, 512, [], "f7ef", "M0 288v160a32 32 0 0 0 32 32h448a32 32 0 0 0 32-32V288zM299.83 32a32 32 0 0 0-21.13 7L0 256h512c0-119.89-94-217.8-212.17-224z"]
    };
    exports.faCheese = faCheese;
    var faChess = {
      prefix: 'fas',
      iconName: 'chess',
      icon: [512, 512, [], "f439", "M74 208H64a16 16 0 0 0-16 16v16a16 16 0 0 0 16 16h15.94A535.78 535.78 0 0 1 64 384h128a535.78 535.78 0 0 1-15.94-128H192a16 16 0 0 0 16-16v-16a16 16 0 0 0-16-16h-10l33.89-90.38a16 16 0 0 0-15-21.62H144V64h24a8 8 0 0 0 8-8V40a8 8 0 0 0-8-8h-24V8a8 8 0 0 0-8-8h-16a8 8 0 0 0-8 8v24H88a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h24v32H55.09a16 16 0 0 0-15 21.62zm173.16 251.58L224 448v-16a16 16 0 0 0-16-16H48a16 16 0 0 0-16 16v16L8.85 459.58A16 16 0 0 0 0 473.89V496a16 16 0 0 0 16 16h224a16 16 0 0 0 16-16v-22.11a16 16 0 0 0-8.84-14.31zm92.77-157.78l-3.29 82.2h126.72l-3.29-82.21 24.6-20.79A32 32 0 0 0 496 256.54V198a6 6 0 0 0-6-6h-26.38a6 6 0 0 0-6 6v26h-24.71v-26a6 6 0 0 0-6-6H373.1a6 6 0 0 0-6 6v26h-24.71v-26a6 6 0 0 0-6-6H310a6 6 0 0 0-6 6v58.6a32 32 0 0 0 11.36 24.4zM384 304a16 16 0 0 1 32 0v32h-32zm119.16 155.58L480 448v-16a16 16 0 0 0-16-16H336a16 16 0 0 0-16 16v16l-23.15 11.58a16 16 0 0 0-8.85 14.31V496a16 16 0 0 0 16 16h192a16 16 0 0 0 16-16v-22.11a16 16 0 0 0-8.84-14.31z"]
    };
    exports.faChess = faChess;
    var faChessBishop = {
      prefix: 'fas',
      iconName: 'chess-bishop',
      icon: [320, 512, [], "f43a", "M8 287.88c0 51.64 22.14 73.83 56 84.6V416h192v-43.52c33.86-10.77 56-33 56-84.6 0-30.61-10.73-67.1-26.69-102.56L185 285.65a8 8 0 0 1-11.31 0l-11.31-11.31a8 8 0 0 1 0-11.31L270.27 155.1c-20.8-37.91-46.47-72.1-70.87-92.59C213.4 59.09 224 47.05 224 32a32 32 0 0 0-32-32h-64a32 32 0 0 0-32 32c0 15 10.6 27.09 24.6 30.51C67.81 106.8 8 214.5 8 287.88zM304 448H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h288a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z"]
    };
    exports.faChessBishop = faChessBishop;
    var faChessBoard = {
      prefix: 'fas',
      iconName: 'chess-board',
      icon: [512, 512, [], "f43c", "M255.9.2h-64v64h64zM0 64.17v64h64v-64zM128 .2H64v64h64zm64 255.9v64h64v-64zM0 192.12v64h64v-64zM383.85.2h-64v64h64zm128 0h-64v64h64zM128 256.1H64v64h64zM511.8 448v-64h-64v64zm0-128v-64h-64v64zM383.85 512h64v-64h-64zm128-319.88v-64h-64v64zM128 512h64v-64h-64zM0 512h64v-64H0zm255.9 0h64v-64h-64zM0 320.07v64h64v-64zm319.88-191.92v-64h-64v64zm-64 128h64v-64h-64zm-64 128v64h64v-64zm128-64h64v-64h-64zm0-127.95h64v-64h-64zm0 191.93v64h64v-64zM64 384.05v64h64v-64zm128-255.9v-64h-64v64zm191.92 255.9h64v-64h-64zm-128-191.93v-64h-64v64zm128-127.95v64h64v-64zm-128 255.9v64h64v-64zm-64-127.95H128v64h64zm191.92 64h64v-64h-64zM128 128.15H64v64h64zm0 191.92v64h64v-64z"]
    };
    exports.faChessBoard = faChessBoard;
    var faChessKing = {
      prefix: 'fas',
      iconName: 'chess-king',
      icon: [448, 512, [], "f43f", "M400 448H48a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h352a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm16-288H256v-48h40a8 8 0 0 0 8-8V56a8 8 0 0 0-8-8h-40V8a8 8 0 0 0-8-8h-48a8 8 0 0 0-8 8v40h-40a8 8 0 0 0-8 8v48a8 8 0 0 0 8 8h40v48H32a32 32 0 0 0-30.52 41.54L74.56 416h298.88l73.08-214.46A32 32 0 0 0 416 160z"]
    };
    exports.faChessKing = faChessKing;
    var faChessKnight = {
      prefix: 'fas',
      iconName: 'chess-knight',
      icon: [384, 512, [], "f441", "M19 272.47l40.63 18.06a32 32 0 0 0 24.88.47l12.78-5.12a32 32 0 0 0 18.76-20.5l9.22-30.65a24 24 0 0 1 12.55-15.65L159.94 208v50.33a48 48 0 0 1-26.53 42.94l-57.22 28.65A80 80 0 0 0 32 401.48V416h319.86V224c0-106-85.92-192-191.92-192H12A12 12 0 0 0 0 44a16.9 16.9 0 0 0 1.79 7.58L16 80l-9 9a24 24 0 0 0-7 17v137.21a32 32 0 0 0 19 29.26zM52 128a20 20 0 1 1-20 20 20 20 0 0 1 20-20zm316 320H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h352a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z"]
    };
    exports.faChessKnight = faChessKnight;
    var faChessPawn = {
      prefix: 'fas',
      iconName: 'chess-pawn',
      icon: [320, 512, [], "f443", "M105.1 224H80a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h16v5.49c0 44-4.14 86.6-24 122.51h176c-19.89-35.91-24-78.51-24-122.51V288h16a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-25.1c29.39-18.38 49.1-50.78 49.1-88a104 104 0 0 0-208 0c0 37.22 19.71 69.62 49.1 88zM304 448H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h288a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z"]
    };
    exports.faChessPawn = faChessPawn;
    var faChessQueen = {
      prefix: 'fas',
      iconName: 'chess-queen',
      icon: [512, 512, [], "f445", "M256 112a56 56 0 1 0-56-56 56 56 0 0 0 56 56zm176 336H80a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h352a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm72.87-263.84l-28.51-15.92c-7.44-5-16.91-2.46-22.29 4.68a47.59 47.59 0 0 1-47.23 18.23C383.7 186.86 368 164.93 368 141.4a13.4 13.4 0 0 0-13.4-13.4h-38.77c-6 0-11.61 4-12.86 9.91a48 48 0 0 1-93.94 0c-1.25-5.92-6.82-9.91-12.86-9.91H157.4a13.4 13.4 0 0 0-13.4 13.4c0 25.69-19 48.75-44.67 50.49a47.5 47.5 0 0 1-41.54-19.15c-5.28-7.09-14.73-9.45-22.09-4.54l-28.57 16a16 16 0 0 0-5.44 20.47L104.24 416h303.52l102.55-211.37a16 16 0 0 0-5.44-20.47z"]
    };
    exports.faChessQueen = faChessQueen;
    var faChessRook = {
      prefix: 'fas',
      iconName: 'chess-rook',
      icon: [384, 512, [], "f447", "M368 32h-56a16 16 0 0 0-16 16v48h-48V48a16 16 0 0 0-16-16h-80a16 16 0 0 0-16 16v48H88.1V48a16 16 0 0 0-16-16H16A16 16 0 0 0 0 48v176l64 32c0 48.33-1.54 95-13.21 160h282.42C321.54 351 320 303.72 320 256l64-32V48a16 16 0 0 0-16-16zM224 320h-64v-64a32 32 0 0 1 64 0zm144 128H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h352a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z"]
    };
    exports.faChessRook = faChessRook;
    var faChevronCircleDown = {
      prefix: 'fas',
      iconName: 'chevron-circle-down',
      icon: [512, 512, [], "f13a", "M504 256c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zM273 369.9l135.5-135.5c9.4-9.4 9.4-24.6 0-33.9l-17-17c-9.4-9.4-24.6-9.4-33.9 0L256 285.1 154.4 183.5c-9.4-9.4-24.6-9.4-33.9 0l-17 17c-9.4 9.4-9.4 24.6 0 33.9L239 369.9c9.4 9.4 24.6 9.4 34 0z"]
    };
    exports.faChevronCircleDown = faChevronCircleDown;
    var faChevronCircleLeft = {
      prefix: 'fas',
      iconName: 'chevron-circle-left',
      icon: [512, 512, [], "f137", "M256 504C119 504 8 393 8 256S119 8 256 8s248 111 248 248-111 248-248 248zM142.1 273l135.5 135.5c9.4 9.4 24.6 9.4 33.9 0l17-17c9.4-9.4 9.4-24.6 0-33.9L226.9 256l101.6-101.6c9.4-9.4 9.4-24.6 0-33.9l-17-17c-9.4-9.4-24.6-9.4-33.9 0L142.1 239c-9.4 9.4-9.4 24.6 0 34z"]
    };
    exports.faChevronCircleLeft = faChevronCircleLeft;
    var faChevronCircleRight = {
      prefix: 'fas',
      iconName: 'chevron-circle-right',
      icon: [512, 512, [], "f138", "M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zm113.9 231L234.4 103.5c-9.4-9.4-24.6-9.4-33.9 0l-17 17c-9.4 9.4-9.4 24.6 0 33.9L285.1 256 183.5 357.6c-9.4 9.4-9.4 24.6 0 33.9l17 17c9.4 9.4 24.6 9.4 33.9 0L369.9 273c9.4-9.4 9.4-24.6 0-34z"]
    };
    exports.faChevronCircleRight = faChevronCircleRight;
    var faChevronCircleUp = {
      prefix: 'fas',
      iconName: 'chevron-circle-up',
      icon: [512, 512, [], "f139", "M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm231-113.9L103.5 277.6c-9.4 9.4-9.4 24.6 0 33.9l17 17c9.4 9.4 24.6 9.4 33.9 0L256 226.9l101.6 101.6c9.4 9.4 24.6 9.4 33.9 0l17-17c9.4-9.4 9.4-24.6 0-33.9L273 142.1c-9.4-9.4-24.6-9.4-34 0z"]
    };
    exports.faChevronCircleUp = faChevronCircleUp;
    var faChevronDown = {
      prefix: 'fas',
      iconName: 'chevron-down',
      icon: [448, 512, [], "f078", "M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"]
    };
    exports.faChevronDown = faChevronDown;
    var faChevronLeft = {
      prefix: 'fas',
      iconName: 'chevron-left',
      icon: [320, 512, [], "f053", "M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z"]
    };
    exports.faChevronLeft = faChevronLeft;
    var faChevronRight = {
      prefix: 'fas',
      iconName: 'chevron-right',
      icon: [320, 512, [], "f054", "M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"]
    };
    exports.faChevronRight = faChevronRight;
    var faChevronUp = {
      prefix: 'fas',
      iconName: 'chevron-up',
      icon: [448, 512, [], "f077", "M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z"]
    };
    exports.faChevronUp = faChevronUp;
    var faChild = {
      prefix: 'fas',
      iconName: 'child',
      icon: [384, 512, [], "f1ae", "M120 72c0-39.765 32.235-72 72-72s72 32.235 72 72c0 39.764-32.235 72-72 72s-72-32.236-72-72zm254.627 1.373c-12.496-12.497-32.758-12.497-45.254 0L242.745 160H141.254L54.627 73.373c-12.496-12.497-32.758-12.497-45.254 0-12.497 12.497-12.497 32.758 0 45.255L104 213.254V480c0 17.673 14.327 32 32 32h16c17.673 0 32-14.327 32-32V368h16v112c0 17.673 14.327 32 32 32h16c17.673 0 32-14.327 32-32V213.254l94.627-94.627c12.497-12.497 12.497-32.757 0-45.254z"]
    };
    exports.faChild = faChild;
    var faChurch = {
      prefix: 'fas',
      iconName: 'church',
      icon: [640, 512, [], "f51d", "M464.46 246.68L352 179.2V128h48c8.84 0 16-7.16 16-16V80c0-8.84-7.16-16-16-16h-48V16c0-8.84-7.16-16-16-16h-32c-8.84 0-16 7.16-16 16v48h-48c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h48v51.2l-112.46 67.48A31.997 31.997 0 0 0 160 274.12V512h96v-96c0-35.35 28.65-64 64-64s64 28.65 64 64v96h96V274.12c0-11.24-5.9-21.66-15.54-27.44zM0 395.96V496c0 8.84 7.16 16 16 16h112V320L19.39 366.54A32.024 32.024 0 0 0 0 395.96zm620.61-29.42L512 320v192h112c8.84 0 16-7.16 16-16V395.96c0-12.8-7.63-24.37-19.39-29.42z"]
    };
    exports.faChurch = faChurch;
    var faCircle = {
      prefix: 'fas',
      iconName: 'circle',
      icon: [512, 512, [], "f111", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z"]
    };
    exports.faCircle = faCircle;
    var faCircleNotch = {
      prefix: 'fas',
      iconName: 'circle-notch',
      icon: [512, 512, [], "f1ce", "M288 39.056v16.659c0 10.804 7.281 20.159 17.686 23.066C383.204 100.434 440 171.518 440 256c0 101.689-82.295 184-184 184-101.689 0-184-82.295-184-184 0-84.47 56.786-155.564 134.312-177.219C216.719 75.874 224 66.517 224 55.712V39.064c0-15.709-14.834-27.153-30.046-23.234C86.603 43.482 7.394 141.206 8.003 257.332c.72 137.052 111.477 246.956 248.531 246.667C393.255 503.711 504 392.788 504 256c0-115.633-79.14-212.779-186.211-240.236C302.678 11.889 288 23.456 288 39.056z"]
    };
    exports.faCircleNotch = faCircleNotch;
    var faCity = {
      prefix: 'fas',
      iconName: 'city',
      icon: [640, 512, [], "f64f", "M616 192H480V24c0-13.26-10.74-24-24-24H312c-13.26 0-24 10.74-24 24v72h-64V16c0-8.84-7.16-16-16-16h-16c-8.84 0-16 7.16-16 16v80h-64V16c0-8.84-7.16-16-16-16H80c-8.84 0-16 7.16-16 16v80H24c-13.26 0-24 10.74-24 24v360c0 17.67 14.33 32 32 32h576c17.67 0 32-14.33 32-32V216c0-13.26-10.75-24-24-24zM128 404c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm128 192c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm160 96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12V76c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm160 288c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40z"]
    };
    exports.faCity = faCity;
    var faClinicMedical = {
      prefix: 'fas',
      iconName: 'clinic-medical',
      icon: [576, 512, [], "f7f2", "M288 115L69.47 307.71c-1.62 1.46-3.69 2.14-5.47 3.35V496a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V311.1c-1.7-1.16-3.72-1.82-5.26-3.2zm96 261a8 8 0 0 1-8 8h-56v56a8 8 0 0 1-8 8h-48a8 8 0 0 1-8-8v-56h-56a8 8 0 0 1-8-8v-48a8 8 0 0 1 8-8h56v-56a8 8 0 0 1 8-8h48a8 8 0 0 1 8 8v56h56a8 8 0 0 1 8 8zm186.69-139.72l-255.94-226a39.85 39.85 0 0 0-53.45 0l-256 226a16 16 0 0 0-1.21 22.6L25.5 282.7a16 16 0 0 0 22.6 1.21L277.42 81.63a16 16 0 0 1 21.17 0L527.91 283.9a16 16 0 0 0 22.6-1.21l21.4-23.82a16 16 0 0 0-1.22-22.59z"]
    };
    exports.faClinicMedical = faClinicMedical;
    var faClipboard = {
      prefix: 'fas',
      iconName: 'clipboard',
      icon: [384, 512, [], "f328", "M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z"]
    };
    exports.faClipboard = faClipboard;
    var faClipboardCheck = {
      prefix: 'fas',
      iconName: 'clipboard-check',
      icon: [384, 512, [], "f46c", "M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm121.2 231.8l-143 141.8c-4.7 4.7-12.3 4.6-17-.1l-82.6-83.3c-4.7-4.7-4.6-12.3.1-17L99.1 285c4.7-4.7 12.3-4.6 17 .1l46 46.4 106-105.2c4.7-4.7 12.3-4.6 17 .1l28.2 28.4c4.7 4.8 4.6 12.3-.1 17z"]
    };
    exports.faClipboardCheck = faClipboardCheck;
    var faClipboardList = {
      prefix: 'fas',
      iconName: 'clipboard-list',
      icon: [384, 512, [], "f46d", "M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM96 424c-13.3 0-24-10.7-24-24s10.7-24 24-24 24 10.7 24 24-10.7 24-24 24zm0-96c-13.3 0-24-10.7-24-24s10.7-24 24-24 24 10.7 24 24-10.7 24-24 24zm0-96c-13.3 0-24-10.7-24-24s10.7-24 24-24 24 10.7 24 24-10.7 24-24 24zm96-192c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm128 368c0 4.4-3.6 8-8 8H168c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16zm0-96c0 4.4-3.6 8-8 8H168c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16zm0-96c0 4.4-3.6 8-8 8H168c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16z"]
    };
    exports.faClipboardList = faClipboardList;
    var faClock = {
      prefix: 'fas',
      iconName: 'clock',
      icon: [512, 512, [], "f017", "M256,8C119,8,8,119,8,256S119,504,256,504,504,393,504,256,393,8,256,8Zm92.49,313h0l-20,25a16,16,0,0,1-22.49,2.5h0l-67-49.72a40,40,0,0,1-15-31.23V112a16,16,0,0,1,16-16h32a16,16,0,0,1,16,16V256l58,42.5A16,16,0,0,1,348.49,321Z"]
    };
    exports.faClock = faClock;
    var faClone = {
      prefix: 'fas',
      iconName: 'clone',
      icon: [512, 512, [], "f24d", "M464 0c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48H176c-26.51 0-48-21.49-48-48V48c0-26.51 21.49-48 48-48h288M176 416c-44.112 0-80-35.888-80-80V128H48c-26.51 0-48 21.49-48 48v288c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48v-48H176z"]
    };
    exports.faClone = faClone;
    var faClosedCaptioning = {
      prefix: 'fas',
      iconName: 'closed-captioning',
      icon: [512, 512, [], "f20a", "M464 64H48C21.5 64 0 85.5 0 112v288c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM218.1 287.7c2.8-2.5 7.1-2.1 9.2.9l19.5 27.7c1.7 2.4 1.5 5.6-.5 7.7-53.6 56.8-172.8 32.1-172.8-67.9 0-97.3 121.7-119.5 172.5-70.1 2.1 2 2.5 3.2 1 5.7l-17.5 30.5c-1.9 3.1-6.2 4-9.1 1.7-40.8-32-94.6-14.9-94.6 31.2.1 48 51.1 70.5 92.3 32.6zm190.4 0c2.8-2.5 7.1-2.1 9.2.9l19.5 27.7c1.7 2.4 1.5 5.6-.5 7.7-53.5 56.9-172.7 32.1-172.7-67.9 0-97.3 121.7-119.5 172.5-70.1 2.1 2 2.5 3.2 1 5.7L420 222.2c-1.9 3.1-6.2 4-9.1 1.7-40.8-32-94.6-14.9-94.6 31.2 0 48 51 70.5 92.2 32.6z"]
    };
    exports.faClosedCaptioning = faClosedCaptioning;
    var faCloud = {
      prefix: 'fas',
      iconName: 'cloud',
      icon: [640, 512, [], "f0c2", "M537.6 226.6c4.1-10.7 6.4-22.4 6.4-34.6 0-53-43-96-96-96-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32c-88.4 0-160 71.6-160 160 0 2.7.1 5.4.2 8.1C40.2 219.8 0 273.2 0 336c0 79.5 64.5 144 144 144h368c70.7 0 128-57.3 128-128 0-61.9-44-113.6-102.4-125.4z"]
    };
    exports.faCloud = faCloud;
    var faCloudDownloadAlt = {
      prefix: 'fas',
      iconName: 'cloud-download-alt',
      icon: [640, 512, [], "f381", "M537.6 226.6c4.1-10.7 6.4-22.4 6.4-34.6 0-53-43-96-96-96-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32c-88.4 0-160 71.6-160 160 0 2.7.1 5.4.2 8.1C40.2 219.8 0 273.2 0 336c0 79.5 64.5 144 144 144h368c70.7 0 128-57.3 128-128 0-61.9-44-113.6-102.4-125.4zm-132.9 88.7L299.3 420.7c-6.2 6.2-16.4 6.2-22.6 0L171.3 315.3c-10.1-10.1-2.9-27.3 11.3-27.3H248V176c0-8.8 7.2-16 16-16h48c8.8 0 16 7.2 16 16v112h65.4c14.2 0 21.4 17.2 11.3 27.3z"]
    };
    exports.faCloudDownloadAlt = faCloudDownloadAlt;
    var faCloudMeatball = {
      prefix: 'fas',
      iconName: 'cloud-meatball',
      icon: [512, 512, [], "f73b", "M48 352c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm416 0c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm-119 11.1c4.6-14.5 1.6-30.8-9.8-42.3-11.5-11.5-27.8-14.4-42.3-9.9-7-13.5-20.7-23-36.9-23s-29.9 9.5-36.9 23c-14.5-4.6-30.8-1.6-42.3 9.9-11.5 11.5-14.4 27.8-9.9 42.3-13.5 7-23 20.7-23 36.9s9.5 29.9 23 36.9c-4.6 14.5-1.6 30.8 9.9 42.3 8.2 8.2 18.9 12.3 29.7 12.3 4.3 0 8.5-1.1 12.6-2.5 7 13.5 20.7 23 36.9 23s29.9-9.5 36.9-23c4.1 1.3 8.3 2.5 12.6 2.5 10.8 0 21.5-4.1 29.7-12.3 11.5-11.5 14.4-27.8 9.8-42.3 13.5-7 23-20.7 23-36.9s-9.5-29.9-23-36.9zM512 224c0-53-43-96-96-96-.6 0-1.1.2-1.6.2 1.1-5.2 1.6-10.6 1.6-16.2 0-44.2-35.8-80-80-80-24.6 0-46.3 11.3-61 28.8C256.4 24.8 219.3 0 176 0 114.1 0 64 50.1 64 112c0 7.3.8 14.3 2.1 21.2C27.8 145.8 0 181.5 0 224c0 53 43 96 96 96h43.4c3.6-8 8.4-15.4 14.8-21.8 13.5-13.5 31.5-21.1 50.8-21.3 13.5-13.2 31.7-20.9 51-20.9s37.5 7.7 51 20.9c19.3.2 37.3 7.8 50.8 21.3 6.4 6.4 11.3 13.8 14.8 21.8H416c53 0 96-43 96-96z"]
    };
    exports.faCloudMeatball = faCloudMeatball;
    var faCloudMoon = {
      prefix: 'fas',
      iconName: 'cloud-moon',
      icon: [576, 512, [], "f6c3", "M342.8 352.7c5.7-9.6 9.2-20.7 9.2-32.7 0-35.3-28.7-64-64-64-17.2 0-32.8 6.9-44.3 17.9-16.3-29.6-47.5-49.9-83.7-49.9-53 0-96 43-96 96 0 2 .5 3.8.6 5.7C27.1 338.8 0 374.1 0 416c0 53 43 96 96 96h240c44.2 0 80-35.8 80-80 0-41.9-32.3-75.8-73.2-79.3zm222.5-54.3c-93.1 17.7-178.5-53.7-178.5-147.7 0-54.2 29-104 76.1-130.8 7.3-4.1 5.4-15.1-2.8-16.7C448.4 1.1 436.7 0 425 0 319.1 0 233.1 85.9 233.1 192c0 8.5.7 16.8 1.8 25 5.9 4.3 11.6 8.9 16.7 14.2 11.4-4.7 23.7-7.2 36.4-7.2 52.9 0 96 43.1 96 96 0 3.6-.2 7.2-.6 10.7 23.6 10.8 42.4 29.5 53.5 52.6 54.4-3.4 103.7-29.3 137.1-70.4 5.3-6.5-.5-16.1-8.7-14.5z"]
    };
    exports.faCloudMoon = faCloudMoon;
    var faCloudMoonRain = {
      prefix: 'fas',
      iconName: 'cloud-moon-rain',
      icon: [576, 512, [], "f73c", "M350.5 225.5c-6.9-37.2-39.3-65.5-78.5-65.5-12.3 0-23.9 3-34.3 8-17.4-24.1-45.6-40-77.7-40-53 0-96 43-96 96 0 .5.2 1.1.2 1.6C27.6 232.9 0 265.2 0 304c0 44.2 35.8 80 80 80h256c44.2 0 80-35.8 80-80 0-39.2-28.2-71.7-65.5-78.5zm217.4-1.7c-70.4 13.3-135-40.3-135-110.8 0-40.6 21.9-78 57.5-98.1 5.5-3.1 4.1-11.4-2.1-12.5C479.6.8 470.7 0 461.8 0c-77.9 0-141.1 61.2-144.4 137.9 26.7 11.9 48.2 33.8 58.9 61.7 37.1 14.3 64 47.4 70.2 86.8 5.1.5 10 1.5 15.2 1.5 44.7 0 85.6-20.2 112.6-53.3 4.2-4.8-.2-12-6.4-10.8zM364.5 418.1c-7.6-4.3-17.4-1.8-21.8 6l-36.6 64c-4.4 7.7-1.7 17.4 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l36.6-64c4.3-7.7 1.7-17.4-6-21.8zm-96 0c-7.6-4.3-17.4-1.8-21.8 6l-36.6 64c-4.4 7.7-1.7 17.4 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l36.6-64c4.3-7.7 1.7-17.4-6-21.8zm-96 0c-7.6-4.3-17.4-1.8-21.8 6l-36.6 64c-4.4 7.7-1.7 17.4 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l36.6-64c4.3-7.7 1.7-17.4-6-21.8zm-96 0c-7.6-4.3-17.4-1.8-21.8 6l-36.6 64c-4.4 7.7-1.7 17.4 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l36.6-64c4.3-7.7 1.7-17.4-6-21.8z"]
    };
    exports.faCloudMoonRain = faCloudMoonRain;
    var faCloudRain = {
      prefix: 'fas',
      iconName: 'cloud-rain',
      icon: [512, 512, [], "f73d", "M416 128c-.6 0-1.1.2-1.6.2 1.1-5.2 1.6-10.6 1.6-16.2 0-44.2-35.8-80-80-80-24.6 0-46.3 11.3-61 28.8C256.4 24.8 219.3 0 176 0 114.1 0 64 50.1 64 112c0 7.3.8 14.3 2.1 21.2C27.8 145.8 0 181.5 0 224c0 53 43 96 96 96h320c53 0 96-43 96-96s-43-96-96-96zM88 374.2c-12.8 44.4-40 56.4-40 87.7 0 27.7 21.5 50.1 48 50.1s48-22.4 48-50.1c0-31.4-27.2-43.1-40-87.7-2.2-8.1-13.5-8.5-16 0zm160 0c-12.8 44.4-40 56.4-40 87.7 0 27.7 21.5 50.1 48 50.1s48-22.4 48-50.1c0-31.4-27.2-43.1-40-87.7-2.2-8.1-13.5-8.5-16 0zm160 0c-12.8 44.4-40 56.4-40 87.7 0 27.7 21.5 50.1 48 50.1s48-22.4 48-50.1c0-31.4-27.2-43.1-40-87.7-2.2-8.1-13.5-8.5-16 0z"]
    };
    exports.faCloudRain = faCloudRain;
    var faCloudShowersHeavy = {
      prefix: 'fas',
      iconName: 'cloud-showers-heavy',
      icon: [512, 512, [], "f740", "M183.9 370.1c-7.6-4.4-17.4-1.8-21.8 6l-64 112c-4.4 7.7-1.7 17.5 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l64-112c4.4-7.6 1.7-17.4-6-21.8zm96 0c-7.6-4.4-17.4-1.8-21.8 6l-64 112c-4.4 7.7-1.7 17.5 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l64-112c4.4-7.6 1.7-17.4-6-21.8zm-192 0c-7.6-4.4-17.4-1.8-21.8 6l-64 112c-4.4 7.7-1.7 17.5 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l64-112c4.4-7.6 1.7-17.4-6-21.8zm384 0c-7.6-4.4-17.4-1.8-21.8 6l-64 112c-4.4 7.7-1.7 17.5 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l64-112c4.4-7.6 1.7-17.4-6-21.8zm-96 0c-7.6-4.4-17.4-1.8-21.8 6l-64 112c-4.4 7.7-1.7 17.5 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l64-112c4.4-7.6 1.7-17.4-6-21.8zM416 128c-.6 0-1.1.2-1.6.2 1.1-5.2 1.6-10.6 1.6-16.2 0-44.2-35.8-80-80-80-24.6 0-46.3 11.3-61 28.8C256.4 24.8 219.3 0 176 0 114.2 0 64 50.1 64 112c0 7.3.8 14.3 2.1 21.2C27.8 145.8 0 181.5 0 224c0 53 43 96 96 96h320c53 0 96-43 96-96s-43-96-96-96z"]
    };
    exports.faCloudShowersHeavy = faCloudShowersHeavy;
    var faCloudSun = {
      prefix: 'fas',
      iconName: 'cloud-sun',
      icon: [640, 512, [], "f6c4", "M575.2 325.7c.2-1.9.8-3.7.8-5.6 0-35.3-28.7-64-64-64-12.6 0-24.2 3.8-34.1 10-17.6-38.8-56.5-66-101.9-66-61.8 0-112 50.1-112 112 0 3 .7 5.8.9 8.7-49.6 3.7-88.9 44.7-88.9 95.3 0 53 43 96 96 96h272c53 0 96-43 96-96 0-42.1-27.2-77.4-64.8-90.4zm-430.4-22.6c-43.7-43.7-43.7-114.7 0-158.3 43.7-43.7 114.7-43.7 158.4 0 9.7 9.7 16.9 20.9 22.3 32.7 9.8-3.7 20.1-6 30.7-7.5L386 81.1c4-11.9-7.3-23.1-19.2-19.2L279 91.2 237.5 8.4C232-2.8 216-2.8 210.4 8.4L169 91.2 81.1 61.9C69.3 58 58 69.3 61.9 81.1l29.3 87.8-82.8 41.5c-11.2 5.6-11.2 21.5 0 27.1l82.8 41.4-29.3 87.8c-4 11.9 7.3 23.1 19.2 19.2l76.1-25.3c6.1-12.4 14-23.7 23.6-33.5-13.1-5.4-25.4-13.4-36-24zm-4.8-79.2c0 40.8 29.3 74.8 67.9 82.3 8-4.7 16.3-8.8 25.2-11.7 5.4-44.3 31-82.5 67.4-105C287.3 160.4 258 140 224 140c-46.3 0-84 37.6-84 83.9z"]
    };
    exports.faCloudSun = faCloudSun;
    var faCloudSunRain = {
      prefix: 'fas',
      iconName: 'cloud-sun-rain',
      icon: [576, 512, [], "f743", "M510.5 225.5c-6.9-37.2-39.3-65.5-78.5-65.5-12.3 0-23.9 3-34.3 8-17.4-24.1-45.6-40-77.7-40-53 0-96 43-96 96 0 .5.2 1.1.2 1.6C187.6 233 160 265.2 160 304c0 44.2 35.8 80 80 80h256c44.2 0 80-35.8 80-80 0-39.2-28.2-71.7-65.5-78.5zm-386.4 34.4c-37.4-37.4-37.4-98.3 0-135.8 34.6-34.6 89.1-36.8 126.7-7.4 20-12.9 43.6-20.7 69.2-20.7.7 0 1.3.2 2 .2l8.9-26.7c3.4-10.2-6.3-19.8-16.5-16.4l-75.3 25.1-35.5-71c-4.8-9.6-18.5-9.6-23.3 0l-35.5 71-75.3-25.1c-10.2-3.4-19.8 6.3-16.4 16.5l25.1 75.3-71 35.5c-9.6 4.8-9.6 18.5 0 23.3l71 35.5-25.1 75.3c-3.4 10.2 6.3 19.8 16.5 16.5l59.2-19.7c-.2-2.4-.7-4.7-.7-7.2 0-12.5 2.3-24.5 6.2-35.9-3.6-2.7-7.1-5.2-10.2-8.3zm69.8-58c4.3-24.5 15.8-46.4 31.9-64-9.8-6.2-21.4-9.9-33.8-9.9-35.3 0-64 28.7-64 64 0 18.7 8.2 35.4 21.1 47.1 11.3-15.9 26.6-28.9 44.8-37.2zm330.6 216.2c-7.6-4.3-17.4-1.8-21.8 6l-36.6 64c-4.4 7.7-1.7 17.4 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l36.6-64c4.3-7.7 1.7-17.4-6-21.8zm-96 0c-7.6-4.3-17.4-1.8-21.8 6l-36.6 64c-4.4 7.7-1.7 17.4 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l36.6-64c4.3-7.7 1.7-17.4-6-21.8zm-96 0c-7.6-4.3-17.4-1.8-21.8 6l-36.6 64c-4.4 7.7-1.7 17.4 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l36.6-64c4.3-7.7 1.7-17.4-6-21.8zm-96 0c-7.6-4.3-17.4-1.8-21.8 6l-36.6 64c-4.4 7.7-1.7 17.4 6 21.8 2.5 1.4 5.2 2.1 7.9 2.1 5.5 0 10.9-2.9 13.9-8.1l36.6-64c4.3-7.7 1.7-17.4-6-21.8z"]
    };
    exports.faCloudSunRain = faCloudSunRain;
    var faCloudUploadAlt = {
      prefix: 'fas',
      iconName: 'cloud-upload-alt',
      icon: [640, 512, [], "f382", "M537.6 226.6c4.1-10.7 6.4-22.4 6.4-34.6 0-53-43-96-96-96-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32c-88.4 0-160 71.6-160 160 0 2.7.1 5.4.2 8.1C40.2 219.8 0 273.2 0 336c0 79.5 64.5 144 144 144h368c70.7 0 128-57.3 128-128 0-61.9-44-113.6-102.4-125.4zM393.4 288H328v112c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V288h-65.4c-14.3 0-21.4-17.2-11.3-27.3l105.4-105.4c6.2-6.2 16.4-6.2 22.6 0l105.4 105.4c10.1 10.1 2.9 27.3-11.3 27.3z"]
    };
    exports.faCloudUploadAlt = faCloudUploadAlt;
    var faCocktail = {
      prefix: 'fas',
      iconName: 'cocktail',
      icon: [576, 512, [], "f561", "M296 464h-56V338.78l168.74-168.73c15.52-15.52 4.53-42.05-17.42-42.05H24.68c-21.95 0-32.94 26.53-17.42 42.05L176 338.78V464h-56c-22.09 0-40 17.91-40 40 0 4.42 3.58 8 8 8h240c4.42 0 8-3.58 8-8 0-22.09-17.91-40-40-40zM432 0c-62.61 0-115.35 40.2-135.18 96h52.54c16.65-28.55 47.27-48 82.64-48 52.93 0 96 43.06 96 96s-43.07 96-96 96c-14.04 0-27.29-3.2-39.32-8.64l-35.26 35.26C379.23 279.92 404.59 288 432 288c79.53 0 144-64.47 144-144S511.53 0 432 0z"]
    };
    exports.faCocktail = faCocktail;
    var faCode = {
      prefix: 'fas',
      iconName: 'code',
      icon: [640, 512, [], "f121", "M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z"]
    };
    exports.faCode = faCode;
    var faCodeBranch = {
      prefix: 'fas',
      iconName: 'code-branch',
      icon: [384, 512, [], "f126", "M384 144c0-44.2-35.8-80-80-80s-80 35.8-80 80c0 36.4 24.3 67.1 57.5 76.8-.6 16.1-4.2 28.5-11 36.9-15.4 19.2-49.3 22.4-85.2 25.7-28.2 2.6-57.4 5.4-81.3 16.9v-144c32.5-10.2 56-40.5 56-76.3 0-44.2-35.8-80-80-80S0 35.8 0 80c0 35.8 23.5 66.1 56 76.3v199.3C23.5 365.9 0 396.2 0 432c0 44.2 35.8 80 80 80s80-35.8 80-80c0-34-21.2-63.1-51.2-74.6 3.1-5.2 7.8-9.8 14.9-13.4 16.2-8.2 40.4-10.4 66.1-12.8 42.2-3.9 90-8.4 118.2-43.4 14-17.4 21.1-39.8 21.6-67.9 31.6-10.8 54.4-40.7 54.4-75.9zM80 64c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16zm0 384c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm224-320c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16z"]
    };
    exports.faCodeBranch = faCodeBranch;
    var faCoffee = {
      prefix: 'fas',
      iconName: 'coffee',
      icon: [640, 512, [], "f0f4", "M192 384h192c53 0 96-43 96-96h32c70.6 0 128-57.4 128-128S582.6 32 512 32H120c-13.3 0-24 10.7-24 24v232c0 53 43 96 96 96zM512 96c35.3 0 64 28.7 64 64s-28.7 64-64 64h-32V96h32zm47.7 384H48.3c-47.6 0-61-64-36-64h583.3c25 0 11.8 64-35.9 64z"]
    };
    exports.faCoffee = faCoffee;
    var faCog = {
      prefix: 'fas',
      iconName: 'cog',
      icon: [512, 512, [], "f013", "M487.4 315.7l-42.6-24.6c4.3-23.2 4.3-47 0-70.2l42.6-24.6c4.9-2.8 7.1-8.6 5.5-14-11.1-35.6-30-67.8-54.7-94.6-3.8-4.1-10-5.1-14.8-2.3L380.8 110c-17.9-15.4-38.5-27.3-60.8-35.1V25.8c0-5.6-3.9-10.5-9.4-11.7-36.7-8.2-74.3-7.8-109.2 0-5.5 1.2-9.4 6.1-9.4 11.7V75c-22.2 7.9-42.8 19.8-60.8 35.1L88.7 85.5c-4.9-2.8-11-1.9-14.8 2.3-24.7 26.7-43.6 58.9-54.7 94.6-1.7 5.4.6 11.2 5.5 14L67.3 221c-4.3 23.2-4.3 47 0 70.2l-42.6 24.6c-4.9 2.8-7.1 8.6-5.5 14 11.1 35.6 30 67.8 54.7 94.6 3.8 4.1 10 5.1 14.8 2.3l42.6-24.6c17.9 15.4 38.5 27.3 60.8 35.1v49.2c0 5.6 3.9 10.5 9.4 11.7 36.7 8.2 74.3 7.8 109.2 0 5.5-1.2 9.4-6.1 9.4-11.7v-49.2c22.2-7.9 42.8-19.8 60.8-35.1l42.6 24.6c4.9 2.8 11 1.9 14.8-2.3 24.7-26.7 43.6-58.9 54.7-94.6 1.5-5.5-.7-11.3-5.6-14.1zM256 336c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"]
    };
    exports.faCog = faCog;
    var faCogs = {
      prefix: 'fas',
      iconName: 'cogs',
      icon: [640, 512, [], "f085", "M512.1 191l-8.2 14.3c-3 5.3-9.4 7.5-15.1 5.4-11.8-4.4-22.6-10.7-32.1-18.6-4.6-3.8-5.8-10.5-2.8-15.7l8.2-14.3c-6.9-8-12.3-17.3-15.9-27.4h-16.5c-6 0-11.2-4.3-12.2-10.3-2-12-2.1-24.6 0-37.1 1-6 6.2-10.4 12.2-10.4h16.5c3.6-10.1 9-19.4 15.9-27.4l-8.2-14.3c-3-5.2-1.9-11.9 2.8-15.7 9.5-7.9 20.4-14.2 32.1-18.6 5.7-2.1 12.1.1 15.1 5.4l8.2 14.3c10.5-1.9 21.2-1.9 31.7 0L552 6.3c3-5.3 9.4-7.5 15.1-5.4 11.8 4.4 22.6 10.7 32.1 18.6 4.6 3.8 5.8 10.5 2.8 15.7l-8.2 14.3c6.9 8 12.3 17.3 15.9 27.4h16.5c6 0 11.2 4.3 12.2 10.3 2 12 2.1 24.6 0 37.1-1 6-6.2 10.4-12.2 10.4h-16.5c-3.6 10.1-9 19.4-15.9 27.4l8.2 14.3c3 5.2 1.9 11.9-2.8 15.7-9.5 7.9-20.4 14.2-32.1 18.6-5.7 2.1-12.1-.1-15.1-5.4l-8.2-14.3c-10.4 1.9-21.2 1.9-31.7 0zm-10.5-58.8c38.5 29.6 82.4-14.3 52.8-52.8-38.5-29.7-82.4 14.3-52.8 52.8zM386.3 286.1l33.7 16.8c10.1 5.8 14.5 18.1 10.5 29.1-8.9 24.2-26.4 46.4-42.6 65.8-7.4 8.9-20.2 11.1-30.3 5.3l-29.1-16.8c-16 13.7-34.6 24.6-54.9 31.7v33.6c0 11.6-8.3 21.6-19.7 23.6-24.6 4.2-50.4 4.4-75.9 0-11.5-2-20-11.9-20-23.6V418c-20.3-7.2-38.9-18-54.9-31.7L74 403c-10 5.8-22.9 3.6-30.3-5.3-16.2-19.4-33.3-41.6-42.2-65.7-4-10.9.4-23.2 10.5-29.1l33.3-16.8c-3.9-20.9-3.9-42.4 0-63.4L12 205.8c-10.1-5.8-14.6-18.1-10.5-29 8.9-24.2 26-46.4 42.2-65.8 7.4-8.9 20.2-11.1 30.3-5.3l29.1 16.8c16-13.7 34.6-24.6 54.9-31.7V57.1c0-11.5 8.2-21.5 19.6-23.5 24.6-4.2 50.5-4.4 76-.1 11.5 2 20 11.9 20 23.6v33.6c20.3 7.2 38.9 18 54.9 31.7l29.1-16.8c10-5.8 22.9-3.6 30.3 5.3 16.2 19.4 33.2 41.6 42.1 65.8 4 10.9.1 23.2-10 29.1l-33.7 16.8c3.9 21 3.9 42.5 0 63.5zm-117.6 21.1c59.2-77-28.7-164.9-105.7-105.7-59.2 77 28.7 164.9 105.7 105.7zm243.4 182.7l-8.2 14.3c-3 5.3-9.4 7.5-15.1 5.4-11.8-4.4-22.6-10.7-32.1-18.6-4.6-3.8-5.8-10.5-2.8-15.7l8.2-14.3c-6.9-8-12.3-17.3-15.9-27.4h-16.5c-6 0-11.2-4.3-12.2-10.3-2-12-2.1-24.6 0-37.1 1-6 6.2-10.4 12.2-10.4h16.5c3.6-10.1 9-19.4 15.9-27.4l-8.2-14.3c-3-5.2-1.9-11.9 2.8-15.7 9.5-7.9 20.4-14.2 32.1-18.6 5.7-2.1 12.1.1 15.1 5.4l8.2 14.3c10.5-1.9 21.2-1.9 31.7 0l8.2-14.3c3-5.3 9.4-7.5 15.1-5.4 11.8 4.4 22.6 10.7 32.1 18.6 4.6 3.8 5.8 10.5 2.8 15.7l-8.2 14.3c6.9 8 12.3 17.3 15.9 27.4h16.5c6 0 11.2 4.3 12.2 10.3 2 12 2.1 24.6 0 37.1-1 6-6.2 10.4-12.2 10.4h-16.5c-3.6 10.1-9 19.4-15.9 27.4l8.2 14.3c3 5.2 1.9 11.9-2.8 15.7-9.5 7.9-20.4 14.2-32.1 18.6-5.7 2.1-12.1-.1-15.1-5.4l-8.2-14.3c-10.4 1.9-21.2 1.9-31.7 0zM501.6 431c38.5 29.6 82.4-14.3 52.8-52.8-38.5-29.6-82.4 14.3-52.8 52.8z"]
    };
    exports.faCogs = faCogs;
    var faCoins = {
      prefix: 'fas',
      iconName: 'coins',
      icon: [512, 512, [], "f51e", "M0 405.3V448c0 35.3 86 64 192 64s192-28.7 192-64v-42.7C342.7 434.4 267.2 448 192 448S41.3 434.4 0 405.3zM320 128c106 0 192-28.7 192-64S426 0 320 0 128 28.7 128 64s86 64 192 64zM0 300.4V352c0 35.3 86 64 192 64s192-28.7 192-64v-51.6c-41.3 34-116.9 51.6-192 51.6S41.3 334.4 0 300.4zm416 11c57.3-11.1 96-31.7 96-55.4v-42.7c-23.2 16.4-57.3 27.6-96 34.5v63.6zM192 160C86 160 0 195.8 0 240s86 80 192 80 192-35.8 192-80-86-80-192-80zm219.3 56.3c60-10.8 100.7-32 100.7-56.3v-42.7c-35.5 25.1-96.5 38.6-160.7 41.8 29.5 14.3 51.2 33.5 60 57.2z"]
    };
    exports.faCoins = faCoins;
    var faColumns = {
      prefix: 'fas',
      iconName: 'columns',
      icon: [512, 512, [], "f0db", "M464 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM224 416H64V160h160v256zm224 0H288V160h160v256z"]
    };
    exports.faColumns = faColumns;
    var faComment = {
      prefix: 'fas',
      iconName: 'comment',
      icon: [512, 512, [], "f075", "M256 32C114.6 32 0 125.1 0 240c0 49.6 21.4 95 57 130.7C44.5 421.1 2.7 466 2.2 466.5c-2.2 2.3-2.8 5.7-1.5 8.7S4.8 480 8 480c66.3 0 116-31.8 140.6-51.4 32.7 12.3 69 19.4 107.4 19.4 141.4 0 256-93.1 256-208S397.4 32 256 32z"]
    };
    exports.faComment = faComment;
    var faCommentAlt = {
      prefix: 'fas',
      iconName: 'comment-alt',
      icon: [512, 512, [], "f27a", "M448 0H64C28.7 0 0 28.7 0 64v288c0 35.3 28.7 64 64 64h96v84c0 9.8 11.2 15.5 19.1 9.7L304 416h144c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64z"]
    };
    exports.faCommentAlt = faCommentAlt;
    var faCommentDollar = {
      prefix: 'fas',
      iconName: 'comment-dollar',
      icon: [512, 512, [], "f651", "M256 32C114.62 32 0 125.12 0 240c0 49.56 21.41 95.01 57.02 130.74C44.46 421.05 2.7 465.97 2.2 466.5A7.995 7.995 0 0 0 8 480c66.26 0 115.99-31.75 140.6-51.38C181.29 440.93 217.59 448 256 448c141.38 0 256-93.12 256-208S397.38 32 256 32zm24 302.44V352c0 8.84-7.16 16-16 16h-16c-8.84 0-16-7.16-16-16v-17.73c-11.42-1.35-22.28-5.19-31.78-11.46-6.22-4.11-6.82-13.11-1.55-18.38l17.52-17.52c3.74-3.74 9.31-4.24 14.11-2.03 3.18 1.46 6.66 2.22 10.26 2.22h32.78c4.66 0 8.44-3.78 8.44-8.42 0-3.75-2.52-7.08-6.12-8.11l-50.07-14.3c-22.25-6.35-40.01-24.71-42.91-47.67-4.05-32.07 19.03-59.43 49.32-63.05V128c0-8.84 7.16-16 16-16h16c8.84 0 16 7.16 16 16v17.73c11.42 1.35 22.28 5.19 31.78 11.46 6.22 4.11 6.82 13.11 1.55 18.38l-17.52 17.52c-3.74 3.74-9.31 4.24-14.11 2.03a24.516 24.516 0 0 0-10.26-2.22h-32.78c-4.66 0-8.44 3.78-8.44 8.42 0 3.75 2.52 7.08 6.12 8.11l50.07 14.3c22.25 6.36 40.01 24.71 42.91 47.67 4.05 32.06-19.03 59.42-49.32 63.04z"]
    };
    exports.faCommentDollar = faCommentDollar;
    var faCommentDots = {
      prefix: 'fas',
      iconName: 'comment-dots',
      icon: [512, 512, [], "f4ad", "M256 32C114.6 32 0 125.1 0 240c0 49.6 21.4 95 57 130.7C44.5 421.1 2.7 466 2.2 466.5c-2.2 2.3-2.8 5.7-1.5 8.7S4.8 480 8 480c66.3 0 116-31.8 140.6-51.4 32.7 12.3 69 19.4 107.4 19.4 141.4 0 256-93.1 256-208S397.4 32 256 32zM128 272c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 0c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 0c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faCommentDots = faCommentDots;
    var faCommentMedical = {
      prefix: 'fas',
      iconName: 'comment-medical',
      icon: [512, 512, [], "f7f5", "M256 32C114.62 32 0 125.12 0 240c0 49.56 21.41 95 57 130.74C44.46 421.05 2.7 466 2.2 466.5A8 8 0 0 0 8 480c66.26 0 116-31.75 140.6-51.38A304.66 304.66 0 0 0 256 448c141.39 0 256-93.12 256-208S397.39 32 256 32zm96 232a8 8 0 0 1-8 8h-56v56a8 8 0 0 1-8 8h-48a8 8 0 0 1-8-8v-56h-56a8 8 0 0 1-8-8v-48a8 8 0 0 1 8-8h56v-56a8 8 0 0 1 8-8h48a8 8 0 0 1 8 8v56h56a8 8 0 0 1 8 8z"]
    };
    exports.faCommentMedical = faCommentMedical;
    var faCommentSlash = {
      prefix: 'fas',
      iconName: 'comment-slash',
      icon: [640, 512, [], "f4b3", "M64 240c0 49.6 21.4 95 57 130.7-12.6 50.3-54.3 95.2-54.8 95.8-2.2 2.3-2.8 5.7-1.5 8.7 1.3 2.9 4.1 4.8 7.3 4.8 66.3 0 116-31.8 140.6-51.4 32.7 12.3 69 19.4 107.4 19.4 27.4 0 53.7-3.6 78.4-10L72.9 186.4c-5.6 17.1-8.9 35-8.9 53.6zm569.8 218.1l-114.4-88.4C554.6 334.1 576 289.2 576 240c0-114.9-114.6-208-256-208-65.1 0-124.2 20.1-169.4 52.7L45.5 3.4C38.5-2 28.5-.8 23 6.2L3.4 31.4c-5.4 7-4.2 17 2.8 22.4l588.4 454.7c7 5.4 17 4.2 22.5-2.8l19.6-25.3c5.4-6.8 4.1-16.9-2.9-22.3z"]
    };
    exports.faCommentSlash = faCommentSlash;
    var faComments = {
      prefix: 'fas',
      iconName: 'comments',
      icon: [576, 512, [], "f086", "M416 192c0-88.4-93.1-160-208-160S0 103.6 0 192c0 34.3 14.1 65.9 38 92-13.4 30.2-35.5 54.2-35.8 54.5-2.2 2.3-2.8 5.7-1.5 8.7S4.8 352 8 352c36.6 0 66.9-12.3 88.7-25 32.2 15.7 70.3 25 111.3 25 114.9 0 208-71.6 208-160zm122 220c23.9-26 38-57.7 38-92 0-66.9-53.5-124.2-129.3-148.1.9 6.6 1.3 13.3 1.3 20.1 0 105.9-107.7 192-240 192-10.8 0-21.3-.8-31.7-1.9C207.8 439.6 281.8 480 368 480c41 0 79.1-9.2 111.3-25 21.8 12.7 52.1 25 88.7 25 3.2 0 6.1-1.9 7.3-4.8 1.3-2.9.7-6.3-1.5-8.7-.3-.3-22.4-24.2-35.8-54.5z"]
    };
    exports.faComments = faComments;
    var faCommentsDollar = {
      prefix: 'fas',
      iconName: 'comments-dollar',
      icon: [576, 512, [], "f653", "M416 192c0-88.37-93.12-160-208-160S0 103.63 0 192c0 34.27 14.13 65.95 37.97 91.98C24.61 314.22 2.52 338.16 2.2 338.5A7.995 7.995 0 0 0 8 352c36.58 0 66.93-12.25 88.73-24.98C128.93 342.76 167.02 352 208 352c114.88 0 208-71.63 208-160zm-224 96v-16.29c-11.29-.58-22.27-4.52-31.37-11.35-3.9-2.93-4.1-8.77-.57-12.14l11.75-11.21c2.77-2.64 6.89-2.76 10.13-.73 3.87 2.42 8.26 3.72 12.82 3.72h28.11c6.5 0 11.8-5.92 11.8-13.19 0-5.95-3.61-11.19-8.77-12.73l-45-13.5c-18.59-5.58-31.58-23.42-31.58-43.39 0-24.52 19.05-44.44 42.67-45.07V96c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v16.29c11.29.58 22.27 4.51 31.37 11.35 3.9 2.93 4.1 8.77.57 12.14l-11.75 11.21c-2.77 2.64-6.89 2.76-10.13.73-3.87-2.43-8.26-3.72-12.82-3.72h-28.11c-6.5 0-11.8 5.92-11.8 13.19 0 5.95 3.61 11.19 8.77 12.73l45 13.5c18.59 5.58 31.58 23.42 31.58 43.39 0 24.53-19.05 44.44-42.67 45.07V288c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8zm346.01 123.99C561.87 385.96 576 354.27 576 320c0-66.94-53.49-124.2-129.33-148.07.86 6.6 1.33 13.29 1.33 20.07 0 105.87-107.66 192-240 192-10.78 0-21.32-.77-31.73-1.88C207.8 439.63 281.77 480 368 480c40.98 0 79.07-9.24 111.27-24.98C501.07 467.75 531.42 480 568 480c3.2 0 6.09-1.91 7.34-4.84 1.27-2.94.66-6.34-1.55-8.67-.31-.33-22.42-24.24-35.78-54.5z"]
    };
    exports.faCommentsDollar = faCommentsDollar;
    var faCompactDisc = {
      prefix: 'fas',
      iconName: 'compact-disc',
      icon: [496, 512, [], "f51f", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM88 256H56c0-105.9 86.1-192 192-192v32c-88.2 0-160 71.8-160 160zm160 96c-53 0-96-43-96-96s43-96 96-96 96 43 96 96-43 96-96 96zm0-128c-17.7 0-32 14.3-32 32s14.3 32 32 32 32-14.3 32-32-14.3-32-32-32z"]
    };
    exports.faCompactDisc = faCompactDisc;
    var faCompass = {
      prefix: 'fas',
      iconName: 'compass',
      icon: [496, 512, [], "f14e", "M225.38 233.37c-12.5 12.5-12.5 32.76 0 45.25 12.49 12.5 32.76 12.5 45.25 0 12.5-12.5 12.5-32.76 0-45.25-12.5-12.49-32.76-12.49-45.25 0zM248 8C111.03 8 0 119.03 0 256s111.03 248 248 248 248-111.03 248-248S384.97 8 248 8zm126.14 148.05L308.17 300.4a31.938 31.938 0 0 1-15.77 15.77l-144.34 65.97c-16.65 7.61-33.81-9.55-26.2-26.2l65.98-144.35a31.938 31.938 0 0 1 15.77-15.77l144.34-65.97c16.65-7.6 33.8 9.55 26.19 26.2z"]
    };
    exports.faCompass = faCompass;
    var faCompress = {
      prefix: 'fas',
      iconName: 'compress',
      icon: [448, 512, [], "f066", "M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z"]
    };
    exports.faCompress = faCompress;
    var faCompressAlt = {
      prefix: 'fas',
      iconName: 'compress-alt',
      icon: [448, 512, [], "f422", "M4.686 427.314L104 328l-32.922-31.029C55.958 281.851 66.666 256 88.048 256h112C213.303 256 224 266.745 224 280v112c0 21.382-25.803 32.09-40.922 16.971L152 376l-99.314 99.314c-6.248 6.248-16.379 6.248-22.627 0L4.686 449.941c-6.248-6.248-6.248-16.379 0-22.627zM443.314 84.686L344 184l32.922 31.029c15.12 15.12 4.412 40.971-16.97 40.971h-112C234.697 256 224 245.255 224 232V120c0-21.382 25.803-32.09 40.922-16.971L296 136l99.314-99.314c6.248-6.248 16.379-6.248 22.627 0l25.373 25.373c6.248 6.248 6.248 16.379 0 22.627z"]
    };
    exports.faCompressAlt = faCompressAlt;
    var faCompressArrowsAlt = {
      prefix: 'fas',
      iconName: 'compress-arrows-alt',
      icon: [512, 512, [], "f78c", "M200 288H88c-21.4 0-32.1 25.8-17 41l32.9 31-99.2 99.3c-6.2 6.2-6.2 16.4 0 22.6l25.4 25.4c6.2 6.2 16.4 6.2 22.6 0L152 408l31.1 33c15.1 15.1 40.9 4.4 40.9-17V312c0-13.3-10.7-24-24-24zm112-64h112c21.4 0 32.1-25.9 17-41l-33-31 99.3-99.3c6.2-6.2 6.2-16.4 0-22.6L481.9 4.7c-6.2-6.2-16.4-6.2-22.6 0L360 104l-31.1-33C313.8 55.9 288 66.6 288 88v112c0 13.3 10.7 24 24 24zm96 136l33-31.1c15.1-15.1 4.4-40.9-17-40.9H312c-13.3 0-24 10.7-24 24v112c0 21.4 25.9 32.1 41 17l31-32.9 99.3 99.3c6.2 6.2 16.4 6.2 22.6 0l25.4-25.4c6.2-6.2 6.2-16.4 0-22.6L408 360zM183 71.1L152 104 52.7 4.7c-6.2-6.2-16.4-6.2-22.6 0L4.7 30.1c-6.2 6.2-6.2 16.4 0 22.6L104 152l-33 31.1C55.9 198.2 66.6 224 88 224h112c13.3 0 24-10.7 24-24V88c0-21.3-25.9-32-41-16.9z"]
    };
    exports.faCompressArrowsAlt = faCompressArrowsAlt;
    var faConciergeBell = {
      prefix: 'fas',
      iconName: 'concierge-bell',
      icon: [512, 512, [], "f562", "M288 130.54V112h16c8.84 0 16-7.16 16-16V80c0-8.84-7.16-16-16-16h-96c-8.84 0-16 7.16-16 16v16c0 8.84 7.16 16 16 16h16v18.54C115.49 146.11 32 239.18 32 352h448c0-112.82-83.49-205.89-192-221.46zM496 384H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h480c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16z"]
    };
    exports.faConciergeBell = faConciergeBell;
    var faCookie = {
      prefix: 'fas',
      iconName: 'cookie',
      icon: [512, 512, [], "f563", "M510.37 254.79l-12.08-76.26a132.493 132.493 0 0 0-37.16-72.95l-54.76-54.75c-19.73-19.72-45.18-32.7-72.71-37.05l-76.7-12.15c-27.51-4.36-55.69.11-80.52 12.76L107.32 49.6a132.25 132.25 0 0 0-57.79 57.8l-35.1 68.88a132.602 132.602 0 0 0-12.82 80.94l12.08 76.27a132.493 132.493 0 0 0 37.16 72.95l54.76 54.75a132.087 132.087 0 0 0 72.71 37.05l76.7 12.14c27.51 4.36 55.69-.11 80.52-12.75l69.12-35.21a132.302 132.302 0 0 0 57.79-57.8l35.1-68.87c12.71-24.96 17.2-53.3 12.82-80.96zM176 368c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm32-160c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm160 128c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faCookie = faCookie;
    var faCookieBite = {
      prefix: 'fas',
      iconName: 'cookie-bite',
      icon: [512, 512, [], "f564", "M510.52 255.82c-69.97-.85-126.47-57.69-126.47-127.86-70.17 0-127-56.49-127.86-126.45-27.26-4.14-55.13.3-79.72 12.82l-69.13 35.22a132.221 132.221 0 0 0-57.79 57.81l-35.1 68.88a132.645 132.645 0 0 0-12.82 80.95l12.08 76.27a132.521 132.521 0 0 0 37.16 72.96l54.77 54.76a132.036 132.036 0 0 0 72.71 37.06l76.71 12.15c27.51 4.36 55.7-.11 80.53-12.76l69.13-35.21a132.273 132.273 0 0 0 57.79-57.81l35.1-68.88c12.56-24.64 17.01-52.58 12.91-79.91zM176 368c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm32-160c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm160 128c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faCookieBite = faCookieBite;
    var faCopy = {
      prefix: 'fas',
      iconName: 'copy',
      icon: [448, 512, [], "f0c5", "M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z"]
    };
    exports.faCopy = faCopy;
    var faCopyright = {
      prefix: 'fas',
      iconName: 'copyright',
      icon: [512, 512, [], "f1f9", "M256 8C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm117.134 346.753c-1.592 1.867-39.776 45.731-109.851 45.731-84.692 0-144.484-63.26-144.484-145.567 0-81.303 62.004-143.401 143.762-143.401 66.957 0 101.965 37.315 103.422 38.904a12 12 0 0 1 1.238 14.623l-22.38 34.655c-4.049 6.267-12.774 7.351-18.234 2.295-.233-.214-26.529-23.88-61.88-23.88-46.116 0-73.916 33.575-73.916 76.082 0 39.602 25.514 79.692 74.277 79.692 38.697 0 65.28-28.338 65.544-28.625 5.132-5.565 14.059-5.033 18.508 1.053l24.547 33.572a12.001 12.001 0 0 1-.553 14.866z"]
    };
    exports.faCopyright = faCopyright;
    var faCouch = {
      prefix: 'fas',
      iconName: 'couch',
      icon: [640, 512, [], "f4b8", "M160 224v64h320v-64c0-35.3 28.7-64 64-64h32c0-53-43-96-96-96H160c-53 0-96 43-96 96h32c35.3 0 64 28.7 64 64zm416-32h-32c-17.7 0-32 14.3-32 32v96H128v-96c0-17.7-14.3-32-32-32H64c-35.3 0-64 28.7-64 64 0 23.6 13 44 32 55.1V432c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16v-16h384v16c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16V311.1c19-11.1 32-31.5 32-55.1 0-35.3-28.7-64-64-64z"]
    };
    exports.faCouch = faCouch;
    var faCreditCard = {
      prefix: 'fas',
      iconName: 'credit-card',
      icon: [576, 512, [], "f09d", "M0 432c0 26.5 21.5 48 48 48h480c26.5 0 48-21.5 48-48V256H0v176zm192-68c0-6.6 5.4-12 12-12h136c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H204c-6.6 0-12-5.4-12-12v-40zm-128 0c0-6.6 5.4-12 12-12h72c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM576 80v48H0V80c0-26.5 21.5-48 48-48h480c26.5 0 48 21.5 48 48z"]
    };
    exports.faCreditCard = faCreditCard;
    var faCrop = {
      prefix: 'fas',
      iconName: 'crop',
      icon: [512, 512, [], "f125", "M488 352h-40V109.25l59.31-59.31c6.25-6.25 6.25-16.38 0-22.63L484.69 4.69c-6.25-6.25-16.38-6.25-22.63 0L402.75 64H192v96h114.75L160 306.75V24c0-13.26-10.75-24-24-24H88C74.75 0 64 10.74 64 24v40H24C10.75 64 0 74.74 0 88v48c0 13.25 10.75 24 24 24h40v264c0 13.25 10.75 24 24 24h232v-96H205.25L352 205.25V488c0 13.25 10.75 24 24 24h48c13.25 0 24-10.75 24-24v-40h40c13.25 0 24-10.75 24-24v-48c0-13.26-10.75-24-24-24z"]
    };
    exports.faCrop = faCrop;
    var faCropAlt = {
      prefix: 'fas',
      iconName: 'crop-alt',
      icon: [512, 512, [], "f565", "M488 352h-40V96c0-17.67-14.33-32-32-32H192v96h160v328c0 13.25 10.75 24 24 24h48c13.25 0 24-10.75 24-24v-40h40c13.25 0 24-10.75 24-24v-48c0-13.26-10.75-24-24-24zM160 24c0-13.26-10.75-24-24-24H88C74.75 0 64 10.74 64 24v40H24C10.75 64 0 74.74 0 88v48c0 13.25 10.75 24 24 24h40v256c0 17.67 14.33 32 32 32h224v-96H160V24z"]
    };
    exports.faCropAlt = faCropAlt;
    var faCross = {
      prefix: 'fas',
      iconName: 'cross',
      icon: [384, 512, [], "f654", "M352 128h-96V32c0-17.67-14.33-32-32-32h-64c-17.67 0-32 14.33-32 32v96H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h96v224c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V256h96c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32z"]
    };
    exports.faCross = faCross;
    var faCrosshairs = {
      prefix: 'fas',
      iconName: 'crosshairs',
      icon: [512, 512, [], "f05b", "M500 224h-30.364C455.724 130.325 381.675 56.276 288 42.364V12c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v30.364C130.325 56.276 56.276 130.325 42.364 224H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h30.364C56.276 381.675 130.325 455.724 224 469.636V500c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-30.364C381.675 455.724 455.724 381.675 469.636 288H500c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12zM288 404.634V364c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40.634C165.826 392.232 119.783 346.243 107.366 288H148c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-40.634C119.768 165.826 165.757 119.783 224 107.366V148c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40.634C346.174 119.768 392.217 165.757 404.634 224H364c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40.634C392.232 346.174 346.243 392.217 288 404.634zM288 256c0 17.673-14.327 32-32 32s-32-14.327-32-32c0-17.673 14.327-32 32-32s32 14.327 32 32z"]
    };
    exports.faCrosshairs = faCrosshairs;
    var faCrow = {
      prefix: 'fas',
      iconName: 'crow',
      icon: [640, 512, [], "f520", "M544 32h-16.36C513.04 12.68 490.09 0 464 0c-44.18 0-80 35.82-80 80v20.98L12.09 393.57A30.216 30.216 0 0 0 0 417.74c0 22.46 23.64 37.07 43.73 27.03L165.27 384h96.49l44.41 120.1c2.27 6.23 9.15 9.44 15.38 7.17l22.55-8.21c6.23-2.27 9.44-9.15 7.17-15.38L312.94 384H352c1.91 0 3.76-.23 5.66-.29l44.51 120.38c2.27 6.23 9.15 9.44 15.38 7.17l22.55-8.21c6.23-2.27 9.44-9.15 7.17-15.38l-41.24-111.53C485.74 352.8 544 279.26 544 192v-80l96-16c0-35.35-42.98-64-96-64zm-80 72c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z"]
    };
    exports.faCrow = faCrow;
    var faCrown = {
      prefix: 'fas',
      iconName: 'crown',
      icon: [640, 512, [], "f521", "M528 448H112c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h416c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm64-320c-26.5 0-48 21.5-48 48 0 7.1 1.6 13.7 4.4 19.8L476 239.2c-15.4 9.2-35.3 4-44.2-11.6L350.3 85C361 76.2 368 63 368 48c0-26.5-21.5-48-48-48s-48 21.5-48 48c0 15 7 28.2 17.7 37l-81.5 142.6c-8.9 15.6-28.9 20.8-44.2 11.6l-72.3-43.4c2.7-6 4.4-12.7 4.4-19.8 0-26.5-21.5-48-48-48S0 149.5 0 176s21.5 48 48 48c2.6 0 5.2-.4 7.7-.8L128 416h384l72.3-192.8c2.5.4 5.1.8 7.7.8 26.5 0 48-21.5 48-48s-21.5-48-48-48z"]
    };
    exports.faCrown = faCrown;
    var faCrutch = {
      prefix: 'fas',
      iconName: 'crutch',
      icon: [512, 512, [], "f7f7", "M507.31 185.71l-181-181a16 16 0 0 0-22.62 0L281 27.31a16 16 0 0 0 0 22.63l181 181a16 16 0 0 0 22.63 0l22.62-22.63a16 16 0 0 0 .06-22.6zm-179.54 66.41l-67.89-67.89 55.1-55.1-45.25-45.25-109.67 109.67a96.08 96.08 0 0 0-25.67 46.29L106.65 360.1l-102 102a16 16 0 0 0 0 22.63l22.62 22.62a16 16 0 0 0 22.63 0l102-102 120.25-27.75a95.88 95.88 0 0 0 46.29-25.65l109.68-109.68L382.87 197zm-54.57 54.57a32 32 0 0 1-15.45 8.54l-79.3 18.32 18.3-79.3a32.22 32.22 0 0 1 8.56-15.45l9.31-9.31 67.89 67.89z"]
    };
    exports.faCrutch = faCrutch;
    var faCube = {
      prefix: 'fas',
      iconName: 'cube',
      icon: [512, 512, [], "f1b2", "M239.1 6.3l-208 78c-18.7 7-31.1 25-31.1 45v225.1c0 18.2 10.3 34.8 26.5 42.9l208 104c13.5 6.8 29.4 6.8 42.9 0l208-104c16.3-8.1 26.5-24.8 26.5-42.9V129.3c0-20-12.4-37.9-31.1-44.9l-208-78C262 2.2 250 2.2 239.1 6.3zM256 68.4l192 72v1.1l-192 78-192-78v-1.1l192-72zm32 356V275.5l160-65v133.9l-160 80z"]
    };
    exports.faCube = faCube;
    var faCubes = {
      prefix: 'fas',
      iconName: 'cubes',
      icon: [512, 512, [], "f1b3", "M488.6 250.2L392 214V105.5c0-15-9.3-28.4-23.4-33.7l-100-37.5c-8.1-3.1-17.1-3.1-25.3 0l-100 37.5c-14.1 5.3-23.4 18.7-23.4 33.7V214l-96.6 36.2C9.3 255.5 0 268.9 0 283.9V394c0 13.6 7.7 26.1 19.9 32.2l100 50c10.1 5.1 22.1 5.1 32.2 0l103.9-52 103.9 52c10.1 5.1 22.1 5.1 32.2 0l100-50c12.2-6.1 19.9-18.6 19.9-32.2V283.9c0-15-9.3-28.4-23.4-33.7zM358 214.8l-85 31.9v-68.2l85-37v73.3zM154 104.1l102-38.2 102 38.2v.6l-102 41.4-102-41.4v-.6zm84 291.1l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6zm240 112l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6z"]
    };
    exports.faCubes = faCubes;
    var faCut = {
      prefix: 'fas',
      iconName: 'cut',
      icon: [448, 512, [], "f0c4", "M278.06 256L444.48 89.57c4.69-4.69 4.69-12.29 0-16.97-32.8-32.8-85.99-32.8-118.79 0L210.18 188.12l-24.86-24.86c4.31-10.92 6.68-22.81 6.68-35.26 0-53.02-42.98-96-96-96S0 74.98 0 128s42.98 96 96 96c4.54 0 8.99-.32 13.36-.93L142.29 256l-32.93 32.93c-4.37-.61-8.83-.93-13.36-.93-53.02 0-96 42.98-96 96s42.98 96 96 96 96-42.98 96-96c0-12.45-2.37-24.34-6.68-35.26l24.86-24.86L325.69 439.4c32.8 32.8 85.99 32.8 118.79 0 4.69-4.68 4.69-12.28 0-16.97L278.06 256zM96 160c-17.64 0-32-14.36-32-32s14.36-32 32-32 32 14.36 32 32-14.36 32-32 32zm0 256c-17.64 0-32-14.36-32-32s14.36-32 32-32 32 14.36 32 32-14.36 32-32 32z"]
    };
    exports.faCut = faCut;
    var faDatabase = {
      prefix: 'fas',
      iconName: 'database',
      icon: [448, 512, [], "f1c0", "M448 73.143v45.714C448 159.143 347.667 192 224 192S0 159.143 0 118.857V73.143C0 32.857 100.333 0 224 0s224 32.857 224 73.143zM448 176v102.857C448 319.143 347.667 352 224 352S0 319.143 0 278.857V176c48.125 33.143 136.208 48.572 224 48.572S399.874 209.143 448 176zm0 160v102.857C448 479.143 347.667 512 224 512S0 479.143 0 438.857V336c48.125 33.143 136.208 48.572 224 48.572S399.874 369.143 448 336z"]
    };
    exports.faDatabase = faDatabase;
    var faDeaf = {
      prefix: 'fas',
      iconName: 'deaf',
      icon: [512, 512, [], "f2a4", "M216 260c0 15.464-12.536 28-28 28s-28-12.536-28-28c0-44.112 35.888-80 80-80s80 35.888 80 80c0 15.464-12.536 28-28 28s-28-12.536-28-28c0-13.234-10.767-24-24-24s-24 10.766-24 24zm24-176c-97.047 0-176 78.953-176 176 0 15.464 12.536 28 28 28s28-12.536 28-28c0-66.168 53.832-120 120-120s120 53.832 120 120c0 75.164-71.009 70.311-71.997 143.622L288 404c0 28.673-23.327 52-52 52-15.464 0-28 12.536-28 28s12.536 28 28 28c59.475 0 107.876-48.328 108-107.774.595-34.428 72-48.24 72-144.226 0-97.047-78.953-176-176-176zm268.485-52.201L480.2 3.515c-4.687-4.686-12.284-4.686-16.971 0L376.2 90.544c-4.686 4.686-4.686 12.284 0 16.971l28.285 28.285c4.686 4.686 12.284 4.686 16.97 0l87.03-87.029c4.687-4.688 4.687-12.286 0-16.972zM168.97 314.745c-4.686-4.686-12.284-4.686-16.97 0L3.515 463.23c-4.686 4.686-4.686 12.284 0 16.971L31.8 508.485c4.687 4.686 12.284 4.686 16.971 0L197.256 360c4.686-4.686 4.686-12.284 0-16.971l-28.286-28.284z"]
    };
    exports.faDeaf = faDeaf;
    var faDemocrat = {
      prefix: 'fas',
      iconName: 'democrat',
      icon: [640, 512, [], "f747", "M637.3 256.9l-19.6-29.4c-28.2-42.3-75.3-67.5-126.1-67.5H256l-81.2-81.2c20.1-20.1 22.6-51.1 7.5-73.9-3.4-5.2-10.8-5.9-15.2-1.5l-41.8 41.8L82.4 2.4c-3.6-3.6-9.6-3-12.4 1.2-12.3 18.6-10.3 44 6.1 60.4 3.3 3.3 7.3 5.3 11.3 7.5-2.2 1.7-4.7 3.1-6.4 5.4L6.4 176.2c-7.3 9.7-8.4 22.7-3 33.5l14.3 28.6c5.4 10.8 16.5 17.7 28.6 17.7h31c8.5 0 16.6-3.4 22.6-9.4L138 212l54 108h352v-77.8c16.2 12.2 18.3 17.6 40.1 50.3 4.9 7.4 14.8 9.3 22.2 4.4l26.6-17.7c7.3-5 9.3-14.9 4.4-22.3zm-341.1-13.6l-16.5 16.1 3.9 22.7c.7 4.1-3.6 7.2-7.2 5.3L256 276.7l-20.4 10.7c-3.6 1.9-7.9-1.2-7.2-5.3l3.9-22.7-16.5-16.1c-3-2.9-1.3-7.9 2.8-8.5l22.8-3.3 10.2-20.7c1.8-3.7 7.1-3.7 9 0l10.2 20.7 22.8 3.3c4 .6 5.6 5.6 2.6 8.5zm112 0l-16.5 16.1 3.9 22.7c.7 4.1-3.6 7.2-7.2 5.3L368 276.7l-20.4 10.7c-3.6 1.9-7.9-1.2-7.2-5.3l3.9-22.7-16.5-16.1c-3-2.9-1.3-7.9 2.8-8.5l22.8-3.3 10.2-20.7c1.8-3.7 7.1-3.7 9 0l10.2 20.7 22.8 3.3c4 .6 5.6 5.6 2.6 8.5zm112 0l-16.5 16.1 3.9 22.7c.7 4.1-3.6 7.2-7.2 5.3L480 276.7l-20.4 10.7c-3.6 1.9-7.9-1.2-7.2-5.3l3.9-22.7-16.5-16.1c-3-2.9-1.3-7.9 2.8-8.5l22.8-3.3 10.2-20.7c1.8-3.7 7.1-3.7 9 0l10.2 20.7 22.8 3.3c4 .6 5.6 5.6 2.6 8.5zM192 496c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16v-80h160v80c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16V352H192v144z"]
    };
    exports.faDemocrat = faDemocrat;
    var faDesktop = {
      prefix: 'fas',
      iconName: 'desktop',
      icon: [576, 512, [], "f108", "M528 0H48C21.5 0 0 21.5 0 48v320c0 26.5 21.5 48 48 48h192l-16 48h-72c-13.3 0-24 10.7-24 24s10.7 24 24 24h272c13.3 0 24-10.7 24-24s-10.7-24-24-24h-72l-16-48h192c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zm-16 352H64V64h448v288z"]
    };
    exports.faDesktop = faDesktop;
    var faDharmachakra = {
      prefix: 'fas',
      iconName: 'dharmachakra',
      icon: [512, 512, [], "f655", "M495 225.06l-17.22 1.08c-5.27-39.49-20.79-75.64-43.86-105.84l12.95-11.43c6.92-6.11 7.25-16.79.73-23.31L426.44 64.4c-6.53-6.53-17.21-6.19-23.31.73L391.7 78.07c-30.2-23.06-66.35-38.58-105.83-43.86L286.94 17c.58-9.21-6.74-17-15.97-17h-29.94c-9.23 0-16.54 7.79-15.97 17l1.08 17.22c-39.49 5.27-75.64 20.79-105.83 43.86l-11.43-12.95c-6.11-6.92-16.79-7.25-23.31-.73L64.4 85.56c-6.53 6.53-6.19 17.21.73 23.31l12.95 11.43c-23.06 30.2-38.58 66.35-43.86 105.84L17 225.06c-9.21-.58-17 6.74-17 15.97v29.94c0 9.23 7.79 16.54 17 15.97l17.22-1.08c5.27 39.49 20.79 75.64 43.86 105.83l-12.95 11.43c-6.92 6.11-7.25 16.79-.73 23.31l21.17 21.17c6.53 6.53 17.21 6.19 23.31-.73l11.43-12.95c30.2 23.06 66.35 38.58 105.84 43.86L225.06 495c-.58 9.21 6.74 17 15.97 17h29.94c9.23 0 16.54-7.79 15.97-17l-1.08-17.22c39.49-5.27 75.64-20.79 105.84-43.86l11.43 12.95c6.11 6.92 16.79 7.25 23.31.73l21.17-21.17c6.53-6.53 6.19-17.21-.73-23.31l-12.95-11.43c23.06-30.2 38.58-66.35 43.86-105.83l17.22 1.08c9.21.58 17-6.74 17-15.97v-29.94c-.01-9.23-7.8-16.54-17.01-15.97zM281.84 98.61c24.81 4.07 47.63 13.66 67.23 27.78l-42.62 48.29c-8.73-5.44-18.32-9.54-28.62-11.95l4.01-64.12zm-51.68 0l4.01 64.12c-10.29 2.41-19.89 6.52-28.62 11.95l-42.62-48.29c19.6-14.12 42.42-23.71 67.23-27.78zm-103.77 64.33l48.3 42.61c-5.44 8.73-9.54 18.33-11.96 28.62l-64.12-4.01c4.07-24.81 13.66-47.62 27.78-67.22zm-27.78 118.9l64.12-4.01c2.41 10.29 6.52 19.89 11.95 28.62l-48.29 42.62c-14.12-19.6-23.71-42.42-27.78-67.23zm131.55 131.55c-24.81-4.07-47.63-13.66-67.23-27.78l42.61-48.3c8.73 5.44 18.33 9.54 28.62 11.96l-4 64.12zM256 288c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm25.84 125.39l-4.01-64.12c10.29-2.41 19.89-6.52 28.62-11.96l42.61 48.3c-19.6 14.12-42.41 23.71-67.22 27.78zm103.77-64.33l-48.29-42.62c5.44-8.73 9.54-18.32 11.95-28.62l64.12 4.01c-4.07 24.82-13.66 47.64-27.78 67.23zm-36.34-114.89c-2.41-10.29-6.52-19.89-11.96-28.62l48.3-42.61c14.12 19.6 23.71 42.42 27.78 67.23l-64.12 4z"]
    };
    exports.faDharmachakra = faDharmachakra;
    var faDiagnoses = {
      prefix: 'fas',
      iconName: 'diagnoses',
      icon: [640, 512, [], "f470", "M496 256c8.8 0 16-7.2 16-16s-7.2-16-16-16-16 7.2-16 16 7.2 16 16 16zm-176-80c48.5 0 88-39.5 88-88S368.5 0 320 0s-88 39.5-88 88 39.5 88 88 88zM59.8 364c10.2 15.3 29.3 17.8 42.9 9.8 16.2-9.6 56.2-31.7 105.3-48.6V416h224v-90.7c49.1 16.8 89.1 39 105.3 48.6 13.6 8 32.7 5.3 42.9-9.8l17.8-26.7c8.8-13.2 7.6-34.6-10-45.1-11.9-7.1-29.7-17-51.1-27.4-28.1 46.1-99.4 17.8-87.7-35.1C409.3 217.2 365.1 208 320 208c-57 0-112.9 14.5-160 32.2-.2 40.2-47.6 63.3-79.2 36-11.2 6-21.3 11.6-28.7 16-17.6 10.5-18.8 31.8-10 45.1L59.8 364zM368 344c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm-96-96c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm-160 8c8.8 0 16-7.2 16-16s-7.2-16-16-16-16 7.2-16 16 7.2 16 16 16zm512 192H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h608c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16z"]
    };
    exports.faDiagnoses = faDiagnoses;
    var faDice = {
      prefix: 'fas',
      iconName: 'dice',
      icon: [640, 512, [], "f522", "M592 192H473.26c12.69 29.59 7.12 65.2-17 89.32L320 417.58V464c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48V240c0-26.51-21.49-48-48-48zM480 376c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm-46.37-186.7L258.7 14.37c-19.16-19.16-50.23-19.16-69.39 0L14.37 189.3c-19.16 19.16-19.16 50.23 0 69.39L189.3 433.63c19.16 19.16 50.23 19.16 69.39 0L433.63 258.7c19.16-19.17 19.16-50.24 0-69.4zM96 248c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm128 128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm0-128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm0-128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm128 128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z"]
    };
    exports.faDice = faDice;
    var faDiceD20 = {
      prefix: 'fas',
      iconName: 'dice-d20',
      icon: [480, 512, [], "f6cf", "M106.75 215.06L1.2 370.95c-3.08 5 .1 11.5 5.93 12.14l208.26 22.07-108.64-190.1zM7.41 315.43L82.7 193.08 6.06 147.1c-2.67-1.6-6.06.32-6.06 3.43v162.81c0 4.03 5.29 5.53 7.41 2.09zM18.25 423.6l194.4 87.66c5.3 2.45 11.35-1.43 11.35-7.26v-65.67l-203.55-22.3c-4.45-.5-6.23 5.59-2.2 7.57zm81.22-257.78L179.4 22.88c4.34-7.06-3.59-15.25-10.78-11.14L17.81 110.35c-2.47 1.62-2.39 5.26.13 6.78l81.53 48.69zM240 176h109.21L253.63 7.62C250.5 2.54 245.25 0 240 0s-10.5 2.54-13.63 7.62L130.79 176H240zm233.94-28.9l-76.64 45.99 75.29 122.35c2.11 3.44 7.41 1.94 7.41-2.1V150.53c0-3.11-3.39-5.03-6.06-3.43zm-93.41 18.72l81.53-48.7c2.53-1.52 2.6-5.16.13-6.78l-150.81-98.6c-7.19-4.11-15.12 4.08-10.78 11.14l79.93 142.94zm79.02 250.21L256 438.32v65.67c0 5.84 6.05 9.71 11.35 7.26l194.4-87.66c4.03-1.97 2.25-8.06-2.2-7.56zm-86.3-200.97l-108.63 190.1 208.26-22.07c5.83-.65 9.01-7.14 5.93-12.14L373.25 215.06zM240 208H139.57L240 383.75 340.43 208H240z"]
    };
    exports.faDiceD20 = faDiceD20;
    var faDiceD6 = {
      prefix: 'fas',
      iconName: 'dice-d6',
      icon: [448, 512, [], "f6d1", "M422.19 109.95L256.21 9.07c-19.91-12.1-44.52-12.1-64.43 0L25.81 109.95c-5.32 3.23-5.29 11.27.06 14.46L224 242.55l198.14-118.14c5.35-3.19 5.38-11.22.05-14.46zm13.84 44.63L240 271.46v223.82c0 12.88 13.39 20.91 24.05 14.43l152.16-92.48c19.68-11.96 31.79-33.94 31.79-57.7v-197.7c0-6.41-6.64-10.43-11.97-7.25zM0 161.83v197.7c0 23.77 12.11 45.74 31.79 57.7l152.16 92.47c10.67 6.48 24.05-1.54 24.05-14.43V271.46L11.97 154.58C6.64 151.4 0 155.42 0 161.83z"]
    };
    exports.faDiceD6 = faDiceD6;
    var faDiceFive = {
      prefix: 'fas',
      iconName: 'dice-five',
      icon: [448, 512, [], "f523", "M384 32H64C28.65 32 0 60.65 0 96v320c0 35.35 28.65 64 64 64h320c35.35 0 64-28.65 64-64V96c0-35.35-28.65-64-64-64zM128 384c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm0-192c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm96 96c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm96 96c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm0-192c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faDiceFive = faDiceFive;
    var faDiceFour = {
      prefix: 'fas',
      iconName: 'dice-four',
      icon: [448, 512, [], "f524", "M384 32H64C28.65 32 0 60.65 0 96v320c0 35.35 28.65 64 64 64h320c35.35 0 64-28.65 64-64V96c0-35.35-28.65-64-64-64zM128 384c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm0-192c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm192 192c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm0-192c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faDiceFour = faDiceFour;
    var faDiceOne = {
      prefix: 'fas',
      iconName: 'dice-one',
      icon: [448, 512, [], "f525", "M384 32H64C28.65 32 0 60.65 0 96v320c0 35.35 28.65 64 64 64h320c35.35 0 64-28.65 64-64V96c0-35.35-28.65-64-64-64zM224 288c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faDiceOne = faDiceOne;
    var faDiceSix = {
      prefix: 'fas',
      iconName: 'dice-six',
      icon: [448, 512, [], "f526", "M384 32H64C28.65 32 0 60.65 0 96v320c0 35.35 28.65 64 64 64h320c35.35 0 64-28.65 64-64V96c0-35.35-28.65-64-64-64zM128 384c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm0-96c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm0-96c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm192 192c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm0-96c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm0-96c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faDiceSix = faDiceSix;
    var faDiceThree = {
      prefix: 'fas',
      iconName: 'dice-three',
      icon: [448, 512, [], "f527", "M384 32H64C28.65 32 0 60.65 0 96v320c0 35.35 28.65 64 64 64h320c35.35 0 64-28.65 64-64V96c0-35.35-28.65-64-64-64zM128 192c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm96 96c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm96 96c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faDiceThree = faDiceThree;
    var faDiceTwo = {
      prefix: 'fas',
      iconName: 'dice-two',
      icon: [448, 512, [], "f528", "M384 32H64C28.65 32 0 60.65 0 96v320c0 35.35 28.65 64 64 64h320c35.35 0 64-28.65 64-64V96c0-35.35-28.65-64-64-64zM128 192c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm192 192c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faDiceTwo = faDiceTwo;
    var faDigitalTachograph = {
      prefix: 'fas',
      iconName: 'digital-tachograph',
      icon: [640, 512, [], "f566", "M608 96H32c-17.67 0-32 14.33-32 32v256c0 17.67 14.33 32 32 32h576c17.67 0 32-14.33 32-32V128c0-17.67-14.33-32-32-32zM304 352c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8v-8c0-4.42 3.58-8 8-8h224c4.42 0 8 3.58 8 8v8zM72 288v-16c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8H80c-4.42 0-8-3.58-8-8zm64 0v-16c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8zm64 0v-16c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8zm64 0v-16c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8zm40-64c0 8.84-7.16 16-16 16H80c-8.84 0-16-7.16-16-16v-48c0-8.84 7.16-16 16-16h208c8.84 0 16 7.16 16 16v48zm272 128c0 4.42-3.58 8-8 8H344c-4.42 0-8-3.58-8-8v-8c0-4.42 3.58-8 8-8h224c4.42 0 8 3.58 8 8v8z"]
    };
    exports.faDigitalTachograph = faDigitalTachograph;
    var faDirections = {
      prefix: 'fas',
      iconName: 'directions',
      icon: [512, 512, [], "f5eb", "M502.61 233.32L278.68 9.39c-12.52-12.52-32.83-12.52-45.36 0L9.39 233.32c-12.52 12.53-12.52 32.83 0 45.36l223.93 223.93c12.52 12.53 32.83 12.53 45.36 0l223.93-223.93c12.52-12.53 12.52-32.83 0-45.36zm-100.98 12.56l-84.21 77.73c-5.12 4.73-13.43 1.1-13.43-5.88V264h-96v64c0 4.42-3.58 8-8 8h-32c-4.42 0-8-3.58-8-8v-80c0-17.67 14.33-32 32-32h112v-53.73c0-6.97 8.3-10.61 13.43-5.88l84.21 77.73c3.43 3.17 3.43 8.59 0 11.76z"]
    };
    exports.faDirections = faDirections;
    var faDisease = {
      prefix: 'fas',
      iconName: 'disease',
      icon: [512, 512, [], "f7fa", "M472.29 195.9l-67.06-23c-19.28-6.6-33.54-20.92-38.14-38.31l-16-60.45c-11.58-43.77-76.57-57.13-110-22.62L195 99.24c-13.26 13.71-33.54 20.93-54.2 19.31l-71.9-5.62c-52-4.07-86.93 44.89-59 82.84l38.54 52.42c11.08 15.07 12.82 33.86 4.64 50.24l-28.43 57C4 396.67 47.46 440.29 98.11 429.23l70-15.28c20.11-4.39 41.45 0 57.07 11.73l54.32 40.83c39.32 29.56 101 7.57 104.45-37.22l4.7-61.86c1.35-17.8 12.8-33.87 30.63-43l62-31.74c44.84-22.96 39.55-80.17-8.99-96.79zM160 256a32 32 0 1 1 32-32 32 32 0 0 1-32 32zm128 96a32 32 0 1 1 32-32 32 32 0 0 1-32 32zm16-128a16 16 0 1 1 16-16 16 16 0 0 1-16 16z"]
    };
    exports.faDisease = faDisease;
    var faDivide = {
      prefix: 'fas',
      iconName: 'divide',
      icon: [448, 512, [], "f529", "M224 352c-35.35 0-64 28.65-64 64s28.65 64 64 64 64-28.65 64-64-28.65-64-64-64zm0-192c35.35 0 64-28.65 64-64s-28.65-64-64-64-64 28.65-64 64 28.65 64 64 64zm192 48H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"]
    };
    exports.faDivide = faDivide;
    var faDizzy = {
      prefix: 'fas',
      iconName: 'dizzy',
      icon: [496, 512, [], "f567", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm-96 206.6l-28.7 28.7c-14.8 14.8-37.8-7.5-22.6-22.6l28.7-28.7-28.7-28.7c-15-15 7.7-37.6 22.6-22.6l28.7 28.7 28.7-28.7c15-15 37.6 7.7 22.6 22.6L174.6 192l28.7 28.7c15.2 15.2-7.9 37.4-22.6 22.6L152 214.6zM248 416c-35.3 0-64-28.7-64-64s28.7-64 64-64 64 28.7 64 64-28.7 64-64 64zm147.3-195.3c15.2 15.2-7.9 37.4-22.6 22.6L344 214.6l-28.7 28.7c-14.8 14.8-37.8-7.5-22.6-22.6l28.7-28.7-28.7-28.7c-15-15 7.7-37.6 22.6-22.6l28.7 28.7 28.7-28.7c15-15 37.6 7.7 22.6 22.6L366.6 192l28.7 28.7z"]
    };
    exports.faDizzy = faDizzy;
    var faDna = {
      prefix: 'fas',
      iconName: 'dna',
      icon: [448, 512, [], "f471", "M.1 494.1c-1.1 9.5 6.3 17.8 15.9 17.8l32.3.1c8.1 0 14.9-5.9 16-13.9.7-4.9 1.8-11.1 3.4-18.1H380c1.6 6.9 2.9 13.2 3.5 18.1 1.1 8 7.9 14 16 13.9l32.3-.1c9.6 0 17.1-8.3 15.9-17.8-4.6-37.9-25.6-129-118.9-207.7-17.6 12.4-37.1 24.2-58.5 35.4 6.2 4.6 11.4 9.4 17 14.2H159.7c21.3-18.1 47-35.6 78.7-51.4C410.5 199.1 442.1 65.8 447.9 17.9 449 8.4 441.6.1 432 .1L399.6 0c-8.1 0-14.9 5.9-16 13.9-.7 4.9-1.8 11.1-3.4 18.1H67.8c-1.6-7-2.7-13.1-3.4-18.1-1.1-8-7.9-14-16-13.9L16.1.1C6.5.1-1 8.4.1 17.9 5.3 60.8 31.4 171.8 160 256 31.5 340.2 5.3 451.2.1 494.1zM224 219.6c-25.1-13.7-46.4-28.4-64.3-43.6h128.5c-17.8 15.2-39.1 30-64.2 43.6zM355.1 96c-5.8 10.4-12.8 21.1-21 32H114c-8.3-10.9-15.3-21.6-21-32h262.1zM92.9 416c5.8-10.4 12.8-21.1 21-32h219.4c8.3 10.9 15.4 21.6 21.2 32H92.9z"]
    };
    exports.faDna = faDna;
    var faDog = {
      prefix: 'fas',
      iconName: 'dog',
      icon: [576, 512, [], "f6d3", "M298.06,224,448,277.55V496a16,16,0,0,1-16,16H368a16,16,0,0,1-16-16V384H192V496a16,16,0,0,1-16,16H112a16,16,0,0,1-16-16V282.09C58.84,268.84,32,233.66,32,192a32,32,0,0,1,64,0,32.06,32.06,0,0,0,32,32ZM544,112v32a64,64,0,0,1-64,64H448v35.58L320,197.87V48c0-14.25,17.22-21.39,27.31-11.31L374.59,64h53.63c10.91,0,23.75,7.92,28.62,17.69L464,96h64A16,16,0,0,1,544,112Zm-112,0a16,16,0,1,0-16,16A16,16,0,0,0,432,112Z"]
    };
    exports.faDog = faDog;
    var faDollarSign = {
      prefix: 'fas',
      iconName: 'dollar-sign',
      icon: [288, 512, [], "f155", "M209.2 233.4l-108-31.6C88.7 198.2 80 186.5 80 173.5c0-16.3 13.2-29.5 29.5-29.5h66.3c12.2 0 24.2 3.7 34.2 10.5 6.1 4.1 14.3 3.1 19.5-2l34.8-34c7.1-6.9 6.1-18.4-1.8-24.5C238 74.8 207.4 64.1 176 64V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48h-2.5C45.8 64-5.4 118.7.5 183.6c4.2 46.1 39.4 83.6 83.8 96.6l102.5 30c12.5 3.7 21.2 15.3 21.2 28.3 0 16.3-13.2 29.5-29.5 29.5h-66.3C100 368 88 364.3 78 357.5c-6.1-4.1-14.3-3.1-19.5 2l-34.8 34c-7.1 6.9-6.1 18.4 1.8 24.5 24.5 19.2 55.1 29.9 86.5 30v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-48.2c46.6-.9 90.3-28.6 105.7-72.7 21.5-61.6-14.6-124.8-72.5-141.7z"]
    };
    exports.faDollarSign = faDollarSign;
    var faDolly = {
      prefix: 'fas',
      iconName: 'dolly',
      icon: [576, 512, [], "f472", "M294.2 277.7c18 5 34.7 13.4 49.5 24.7l161.5-53.8c8.4-2.8 12.9-11.9 10.1-20.2L454.9 47.2c-2.8-8.4-11.9-12.9-20.2-10.1l-61.1 20.4 33.1 99.4L346 177l-33.1-99.4-61.6 20.5c-8.4 2.8-12.9 11.9-10.1 20.2l53 159.4zm281 48.7L565 296c-2.8-8.4-11.9-12.9-20.2-10.1l-213.5 71.2c-17.2-22-43.6-36.4-73.5-37L158.4 21.9C154 8.8 141.8 0 128 0H16C7.2 0 0 7.2 0 16v32c0 8.8 7.2 16 16 16h88.9l92.2 276.7c-26.1 20.4-41.7 53.6-36 90.5 6.1 39.4 37.9 72.3 77.3 79.2 60.2 10.7 112.3-34.8 113.4-92.6l213.3-71.2c8.3-2.8 12.9-11.8 10.1-20.2zM256 464c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z"]
    };
    exports.faDolly = faDolly;
    var faDollyFlatbed = {
      prefix: 'fas',
      iconName: 'dolly-flatbed',
      icon: [640, 512, [], "f474", "M208 320h384c8.8 0 16-7.2 16-16V48c0-8.8-7.2-16-16-16H448v128l-48-32-48 32V32H208c-8.8 0-16 7.2-16 16v256c0 8.8 7.2 16 16 16zm416 64H128V16c0-8.8-7.2-16-16-16H16C7.2 0 0 7.2 0 16v32c0 8.8 7.2 16 16 16h48v368c0 8.8 7.2 16 16 16h82.9c-1.8 5-2.9 10.4-2.9 16 0 26.5 21.5 48 48 48s48-21.5 48-48c0-5.6-1.2-11-2.9-16H451c-1.8 5-2.9 10.4-2.9 16 0 26.5 21.5 48 48 48s48-21.5 48-48c0-5.6-1.2-11-2.9-16H624c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16z"]
    };
    exports.faDollyFlatbed = faDollyFlatbed;
    var faDonate = {
      prefix: 'fas',
      iconName: 'donate',
      icon: [512, 512, [], "f4b9", "M256 416c114.9 0 208-93.1 208-208S370.9 0 256 0 48 93.1 48 208s93.1 208 208 208zM233.8 97.4V80.6c0-9.2 7.4-16.6 16.6-16.6h11.1c9.2 0 16.6 7.4 16.6 16.6v17c15.5.8 30.5 6.1 43 15.4 5.6 4.1 6.2 12.3 1.2 17.1L306 145.6c-3.8 3.7-9.5 3.8-14 1-5.4-3.4-11.4-5.1-17.8-5.1h-38.9c-9 0-16.3 8.2-16.3 18.3 0 8.2 5 15.5 12.1 17.6l62.3 18.7c25.7 7.7 43.7 32.4 43.7 60.1 0 34-26.4 61.5-59.1 62.4v16.8c0 9.2-7.4 16.6-16.6 16.6h-11.1c-9.2 0-16.6-7.4-16.6-16.6v-17c-15.5-.8-30.5-6.1-43-15.4-5.6-4.1-6.2-12.3-1.2-17.1l16.3-15.5c3.8-3.7 9.5-3.8 14-1 5.4 3.4 11.4 5.1 17.8 5.1h38.9c9 0 16.3-8.2 16.3-18.3 0-8.2-5-15.5-12.1-17.6l-62.3-18.7c-25.7-7.7-43.7-32.4-43.7-60.1.1-34 26.4-61.5 59.1-62.4zM480 352h-32.5c-19.6 26-44.6 47.7-73 64h63.8c5.3 0 9.6 3.6 9.6 8v16c0 4.4-4.3 8-9.6 8H73.6c-5.3 0-9.6-3.6-9.6-8v-16c0-4.4 4.3-8 9.6-8h63.8c-28.4-16.3-53.3-38-73-64H32c-17.7 0-32 14.3-32 32v96c0 17.7 14.3 32 32 32h448c17.7 0 32-14.3 32-32v-96c0-17.7-14.3-32-32-32z"]
    };
    exports.faDonate = faDonate;
    var faDoorClosed = {
      prefix: 'fas',
      iconName: 'door-closed',
      icon: [640, 512, [], "f52a", "M624 448H512V50.8C512 22.78 490.47 0 464 0H175.99c-26.47 0-48 22.78-48 50.8V448H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h608c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM415.99 288c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32c.01 17.67-14.32 32-32 32z"]
    };
    exports.faDoorClosed = faDoorClosed;
    var faDoorOpen = {
      prefix: 'fas',
      iconName: 'door-open',
      icon: [640, 512, [], "f52b", "M624 448h-80V113.45C544 86.19 522.47 64 496 64H384v64h96v384h144c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM312.24 1.01l-192 49.74C105.99 54.44 96 67.7 96 82.92V448H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h336V33.18c0-21.58-19.56-37.41-39.76-32.17zM264 288c-13.25 0-24-14.33-24-32s10.75-32 24-32 24 14.33 24 32-10.75 32-24 32z"]
    };
    exports.faDoorOpen = faDoorOpen;
    var faDotCircle = {
      prefix: 'fas',
      iconName: 'dot-circle',
      icon: [512, 512, [], "f192", "M256 8C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm80 248c0 44.112-35.888 80-80 80s-80-35.888-80-80 35.888-80 80-80 80 35.888 80 80z"]
    };
    exports.faDotCircle = faDotCircle;
    var faDove = {
      prefix: 'fas',
      iconName: 'dove',
      icon: [512, 512, [], "f4ba", "M288 167.2v-28.1c-28.2-36.3-47.1-79.3-54.1-125.2-2.1-13.5-19-18.8-27.8-8.3-21.1 24.9-37.7 54.1-48.9 86.5 34.2 38.3 80 64.6 130.8 75.1zM400 64c-44.2 0-80 35.9-80 80.1v59.4C215.6 197.3 127 133 87 41.8c-5.5-12.5-23.2-13.2-29-.9C41.4 76 32 115.2 32 156.6c0 70.8 34.1 136.9 85.1 185.9 13.2 12.7 26.1 23.2 38.9 32.8l-143.9 36C1.4 414-3.4 426.4 2.6 435.7 20 462.6 63 508.2 155.8 512c8 .3 16-2.6 22.1-7.9l65.2-56.1H320c88.4 0 160-71.5 160-159.9V128l32-64H400zm0 96.1c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16z"]
    };
    exports.faDove = faDove;
    var faDownload = {
      prefix: 'fas',
      iconName: 'download',
      icon: [512, 512, [], "f019", "M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z"]
    };
    exports.faDownload = faDownload;
    var faDraftingCompass = {
      prefix: 'fas',
      iconName: 'drafting-compass',
      icon: [512, 512, [], "f568", "M457.01 344.42c-25.05 20.33-52.63 37.18-82.54 49.05l54.38 94.19 53.95 23.04c9.81 4.19 20.89-2.21 22.17-12.8l7.02-58.25-54.98-95.23zm42.49-94.56c4.86-7.67 1.89-17.99-6.05-22.39l-28.07-15.57c-7.48-4.15-16.61-1.46-21.26 5.72C403.01 281.15 332.25 320 256 320c-23.93 0-47.23-4.25-69.41-11.53l67.36-116.68c.7.02 1.34.21 2.04.21s1.35-.19 2.04-.21l51.09 88.5c31.23-8.96 59.56-25.75 82.61-48.92l-51.79-89.71C347.39 128.03 352 112.63 352 96c0-53.02-42.98-96-96-96s-96 42.98-96 96c0 16.63 4.61 32.03 12.05 45.66l-68.3 118.31c-12.55-11.61-23.96-24.59-33.68-39-4.79-7.1-13.97-9.62-21.38-5.33l-27.75 16.07c-7.85 4.54-10.63 14.9-5.64 22.47 15.57 23.64 34.69 44.21 55.98 62.02L0 439.66l7.02 58.25c1.28 10.59 12.36 16.99 22.17 12.8l53.95-23.04 70.8-122.63C186.13 377.28 220.62 384 256 384c99.05 0 190.88-51.01 243.5-134.14zM256 64c17.67 0 32 14.33 32 32s-14.33 32-32 32-32-14.33-32-32 14.33-32 32-32z"]
    };
    exports.faDraftingCompass = faDraftingCompass;
    var faDragon = {
      prefix: 'fas',
      iconName: 'dragon',
      icon: [640, 512, [], "f6d5", "M18.32 255.78L192 223.96l-91.28 68.69c-10.08 10.08-2.94 27.31 11.31 27.31h222.7c-9.44-26.4-14.73-54.47-14.73-83.38v-42.27l-119.73-87.6c-23.82-15.88-55.29-14.01-77.06 4.59L5.81 227.64c-12.38 10.33-3.45 30.42 12.51 28.14zm556.87 34.1l-100.66-50.31A47.992 47.992 0 0 1 448 196.65v-36.69h64l28.09 22.63c6 6 14.14 9.37 22.63 9.37h30.97a32 32 0 0 0 28.62-17.69l14.31-28.62a32.005 32.005 0 0 0-3.02-33.51l-74.53-99.38C553.02 4.7 543.54 0 533.47 0H296.02c-7.13 0-10.7 8.57-5.66 13.61L352 63.96 292.42 88.8c-5.9 2.95-5.9 11.36 0 14.31L352 127.96v108.62c0 72.08 36.03 139.39 96 179.38-195.59 6.81-344.56 41.01-434.1 60.91C5.78 478.67 0 485.88 0 494.2 0 504 7.95 512 17.76 512h499.08c63.29.01 119.61-47.56 122.99-110.76 2.52-47.28-22.73-90.4-64.64-111.36zM489.18 66.25l45.65 11.41c-2.75 10.91-12.47 18.89-24.13 18.26-12.96-.71-25.85-12.53-21.52-29.67z"]
    };
    exports.faDragon = faDragon;
    var faDrawPolygon = {
      prefix: 'fas',
      iconName: 'draw-polygon',
      icon: [448, 512, [], "f5ee", "M384 352c-.35 0-.67.1-1.02.1l-39.2-65.32c5.07-9.17 8.22-19.56 8.22-30.78s-3.14-21.61-8.22-30.78l39.2-65.32c.35.01.67.1 1.02.1 35.35 0 64-28.65 64-64s-28.65-64-64-64c-23.63 0-44.04 12.95-55.12 32H119.12C108.04 44.95 87.63 32 64 32 28.65 32 0 60.65 0 96c0 23.63 12.95 44.04 32 55.12v209.75C12.95 371.96 0 392.37 0 416c0 35.35 28.65 64 64 64 23.63 0 44.04-12.95 55.12-32h209.75c11.09 19.05 31.49 32 55.12 32 35.35 0 64-28.65 64-64 .01-35.35-28.64-64-63.99-64zm-288 8.88V151.12A63.825 63.825 0 0 0 119.12 128h208.36l-38.46 64.1c-.35-.01-.67-.1-1.02-.1-35.35 0-64 28.65-64 64s28.65 64 64 64c.35 0 .67-.1 1.02-.1l38.46 64.1H119.12A63.748 63.748 0 0 0 96 360.88zM272 256c0-8.82 7.18-16 16-16s16 7.18 16 16-7.18 16-16 16-16-7.18-16-16zM400 96c0 8.82-7.18 16-16 16s-16-7.18-16-16 7.18-16 16-16 16 7.18 16 16zM64 80c8.82 0 16 7.18 16 16s-7.18 16-16 16-16-7.18-16-16 7.18-16 16-16zM48 416c0-8.82 7.18-16 16-16s16 7.18 16 16-7.18 16-16 16-16-7.18-16-16zm336 16c-8.82 0-16-7.18-16-16s7.18-16 16-16 16 7.18 16 16-7.18 16-16 16z"]
    };
    exports.faDrawPolygon = faDrawPolygon;
    var faDrum = {
      prefix: 'fas',
      iconName: 'drum',
      icon: [512, 512, [], "f569", "M431.34 122.05l73.53-47.42a16 16 0 0 0 4.44-22.19l-8.87-13.31a16 16 0 0 0-22.19-4.44l-110.06 71C318.43 96.91 271.22 96 256 96 219.55 96 0 100.55 0 208.15v160.23c0 30.27 27.5 57.68 72 77.86v-101.9a24 24 0 1 1 48 0v118.93c33.05 9.11 71.07 15.06 112 16.73V376.39a24 24 0 1 1 48 0V480c40.93-1.67 78.95-7.62 112-16.73V344.34a24 24 0 1 1 48 0v101.9c44.5-20.18 72-47.59 72-77.86V208.15c0-43.32-35.76-69.76-80.66-86.1zM256 272.24c-114.88 0-208-28.69-208-64.09s93.12-64.08 208-64.08c17.15 0 33.73.71 49.68 1.91l-72.81 47a16 16 0 0 0-4.43 22.19l8.87 13.31a16 16 0 0 0 22.19 4.44l118.64-76.52C430.09 168 464 186.84 464 208.15c0 35.4-93.13 64.09-208 64.09z"]
    };
    exports.faDrum = faDrum;
    var faDrumSteelpan = {
      prefix: 'fas',
      iconName: 'drum-steelpan',
      icon: [576, 512, [], "f56a", "M288 32C128.94 32 0 89.31 0 160v192c0 70.69 128.94 128 288 128s288-57.31 288-128V160c0-70.69-128.94-128-288-128zm-82.99 158.36c-4.45 16.61-14.54 30.57-28.31 40.48C100.23 217.46 48 190.78 48 160c0-30.16 50.11-56.39 124.04-70.03l25.6 44.34c9.86 17.09 12.48 36.99 7.37 56.05zM288 240c-21.08 0-41.41-1-60.89-2.7 8.06-26.13 32.15-45.3 60.89-45.3s52.83 19.17 60.89 45.3C329.41 239 309.08 240 288 240zm64-144c0 35.29-28.71 64-64 64s-64-28.71-64-64V82.96c20.4-1.88 41.8-2.96 64-2.96s43.6 1.08 64 2.96V96zm46.93 134.9c-13.81-9.91-23.94-23.9-28.4-40.54-5.11-19.06-2.49-38.96 7.38-56.04l25.65-44.42C477.72 103.5 528 129.79 528 160c0 30.83-52.4 57.54-129.07 70.9z"]
    };
    exports.faDrumSteelpan = faDrumSteelpan;
    var faDrumstickBite = {
      prefix: 'fas',
      iconName: 'drumstick-bite',
      icon: [512, 512, [], "f6d7", "M462.8 49.57a169.44 169.44 0 0 0-239.5 0C187.82 85 160.13 128 160.13 192v85.83l-40.62 40.59c-9.7 9.69-24 11.07-36.78 6a60.33 60.33 0 0 0-65 98.72C33 438.39 54.24 442.7 73.85 438.21c-4.5 19.6-.18 40.83 15.1 56.1a60.35 60.35 0 0 0 98.8-65c-5.09-12.73-3.72-27 6-36.75L234.36 352h85.89a187.87 187.87 0 0 0 61.89-10c-39.64-43.89-39.83-110.23 1.05-151.07 34.38-34.36 86.76-39.46 128.74-16.8 1.3-44.96-14.81-90.28-49.13-124.56z"]
    };
    exports.faDrumstickBite = faDrumstickBite;
    var faDumbbell = {
      prefix: 'fas',
      iconName: 'dumbbell',
      icon: [640, 512, [], "f44b", "M104 96H56c-13.3 0-24 10.7-24 24v104H8c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h24v104c0 13.3 10.7 24 24 24h48c13.3 0 24-10.7 24-24V120c0-13.3-10.7-24-24-24zm528 128h-24V120c0-13.3-10.7-24-24-24h-48c-13.3 0-24 10.7-24 24v272c0 13.3 10.7 24 24 24h48c13.3 0 24-10.7 24-24V288h24c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM456 32h-48c-13.3 0-24 10.7-24 24v168H256V56c0-13.3-10.7-24-24-24h-48c-13.3 0-24 10.7-24 24v400c0 13.3 10.7 24 24 24h48c13.3 0 24-10.7 24-24V288h128v168c0 13.3 10.7 24 24 24h48c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24z"]
    };
    exports.faDumbbell = faDumbbell;
    var faDumpster = {
      prefix: 'fas',
      iconName: 'dumpster',
      icon: [576, 512, [], "f793", "M560 160c10.4 0 18-9.8 15.5-19.9l-24-96C549.7 37 543.3 32 536 32h-98.9l25.6 128H560zM272 32H171.5l-25.6 128H272V32zm132.5 0H304v128h126.1L404.5 32zM16 160h97.3l25.6-128H40c-7.3 0-13.7 5-15.5 12.1l-24 96C-2 150.2 5.6 160 16 160zm544 64h-20l4-32H32l4 32H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h28l20 160v16c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-16h320v16c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-16l20-160h28c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16z"]
    };
    exports.faDumpster = faDumpster;
    var faDumpsterFire = {
      prefix: 'fas',
      iconName: 'dumpster-fire',
      icon: [640, 512, [], "f794", "M418.7 104.1l.2-.2-14.4-72H304v128h60.8c16.2-19.3 34.2-38.2 53.9-55.8zM272 32H171.5l-25.6 128H272V32zm189.3 72.1c18.2 16.3 35.5 33.7 51.1 51.5 5.7-5.6 11.4-11.1 17.3-16.3l21.3-19 21.3 19c1.1.9 2.1 2.1 3.1 3.1-.1-.8.2-1.5 0-2.3l-24-96C549.7 37 543.3 32 536 32h-98.9l12.3 61.5 11.9 10.6zM16 160h97.3l25.6-128H40c-7.3 0-13.7 5-15.5 12.1l-24 96C-2 150.2 5.6 160 16 160zm324.6 32H32l4 32H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h28l20 160v16c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-16h208.8c-30.2-33.7-48.8-77.9-48.8-126.4 0-35.9 19.9-82.9 52.6-129.6zm210.5-28.8c-14.9 13.3-28.3 27.2-40.2 41.2-19.5-25.8-43.6-52-71-76.4-70.2 62.7-120 144.3-120 193.6 0 87.5 71.6 158.4 160 158.4s160-70.9 160-158.4c.1-36.6-37-112.2-88.8-158.4zm-18.6 229.4c-14.7 10.7-32.9 17-52.5 17-49 0-88.9-33.5-88.9-88 0-27.1 16.5-51 49.4-91.9 4.7 5.6 67.1 88.1 67.1 88.1l39.8-47c2.8 4.8 5.4 9.5 7.7 14 18.6 36.7 10.8 83.6-22.6 107.8z"]
    };
    exports.faDumpsterFire = faDumpsterFire;
    var faDungeon = {
      prefix: 'fas',
      iconName: 'dungeon',
      icon: [512, 512, [], "f6d9", "M128.73 195.32l-82.81-51.76c-8.04-5.02-18.99-2.17-22.93 6.45A254.19 254.19 0 0 0 .54 239.28C-.05 248.37 7.59 256 16.69 256h97.13c7.96 0 14.08-6.25 15.01-14.16 1.09-9.33 3.24-18.33 6.24-26.94 2.56-7.34.25-15.46-6.34-19.58zM319.03 8C298.86 2.82 277.77 0 256 0s-42.86 2.82-63.03 8c-9.17 2.35-13.91 12.6-10.39 21.39l37.47 104.03A16.003 16.003 0 0 0 235.1 144h41.8c6.75 0 12.77-4.23 15.05-10.58l37.47-104.03c3.52-8.79-1.22-19.03-10.39-21.39zM112 288H16c-8.84 0-16 7.16-16 16v64c0 8.84 7.16 16 16 16h96c8.84 0 16-7.16 16-16v-64c0-8.84-7.16-16-16-16zm0 128H16c-8.84 0-16 7.16-16 16v64c0 8.84 7.16 16 16 16h96c8.84 0 16-7.16 16-16v-64c0-8.84-7.16-16-16-16zm77.31-283.67l-36.32-90.8c-3.53-8.83-14.13-12.99-22.42-8.31a257.308 257.308 0 0 0-71.61 59.89c-6.06 7.32-3.85 18.48 4.22 23.52l82.93 51.83c6.51 4.07 14.66 2.62 20.11-2.79 5.18-5.15 10.79-9.85 16.79-14.05 6.28-4.41 9.15-12.17 6.3-19.29zM398.18 256h97.13c9.1 0 16.74-7.63 16.15-16.72a254.135 254.135 0 0 0-22.45-89.27c-3.94-8.62-14.89-11.47-22.93-6.45l-82.81 51.76c-6.59 4.12-8.9 12.24-6.34 19.58 3.01 8.61 5.15 17.62 6.24 26.94.93 7.91 7.05 14.16 15.01 14.16zm54.85-162.89a257.308 257.308 0 0 0-71.61-59.89c-8.28-4.68-18.88-.52-22.42 8.31l-36.32 90.8c-2.85 7.12.02 14.88 6.3 19.28 6 4.2 11.61 8.9 16.79 14.05 5.44 5.41 13.6 6.86 20.11 2.79l82.93-51.83c8.07-5.03 10.29-16.19 4.22-23.51zM496 288h-96c-8.84 0-16 7.16-16 16v64c0 8.84 7.16 16 16 16h96c8.84 0 16-7.16 16-16v-64c0-8.84-7.16-16-16-16zm0 128h-96c-8.84 0-16 7.16-16 16v64c0 8.84 7.16 16 16 16h96c8.84 0 16-7.16 16-16v-64c0-8.84-7.16-16-16-16zM240 177.62V472c0 4.42 3.58 8 8 8h16c4.42 0 8-3.58 8-8V177.62c-5.23-.89-10.52-1.62-16-1.62s-10.77.73-16 1.62zm-64 41.51V472c0 4.42 3.58 8 8 8h16c4.42 0 8-3.58 8-8V189.36c-12.78 7.45-23.84 17.47-32 29.77zm128-29.77V472c0 4.42 3.58 8 8 8h16c4.42 0 8-3.58 8-8V219.13c-8.16-12.3-19.22-22.32-32-29.77z"]
    };
    exports.faDungeon = faDungeon;
    var faEdit = {
      prefix: 'fas',
      iconName: 'edit',
      icon: [576, 512, [], "f044", "M402.6 83.2l90.2 90.2c3.8 3.8 3.8 10 0 13.8L274.4 405.6l-92.8 10.3c-12.4 1.4-22.9-9.1-21.5-21.5l10.3-92.8L388.8 83.2c3.8-3.8 10-3.8 13.8 0zm162-22.9l-48.8-48.8c-15.2-15.2-39.9-15.2-55.2 0l-35.4 35.4c-3.8 3.8-3.8 10 0 13.8l90.2 90.2c3.8 3.8 10 3.8 13.8 0l35.4-35.4c15.2-15.3 15.2-40 0-55.2zM384 346.2V448H64V128h229.8c3.2 0 6.2-1.3 8.5-3.5l40-40c7.6-7.6 2.2-20.5-8.5-20.5H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V306.2c0-10.7-12.9-16-20.5-8.5l-40 40c-2.2 2.3-3.5 5.3-3.5 8.5z"]
    };
    exports.faEdit = faEdit;
    var faEgg = {
      prefix: 'fas',
      iconName: 'egg',
      icon: [384, 512, [], "f7fb", "M192 0C86 0 0 214 0 320s86 192 192 192 192-86 192-192S298 0 192 0z"]
    };
    exports.faEgg = faEgg;
    var faEject = {
      prefix: 'fas',
      iconName: 'eject',
      icon: [448, 512, [], "f052", "M448 384v64c0 17.673-14.327 32-32 32H32c-17.673 0-32-14.327-32-32v-64c0-17.673 14.327-32 32-32h384c17.673 0 32 14.327 32 32zM48.053 320h351.886c41.651 0 63.581-49.674 35.383-80.435L259.383 47.558c-19.014-20.743-51.751-20.744-70.767 0L12.67 239.565C-15.475 270.268 6.324 320 48.053 320z"]
    };
    exports.faEject = faEject;
    var faEllipsisH = {
      prefix: 'fas',
      iconName: 'ellipsis-h',
      icon: [512, 512, [], "f141", "M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"]
    };
    exports.faEllipsisH = faEllipsisH;
    var faEllipsisV = {
      prefix: 'fas',
      iconName: 'ellipsis-v',
      icon: [192, 512, [], "f142", "M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"]
    };
    exports.faEllipsisV = faEllipsisV;
    var faEnvelope = {
      prefix: 'fas',
      iconName: 'envelope',
      icon: [512, 512, [], "f0e0", "M502.3 190.8c3.9-3.1 9.7-.2 9.7 4.7V400c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V195.6c0-5 5.7-7.8 9.7-4.7 22.4 17.4 52.1 39.5 154.1 113.6 21.1 15.4 56.7 47.8 92.2 47.6 35.7.3 72-32.8 92.3-47.6 102-74.1 131.6-96.3 154-113.7zM256 320c23.2.4 56.6-29.2 73.4-41.4 132.7-96.3 142.8-104.7 173.4-128.7 5.8-4.5 9.2-11.5 9.2-18.9v-19c0-26.5-21.5-48-48-48H48C21.5 64 0 85.5 0 112v19c0 7.4 3.4 14.3 9.2 18.9 30.6 23.9 40.7 32.4 173.4 128.7 16.8 12.2 50.2 41.8 73.4 41.4z"]
    };
    exports.faEnvelope = faEnvelope;
    var faEnvelopeOpen = {
      prefix: 'fas',
      iconName: 'envelope-open',
      icon: [512, 512, [], "f2b6", "M512 464c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V200.724a48 48 0 0 1 18.387-37.776c24.913-19.529 45.501-35.365 164.2-121.511C199.412 29.17 232.797-.347 256 .003c23.198-.354 56.596 29.172 73.413 41.433 118.687 86.137 139.303 101.995 164.2 121.512A48 48 0 0 1 512 200.724V464zm-65.666-196.605c-2.563-3.728-7.7-4.595-11.339-1.907-22.845 16.873-55.462 40.705-105.582 77.079-16.825 12.266-50.21 41.781-73.413 41.43-23.211.344-56.559-29.143-73.413-41.43-50.114-36.37-82.734-60.204-105.582-77.079-3.639-2.688-8.776-1.821-11.339 1.907l-9.072 13.196a7.998 7.998 0 0 0 1.839 10.967c22.887 16.899 55.454 40.69 105.303 76.868 20.274 14.781 56.524 47.813 92.264 47.573 35.724.242 71.961-32.771 92.263-47.573 49.85-36.179 82.418-59.97 105.303-76.868a7.998 7.998 0 0 0 1.839-10.967l-9.071-13.196z"]
    };
    exports.faEnvelopeOpen = faEnvelopeOpen;
    var faEnvelopeOpenText = {
      prefix: 'fas',
      iconName: 'envelope-open-text',
      icon: [512, 512, [], "f658", "M176 216h160c8.84 0 16-7.16 16-16v-16c0-8.84-7.16-16-16-16H176c-8.84 0-16 7.16-16 16v16c0 8.84 7.16 16 16 16zm-16 80c0 8.84 7.16 16 16 16h160c8.84 0 16-7.16 16-16v-16c0-8.84-7.16-16-16-16H176c-8.84 0-16 7.16-16 16v16zm96 121.13c-16.42 0-32.84-5.06-46.86-15.19L0 250.86V464c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V250.86L302.86 401.94c-14.02 10.12-30.44 15.19-46.86 15.19zm237.61-254.18c-8.85-6.94-17.24-13.47-29.61-22.81V96c0-26.51-21.49-48-48-48h-77.55c-3.04-2.2-5.87-4.26-9.04-6.56C312.6 29.17 279.2-.35 256 0c-23.2-.35-56.59 29.17-73.41 41.44-3.17 2.3-6 4.36-9.04 6.56H96c-26.51 0-48 21.49-48 48v44.14c-12.37 9.33-20.76 15.87-29.61 22.81A47.995 47.995 0 0 0 0 200.72v10.65l96 69.35V96h320v184.72l96-69.35v-10.65c0-14.74-6.78-28.67-18.39-37.77z"]
    };
    exports.faEnvelopeOpenText = faEnvelopeOpenText;
    var faEnvelopeSquare = {
      prefix: 'fas',
      iconName: 'envelope-square',
      icon: [448, 512, [], "f199", "M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM178.117 262.104C87.429 196.287 88.353 196.121 64 177.167V152c0-13.255 10.745-24 24-24h272c13.255 0 24 10.745 24 24v25.167c-24.371 18.969-23.434 19.124-114.117 84.938-10.5 7.655-31.392 26.12-45.883 25.894-14.503.218-35.367-18.227-45.883-25.895zM384 217.775V360c0 13.255-10.745 24-24 24H88c-13.255 0-24-10.745-24-24V217.775c13.958 10.794 33.329 25.236 95.303 70.214 14.162 10.341 37.975 32.145 64.694 32.01 26.887.134 51.037-22.041 64.72-32.025 61.958-44.965 81.325-59.406 95.283-70.199z"]
    };
    exports.faEnvelopeSquare = faEnvelopeSquare;
    var faEquals = {
      prefix: 'fas',
      iconName: 'equals',
      icon: [448, 512, [], "f52c", "M416 304H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32zm0-192H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"]
    };
    exports.faEquals = faEquals;
    var faEraser = {
      prefix: 'fas',
      iconName: 'eraser',
      icon: [512, 512, [], "f12d", "M497.941 273.941c18.745-18.745 18.745-49.137 0-67.882l-160-160c-18.745-18.745-49.136-18.746-67.883 0l-256 256c-18.745 18.745-18.745 49.137 0 67.882l96 96A48.004 48.004 0 0 0 144 480h356c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12H355.883l142.058-142.059zm-302.627-62.627l137.373 137.373L265.373 416H150.628l-80-80 124.686-124.686z"]
    };
    exports.faEraser = faEraser;
    var faEthernet = {
      prefix: 'fas',
      iconName: 'ethernet',
      icon: [512, 512, [], "f796", "M496 192h-48v-48c0-8.8-7.2-16-16-16h-48V80c0-8.8-7.2-16-16-16H144c-8.8 0-16 7.2-16 16v48H80c-8.8 0-16 7.2-16 16v48H16c-8.8 0-16 7.2-16 16v224c0 8.8 7.2 16 16 16h80V320h32v128h64V320h32v128h64V320h32v128h64V320h32v128h80c8.8 0 16-7.2 16-16V208c0-8.8-7.2-16-16-16z"]
    };
    exports.faEthernet = faEthernet;
    var faEuroSign = {
      prefix: 'fas',
      iconName: 'euro-sign',
      icon: [320, 512, [], "f153", "M310.706 413.765c-1.314-6.63-7.835-10.872-14.424-9.369-10.692 2.439-27.422 5.413-45.426 5.413-56.763 0-101.929-34.79-121.461-85.449h113.689a12 12 0 0 0 11.708-9.369l6.373-28.36c1.686-7.502-4.019-14.631-11.708-14.631H115.22c-1.21-14.328-1.414-28.287.137-42.245H261.95a12 12 0 0 0 11.723-9.434l6.512-29.755c1.638-7.484-4.061-14.566-11.723-14.566H130.184c20.633-44.991 62.69-75.03 117.619-75.03 14.486 0 28.564 2.25 37.851 4.145 6.216 1.268 12.347-2.498 14.002-8.623l11.991-44.368c1.822-6.741-2.465-13.616-9.326-14.917C290.217 34.912 270.71 32 249.635 32 152.451 32 74.03 92.252 45.075 176H12c-6.627 0-12 5.373-12 12v29.755c0 6.627 5.373 12 12 12h21.569c-1.009 13.607-1.181 29.287-.181 42.245H12c-6.627 0-12 5.373-12 12v28.36c0 6.627 5.373 12 12 12h30.114C67.139 414.692 145.264 480 249.635 480c26.301 0 48.562-4.544 61.101-7.788 6.167-1.595 10.027-7.708 8.788-13.957l-8.818-44.49z"]
    };
    exports.faEuroSign = faEuroSign;
    var faExchangeAlt = {
      prefix: 'fas',
      iconName: 'exchange-alt',
      icon: [512, 512, [], "f362", "M0 168v-16c0-13.255 10.745-24 24-24h360V80c0-21.367 25.899-32.042 40.971-16.971l80 80c9.372 9.373 9.372 24.569 0 33.941l-80 80C409.956 271.982 384 261.456 384 240v-48H24c-13.255 0-24-10.745-24-24zm488 152H128v-48c0-21.314-25.862-32.08-40.971-16.971l-80 80c-9.372 9.373-9.372 24.569 0 33.941l80 80C102.057 463.997 128 453.437 128 432v-48h360c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24z"]
    };
    exports.faExchangeAlt = faExchangeAlt;
    var faExclamation = {
      prefix: 'fas',
      iconName: 'exclamation',
      icon: [192, 512, [], "f12a", "M176 432c0 44.112-35.888 80-80 80s-80-35.888-80-80 35.888-80 80-80 80 35.888 80 80zM25.26 25.199l13.6 272C39.499 309.972 50.041 320 62.83 320h66.34c12.789 0 23.331-10.028 23.97-22.801l13.6-272C167.425 11.49 156.496 0 142.77 0H49.23C35.504 0 24.575 11.49 25.26 25.199z"]
    };
    exports.faExclamation = faExclamation;
    var faExclamationCircle = {
      prefix: 'fas',
      iconName: 'exclamation-circle',
      icon: [512, 512, [], "f06a", "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"]
    };
    exports.faExclamationCircle = faExclamationCircle;
    var faExclamationTriangle = {
      prefix: 'fas',
      iconName: 'exclamation-triangle',
      icon: [576, 512, [], "f071", "M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"]
    };
    exports.faExclamationTriangle = faExclamationTriangle;
    var faExpand = {
      prefix: 'fas',
      iconName: 'expand',
      icon: [448, 512, [], "f065", "M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z"]
    };
    exports.faExpand = faExpand;
    var faExpandAlt = {
      prefix: 'fas',
      iconName: 'expand-alt',
      icon: [448, 512, [], "f424", "M212.686 315.314L120 408l32.922 31.029c15.12 15.12 4.412 40.971-16.97 40.971h-112C10.697 480 0 469.255 0 456V344c0-21.382 25.803-32.09 40.922-16.971L72 360l92.686-92.686c6.248-6.248 16.379-6.248 22.627 0l25.373 25.373c6.249 6.248 6.249 16.378 0 22.627zm22.628-118.628L328 104l-32.922-31.029C279.958 57.851 290.666 32 312.048 32h112C437.303 32 448 42.745 448 56v112c0 21.382-25.803 32.09-40.922 16.971L376 152l-92.686 92.686c-6.248 6.248-16.379 6.248-22.627 0l-25.373-25.373c-6.249-6.248-6.249-16.378 0-22.627z"]
    };
    exports.faExpandAlt = faExpandAlt;
    var faExpandArrowsAlt = {
      prefix: 'fas',
      iconName: 'expand-arrows-alt',
      icon: [448, 512, [], "f31e", "M448 344v112a23.94 23.94 0 0 1-24 24H312c-21.39 0-32.09-25.9-17-41l36.2-36.2L224 295.6 116.77 402.9 153 439c15.09 15.1 4.39 41-17 41H24a23.94 23.94 0 0 1-24-24V344c0-21.4 25.89-32.1 41-17l36.19 36.2L184.46 256 77.18 148.7 41 185c-15.1 15.1-41 4.4-41-17V56a23.94 23.94 0 0 1 24-24h112c21.39 0 32.09 25.9 17 41l-36.2 36.2L224 216.4l107.23-107.3L295 73c-15.09-15.1-4.39-41 17-41h112a23.94 23.94 0 0 1 24 24v112c0 21.4-25.89 32.1-41 17l-36.19-36.2L263.54 256l107.28 107.3L407 327.1c15.1-15.2 41-4.5 41 16.9z"]
    };
    exports.faExpandArrowsAlt = faExpandArrowsAlt;
    var faExternalLinkAlt = {
      prefix: 'fas',
      iconName: 'external-link-alt',
      icon: [512, 512, [], "f35d", "M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z"]
    };
    exports.faExternalLinkAlt = faExternalLinkAlt;
    var faExternalLinkSquareAlt = {
      prefix: 'fas',
      iconName: 'external-link-square-alt',
      icon: [448, 512, [], "f360", "M448 80v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48zm-88 16H248.029c-21.313 0-32.08 25.861-16.971 40.971l31.984 31.987L67.515 364.485c-4.686 4.686-4.686 12.284 0 16.971l31.029 31.029c4.687 4.686 12.285 4.686 16.971 0l195.526-195.526 31.988 31.991C358.058 263.977 384 253.425 384 231.979V120c0-13.255-10.745-24-24-24z"]
    };
    exports.faExternalLinkSquareAlt = faExternalLinkSquareAlt;
    var faEye = {
      prefix: 'fas',
      iconName: 'eye',
      icon: [576, 512, [], "f06e", "M572.52 241.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400a144 144 0 1 1 144-144 143.93 143.93 0 0 1-144 144zm0-240a95.31 95.31 0 0 0-25.31 3.79 47.85 47.85 0 0 1-66.9 66.9A95.78 95.78 0 1 0 288 160z"]
    };
    exports.faEye = faEye;
    var faEyeDropper = {
      prefix: 'fas',
      iconName: 'eye-dropper',
      icon: [512, 512, [], "f1fb", "M50.75 333.25c-12 12-18.75 28.28-18.75 45.26V424L0 480l32 32 56-32h45.49c16.97 0 33.25-6.74 45.25-18.74l126.64-126.62-128-128L50.75 333.25zM483.88 28.12c-37.47-37.5-98.28-37.5-135.75 0l-77.09 77.09-13.1-13.1c-9.44-9.44-24.65-9.31-33.94 0l-40.97 40.97c-9.37 9.37-9.37 24.57 0 33.94l161.94 161.94c9.44 9.44 24.65 9.31 33.94 0L419.88 288c9.37-9.37 9.37-24.57 0-33.94l-13.1-13.1 77.09-77.09c37.51-37.48 37.51-98.26.01-135.75z"]
    };
    exports.faEyeDropper = faEyeDropper;
    var faEyeSlash = {
      prefix: 'fas',
      iconName: 'eye-slash',
      icon: [640, 512, [], "f070", "M320 400c-75.85 0-137.25-58.71-142.9-133.11L72.2 185.82c-13.79 17.3-26.48 35.59-36.72 55.59a32.35 32.35 0 0 0 0 29.19C89.71 376.41 197.07 448 320 448c26.91 0 52.87-4 77.89-10.46L346 397.39a144.13 144.13 0 0 1-26 2.61zm313.82 58.1l-110.55-85.44a331.25 331.25 0 0 0 81.25-102.07 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64a308.15 308.15 0 0 0-147.32 37.7L45.46 3.37A16 16 0 0 0 23 6.18L3.37 31.45A16 16 0 0 0 6.18 53.9l588.36 454.73a16 16 0 0 0 22.46-2.81l19.64-25.27a16 16 0 0 0-2.82-22.45zm-183.72-142l-39.3-30.38A94.75 94.75 0 0 0 416 256a94.76 94.76 0 0 0-121.31-92.21A47.65 47.65 0 0 1 304 192a46.64 46.64 0 0 1-1.54 10l-73.61-56.89A142.31 142.31 0 0 1 320 112a143.92 143.92 0 0 1 144 144c0 21.63-5.29 41.79-13.9 60.11z"]
    };
    exports.faEyeSlash = faEyeSlash;
    var faFan = {
      prefix: 'fas',
      iconName: 'fan',
      icon: [512, 512, [], "f863", "M352.57 128c-28.09 0-54.09 4.52-77.06 12.86l12.41-123.11C289 7.31 279.81-1.18 269.33.13 189.63 10.13 128 77.64 128 159.43c0 28.09 4.52 54.09 12.86 77.06L17.75 224.08C7.31 223-1.18 232.19.13 242.67c10 79.7 77.51 141.33 159.3 141.33 28.09 0 54.09-4.52 77.06-12.86l-12.41 123.11c-1.05 10.43 8.11 18.93 18.59 17.62 79.7-10 141.33-77.51 141.33-159.3 0-28.09-4.52-54.09-12.86-77.06l123.11 12.41c10.44 1.05 18.93-8.11 17.62-18.59-10-79.7-77.51-141.33-159.3-141.33zM256 288a32 32 0 1 1 32-32 32 32 0 0 1-32 32z"]
    };
    exports.faFan = faFan;
    var faFastBackward = {
      prefix: 'fas',
      iconName: 'fast-backward',
      icon: [512, 512, [], "f049", "M0 436V76c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v151.9L235.5 71.4C256.1 54.3 288 68.6 288 96v131.9L459.5 71.4C480.1 54.3 512 68.6 512 96v320c0 27.4-31.9 41.7-52.5 24.6L288 285.3V416c0 27.4-31.9 41.7-52.5 24.6L64 285.3V436c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12z"]
    };
    exports.faFastBackward = faFastBackward;
    var faFastForward = {
      prefix: 'fas',
      iconName: 'fast-forward',
      icon: [512, 512, [], "f050", "M512 76v360c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12V284.1L276.5 440.6c-20.6 17.2-52.5 2.8-52.5-24.6V284.1L52.5 440.6C31.9 457.8 0 443.4 0 416V96c0-27.4 31.9-41.7 52.5-24.6L224 226.8V96c0-27.4 31.9-41.7 52.5-24.6L448 226.8V76c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12z"]
    };
    exports.faFastForward = faFastForward;
    var faFaucet = {
      prefix: 'fas',
      iconName: 'faucet',
      icon: [512, 512, [], "e005", "M352,256H313.39c-15.71-13.44-35.46-23.07-57.39-28V180.44l-32-3.38-32,3.38V228c-21.93,5-41.68,14.6-57.39,28H16A16,16,0,0,0,0,272v96a16,16,0,0,0,16,16h92.79C129.38,421.73,173,448,224,448s94.62-26.27,115.21-64H352a32,32,0,0,1,32,32,32,32,0,0,0,32,32h64a32,32,0,0,0,32-32A160,160,0,0,0,352,256ZM81.59,159.91l142.41-15,142.41,15c9.42,1,17.59-6.81,17.59-16.8V112.89c0-10-8.17-17.8-17.59-16.81L256,107.74V80a16,16,0,0,0-16-16H208a16,16,0,0,0-16,16v27.74L81.59,96.08C72.17,95.09,64,102.9,64,112.89v30.22C64,153.1,72.17,160.91,81.59,159.91Z"]
    };
    exports.faFaucet = faFaucet;
    var faFax = {
      prefix: 'fas',
      iconName: 'fax',
      icon: [512, 512, [], "f1ac", "M480 160V77.25a32 32 0 0 0-9.38-22.63L425.37 9.37A32 32 0 0 0 402.75 0H160a32 32 0 0 0-32 32v448a32 32 0 0 0 32 32h320a32 32 0 0 0 32-32V192a32 32 0 0 0-32-32zM288 432a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32a16 16 0 0 1 16 16zm0-128a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32a16 16 0 0 1 16 16zm128 128a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32a16 16 0 0 1 16 16zm0-128a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32a16 16 0 0 1 16 16zm0-112H192V64h160v48a16 16 0 0 0 16 16h48zM64 128H32a32 32 0 0 0-32 32v320a32 32 0 0 0 32 32h32a32 32 0 0 0 32-32V160a32 32 0 0 0-32-32z"]
    };
    exports.faFax = faFax;
    var faFeather = {
      prefix: 'fas',
      iconName: 'feather',
      icon: [512, 512, [], "f52d", "M467.14 44.84c-62.55-62.48-161.67-64.78-252.28 25.73-78.61 78.52-60.98 60.92-85.75 85.66-60.46 60.39-70.39 150.83-63.64 211.17l178.44-178.25c6.26-6.25 16.4-6.25 22.65 0s6.25 16.38 0 22.63L7.04 471.03c-9.38 9.37-9.38 24.57 0 33.94 9.38 9.37 24.6 9.37 33.98 0l66.1-66.03C159.42 454.65 279 457.11 353.95 384h-98.19l147.57-49.14c49.99-49.93 36.38-36.18 46.31-46.86h-97.78l131.54-43.8c45.44-74.46 34.31-148.84-16.26-199.36z"]
    };
    exports.faFeather = faFeather;
    var faFeatherAlt = {
      prefix: 'fas',
      iconName: 'feather-alt',
      icon: [512, 512, [], "f56b", "M512 0C460.22 3.56 96.44 38.2 71.01 287.61c-3.09 26.66-4.84 53.44-5.99 80.24l178.87-178.69c6.25-6.25 16.4-6.25 22.65 0s6.25 16.38 0 22.63L7.04 471.03c-9.38 9.37-9.38 24.57 0 33.94 9.38 9.37 24.59 9.37 33.98 0l57.13-57.07c42.09-.14 84.15-2.53 125.96-7.36 53.48-5.44 97.02-26.47 132.58-56.54H255.74l146.79-48.88c11.25-14.89 21.37-30.71 30.45-47.12h-81.14l106.54-53.21C500.29 132.86 510.19 26.26 512 0z"]
    };
    exports.faFeatherAlt = faFeatherAlt;
    var faFemale = {
      prefix: 'fas',
      iconName: 'female',
      icon: [256, 512, [], "f182", "M128 0c35.346 0 64 28.654 64 64s-28.654 64-64 64c-35.346 0-64-28.654-64-64S92.654 0 128 0m119.283 354.179l-48-192A24 24 0 0 0 176 144h-11.36c-22.711 10.443-49.59 10.894-73.28 0H80a24 24 0 0 0-23.283 18.179l-48 192C4.935 369.305 16.383 384 32 384h56v104c0 13.255 10.745 24 24 24h32c13.255 0 24-10.745 24-24V384h56c15.591 0 27.071-14.671 23.283-29.821z"]
    };
    exports.faFemale = faFemale;
    var faFighterJet = {
      prefix: 'fas',
      iconName: 'fighter-jet',
      icon: [640, 512, [], "f0fb", "M544 224l-128-16-48-16h-24L227.158 44h39.509C278.333 44 288 41.375 288 38s-9.667-6-21.333-6H152v12h16v164h-48l-66.667-80H18.667L8 138.667V208h8v16h48v2.666l-64 8v42.667l64 8V288H16v16H8v69.333L18.667 384h34.667L120 304h48v164h-16v12h114.667c11.667 0 21.333-2.625 21.333-6s-9.667-6-21.333-6h-39.509L344 320h24l48-16 128-16c96-21.333 96-26.583 96-32 0-5.417 0-10.667-96-32z"]
    };
    exports.faFighterJet = faFighterJet;
    var faFile = {
      prefix: 'fas',
      iconName: 'file',
      icon: [384, 512, [], "f15b", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm160-14.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"]
    };
    exports.faFile = faFile;
    var faFileAlt = {
      prefix: 'fas',
      iconName: 'file-alt',
      icon: [384, 512, [], "f15c", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm64 236c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12v8zm0-64c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12v8zm0-72v8c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12zm96-114.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"]
    };
    exports.faFileAlt = faFileAlt;
    var faFileArchive = {
      prefix: 'fas',
      iconName: 'file-archive',
      icon: [384, 512, [], "f1c6", "M377 105L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9zM128.4 336c-17.9 0-32.4 12.1-32.4 27 0 15 14.6 27 32.5 27s32.4-12.1 32.4-27-14.6-27-32.5-27zM224 136V0h-63.6v32h-32V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zM95.9 32h32v32h-32zm32.3 384c-33.2 0-58-30.4-51.4-62.9L96.4 256v-32h32v-32h-32v-32h32v-32h-32V96h32V64h32v32h-32v32h32v32h-32v32h32v32h-32v32h22.1c5.7 0 10.7 4.1 11.8 9.7l17.3 87.7c6.4 32.4-18.4 62.6-51.4 62.6z"]
    };
    exports.faFileArchive = faFileArchive;
    var faFileAudio = {
      prefix: 'fas',
      iconName: 'file-audio',
      icon: [384, 512, [], "f1c7", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm-64 268c0 10.7-12.9 16-20.5 8.5L104 376H76c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h28l35.5-36.5c7.6-7.6 20.5-2.2 20.5 8.5v136zm33.2-47.6c9.1-9.3 9.1-24.1 0-33.4-22.1-22.8 12.2-56.2 34.4-33.5 27.2 27.9 27.2 72.4 0 100.4-21.8 22.3-56.9-10.4-34.4-33.5zm86-117.1c54.4 55.9 54.4 144.8 0 200.8-21.8 22.4-57-10.3-34.4-33.5 36.2-37.2 36.3-96.5 0-133.8-22.1-22.8 12.3-56.3 34.4-33.5zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"]
    };
    exports.faFileAudio = faFileAudio;
    var faFileCode = {
      prefix: 'fas',
      iconName: 'file-code',
      icon: [384, 512, [], "f1c9", "M384 121.941V128H256V0h6.059c6.365 0 12.47 2.529 16.971 7.029l97.941 97.941A24.005 24.005 0 0 1 384 121.941zM248 160c-13.2 0-24-10.8-24-24V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248zM123.206 400.505a5.4 5.4 0 0 1-7.633.246l-64.866-60.812a5.4 5.4 0 0 1 0-7.879l64.866-60.812a5.4 5.4 0 0 1 7.633.246l19.579 20.885a5.4 5.4 0 0 1-.372 7.747L101.65 336l40.763 35.874a5.4 5.4 0 0 1 .372 7.747l-19.579 20.884zm51.295 50.479l-27.453-7.97a5.402 5.402 0 0 1-3.681-6.692l61.44-211.626a5.402 5.402 0 0 1 6.692-3.681l27.452 7.97a5.4 5.4 0 0 1 3.68 6.692l-61.44 211.626a5.397 5.397 0 0 1-6.69 3.681zm160.792-111.045l-64.866 60.812a5.4 5.4 0 0 1-7.633-.246l-19.58-20.885a5.4 5.4 0 0 1 .372-7.747L284.35 336l-40.763-35.874a5.4 5.4 0 0 1-.372-7.747l19.58-20.885a5.4 5.4 0 0 1 7.633-.246l64.866 60.812a5.4 5.4 0 0 1-.001 7.879z"]
    };
    exports.faFileCode = faFileCode;
    var faFileContract = {
      prefix: 'fas',
      iconName: 'file-contract',
      icon: [384, 512, [], "f56c", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zM64 72c0-4.42 3.58-8 8-8h80c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8V72zm0 64c0-4.42 3.58-8 8-8h80c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8v-16zm192.81 248H304c8.84 0 16 7.16 16 16s-7.16 16-16 16h-47.19c-16.45 0-31.27-9.14-38.64-23.86-2.95-5.92-8.09-6.52-10.17-6.52s-7.22.59-10.02 6.19l-7.67 15.34a15.986 15.986 0 0 1-14.31 8.84c-.38 0-.75-.02-1.14-.05-6.45-.45-12-4.75-14.03-10.89L144 354.59l-10.61 31.88c-5.89 17.66-22.38 29.53-41 29.53H80c-8.84 0-16-7.16-16-16s7.16-16 16-16h12.39c4.83 0 9.11-3.08 10.64-7.66l18.19-54.64c3.3-9.81 12.44-16.41 22.78-16.41s19.48 6.59 22.77 16.41l13.88 41.64c19.77-16.19 54.05-9.7 66 14.16 2.02 4.06 5.96 6.5 10.16 6.5zM377 105L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9z"]
    };
    exports.faFileContract = faFileContract;
    var faFileCsv = {
      prefix: 'fas',
      iconName: 'file-csv',
      icon: [384, 512, [], "f6dd", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm-96 144c0 4.42-3.58 8-8 8h-8c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h8c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8h-8c-26.51 0-48-21.49-48-48v-32c0-26.51 21.49-48 48-48h8c4.42 0 8 3.58 8 8v16zm44.27 104H160c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h12.27c5.95 0 10.41-3.5 10.41-6.62 0-1.3-.75-2.66-2.12-3.84l-21.89-18.77c-8.47-7.22-13.33-17.48-13.33-28.14 0-21.3 19.02-38.62 42.41-38.62H200c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8h-12.27c-5.95 0-10.41 3.5-10.41 6.62 0 1.3.75 2.66 2.12 3.84l21.89 18.77c8.47 7.22 13.33 17.48 13.33 28.14.01 21.29-19 38.62-42.39 38.62zM256 264v20.8c0 20.27 5.7 40.17 16 56.88 10.3-16.7 16-36.61 16-56.88V264c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v20.8c0 35.48-12.88 68.89-36.28 94.09-3.02 3.25-7.27 5.11-11.72 5.11s-8.7-1.86-11.72-5.11c-23.4-25.2-36.28-58.61-36.28-94.09V264c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8zm121-159L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9z"]
    };
    exports.faFileCsv = faFileCsv;
    var faFileDownload = {
      prefix: 'fas',
      iconName: 'file-download',
      icon: [384, 512, [], "f56d", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm76.45 211.36l-96.42 95.7c-6.65 6.61-17.39 6.61-24.04 0l-96.42-95.7C73.42 337.29 80.54 320 94.82 320H160v-80c0-8.84 7.16-16 16-16h32c8.84 0 16 7.16 16 16v80h65.18c14.28 0 21.4 17.29 11.27 27.36zM377 105L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9z"]
    };
    exports.faFileDownload = faFileDownload;
    var faFileExcel = {
      prefix: 'fas',
      iconName: 'file-excel',
      icon: [384, 512, [], "f1c3", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm60.1 106.5L224 336l60.1 93.5c5.1 8-.6 18.5-10.1 18.5h-34.9c-4.4 0-8.5-2.4-10.6-6.3C208.9 405.5 192 373 192 373c-6.4 14.8-10 20-36.6 68.8-2.1 3.9-6.1 6.3-10.5 6.3H110c-9.5 0-15.2-10.5-10.1-18.5l60.3-93.5-60.3-93.5c-5.2-8 .6-18.5 10.1-18.5h34.8c4.4 0 8.5 2.4 10.6 6.3 26.1 48.8 20 33.6 36.6 68.5 0 0 6.1-11.7 36.6-68.5 2.1-3.9 6.2-6.3 10.6-6.3H274c9.5-.1 15.2 10.4 10.1 18.4zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"]
    };
    exports.faFileExcel = faFileExcel;
    var faFileExport = {
      prefix: 'fas',
      iconName: 'file-export',
      icon: [576, 512, [], "f56e", "M384 121.9c0-6.3-2.5-12.4-7-16.9L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128zM571 308l-95.7-96.4c-10.1-10.1-27.4-3-27.4 11.3V288h-64v64h64v65.2c0 14.3 17.3 21.4 27.4 11.3L571 332c6.6-6.6 6.6-17.4 0-24zm-379 28v-32c0-8.8 7.2-16 16-16h176V160H248c-13.2 0-24-10.8-24-24V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V352H208c-8.8 0-16-7.2-16-16z"]
    };
    exports.faFileExport = faFileExport;
    var faFileImage = {
      prefix: 'fas',
      iconName: 'file-image',
      icon: [384, 512, [], "f1c5", "M384 121.941V128H256V0h6.059a24 24 0 0 1 16.97 7.029l97.941 97.941a24.002 24.002 0 0 1 7.03 16.971zM248 160c-13.2 0-24-10.8-24-24V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248zm-135.455 16c26.51 0 48 21.49 48 48s-21.49 48-48 48-48-21.49-48-48 21.491-48 48-48zm208 240h-256l.485-48.485L104.545 328c4.686-4.686 11.799-4.201 16.485.485L160.545 368 264.06 264.485c4.686-4.686 12.284-4.686 16.971 0L320.545 304v112z"]
    };
    exports.faFileImage = faFileImage;
    var faFileImport = {
      prefix: 'fas',
      iconName: 'file-import',
      icon: [512, 512, [], "f56f", "M16 288c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h112v-64zm489-183L407.1 7c-4.5-4.5-10.6-7-17-7H384v128h128v-6.1c0-6.3-2.5-12.4-7-16.9zm-153 31V0H152c-13.3 0-24 10.7-24 24v264h128v-65.2c0-14.3 17.3-21.4 27.4-11.3L379 308c6.6 6.7 6.6 17.4 0 24l-95.7 96.4c-10.1 10.1-27.4 3-27.4-11.3V352H128v136c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H376c-13.2 0-24-10.8-24-24z"]
    };
    exports.faFileImport = faFileImport;
    var faFileInvoice = {
      prefix: 'fas',
      iconName: 'file-invoice',
      icon: [384, 512, [], "f570", "M288 256H96v64h192v-64zm89-151L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9zm-153 31V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zM64 72c0-4.42 3.58-8 8-8h80c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8V72zm0 64c0-4.42 3.58-8 8-8h80c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8v-16zm256 304c0 4.42-3.58 8-8 8h-80c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h80c4.42 0 8 3.58 8 8v16zm0-200v96c0 8.84-7.16 16-16 16H80c-8.84 0-16-7.16-16-16v-96c0-8.84 7.16-16 16-16h224c8.84 0 16 7.16 16 16z"]
    };
    exports.faFileInvoice = faFileInvoice;
    var faFileInvoiceDollar = {
      prefix: 'fas',
      iconName: 'file-invoice-dollar',
      icon: [384, 512, [], "f571", "M377 105L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9zm-153 31V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zM64 72c0-4.42 3.58-8 8-8h80c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8V72zm0 80v-16c0-4.42 3.58-8 8-8h80c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8zm144 263.88V440c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8v-24.29c-11.29-.58-22.27-4.52-31.37-11.35-3.9-2.93-4.1-8.77-.57-12.14l11.75-11.21c2.77-2.64 6.89-2.76 10.13-.73 3.87 2.42 8.26 3.72 12.82 3.72h28.11c6.5 0 11.8-5.92 11.8-13.19 0-5.95-3.61-11.19-8.77-12.73l-45-13.5c-18.59-5.58-31.58-23.42-31.58-43.39 0-24.52 19.05-44.44 42.67-45.07V232c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v24.29c11.29.58 22.27 4.51 31.37 11.35 3.9 2.93 4.1 8.77.57 12.14l-11.75 11.21c-2.77 2.64-6.89 2.76-10.13.73-3.87-2.43-8.26-3.72-12.82-3.72h-28.11c-6.5 0-11.8 5.92-11.8 13.19 0 5.95 3.61 11.19 8.77 12.73l45 13.5c18.59 5.58 31.58 23.42 31.58 43.39 0 24.53-19.05 44.44-42.67 45.07z"]
    };
    exports.faFileInvoiceDollar = faFileInvoiceDollar;
    var faFileMedical = {
      prefix: 'fas',
      iconName: 'file-medical',
      icon: [384, 512, [], "f477", "M377 105L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9zm-153 31V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm64 160v48c0 4.4-3.6 8-8 8h-56v56c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-56h-56c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h56v-56c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v56h56c4.4 0 8 3.6 8 8z"]
    };
    exports.faFileMedical = faFileMedical;
    var faFileMedicalAlt = {
      prefix: 'fas',
      iconName: 'file-medical-alt',
      icon: [448, 512, [], "f478", "M288 136V0H88C74.7 0 64 10.7 64 24v232H8c-4.4 0-8 3.6-8 8v16c0 4.4 3.6 8 8 8h140.9c3 0 5.8 1.7 7.2 4.4l19.9 39.8 56.8-113.7c2.9-5.9 11.4-5.9 14.3 0l34.7 69.5H352c8.8 0 16 7.2 16 16s-7.2 16-16 16h-89.9L240 275.8l-56.8 113.7c-2.9 5.9-11.4 5.9-14.3 0L134.1 320H64v168c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H312c-13.2 0-24-10.8-24-24zm153-31L343.1 7c-4.5-4.5-10.6-7-17-7H320v128h128v-6.1c0-6.3-2.5-12.4-7-16.9z"]
    };
    exports.faFileMedicalAlt = faFileMedicalAlt;
    var faFilePdf = {
      prefix: 'fas',
      iconName: 'file-pdf',
      icon: [384, 512, [], "f1c1", "M181.9 256.1c-5-16-4.9-46.9-2-46.9 8.4 0 7.6 36.9 2 46.9zm-1.7 47.2c-7.7 20.2-17.3 43.3-28.4 62.7 18.3-7 39-17.2 62.9-21.9-12.7-9.6-24.9-23.4-34.5-40.8zM86.1 428.1c0 .8 13.2-5.4 34.9-40.2-6.7 6.3-29.1 24.5-34.9 40.2zM248 160h136v328c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V24C0 10.7 10.7 0 24 0h200v136c0 13.2 10.8 24 24 24zm-8 171.8c-20-12.2-33.3-29-42.7-53.8 4.5-18.5 11.6-46.6 6.2-64.2-4.7-29.4-42.4-26.5-47.8-6.8-5 18.3-.4 44.1 8.1 77-11.6 27.6-28.7 64.6-40.8 85.8-.1 0-.1.1-.2.1-27.1 13.9-73.6 44.5-54.5 68 5.6 6.9 16 10 21.5 10 17.9 0 35.7-18 61.1-61.8 25.8-8.5 54.1-19.1 79-23.2 21.7 11.8 47.1 19.5 64 19.5 29.2 0 31.2-32 19.7-43.4-13.9-13.6-54.3-9.7-73.6-7.2zM377 105L279 7c-4.5-4.5-10.6-7-17-7h-6v128h128v-6.1c0-6.3-2.5-12.4-7-16.9zm-74.1 255.3c4.1-2.7-2.5-11.9-42.8-9 37.1 15.8 42.8 9 42.8 9z"]
    };
    exports.faFilePdf = faFilePdf;
    var faFilePowerpoint = {
      prefix: 'fas',
      iconName: 'file-powerpoint',
      icon: [384, 512, [], "f1c4", "M193.7 271.2c8.8 0 15.5 2.7 20.3 8.1 9.6 10.9 9.8 32.7-.2 44.1-4.9 5.6-11.9 8.5-21.1 8.5h-26.9v-60.7h27.9zM377 105L279 7c-4.5-4.5-10.6-7-17-7h-6v128h128v-6.1c0-6.3-2.5-12.4-7-16.9zm-153 31V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm53 165.2c0 90.3-88.8 77.6-111.1 77.6V436c0 6.6-5.4 12-12 12h-30.8c-6.6 0-12-5.4-12-12V236.2c0-6.6 5.4-12 12-12h81c44.5 0 72.9 32.8 72.9 77z"]
    };
    exports.faFilePowerpoint = faFilePowerpoint;
    var faFilePrescription = {
      prefix: 'fas',
      iconName: 'file-prescription',
      icon: [384, 512, [], "f572", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm68.53 179.48l11.31 11.31c6.25 6.25 6.25 16.38 0 22.63l-29.9 29.9L304 409.38c6.25 6.25 6.25 16.38 0 22.63l-11.31 11.31c-6.25 6.25-16.38 6.25-22.63 0L240 413.25l-30.06 30.06c-6.25 6.25-16.38 6.25-22.63 0L176 432c-6.25-6.25-6.25-16.38 0-22.63l30.06-30.06L146.74 320H128v48c0 8.84-7.16 16-16 16H96c-8.84 0-16-7.16-16-16V208c0-8.84 7.16-16 16-16h80c35.35 0 64 28.65 64 64 0 24.22-13.62 45.05-33.46 55.92L240 345.38l29.9-29.9c6.25-6.25 16.38-6.25 22.63 0zM176 272h-48v-32h48c8.82 0 16 7.18 16 16s-7.18 16-16 16zm208-150.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"]
    };
    exports.faFilePrescription = faFilePrescription;
    var faFileSignature = {
      prefix: 'fas',
      iconName: 'file-signature',
      icon: [576, 512, [], "f573", "M218.17 424.14c-2.95-5.92-8.09-6.52-10.17-6.52s-7.22.59-10.02 6.19l-7.67 15.34c-6.37 12.78-25.03 11.37-29.48-2.09L144 386.59l-10.61 31.88c-5.89 17.66-22.38 29.53-41 29.53H80c-8.84 0-16-7.16-16-16s7.16-16 16-16h12.39c4.83 0 9.11-3.08 10.64-7.66l18.19-54.64c3.3-9.81 12.44-16.41 22.78-16.41s19.48 6.59 22.77 16.41l13.88 41.64c19.75-16.19 54.06-9.7 66 14.16 1.89 3.78 5.49 5.95 9.36 6.26v-82.12l128-127.09V160H248c-13.2 0-24-10.8-24-24V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24v-40l-128-.11c-16.12-.31-30.58-9.28-37.83-23.75zM384 121.9c0-6.3-2.5-12.4-7-16.9L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1zm-96 225.06V416h68.99l161.68-162.78-67.88-67.88L288 346.96zm280.54-179.63l-31.87-31.87c-9.94-9.94-26.07-9.94-36.01 0l-27.25 27.25 67.88 67.88 27.25-27.25c9.95-9.94 9.95-26.07 0-36.01z"]
    };
    exports.faFileSignature = faFileSignature;
    var faFileUpload = {
      prefix: 'fas',
      iconName: 'file-upload',
      icon: [384, 512, [], "f574", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm65.18 216.01H224v80c0 8.84-7.16 16-16 16h-32c-8.84 0-16-7.16-16-16v-80H94.82c-14.28 0-21.41-17.29-11.27-27.36l96.42-95.7c6.65-6.61 17.39-6.61 24.04 0l96.42 95.7c10.15 10.07 3.03 27.36-11.25 27.36zM377 105L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9z"]
    };
    exports.faFileUpload = faFileUpload;
    var faFileVideo = {
      prefix: 'fas',
      iconName: 'file-video',
      icon: [384, 512, [], "f1c8", "M384 121.941V128H256V0h6.059c6.365 0 12.47 2.529 16.971 7.029l97.941 97.941A24.005 24.005 0 0 1 384 121.941zM224 136V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248c-13.2 0-24-10.8-24-24zm96 144.016v111.963c0 21.445-25.943 31.998-40.971 16.971L224 353.941V392c0 13.255-10.745 24-24 24H88c-13.255 0-24-10.745-24-24V280c0-13.255 10.745-24 24-24h112c13.255 0 24 10.745 24 24v38.059l55.029-55.013c15.011-15.01 40.971-4.491 40.971 16.97z"]
    };
    exports.faFileVideo = faFileVideo;
    var faFileWord = {
      prefix: 'fas',
      iconName: 'file-word',
      icon: [384, 512, [], "f1c2", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm57.1 120H305c7.7 0 13.4 7.1 11.7 14.7l-38 168c-1.2 5.5-6.1 9.3-11.7 9.3h-38c-5.5 0-10.3-3.8-11.6-9.1-25.8-103.5-20.8-81.2-25.6-110.5h-.5c-1.1 14.3-2.4 17.4-25.6 110.5-1.3 5.3-6.1 9.1-11.6 9.1H117c-5.6 0-10.5-3.9-11.7-9.4l-37.8-168c-1.7-7.5 4-14.6 11.7-14.6h24.5c5.7 0 10.7 4 11.8 9.7 15.6 78 20.1 109.5 21 122.2 1.6-10.2 7.3-32.7 29.4-122.7 1.3-5.4 6.1-9.1 11.7-9.1h29.1c5.6 0 10.4 3.8 11.7 9.2 24 100.4 28.8 124 29.6 129.4-.2-11.2-2.6-17.8 21.6-129.2 1-5.6 5.9-9.5 11.5-9.5zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"]
    };
    exports.faFileWord = faFileWord;
    var faFill = {
      prefix: 'fas',
      iconName: 'fill',
      icon: [512, 512, [], "f575", "M502.63 217.06L294.94 9.37C288.69 3.12 280.5 0 272.31 0s-16.38 3.12-22.62 9.37l-81.58 81.58L81.93 4.77c-6.24-6.25-16.38-6.25-22.62 0L36.69 27.38c-6.24 6.25-6.24 16.38 0 22.63l86.19 86.18-94.76 94.76c-37.49 37.49-37.49 98.26 0 135.75l117.19 117.19c18.75 18.74 43.31 28.12 67.87 28.12 24.57 0 49.13-9.37 67.88-28.12l221.57-221.57c12.49-12.5 12.49-32.76 0-45.26zm-116.22 70.97H65.93c1.36-3.84 3.57-7.98 7.43-11.83l13.15-13.15 81.61-81.61 58.61 58.6c12.49 12.49 32.75 12.49 45.24 0 12.49-12.49 12.49-32.75 0-45.24l-58.61-58.6 58.95-58.95 162.45 162.44-48.35 48.34z"]
    };
    exports.faFill = faFill;
    var faFillDrip = {
      prefix: 'fas',
      iconName: 'fill-drip',
      icon: [576, 512, [], "f576", "M512 320s-64 92.65-64 128c0 35.35 28.66 64 64 64s64-28.65 64-64-64-128-64-128zm-9.37-102.94L294.94 9.37C288.69 3.12 280.5 0 272.31 0s-16.38 3.12-22.62 9.37l-81.58 81.58L81.93 4.76c-6.25-6.25-16.38-6.25-22.62 0L36.69 27.38c-6.24 6.25-6.24 16.38 0 22.62l86.19 86.18-94.76 94.76c-37.49 37.48-37.49 98.26 0 135.75l117.19 117.19c18.74 18.74 43.31 28.12 67.87 28.12 24.57 0 49.13-9.37 67.87-28.12l221.57-221.57c12.5-12.5 12.5-32.75.01-45.25zm-116.22 70.97H65.93c1.36-3.84 3.57-7.98 7.43-11.83l13.15-13.15 81.61-81.61 58.6 58.6c12.49 12.49 32.75 12.49 45.24 0s12.49-32.75 0-45.24l-58.6-58.6 58.95-58.95 162.44 162.44-48.34 48.34z"]
    };
    exports.faFillDrip = faFillDrip;
    var faFilm = {
      prefix: 'fas',
      iconName: 'film',
      icon: [512, 512, [], "f008", "M488 64h-8v20c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12V64H96v20c0 6.6-5.4 12-12 12H44c-6.6 0-12-5.4-12-12V64h-8C10.7 64 0 74.7 0 88v336c0 13.3 10.7 24 24 24h8v-20c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v20h320v-20c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v20h8c13.3 0 24-10.7 24-24V88c0-13.3-10.7-24-24-24zM96 372c0 6.6-5.4 12-12 12H44c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm0-96c0 6.6-5.4 12-12 12H44c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm0-96c0 6.6-5.4 12-12 12H44c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm272 208c0 6.6-5.4 12-12 12H156c-6.6 0-12-5.4-12-12v-96c0-6.6 5.4-12 12-12h200c6.6 0 12 5.4 12 12v96zm0-168c0 6.6-5.4 12-12 12H156c-6.6 0-12-5.4-12-12v-96c0-6.6 5.4-12 12-12h200c6.6 0 12 5.4 12 12v96zm112 152c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm0-96c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm0-96c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40z"]
    };
    exports.faFilm = faFilm;
    var faFilter = {
      prefix: 'fas',
      iconName: 'filter',
      icon: [512, 512, [], "f0b0", "M487.976 0H24.028C2.71 0-8.047 25.866 7.058 40.971L192 225.941V432c0 7.831 3.821 15.17 10.237 19.662l80 55.98C298.02 518.69 320 507.493 320 487.98V225.941l184.947-184.97C520.021 25.896 509.338 0 487.976 0z"]
    };
    exports.faFilter = faFilter;
    var faFingerprint = {
      prefix: 'fas',
      iconName: 'fingerprint',
      icon: [512, 512, [], "f577", "M256.12 245.96c-13.25 0-24 10.74-24 24 1.14 72.25-8.14 141.9-27.7 211.55-2.73 9.72 2.15 30.49 23.12 30.49 10.48 0 20.11-6.92 23.09-17.52 13.53-47.91 31.04-125.41 29.48-224.52.01-13.25-10.73-24-23.99-24zm-.86-81.73C194 164.16 151.25 211.3 152.1 265.32c.75 47.94-3.75 95.91-13.37 142.55-2.69 12.98 5.67 25.69 18.64 28.36 13.05 2.67 25.67-5.66 28.36-18.64 10.34-50.09 15.17-101.58 14.37-153.02-.41-25.95 19.92-52.49 54.45-52.34 31.31.47 57.15 25.34 57.62 55.47.77 48.05-2.81 96.33-10.61 143.55-2.17 13.06 6.69 25.42 19.76 27.58 19.97 3.33 26.81-15.1 27.58-19.77 8.28-50.03 12.06-101.21 11.27-152.11-.88-55.8-47.94-101.88-104.91-102.72zm-110.69-19.78c-10.3-8.34-25.37-6.8-33.76 3.48-25.62 31.5-39.39 71.28-38.75 112 .59 37.58-2.47 75.27-9.11 112.05-2.34 13.05 6.31 25.53 19.36 27.89 20.11 3.5 27.07-14.81 27.89-19.36 7.19-39.84 10.5-80.66 9.86-121.33-.47-29.88 9.2-57.88 28-80.97 8.35-10.28 6.79-25.39-3.49-33.76zm109.47-62.33c-15.41-.41-30.87 1.44-45.78 4.97-12.89 3.06-20.87 15.98-17.83 28.89 3.06 12.89 16 20.83 28.89 17.83 11.05-2.61 22.47-3.77 34-3.69 75.43 1.13 137.73 61.5 138.88 134.58.59 37.88-1.28 76.11-5.58 113.63-1.5 13.17 7.95 25.08 21.11 26.58 16.72 1.95 25.51-11.88 26.58-21.11a929.06 929.06 0 0 0 5.89-119.85c-1.56-98.75-85.07-180.33-186.16-181.83zm252.07 121.45c-2.86-12.92-15.51-21.2-28.61-18.27-12.94 2.86-21.12 15.66-18.26 28.61 4.71 21.41 4.91 37.41 4.7 61.6-.11 13.27 10.55 24.09 23.8 24.2h.2c13.17 0 23.89-10.61 24-23.8.18-22.18.4-44.11-5.83-72.34zm-40.12-90.72C417.29 43.46 337.6 1.29 252.81.02 183.02-.82 118.47 24.91 70.46 72.94 24.09 119.37-.9 181.04.14 246.65l-.12 21.47c-.39 13.25 10.03 24.31 23.28 24.69.23.02.48.02.72.02 12.92 0 23.59-10.3 23.97-23.3l.16-23.64c-.83-52.5 19.16-101.86 56.28-139 38.76-38.8 91.34-59.67 147.68-58.86 69.45 1.03 134.73 35.56 174.62 92.39 7.61 10.86 22.56 13.45 33.42 5.86 10.84-7.62 13.46-22.59 5.84-33.43z"]
    };
    exports.faFingerprint = faFingerprint;
    var faFire = {
      prefix: 'fas',
      iconName: 'fire',
      icon: [384, 512, [], "f06d", "M216 23.86c0-23.8-30.65-32.77-44.15-13.04C48 191.85 224 200 224 288c0 35.63-29.11 64.46-64.85 63.99-35.17-.45-63.15-29.77-63.15-64.94v-85.51c0-21.7-26.47-32.23-41.43-16.5C27.8 213.16 0 261.33 0 320c0 105.87 86.13 192 192 192s192-86.13 192-192c0-170.29-168-193-168-296.14z"]
    };
    exports.faFire = faFire;
    var faFireAlt = {
      prefix: 'fas',
      iconName: 'fire-alt',
      icon: [448, 512, [], "f7e4", "M323.56 51.2c-20.8 19.3-39.58 39.59-56.22 59.97C240.08 73.62 206.28 35.53 168 0 69.74 91.17 0 209.96 0 281.6 0 408.85 100.29 512 224 512s224-103.15 224-230.4c0-53.27-51.98-163.14-124.44-230.4zm-19.47 340.65C282.43 407.01 255.72 416 226.86 416 154.71 416 96 368.26 96 290.75c0-38.61 24.31-72.63 72.79-130.75 6.93 7.98 98.83 125.34 98.83 125.34l58.63-66.88c4.14 6.85 7.91 13.55 11.27 19.97 27.35 52.19 15.81 118.97-33.43 153.42z"]
    };
    exports.faFireAlt = faFireAlt;
    var faFireExtinguisher = {
      prefix: 'fas',
      iconName: 'fire-extinguisher',
      icon: [448, 512, [], "f134", "M434.027 26.329l-168 28C254.693 56.218 256 67.8 256 72h-58.332C208.353 36.108 181.446 0 144 0c-39.435 0-66.368 39.676-52.228 76.203-52.039 13.051-75.381 54.213-90.049 90.884-4.923 12.307 1.063 26.274 13.37 31.197 12.317 4.926 26.279-1.075 31.196-13.37C75.058 112.99 106.964 120 168 120v27.076c-41.543 10.862-72 49.235-72 94.129V488c0 13.255 10.745 24 24 24h144c13.255 0 24-10.745 24-24V240c0-44.731-30.596-82.312-72-92.97V120h40c0 2.974-1.703 15.716 10.027 17.671l168 28C441.342 166.89 448 161.25 448 153.834V38.166c0-7.416-6.658-13.056-13.973-11.837zM144 72c-8.822 0-16-7.178-16-16s7.178-16 16-16 16 7.178 16 16-7.178 16-16 16z"]
    };
    exports.faFireExtinguisher = faFireExtinguisher;
    var faFirstAid = {
      prefix: 'fas',
      iconName: 'first-aid',
      icon: [576, 512, [], "f479", "M0 80v352c0 26.5 21.5 48 48 48h48V32H48C21.5 32 0 53.5 0 80zm128 400h320V32H128v448zm64-248c0-4.4 3.6-8 8-8h56v-56c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v56h56c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8h-56v56c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-56h-56c-4.4 0-8-3.6-8-8v-48zM528 32h-48v448h48c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"]
    };
    exports.faFirstAid = faFirstAid;
    var faFish = {
      prefix: 'fas',
      iconName: 'fish',
      icon: [576, 512, [], "f578", "M327.1 96c-89.97 0-168.54 54.77-212.27 101.63L27.5 131.58c-12.13-9.18-30.24.6-27.14 14.66L24.54 256 .35 365.77c-3.1 14.06 15.01 23.83 27.14 14.66l87.33-66.05C158.55 361.23 237.13 416 327.1 416 464.56 416 576 288 576 256S464.56 96 327.1 96zm87.43 184c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24 13.26 0 24 10.74 24 24 0 13.25-10.75 24-24 24z"]
    };
    exports.faFish = faFish;
    var faFistRaised = {
      prefix: 'fas',
      iconName: 'fist-raised',
      icon: [384, 512, [], "f6de", "M255.98 160V16c0-8.84-7.16-16-16-16h-32c-8.84 0-16 7.16-16 16v146.93c5.02-1.78 10.34-2.93 15.97-2.93h48.03zm128 95.99c-.01-35.34-28.66-63.99-63.99-63.99H207.85c-8.78 0-15.9 7.07-15.9 15.85v.56c0 26.27 21.3 47.59 47.57 47.59h35.26c9.68 0 13.2 3.58 13.2 8v16.2c0 4.29-3.59 7.78-7.88 8-44.52 2.28-64.16 24.71-96.05 72.55l-6.31 9.47a7.994 7.994 0 0 1-11.09 2.22l-13.31-8.88a7.994 7.994 0 0 1-2.22-11.09l6.31-9.47c15.73-23.6 30.2-43.26 47.31-58.08-17.27-5.51-31.4-18.12-38.87-34.45-6.59 3.41-13.96 5.52-21.87 5.52h-32c-12.34 0-23.49-4.81-32-12.48C71.48 251.19 60.33 256 48 256H16c-5.64 0-10.97-1.15-16-2.95v77.93c0 33.95 13.48 66.5 37.49 90.51L63.99 448v64h255.98v-63.96l35.91-35.92A96.035 96.035 0 0 0 384 344.21l-.02-88.22zm-32.01-90.09V48c0-8.84-7.16-16-16-16h-32c-8.84 0-16 7.16-16 16v112h32c11.28 0 21.94 2.31 32 5.9zM16 224h32c8.84 0 16-7.16 16-16V80c0-8.84-7.16-16-16-16H16C7.16 64 0 71.16 0 80v128c0 8.84 7.16 16 16 16zm95.99 0h32c8.84 0 16-7.16 16-16V48c0-8.84-7.16-16-16-16h-32c-8.84 0-16 7.16-16 16v160c0 8.84 7.16 16 16 16z"]
    };
    exports.faFistRaised = faFistRaised;
    var faFlag = {
      prefix: 'fas',
      iconName: 'flag',
      icon: [512, 512, [], "f024", "M349.565 98.783C295.978 98.783 251.721 64 184.348 64c-24.955 0-47.309 4.384-68.045 12.013a55.947 55.947 0 0 0 3.586-23.562C118.117 24.015 94.806 1.206 66.338.048 34.345-1.254 8 24.296 8 56c0 19.026 9.497 35.825 24 45.945V488c0 13.255 10.745 24 24 24h16c13.255 0 24-10.745 24-24v-94.4c28.311-12.064 63.582-22.122 114.435-22.122 53.588 0 97.844 34.783 165.217 34.783 48.169 0 86.667-16.294 122.505-40.858C506.84 359.452 512 349.571 512 339.045v-243.1c0-23.393-24.269-38.87-45.485-29.016-34.338 15.948-76.454 31.854-116.95 31.854z"]
    };
    exports.faFlag = faFlag;
    var faFlagCheckered = {
      prefix: 'fas',
      iconName: 'flag-checkered',
      icon: [512, 512, [], "f11e", "M243.2 189.9V258c26.1 5.9 49.3 15.6 73.6 22.3v-68.2c-26-5.8-49.4-15.5-73.6-22.2zm223.3-123c-34.3 15.9-76.5 31.9-117 31.9C296 98.8 251.7 64 184.3 64c-25 0-47.3 4.4-68 12 2.8-7.3 4.1-15.2 3.6-23.6C118.1 24 94.8 1.2 66.3 0 34.3-1.3 8 24.3 8 56c0 19 9.5 35.8 24 45.9V488c0 13.3 10.7 24 24 24h16c13.3 0 24-10.7 24-24v-94.4c28.3-12.1 63.6-22.1 114.4-22.1 53.6 0 97.8 34.8 165.2 34.8 48.2 0 86.7-16.3 122.5-40.9 8.7-6 13.8-15.8 13.8-26.4V95.9c.1-23.3-24.2-38.8-45.4-29zM169.6 325.5c-25.8 2.7-50 8.2-73.6 16.6v-70.5c26.2-9.3 47.5-15 73.6-17.4zM464 191c-23.6 9.8-46.3 19.5-73.6 23.9V286c24.8-3.4 51.4-11.8 73.6-26v70.5c-25.1 16.1-48.5 24.7-73.6 27.1V286c-27 3.7-47.9 1.5-73.6-5.6v67.4c-23.9-7.4-47.3-16.7-73.6-21.3V258c-19.7-4.4-40.8-6.8-73.6-3.8v-70c-22.4 3.1-44.6 10.2-73.6 20.9v-70.5c33.2-12.2 50.1-19.8 73.6-22v71.6c27-3.7 48.4-1.3 73.6 5.7v-67.4c23.7 7.4 47.2 16.7 73.6 21.3v68.4c23.7 5.3 47.6 6.9 73.6 2.7V143c27-4.8 52.3-13.6 73.6-22.5z"]
    };
    exports.faFlagCheckered = faFlagCheckered;
    var faFlagUsa = {
      prefix: 'fas',
      iconName: 'flag-usa',
      icon: [512, 512, [], "f74d", "M32 0C14.3 0 0 14.3 0 32v464c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V32C64 14.3 49.7 0 32 0zm267.9 303.6c-57.2-15.1-111.7-28.8-203.9 11.1V384c185.7-92.2 221.7 53.3 397.5-23.1 11.4-5 18.5-16.5 18.5-28.8v-36c-43.6 17.3-80.2 24.1-112.1 24.1-37.4-.1-68.9-8.4-100-16.6zm0-96c-57.2-15.1-111.7-28.8-203.9 11.1v61.5c94.8-37.6 154.6-22.7 212.1-7.6 57.2 15.1 111.7 28.8 203.9-11.1V200c-43.6 17.3-80.2 24.1-112.1 24.1-37.4 0-68.9-8.3-100-16.5zm9.5-125.9c51.8 15.6 97.4 29 202.6-20.1V30.8c0-25.1-26.8-38.1-49.4-26.6C291.3 91.5 305.4-62.2 96 32.4v151.9c94.8-37.5 154.6-22.7 212.1-7.6 57.2 15 111.7 28.7 203.9-11.1V96.7c-53.6 23.5-93.3 31.4-126.1 31.4s-59-7.8-85.7-15.9c-4-1.2-8.1-2.4-12.1-3.5V75.5c7.2 2 14.3 4.1 21.3 6.2zM160 128.1c-8.8 0-16-7.1-16-16 0-8.8 7.2-16 16-16s16 7.1 16 16-7.2 16-16 16zm0-55.8c-8.8 0-16-7.1-16-16 0-8.8 7.2-16 16-16s16 7.1 16 16c0 8.8-7.2 16-16 16zm64 47.9c-8.8 0-16-7.1-16-16 0-8.8 7.2-16 16-16s16 7.1 16 16c0 8.8-7.2 16-16 16zm0-55.9c-8.8 0-16-7.1-16-16 0-8.8 7.2-16 16-16s16 7.1 16 16c0 8.8-7.2 16-16 16z"]
    };
    exports.faFlagUsa = faFlagUsa;
    var faFlask = {
      prefix: 'fas',
      iconName: 'flask',
      icon: [448, 512, [], "f0c3", "M437.2 403.5L320 215V64h8c13.3 0 24-10.7 24-24V24c0-13.3-10.7-24-24-24H120c-13.3 0-24 10.7-24 24v16c0 13.3 10.7 24 24 24h8v151L10.8 403.5C-18.5 450.6 15.3 512 70.9 512h306.2c55.7 0 89.4-61.5 60.1-108.5zM137.9 320l48.2-77.6c3.7-5.2 5.8-11.6 5.8-18.4V64h64v160c0 6.9 2.2 13.2 5.8 18.4l48.2 77.6h-172z"]
    };
    exports.faFlask = faFlask;
    var faFlushed = {
      prefix: 'fas',
      iconName: 'flushed',
      icon: [496, 512, [], "f579", "M344 200c-13.3 0-24 10.7-24 24s10.7 24 24 24 24-10.7 24-24-10.7-24-24-24zm-192 0c-13.3 0-24 10.7-24 24s10.7 24 24 24 24-10.7 24-24-10.7-24-24-24zM248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM80 224c0-39.8 32.2-72 72-72s72 32.2 72 72-32.2 72-72 72-72-32.2-72-72zm232 176H184c-21.2 0-21.2-32 0-32h128c21.2 0 21.2 32 0 32zm32-104c-39.8 0-72-32.2-72-72s32.2-72 72-72 72 32.2 72 72-32.2 72-72 72z"]
    };
    exports.faFlushed = faFlushed;
    var faFolder = {
      prefix: 'fas',
      iconName: 'folder',
      icon: [512, 512, [], "f07b", "M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48z"]
    };
    exports.faFolder = faFolder;
    var faFolderMinus = {
      prefix: 'fas',
      iconName: 'folder-minus',
      icon: [512, 512, [], "f65d", "M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48zm-96 168c0 8.84-7.16 16-16 16H160c-8.84 0-16-7.16-16-16v-16c0-8.84 7.16-16 16-16h192c8.84 0 16 7.16 16 16v16z"]
    };
    exports.faFolderMinus = faFolderMinus;
    var faFolderOpen = {
      prefix: 'fas',
      iconName: 'folder-open',
      icon: [576, 512, [], "f07c", "M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z"]
    };
    exports.faFolderOpen = faFolderOpen;
    var faFolderPlus = {
      prefix: 'fas',
      iconName: 'folder-plus',
      icon: [512, 512, [], "f65e", "M464,128H272L208,64H48A48,48,0,0,0,0,112V400a48,48,0,0,0,48,48H464a48,48,0,0,0,48-48V176A48,48,0,0,0,464,128ZM359.5,296a16,16,0,0,1-16,16h-64v64a16,16,0,0,1-16,16h-16a16,16,0,0,1-16-16V312h-64a16,16,0,0,1-16-16V280a16,16,0,0,1,16-16h64V200a16,16,0,0,1,16-16h16a16,16,0,0,1,16,16v64h64a16,16,0,0,1,16,16Z"]
    };
    exports.faFolderPlus = faFolderPlus;
    var faFont = {
      prefix: 'fas',
      iconName: 'font',
      icon: [448, 512, [], "f031", "M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z"]
    };
    exports.faFont = faFont;
    var faFontAwesomeLogoFull = {
      prefix: 'fas',
      iconName: 'font-awesome-logo-full',
      icon: [3992, 512, ["Font Awesome"], "f4e6", "M454.6 0H57.4C25.9 0 0 25.9 0 57.4v397.3C0 486.1 25.9 512 57.4 512h397.3c31.4 0 57.4-25.9 57.4-57.4V57.4C512 25.9 486.1 0 454.6 0zm-58.9 324.9c0 4.8-4.1 6.9-8.9 8.9-19.2 8.1-39.7 15.7-61.5 15.7-40.5 0-68.7-44.8-163.2 2.5v51.8c0 30.3-45.7 30.2-45.7 0v-250c-9-7-15-17.9-15-30.3 0-21 17.1-38.2 38.2-38.2 21 0 38.2 17.1 38.2 38.2 0 12.2-5.8 23.2-14.9 30.2v21c37.1-12 65.5-34.4 146.1-3.4 26.6 11.4 68.7-15.7 76.5-15.7 5.5 0 10.3 4.1 10.3 8.9v160.4zm432.9-174.2h-137v70.1H825c39.8 0 40.4 62.2 0 62.2H691.6v105.6c0 45.5-70.7 46.4-70.7 0V128.3c0-22 18-39.8 39.8-39.8h167.8c39.6 0 40.5 62.2.1 62.2zm191.1 23.4c-169.3 0-169.1 252.4 0 252.4 169.9 0 169.9-252.4 0-252.4zm0 196.1c-81.6 0-82.1-139.8 0-139.8 82.5 0 82.4 139.8 0 139.8zm372.4 53.4c-17.5 0-31.4-13.9-31.4-31.4v-117c0-62.4-72.6-52.5-99.1-16.4v133.4c0 41.5-63.3 41.8-63.3 0V208c0-40 63.1-41.6 63.1 0v3.4c43.3-51.6 162.4-60.4 162.4 39.3v141.5c.3 30.4-31.5 31.4-31.7 31.4zm179.7 2.9c-44.3 0-68.3-22.9-68.3-65.8V235.2H1488c-35.6 0-36.7-55.3 0-55.3h15.5v-37.3c0-41.3 63.8-42.1 63.8 0v37.5h24.9c35.4 0 35.7 55.3 0 55.3h-24.9v108.5c0 29.6 26.1 26.3 27.4 26.3 31.4 0 52.6 56.3-22.9 56.3zM1992 123c-19.5-50.2-95.5-50-114.5 0-107.3 275.7-99.5 252.7-99.5 262.8 0 42.8 58.3 51.2 72.1 14.4l13.5-35.9H2006l13 35.9c14.2 37.7 72.1 27.2 72.1-14.4 0-10.1 5.3 6.8-99.1-262.8zm-108.9 179.1l51.7-142.9 51.8 142.9h-103.5zm591.3-85.6l-53.7 176.3c-12.4 41.2-72 41-84 0l-42.3-135.9-42.3 135.9c-12.4 40.9-72 41.2-84.5 0l-54.2-176.3c-12.5-39.4 49.8-56.1 60.2-16.9L2213 342l45.3-139.5c10.9-32.7 59.6-34.7 71.2 0l45.3 139.5 39.3-142.4c10.3-38.3 72.6-23.8 60.3 16.9zm275.4 75.1c0-42.4-33.9-117.5-119.5-117.5-73.2 0-124.4 56.3-124.4 126 0 77.2 55.3 126.4 128.5 126.4 31.7 0 93-11.5 93-39.8 0-18.3-21.1-31.5-39.3-22.4-49.4 26.2-109 8.4-115.9-43.8h148.3c16.3 0 29.3-13.4 29.3-28.9zM2571 277.7c9.5-73.4 113.9-68.6 118.6 0H2571zm316.7 148.8c-31.4 0-81.6-10.5-96.6-31.9-12.4-17 2.5-39.8 21.8-39.8 16.3 0 36.8 22.9 77.7 22.9 27.4 0 40.4-11 40.4-25.8 0-39.8-142.9-7.4-142.9-102 0-40.4 35.3-75.7 98.6-75.7 31.4 0 74.1 9.9 87.6 29.4 10.8 14.8-1.4 36.2-20.9 36.2-15.1 0-26.7-17.3-66.2-17.3-22.9 0-37.8 10.5-37.8 23.8 0 35.9 142.4 6 142.4 103.1-.1 43.7-37.4 77.1-104.1 77.1zm266.8-252.4c-169.3 0-169.1 252.4 0 252.4 170.1 0 169.6-252.4 0-252.4zm0 196.1c-81.8 0-82-139.8 0-139.8 82.5 0 82.4 139.8 0 139.8zm476.9 22V268.7c0-53.8-61.4-45.8-85.7-10.5v134c0 41.3-63.8 42.1-63.8 0V268.7c0-52.1-59.5-47.4-85.7-10.1v133.6c0 41.5-63.3 41.8-63.3 0V208c0-40 63.1-41.6 63.1 0v3.4c9.9-14.4 41.8-37.3 78.6-37.3 35.3 0 57.7 16.4 66.7 43.8 13.9-21.8 45.8-43.8 82.6-43.8 44.3 0 70.7 23.4 70.7 72.7v145.3c.5 17.3-13.5 31.4-31.9 31.4 3.5.1-31.3 1.1-31.3-31.3zM3992 291.6c0-42.4-32.4-117.5-117.9-117.5-73.2 0-127.5 56.3-127.5 126 0 77.2 58.3 126.4 131.6 126.4 31.7 0 91.5-11.5 91.5-39.8 0-18.3-21.1-31.5-39.3-22.4-49.4 26.2-110.5 8.4-117.5-43.8h149.8c16.3 0 29.1-13.4 29.3-28.9zm-180.5-13.9c9.7-74.4 115.9-68.3 120.1 0h-120.1z"]
    };
    exports.faFontAwesomeLogoFull = faFontAwesomeLogoFull;
    var faFootballBall = {
      prefix: 'fas',
      iconName: 'football-ball',
      icon: [496, 512, [], "f44e", "M481.5 60.3c-4.8-18.2-19.1-32.5-37.3-37.4C420.3 16.5 383 8.9 339.4 8L496 164.8c-.8-43.5-8.2-80.6-14.5-104.5zm-467 391.4c4.8 18.2 19.1 32.5 37.3 37.4 23.9 6.4 61.2 14 104.8 14.9L0 347.2c.8 43.5 8.2 80.6 14.5 104.5zM4.2 283.4L220.4 500c132.5-19.4 248.8-118.7 271.5-271.4L275.6 12C143.1 31.4 26.8 130.7 4.2 283.4zm317.3-123.6c3.1-3.1 8.2-3.1 11.3 0l11.3 11.3c3.1 3.1 3.1 8.2 0 11.3l-28.3 28.3 28.3 28.3c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0l-28.3-28.3-22.6 22.7 28.3 28.3c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0L248 278.6l-22.6 22.6 28.3 28.3c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0l-28.3-28.3-28.3 28.3c-3.1 3.1-8.2 3.1-11.3 0l-11.3-11.3c-3.1-3.1-3.1-8.2 0-11.3l28.3-28.3-28.3-28.2c-3.1-3.1-3.1-8.2 0-11.3l11.3-11.3c3.1-3.1 8.2-3.1 11.3 0l28.3 28.3 22.6-22.6-28.3-28.3c-3.1-3.1-3.1-8.2 0-11.3l11.3-11.3c3.1-3.1 8.2-3.1 11.3 0l28.3 28.3 22.6-22.6-28.3-28.3c-3.1-3.1-3.1-8.2 0-11.3l11.3-11.3c3.1-3.1 8.2-3.1 11.3 0l28.3 28.3 28.3-28.5z"]
    };
    exports.faFootballBall = faFootballBall;
    var faForward = {
      prefix: 'fas',
      iconName: 'forward',
      icon: [512, 512, [], "f04e", "M500.5 231.4l-192-160C287.9 54.3 256 68.6 256 96v320c0 27.4 31.9 41.8 52.5 24.6l192-160c15.3-12.8 15.3-36.4 0-49.2zm-256 0l-192-160C31.9 54.3 0 68.6 0 96v320c0 27.4 31.9 41.8 52.5 24.6l192-160c15.3-12.8 15.3-36.4 0-49.2z"]
    };
    exports.faForward = faForward;
    var faFrog = {
      prefix: 'fas',
      iconName: 'frog',
      icon: [576, 512, [], "f52e", "M446.53 97.43C439.67 60.23 407.19 32 368 32c-39.23 0-71.72 28.29-78.54 65.54C126.75 112.96-.5 250.12 0 416.98.11 451.9 29.08 480 64 480h304c8.84 0 16-7.16 16-16 0-17.67-14.33-32-32-32h-79.49l35.8-48.33c24.14-36.23 10.35-88.28-33.71-106.6-23.89-9.93-51.55-4.65-72.24 10.88l-32.76 24.59c-7.06 5.31-17.09 3.91-22.41-3.19-5.3-7.08-3.88-17.11 3.19-22.41l34.78-26.09c36.84-27.66 88.28-27.62 125.13 0 10.87 8.15 45.87 39.06 40.8 93.21L469.62 480H560c8.84 0 16-7.16 16-16 0-17.67-14.33-32-32-32h-53.63l-98.52-104.68 154.44-86.65A58.16 58.16 0 0 0 576 189.94c0-21.4-11.72-40.95-30.48-51.23-40.56-22.22-98.99-41.28-98.99-41.28zM368 136c-13.26 0-24-10.75-24-24 0-13.26 10.74-24 24-24 13.25 0 24 10.74 24 24 0 13.25-10.75 24-24 24z"]
    };
    exports.faFrog = faFrog;
    var faFrown = {
      prefix: 'fas',
      iconName: 'frown',
      icon: [496, 512, [], "f119", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm80 168c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm-160 0c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm170.2 218.2C315.8 367.4 282.9 352 248 352s-67.8 15.4-90.2 42.2c-13.5 16.3-38.1-4.2-24.6-20.5C161.7 339.6 203.6 320 248 320s86.3 19.6 114.7 53.8c13.6 16.2-11 36.7-24.5 20.4z"]
    };
    exports.faFrown = faFrown;
    var faFrownOpen = {
      prefix: 'fas',
      iconName: 'frown-open',
      icon: [496, 512, [], "f57a", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM136 208c0-17.7 14.3-32 32-32s32 14.3 32 32-14.3 32-32 32-32-14.3-32-32zm187.3 183.3c-31.2-9.6-59.4-15.3-75.3-15.3s-44.1 5.7-75.3 15.3c-11.5 3.5-22.5-6.3-20.5-18.1 7-40 60.1-61.2 95.8-61.2s88.8 21.3 95.8 61.2c2 11.9-9.1 21.6-20.5 18.1zM328 240c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faFrownOpen = faFrownOpen;
    var faFunnelDollar = {
      prefix: 'fas',
      iconName: 'funnel-dollar',
      icon: [640, 512, [], "f662", "M433.46 165.94l101.2-111.87C554.61 34.12 540.48 0 512.26 0H31.74C3.52 0-10.61 34.12 9.34 54.07L192 256v155.92c0 12.59 5.93 24.44 16 32l79.99 60c20.86 15.64 48.47 6.97 59.22-13.57C310.8 455.38 288 406.35 288 352c0-89.79 62.05-165.17 145.46-186.06zM480 192c-88.37 0-160 71.63-160 160s71.63 160 160 160 160-71.63 160-160-71.63-160-160-160zm16 239.88V448c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8v-16.29c-11.29-.58-22.27-4.52-31.37-11.35-3.9-2.93-4.1-8.77-.57-12.14l11.75-11.21c2.77-2.64 6.89-2.76 10.13-.73 3.87 2.42 8.26 3.72 12.82 3.72h28.11c6.5 0 11.8-5.92 11.8-13.19 0-5.95-3.61-11.19-8.77-12.73l-45-13.5c-18.59-5.58-31.58-23.42-31.58-43.39 0-24.52 19.05-44.44 42.67-45.07V256c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v16.29c11.29.58 22.27 4.51 31.37 11.35 3.9 2.93 4.1 8.77.57 12.14l-11.75 11.21c-2.77 2.64-6.89 2.76-10.13.73-3.87-2.43-8.26-3.72-12.82-3.72h-28.11c-6.5 0-11.8 5.92-11.8 13.19 0 5.95 3.61 11.19 8.77 12.73l45 13.5c18.59 5.58 31.58 23.42 31.58 43.39 0 24.53-19.04 44.44-42.67 45.07z"]
    };
    exports.faFunnelDollar = faFunnelDollar;
    var faFutbol = {
      prefix: 'fas',
      iconName: 'futbol',
      icon: [512, 512, [], "f1e3", "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zm-48 0l-.003-.282-26.064 22.741-62.679-58.5 16.454-84.355 34.303 3.072c-24.889-34.216-60.004-60.089-100.709-73.141l13.651 31.939L256 139l-74.953-41.525 13.651-31.939c-40.631 13.028-75.78 38.87-100.709 73.141l34.565-3.073 16.192 84.355-62.678 58.5-26.064-22.741-.003.282c0 43.015 13.497 83.952 38.472 117.991l7.704-33.897 85.138 10.447 36.301 77.826-29.902 17.786c40.202 13.122 84.29 13.148 124.572 0l-29.902-17.786 36.301-77.826 85.138-10.447 7.704 33.897C442.503 339.952 456 299.015 456 256zm-248.102 69.571l-29.894-91.312L256 177.732l77.996 56.527-29.622 91.312h-96.476z"]
    };
    exports.faFutbol = faFutbol;
    var faGamepad = {
      prefix: 'fas',
      iconName: 'gamepad',
      icon: [640, 512, [], "f11b", "M480.07 96H160a160 160 0 1 0 114.24 272h91.52A160 160 0 1 0 480.07 96zM248 268a12 12 0 0 1-12 12h-52v52a12 12 0 0 1-12 12h-24a12 12 0 0 1-12-12v-52H84a12 12 0 0 1-12-12v-24a12 12 0 0 1 12-12h52v-52a12 12 0 0 1 12-12h24a12 12 0 0 1 12 12v52h52a12 12 0 0 1 12 12zm216 76a40 40 0 1 1 40-40 40 40 0 0 1-40 40zm64-96a40 40 0 1 1 40-40 40 40 0 0 1-40 40z"]
    };
    exports.faGamepad = faGamepad;
    var faGasPump = {
      prefix: 'fas',
      iconName: 'gas-pump',
      icon: [512, 512, [], "f52f", "M336 448H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h320c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm157.2-340.7l-81-81c-6.2-6.2-16.4-6.2-22.6 0l-11.3 11.3c-6.2 6.2-6.2 16.4 0 22.6L416 97.9V160c0 28.1 20.9 51.3 48 55.2V376c0 13.2-10.8 24-24 24s-24-10.8-24-24v-32c0-48.6-39.4-88-88-88h-8V64c0-35.3-28.7-64-64-64H96C60.7 0 32 28.7 32 64v352h288V304h8c22.1 0 40 17.9 40 40v27.8c0 37.7 27 72 64.5 75.9 43 4.3 79.5-29.5 79.5-71.7V152.6c0-17-6.8-33.3-18.8-45.3zM256 192H96V64h160v128z"]
    };
    exports.faGasPump = faGasPump;
    var faGavel = {
      prefix: 'fas',
      iconName: 'gavel',
      icon: [512, 512, [], "f0e3", "M504.971 199.362l-22.627-22.627c-9.373-9.373-24.569-9.373-33.941 0l-5.657 5.657L329.608 69.255l5.657-5.657c9.373-9.373 9.373-24.569 0-33.941L312.638 7.029c-9.373-9.373-24.569-9.373-33.941 0L154.246 131.48c-9.373 9.373-9.373 24.569 0 33.941l22.627 22.627c9.373 9.373 24.569 9.373 33.941 0l5.657-5.657 39.598 39.598-81.04 81.04-5.657-5.657c-12.497-12.497-32.758-12.497-45.255 0L9.373 412.118c-12.497 12.497-12.497 32.758 0 45.255l45.255 45.255c12.497 12.497 32.758 12.497 45.255 0l114.745-114.745c12.497-12.497 12.497-32.758 0-45.255l-5.657-5.657 81.04-81.04 39.598 39.598-5.657 5.657c-9.373 9.373-9.373 24.569 0 33.941l22.627 22.627c9.373 9.373 24.569 9.373 33.941 0l124.451-124.451c9.372-9.372 9.372-24.568 0-33.941z"]
    };
    exports.faGavel = faGavel;
    var faGem = {
      prefix: 'fas',
      iconName: 'gem',
      icon: [576, 512, [], "f3a5", "M485.5 0L576 160H474.9L405.7 0h79.8zm-128 0l69.2 160H149.3L218.5 0h139zm-267 0h79.8l-69.2 160H0L90.5 0zM0 192h100.7l123 251.7c1.5 3.1-2.7 5.9-5 3.3L0 192zm148.2 0h279.6l-137 318.2c-1 2.4-4.5 2.4-5.5 0L148.2 192zm204.1 251.7l123-251.7H576L357.3 446.9c-2.3 2.7-6.5-.1-5-3.2z"]
    };
    exports.faGem = faGem;
    var faGenderless = {
      prefix: 'fas',
      iconName: 'genderless',
      icon: [288, 512, [], "f22d", "M144 176c44.1 0 80 35.9 80 80s-35.9 80-80 80-80-35.9-80-80 35.9-80 80-80m0-64C64.5 112 0 176.5 0 256s64.5 144 144 144 144-64.5 144-144-64.5-144-144-144z"]
    };
    exports.faGenderless = faGenderless;
    var faGhost = {
      prefix: 'fas',
      iconName: 'ghost',
      icon: [384, 512, [], "f6e2", "M186.1.09C81.01 3.24 0 94.92 0 200.05v263.92c0 14.26 17.23 21.39 27.31 11.31l24.92-18.53c6.66-4.95 16-3.99 21.51 2.21l42.95 48.35c6.25 6.25 16.38 6.25 22.63 0l40.72-45.85c6.37-7.17 17.56-7.17 23.92 0l40.72 45.85c6.25 6.25 16.38 6.25 22.63 0l42.95-48.35c5.51-6.2 14.85-7.17 21.51-2.21l24.92 18.53c10.08 10.08 27.31 2.94 27.31-11.31V192C384 84 294.83-3.17 186.1.09zM128 224c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm128 0c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faGhost = faGhost;
    var faGift = {
      prefix: 'fas',
      iconName: 'gift',
      icon: [512, 512, [], "f06b", "M32 448c0 17.7 14.3 32 32 32h160V320H32v128zm256 32h160c17.7 0 32-14.3 32-32V320H288v160zm192-320h-42.1c6.2-12.1 10.1-25.5 10.1-40 0-48.5-39.5-88-88-88-41.6 0-68.5 21.3-103 68.3-34.5-47-61.4-68.3-103-68.3-48.5 0-88 39.5-88 88 0 14.5 3.8 27.9 10.1 40H32c-17.7 0-32 14.3-32 32v80c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16v-80c0-17.7-14.3-32-32-32zm-326.1 0c-22.1 0-40-17.9-40-40s17.9-40 40-40c19.9 0 34.6 3.3 86.1 80h-86.1zm206.1 0h-86.1c51.4-76.5 65.7-80 86.1-80 22.1 0 40 17.9 40 40s-17.9 40-40 40z"]
    };
    exports.faGift = faGift;
    var faGifts = {
      prefix: 'fas',
      iconName: 'gifts',
      icon: [640, 512, [], "f79c", "M240.6 194.1c1.9-30.8 17.3-61.2 44-79.8C279.4 103.5 268.7 96 256 96h-29.4l30.7-22c7.2-5.1 8.9-15.1 3.7-22.3l-9.3-13c-5.1-7.2-15.1-8.9-22.3-3.7l-32 22.9 11.5-30.6c3.1-8.3-1.1-17.5-9.4-20.6l-15-5.6c-8.3-3.1-17.5 1.1-20.6 9.4l-19.9 53-19.9-53.1C121 2.1 111.8-2.1 103.5 1l-15 5.6C80.2 9.7 76 19 79.2 27.2l11.5 30.6L58.6 35c-7.2-5.1-17.2-3.5-22.3 3.7l-9.3 13c-5.1 7.2-3.5 17.2 3.7 22.3l30.7 22H32c-17.7 0-32 14.3-32 32v352c0 17.7 14.3 32 32 32h168.9c-5.5-9.5-8.9-20.3-8.9-32V256c0-29.9 20.8-55 48.6-61.9zM224 480c0 17.7 14.3 32 32 32h160V384H224v96zm224 32h160c17.7 0 32-14.3 32-32v-96H448v128zm160-288h-20.4c2.6-7.6 4.4-15.5 4.4-23.8 0-35.5-27-72.2-72.1-72.2-48.1 0-75.9 47.7-87.9 75.3-12.1-27.6-39.9-75.3-87.9-75.3-45.1 0-72.1 36.7-72.1 72.2 0 8.3 1.7 16.2 4.4 23.8H256c-17.7 0-32 14.3-32 32v96h192V224h15.3l.7-.2.7.2H448v128h192v-96c0-17.7-14.3-32-32-32zm-272 0c-2.7-1.4-5.1-3-7.2-4.8-7.3-6.4-8.8-13.8-8.8-19 0-9.7 6.4-24.2 24.1-24.2 18.7 0 35.6 27.4 44.5 48H336zm199.2-4.8c-2.1 1.8-4.5 3.4-7.2 4.8h-52.6c8.8-20.3 25.8-48 44.5-48 17.7 0 24.1 14.5 24.1 24.2 0 5.2-1.5 12.6-8.8 19z"]
    };
    exports.faGifts = faGifts;
    var faGlassCheers = {
      prefix: 'fas',
      iconName: 'glass-cheers',
      icon: [640, 512, [], "f79f", "M639.4 433.6c-8.4-20.4-31.8-30.1-52.2-21.6l-22.1 9.2-38.7-101.9c47.9-35 64.8-100.3 34.5-152.8L474.3 16c-8-13.9-25.1-19.7-40-13.6L320 49.8 205.7 2.4c-14.9-6.2-32-.3-40 13.6L79.1 166.5C48.9 219 65.7 284.3 113.6 319.2L74.9 421.1l-22.1-9.2c-20.4-8.5-43.7 1.2-52.2 21.6-1.7 4.1.2 8.8 4.3 10.5l162.3 67.4c4.1 1.7 8.7-.2 10.4-4.3 8.4-20.4-1.2-43.8-21.6-52.3l-22.1-9.2L173.3 342c4.4.5 8.8 1.3 13.1 1.3 51.7 0 99.4-33.1 113.4-85.3l20.2-75.4 20.2 75.4c14 52.2 61.7 85.3 113.4 85.3 4.3 0 8.7-.8 13.1-1.3L506 445.6l-22.1 9.2c-20.4 8.5-30.1 31.9-21.6 52.3 1.7 4.1 6.4 6 10.4 4.3L635.1 444c4-1.7 6-6.3 4.3-10.4zM275.9 162.1l-112.1-46.5 36.5-63.4 94.5 39.2-18.9 70.7zm88.2 0l-18.9-70.7 94.5-39.2 36.5 63.4-112.1 46.5z"]
    };
    exports.faGlassCheers = faGlassCheers;
    var faGlassMartini = {
      prefix: 'fas',
      iconName: 'glass-martini',
      icon: [512, 512, [], "f000", "M502.05 57.6C523.3 36.34 508.25 0 478.2 0H33.8C3.75 0-11.3 36.34 9.95 57.6L224 271.64V464h-56c-22.09 0-40 17.91-40 40 0 4.42 3.58 8 8 8h240c4.42 0 8-3.58 8-8 0-22.09-17.91-40-40-40h-56V271.64L502.05 57.6z"]
    };
    exports.faGlassMartini = faGlassMartini;
    var faGlassMartiniAlt = {
      prefix: 'fas',
      iconName: 'glass-martini-alt',
      icon: [512, 512, [], "f57b", "M502.05 57.6C523.3 36.34 508.25 0 478.2 0H33.8C3.75 0-11.3 36.34 9.95 57.6L224 271.64V464h-56c-22.09 0-40 17.91-40 40 0 4.42 3.58 8 8 8h240c4.42 0 8-3.58 8-8 0-22.09-17.91-40-40-40h-56V271.64L502.05 57.6zM443.77 48l-48 48H116.24l-48-48h375.53z"]
    };
    exports.faGlassMartiniAlt = faGlassMartiniAlt;
    var faGlassWhiskey = {
      prefix: 'fas',
      iconName: 'glass-whiskey',
      icon: [512, 512, [], "f7a0", "M480 32H32C12.5 32-2.4 49.2.3 68.5l56 356.5c4.5 31.5 31.5 54.9 63.4 54.9h273c31.8 0 58.9-23.4 63.4-54.9l55.6-356.5C514.4 49.2 499.5 32 480 32zm-37.4 64l-30 192h-313L69.4 96h373.2z"]
    };
    exports.faGlassWhiskey = faGlassWhiskey;
    var faGlasses = {
      prefix: 'fas',
      iconName: 'glasses',
      icon: [576, 512, [], "f530", "M574.1 280.37L528.75 98.66c-5.91-23.7-21.59-44.05-43-55.81-21.44-11.73-46.97-14.11-70.19-6.33l-15.25 5.08c-8.39 2.79-12.92 11.86-10.12 20.24l5.06 15.18c2.79 8.38 11.85 12.91 20.23 10.12l13.18-4.39c10.87-3.62 23-3.57 33.16 1.73 10.29 5.37 17.57 14.56 20.37 25.82l38.46 153.82c-22.19-6.81-49.79-12.46-81.2-12.46-34.77 0-73.98 7.02-114.85 26.74h-73.18c-40.87-19.74-80.08-26.75-114.86-26.75-31.42 0-59.02 5.65-81.21 12.46l38.46-153.83c2.79-11.25 10.09-20.45 20.38-25.81 10.16-5.3 22.28-5.35 33.15-1.73l13.17 4.39c8.38 2.79 17.44-1.74 20.23-10.12l5.06-15.18c2.8-8.38-1.73-17.45-10.12-20.24l-15.25-5.08c-23.22-7.78-48.75-5.41-70.19 6.33-21.41 11.77-37.09 32.11-43 55.8L1.9 280.37A64.218 64.218 0 0 0 0 295.86v70.25C0 429.01 51.58 480 115.2 480h37.12c60.28 0 110.37-45.94 114.88-105.37l2.93-38.63h35.75l2.93 38.63C313.31 434.06 363.4 480 423.68 480h37.12c63.62 0 115.2-50.99 115.2-113.88v-70.25c0-5.23-.64-10.43-1.9-15.5zm-370.72 89.42c-1.97 25.91-24.4 46.21-51.06 46.21H115.2C86.97 416 64 393.62 64 366.11v-37.54c18.12-6.49 43.42-12.92 72.58-12.92 23.86 0 47.26 4.33 69.93 12.92l-3.13 41.22zM512 366.12c0 27.51-22.97 49.88-51.2 49.88h-37.12c-26.67 0-49.1-20.3-51.06-46.21l-3.13-41.22c22.67-8.59 46.08-12.92 69.95-12.92 29.12 0 54.43 6.44 72.55 12.93v37.54z"]
    };
    exports.faGlasses = faGlasses;
    var faGlobe = {
      prefix: 'fas',
      iconName: 'globe',
      icon: [496, 512, [], "f0ac", "M336.5 160C322 70.7 287.8 8 248 8s-74 62.7-88.5 152h177zM152 256c0 22.2 1.2 43.5 3.3 64h185.3c2.1-20.5 3.3-41.8 3.3-64s-1.2-43.5-3.3-64H155.3c-2.1 20.5-3.3 41.8-3.3 64zm324.7-96c-28.6-67.9-86.5-120.4-158-141.6 24.4 33.8 41.2 84.7 50 141.6h108zM177.2 18.4C105.8 39.6 47.8 92.1 19.3 160h108c8.7-56.9 25.5-107.8 49.9-141.6zM487.4 192H372.7c2.1 21 3.3 42.5 3.3 64s-1.2 43-3.3 64h114.6c5.5-20.5 8.6-41.8 8.6-64s-3.1-43.5-8.5-64zM120 256c0-21.5 1.2-43 3.3-64H8.6C3.2 212.5 0 233.8 0 256s3.2 43.5 8.6 64h114.6c-2-21-3.2-42.5-3.2-64zm39.5 96c14.5 89.3 48.7 152 88.5 152s74-62.7 88.5-152h-177zm159.3 141.6c71.4-21.2 129.4-73.7 158-141.6h-108c-8.8 56.9-25.6 107.8-50 141.6zM19.3 352c28.6 67.9 86.5 120.4 158 141.6-24.4-33.8-41.2-84.7-50-141.6h-108z"]
    };
    exports.faGlobe = faGlobe;
    var faGlobeAfrica = {
      prefix: 'fas',
      iconName: 'globe-africa',
      icon: [496, 512, [], "f57c", "M248 8C111.03 8 0 119.03 0 256s111.03 248 248 248 248-111.03 248-248S384.97 8 248 8zm160 215.5v6.93c0 5.87-3.32 11.24-8.57 13.86l-15.39 7.7a15.485 15.485 0 0 1-15.53-.97l-18.21-12.14a15.52 15.52 0 0 0-13.5-1.81l-2.65.88c-9.7 3.23-13.66 14.79-7.99 23.3l13.24 19.86c2.87 4.31 7.71 6.9 12.89 6.9h8.21c8.56 0 15.5 6.94 15.5 15.5v11.34c0 3.35-1.09 6.62-3.1 9.3l-18.74 24.98c-1.42 1.9-2.39 4.1-2.83 6.43l-4.3 22.83c-.62 3.29-2.29 6.29-4.76 8.56a159.608 159.608 0 0 0-25 29.16l-13.03 19.55a27.756 27.756 0 0 1-23.09 12.36c-10.51 0-20.12-5.94-24.82-15.34a78.902 78.902 0 0 1-8.33-35.29V367.5c0-8.56-6.94-15.5-15.5-15.5h-25.88c-14.49 0-28.38-5.76-38.63-16a54.659 54.659 0 0 1-16-38.63v-14.06c0-17.19 8.1-33.38 21.85-43.7l27.58-20.69a54.663 54.663 0 0 1 32.78-10.93h.89c8.48 0 16.85 1.97 24.43 5.77l14.72 7.36c3.68 1.84 7.93 2.14 11.83.84l47.31-15.77c6.33-2.11 10.6-8.03 10.6-14.7 0-8.56-6.94-15.5-15.5-15.5h-10.09c-4.11 0-8.05-1.63-10.96-4.54l-6.92-6.92a15.493 15.493 0 0 0-10.96-4.54H199.5c-8.56 0-15.5-6.94-15.5-15.5v-4.4c0-7.11 4.84-13.31 11.74-15.04l14.45-3.61c3.74-.94 7-3.23 9.14-6.44l8.08-12.11c2.87-4.31 7.71-6.9 12.89-6.9h24.21c8.56 0 15.5-6.94 15.5-15.5v-21.7C359.23 71.63 422.86 131.02 441.93 208H423.5c-8.56 0-15.5 6.94-15.5 15.5z"]
    };
    exports.faGlobeAfrica = faGlobeAfrica;
    var faGlobeAmericas = {
      prefix: 'fas',
      iconName: 'globe-americas',
      icon: [496, 512, [], "f57d", "M248 8C111.03 8 0 119.03 0 256s111.03 248 248 248 248-111.03 248-248S384.97 8 248 8zm82.29 357.6c-3.9 3.88-7.99 7.95-11.31 11.28-2.99 3-5.1 6.7-6.17 10.71-1.51 5.66-2.73 11.38-4.77 16.87l-17.39 46.85c-13.76 3-28 4.69-42.65 4.69v-27.38c1.69-12.62-7.64-36.26-22.63-51.25-6-6-9.37-14.14-9.37-22.63v-32.01c0-11.64-6.27-22.34-16.46-27.97-14.37-7.95-34.81-19.06-48.81-26.11-11.48-5.78-22.1-13.14-31.65-21.75l-.8-.72a114.792 114.792 0 0 1-18.06-20.74c-9.38-13.77-24.66-36.42-34.59-51.14 20.47-45.5 57.36-82.04 103.2-101.89l24.01 12.01C203.48 89.74 216 82.01 216 70.11v-11.3c7.99-1.29 16.12-2.11 24.39-2.42l28.3 28.3c6.25 6.25 6.25 16.38 0 22.63L264 112l-10.34 10.34c-3.12 3.12-3.12 8.19 0 11.31l4.69 4.69c3.12 3.12 3.12 8.19 0 11.31l-8 8a8.008 8.008 0 0 1-5.66 2.34h-8.99c-2.08 0-4.08.81-5.58 2.27l-9.92 9.65a8.008 8.008 0 0 0-1.58 9.31l15.59 31.19c2.66 5.32-1.21 11.58-7.15 11.58h-5.64c-1.93 0-3.79-.7-5.24-1.96l-9.28-8.06a16.017 16.017 0 0 0-15.55-3.1l-31.17 10.39a11.95 11.95 0 0 0-8.17 11.34c0 4.53 2.56 8.66 6.61 10.69l11.08 5.54c9.41 4.71 19.79 7.16 30.31 7.16s22.59 27.29 32 32h66.75c8.49 0 16.62 3.37 22.63 9.37l13.69 13.69a30.503 30.503 0 0 1 8.93 21.57 46.536 46.536 0 0 1-13.72 32.98zM417 274.25c-5.79-1.45-10.84-5-14.15-9.97l-17.98-26.97a23.97 23.97 0 0 1 0-26.62l19.59-29.38c2.32-3.47 5.5-6.29 9.24-8.15l12.98-6.49C440.2 193.59 448 223.87 448 256c0 8.67-.74 17.16-1.82 25.54L417 274.25z"]
    };
    exports.faGlobeAmericas = faGlobeAmericas;
    var faGlobeAsia = {
      prefix: 'fas',
      iconName: 'globe-asia',
      icon: [496, 512, [], "f57e", "M248 8C111.03 8 0 119.03 0 256s111.03 248 248 248 248-111.03 248-248S384.97 8 248 8zm-11.34 240.23c-2.89 4.82-8.1 7.77-13.72 7.77h-.31c-4.24 0-8.31 1.69-11.31 4.69l-5.66 5.66c-3.12 3.12-3.12 8.19 0 11.31l5.66 5.66c3 3 4.69 7.07 4.69 11.31V304c0 8.84-7.16 16-16 16h-6.11c-6.06 0-11.6-3.42-14.31-8.85l-22.62-45.23c-2.44-4.88-8.95-5.94-12.81-2.08l-19.47 19.46c-3 3-7.07 4.69-11.31 4.69H50.81C49.12 277.55 48 266.92 48 256c0-110.28 89.72-200 200-200 21.51 0 42.2 3.51 61.63 9.82l-50.16 38.53c-5.11 3.41-4.63 11.06.86 13.81l10.83 5.41c5.42 2.71 8.84 8.25 8.84 14.31V216c0 4.42-3.58 8-8 8h-3.06c-3.03 0-5.8-1.71-7.15-4.42-1.56-3.12-5.96-3.29-7.76-.3l-17.37 28.95zM408 358.43c0 4.24-1.69 8.31-4.69 11.31l-9.57 9.57c-3 3-7.07 4.69-11.31 4.69h-15.16c-4.24 0-8.31-1.69-11.31-4.69l-13.01-13.01a26.767 26.767 0 0 0-25.42-7.04l-21.27 5.32c-1.27.32-2.57.48-3.88.48h-10.34c-4.24 0-8.31-1.69-11.31-4.69l-11.91-11.91a8.008 8.008 0 0 1-2.34-5.66v-10.2c0-3.27 1.99-6.21 5.03-7.43l39.34-15.74c1.98-.79 3.86-1.82 5.59-3.05l23.71-16.89a7.978 7.978 0 0 1 4.64-1.48h12.09c3.23 0 6.15 1.94 7.39 4.93l5.35 12.85a4 4 0 0 0 3.69 2.46h3.8c1.78 0 3.35-1.18 3.84-2.88l4.2-14.47c.5-1.71 2.06-2.88 3.84-2.88h6.06c2.21 0 4 1.79 4 4v12.93c0 2.12.84 4.16 2.34 5.66l11.91 11.91c3 3 4.69 7.07 4.69 11.31v24.6z"]
    };
    exports.faGlobeAsia = faGlobeAsia;
    var faGlobeEurope = {
      prefix: 'fas',
      iconName: 'globe-europe',
      icon: [496, 512, [], "f7a2", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm200 248c0 22.5-3.9 44.2-10.8 64.4h-20.3c-4.3 0-8.4-1.7-11.4-4.8l-32-32.6c-4.5-4.6-4.5-12.1.1-16.7l12.5-12.5v-8.7c0-3-1.2-5.9-3.3-8l-9.4-9.4c-2.1-2.1-5-3.3-8-3.3h-16c-6.2 0-11.3-5.1-11.3-11.3 0-3 1.2-5.9 3.3-8l9.4-9.4c2.1-2.1 5-3.3 8-3.3h32c6.2 0 11.3-5.1 11.3-11.3v-9.4c0-6.2-5.1-11.3-11.3-11.3h-36.7c-8.8 0-16 7.2-16 16v4.5c0 6.9-4.4 13-10.9 15.2l-31.6 10.5c-3.3 1.1-5.5 4.1-5.5 7.6v2.2c0 4.4-3.6 8-8 8h-16c-4.4 0-8-3.6-8-8s-3.6-8-8-8H247c-3 0-5.8 1.7-7.2 4.4l-9.4 18.7c-2.7 5.4-8.2 8.8-14.3 8.8H194c-8.8 0-16-7.2-16-16V199c0-4.2 1.7-8.3 4.7-11.3l20.1-20.1c4.6-4.6 7.2-10.9 7.2-17.5 0-3.4 2.2-6.5 5.5-7.6l40-13.3c1.7-.6 3.2-1.5 4.4-2.7l26.8-26.8c2.1-2.1 3.3-5 3.3-8 0-6.2-5.1-11.3-11.3-11.3H258l-16 16v8c0 4.4-3.6 8-8 8h-16c-4.4 0-8-3.6-8-8v-20c0-2.5 1.2-4.9 3.2-6.4l28.9-21.7c1.9-.1 3.8-.3 5.7-.3C358.3 56 448 145.7 448 256zM130.1 149.1c0-3 1.2-5.9 3.3-8l25.4-25.4c2.1-2.1 5-3.3 8-3.3 6.2 0 11.3 5.1 11.3 11.3v16c0 3-1.2 5.9-3.3 8l-9.4 9.4c-2.1 2.1-5 3.3-8 3.3h-16c-6.2 0-11.3-5.1-11.3-11.3zm128 306.4v-7.1c0-8.8-7.2-16-16-16h-20.2c-10.8 0-26.7-5.3-35.4-11.8l-22.2-16.7c-11.5-8.6-18.2-22.1-18.2-36.4v-23.9c0-16 8.4-30.8 22.1-39l42.9-25.7c7.1-4.2 15.2-6.5 23.4-6.5h31.2c10.9 0 21.4 3.9 29.6 10.9l43.2 37.1h18.3c8.5 0 16.6 3.4 22.6 9.4l17.3 17.3c3.4 3.4 8.1 5.3 12.9 5.3H423c-32.4 58.9-93.8 99.5-164.9 103.1z"]
    };
    exports.faGlobeEurope = faGlobeEurope;
    var faGolfBall = {
      prefix: 'fas',
      iconName: 'golf-ball',
      icon: [416, 512, [], "f450", "M96 416h224c0 17.7-14.3 32-32 32h-16c-17.7 0-32 14.3-32 32v20c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-20c0-17.7-14.3-32-32-32h-16c-17.7 0-32-14.3-32-32zm320-208c0 74.2-39 139.2-97.5 176h-221C39 347.2 0 282.2 0 208 0 93.1 93.1 0 208 0s208 93.1 208 208zm-180.1 43.9c18.3 0 33.1-14.8 33.1-33.1 0-14.4-9.3-26.3-22.1-30.9 9.6 26.8-15.6 51.3-41.9 41.9 4.6 12.8 16.5 22.1 30.9 22.1zm49.1 46.9c0-14.4-9.3-26.3-22.1-30.9 9.6 26.8-15.6 51.3-41.9 41.9 4.6 12.8 16.5 22.1 30.9 22.1 18.3 0 33.1-14.9 33.1-33.1zm64-64c0-14.4-9.3-26.3-22.1-30.9 9.6 26.8-15.6 51.3-41.9 41.9 4.6 12.8 16.5 22.1 30.9 22.1 18.3 0 33.1-14.9 33.1-33.1z"]
    };
    exports.faGolfBall = faGolfBall;
    var faGopuram = {
      prefix: 'fas',
      iconName: 'gopuram',
      icon: [512, 512, [], "f664", "M496 352h-16V240c0-8.8-7.2-16-16-16h-16v-80c0-8.8-7.2-16-16-16h-16V16c0-8.8-7.2-16-16-16s-16 7.2-16 16v16h-64V16c0-8.8-7.2-16-16-16s-16 7.2-16 16v16h-64V16c0-8.8-7.2-16-16-16s-16 7.2-16 16v16h-64V16c0-8.8-7.2-16-16-16S96 7.2 96 16v112H80c-8.8 0-16 7.2-16 16v80H48c-8.8 0-16 7.2-16 16v112H16c-8.8 0-16 7.2-16 16v128c0 8.8 7.2 16 16 16h80V352h32V224h32v-96h32v96h-32v128h-32v160h80v-80c0-8.8 7.2-16 16-16h64c8.8 0 16 7.2 16 16v80h80V352h-32V224h-32v-96h32v96h32v128h32v160h80c8.8 0 16-7.2 16-16V368c0-8.8-7.2-16-16-16zM232 176c0-8.8 7.2-16 16-16h16c8.8 0 16 7.2 16 16v48h-48zm56 176h-64v-64c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16z"]
    };
    exports.faGopuram = faGopuram;
    var faGraduationCap = {
      prefix: 'fas',
      iconName: 'graduation-cap',
      icon: [640, 512, [], "f19d", "M622.34 153.2L343.4 67.5c-15.2-4.67-31.6-4.67-46.79 0L17.66 153.2c-23.54 7.23-23.54 38.36 0 45.59l48.63 14.94c-10.67 13.19-17.23 29.28-17.88 46.9C38.78 266.15 32 276.11 32 288c0 10.78 5.68 19.85 13.86 25.65L20.33 428.53C18.11 438.52 25.71 448 35.94 448h56.11c10.24 0 17.84-9.48 15.62-19.47L82.14 313.65C90.32 307.85 96 298.78 96 288c0-11.57-6.47-21.25-15.66-26.87.76-15.02 8.44-28.3 20.69-36.72L296.6 284.5c9.06 2.78 26.44 6.25 46.79 0l278.95-85.7c23.55-7.24 23.55-38.36 0-45.6zM352.79 315.09c-28.53 8.76-52.84 3.92-65.59 0l-145.02-44.55L128 384c0 35.35 85.96 64 192 64s192-28.65 192-64l-14.18-113.47-145.03 44.56z"]
    };
    exports.faGraduationCap = faGraduationCap;
    var faGreaterThan = {
      prefix: 'fas',
      iconName: 'greater-than',
      icon: [384, 512, [], "f531", "M365.52 209.85L59.22 67.01c-16.06-7.49-35.15-.54-42.64 15.52L3.01 111.61c-7.49 16.06-.54 35.15 15.52 42.64L236.96 256.1 18.49 357.99C2.47 365.46-4.46 384.5 3.01 400.52l13.52 29C24 445.54 43.04 452.47 59.06 445l306.47-142.91a32.003 32.003 0 0 0 18.48-29v-34.23c-.01-12.45-7.21-23.76-18.49-29.01z"]
    };
    exports.faGreaterThan = faGreaterThan;
    var faGreaterThanEqual = {
      prefix: 'fas',
      iconName: 'greater-than-equal',
      icon: [448, 512, [], "f532", "M55.22 107.69l175.56 68.09-175.44 68.05c-18.39 6.03-27.88 24.39-21.2 41l12.09 30.08c6.68 16.61 26.99 25.19 45.38 19.15L393.02 214.2c13.77-4.52 22.98-16.61 22.98-30.17v-15.96c0-13.56-9.21-25.65-22.98-30.17L91.3 17.92c-18.29-6-38.51 2.53-45.15 19.06L34.12 66.9c-6.64 16.53 2.81 34.79 21.1 40.79zM424 400H24c-13.25 0-24 10.74-24 24v48c0 13.25 10.75 24 24 24h400c13.25 0 24-10.75 24-24v-48c0-13.26-10.75-24-24-24z"]
    };
    exports.faGreaterThanEqual = faGreaterThanEqual;
    var faGrimace = {
      prefix: 'fas',
      iconName: 'grimace',
      icon: [496, 512, [], "f57f", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM144 400h-8c-17.7 0-32-14.3-32-32v-8h40v40zm0-56h-40v-8c0-17.7 14.3-32 32-32h8v40zm-8-136c0-17.7 14.3-32 32-32s32 14.3 32 32-14.3 32-32 32-32-14.3-32-32zm72 192h-48v-40h48v40zm0-56h-48v-40h48v40zm64 56h-48v-40h48v40zm0-56h-48v-40h48v40zm64 56h-48v-40h48v40zm0-56h-48v-40h48v40zm-8-104c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm64 128c0 17.7-14.3 32-32 32h-8v-40h40v8zm0-24h-40v-40h8c17.7 0 32 14.3 32 32v8z"]
    };
    exports.faGrimace = faGrimace;
    var faGrin = {
      prefix: 'fas',
      iconName: 'grin',
      icon: [496, 512, [], "f580", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm80 168c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm-160 0c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm80 256c-60.6 0-134.5-38.3-143.8-93.3-2-11.8 9.3-21.6 20.7-17.9C155.1 330.5 200 336 248 336s92.9-5.5 123.1-15.2c11.3-3.7 22.6 6.1 20.7 17.9-9.3 55-83.2 93.3-143.8 93.3z"]
    };
    exports.faGrin = faGrin;
    var faGrinAlt = {
      prefix: 'fas',
      iconName: 'grin-alt',
      icon: [496, 512, [], "f581", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm63.7 128.7c7.6-11.4 24.7-11.7 32.7 0 12.4 18.4 15.1 36.9 15.7 55.3-.5 18.4-3.3 36.9-15.7 55.3-7.6 11.4-24.7 11.7-32.7 0-12.4-18.4-15.1-36.9-15.7-55.3.5-18.4 3.3-36.9 15.7-55.3zm-160 0c7.6-11.4 24.7-11.7 32.7 0 12.4 18.4 15.1 36.9 15.7 55.3-.5 18.4-3.3 36.9-15.7 55.3-7.6 11.4-24.7 11.7-32.7 0-12.4-18.4-15.1-36.9-15.7-55.3.5-18.4 3.3-36.9 15.7-55.3zM248 432c-60.6 0-134.5-38.3-143.8-93.3-2-11.8 9.3-21.6 20.7-17.9C155.1 330.5 200 336 248 336s92.9-5.5 123.1-15.2c11.4-3.7 22.6 6.1 20.7 17.9-9.3 55-83.2 93.3-143.8 93.3z"]
    };
    exports.faGrinAlt = faGrinAlt;
    var faGrinBeam = {
      prefix: 'fas',
      iconName: 'grin-beam',
      icon: [496, 512, [], "f582", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm80 144c23.8 0 52.7 29.3 56 71.4.7 8.6-10.8 11.9-14.9 4.5l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.1 7.3-15.6 4-14.9-4.5 3.1-42.1 32-71.4 55.8-71.4zm-160 0c23.8 0 52.7 29.3 56 71.4.7 8.6-10.8 11.9-14.9 4.5l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.2 7.4-15.6 4-14.9-4.5 3.1-42.1 32-71.4 55.8-71.4zm80 280c-60.6 0-134.5-38.3-143.8-93.3-2-11.9 9.4-21.6 20.7-17.9C155.1 330.5 200 336 248 336s92.9-5.5 123.1-15.2c11.4-3.7 22.6 6.1 20.7 17.9-9.3 55-83.2 93.3-143.8 93.3z"]
    };
    exports.faGrinBeam = faGrinBeam;
    var faGrinBeamSweat = {
      prefix: 'fas',
      iconName: 'grin-beam-sweat',
      icon: [504, 512, [], "f583", "M456 128c26.5 0 48-21 48-47 0-20-28.5-60.4-41.6-77.8-3.2-4.3-9.6-4.3-12.8 0C436.5 20.6 408 61 408 81c0 26 21.5 47 48 47zm0 32c-44.1 0-80-35.4-80-79 0-4.4.3-14.2 8.1-32.2C345 23.1 298.3 8 248 8 111 8 0 119 0 256s111 248 248 248 248-111 248-248c0-35.1-7.4-68.4-20.5-98.6-6.3 1.5-12.7 2.6-19.5 2.6zm-128-8c23.8 0 52.7 29.3 56 71.4.7 8.6-10.8 12-14.9 4.5l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.1 7.4-15.6 4-14.9-4.5 3.1-42.1 32-71.4 55.8-71.4zm-160 0c23.8 0 52.7 29.3 56 71.4.7 8.6-10.8 12-14.9 4.5l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.2 7.4-15.6 4-14.9-4.5 3.1-42.1 32-71.4 55.8-71.4zm80 280c-60.6 0-134.5-38.3-143.8-93.3-2-11.8 9.3-21.6 20.7-17.9C155.1 330.5 200 336 248 336s92.9-5.5 123.1-15.2c11.5-3.7 22.6 6.2 20.7 17.9-9.3 55-83.2 93.3-143.8 93.3z"]
    };
    exports.faGrinBeamSweat = faGrinBeamSweat;
    var faGrinHearts = {
      prefix: 'fas',
      iconName: 'grin-hearts',
      icon: [496, 512, [], "f584", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM90.4 183.6c6.7-17.6 26.7-26.7 44.9-21.9l7.1 1.9 2-7.1c5-18.1 22.8-30.9 41.5-27.9 21.4 3.4 34.4 24.2 28.8 44.5L195.3 243c-1.2 4.5-5.9 7.2-10.5 6l-70.2-18.2c-20.4-5.4-31.9-27-24.2-47.2zM248 432c-60.6 0-134.5-38.3-143.8-93.3-2-11.8 9.2-21.5 20.7-17.9C155.1 330.5 200 336 248 336s92.9-5.5 123.1-15.2c11.4-3.6 22.6 6.1 20.7 17.9-9.3 55-83.2 93.3-143.8 93.3zm133.4-201.3l-70.2 18.2c-4.5 1.2-9.2-1.5-10.5-6L281.3 173c-5.6-20.3 7.4-41.1 28.8-44.5 18.6-3 36.4 9.8 41.5 27.9l2 7.1 7.1-1.9c18.2-4.7 38.2 4.3 44.9 21.9 7.7 20.3-3.8 41.9-24.2 47.2z"]
    };
    exports.faGrinHearts = faGrinHearts;
    var faGrinSquint = {
      prefix: 'fas',
      iconName: 'grin-squint',
      icon: [496, 512, [], "f585", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm33.8 189.7l80-48c11.6-6.9 24 7.7 15.4 18L343.6 208l33.6 40.3c8.7 10.4-3.9 24.8-15.4 18l-80-48c-7.7-4.7-7.7-15.9 0-20.6zm-163-30c-8.6-10.3 3.8-24.9 15.4-18l80 48c7.8 4.7 7.8 15.9 0 20.6l-80 48c-11.5 6.8-24-7.6-15.4-18l33.6-40.3-33.6-40.3zM248 432c-60.6 0-134.5-38.3-143.8-93.3-2-11.9 9.4-21.6 20.7-17.9C155.1 330.5 200 336 248 336s92.9-5.5 123.1-15.2c11.5-3.7 22.6 6.2 20.7 17.9-9.3 55-83.2 93.3-143.8 93.3z"]
    };
    exports.faGrinSquint = faGrinSquint;
    var faGrinSquintTears = {
      prefix: 'fas',
      iconName: 'grin-squint-tears',
      icon: [512, 512, [], "f586", "M409.6 111.9c22.6-3.2 73.5-12 88.3-26.8 19.2-19.2 18.9-50.6-.7-70.2S446-5 426.9 14.2c-14.8 14.8-23.5 65.7-26.8 88.3-.8 5.5 3.9 10.2 9.5 9.4zM102.4 400.1c-22.6 3.2-73.5 12-88.3 26.8-19.1 19.1-18.8 50.6.8 70.2s51 19.9 70.2.7c14.8-14.8 23.5-65.7 26.8-88.3.8-5.5-3.9-10.2-9.5-9.4zm311.7-256.5c-33 3.9-48.6-25.1-45.7-45.7 3.4-24 7.4-42.1 11.5-56.5C285.1-13.4 161.8-.5 80.6 80.6-.5 161.7-13.4 285 41.4 379.9c14.4-4.1 32.4-8 56.5-11.5 33.2-3.9 48.6 25.2 45.7 45.7-3.4 24-7.4 42.1-11.5 56.5 94.8 54.8 218.1 41.9 299.3-39.2s94-204.4 39.2-299.3c-14.4 4.1-32.5 8-56.5 11.5zM255.7 106c3.3-13.2 22.4-11.5 23.6 1.8l4.8 52.3 52.3 4.8c13.4 1.2 14.9 20.3 1.8 23.6l-90.5 22.6c-8.9 2.2-16.7-5.9-14.5-14.5l22.5-90.6zm-90.9 230.3L160 284l-52.3-4.8c-13.4-1.2-14.9-20.3-1.8-23.6l90.5-22.6c8.8-2.2 16.7 5.8 14.5 14.5L188.3 338c-3.1 13.2-22.2 11.7-23.5-1.7zm215.7 44.2c-29.3 29.3-75.7 50.4-116.7 50.4-18.9 0-36.6-4.5-51-14.7-9.8-6.9-8.7-21.8 2-27.2 28.3-14.6 63.9-42.4 97.8-76.3s61.7-69.6 76.3-97.8c5.4-10.5 20.2-11.9 27.3-2 32.3 45.3 7.1 124.7-35.7 167.6z"]
    };
    exports.faGrinSquintTears = faGrinSquintTears;
    var faGrinStars = {
      prefix: 'fas',
      iconName: 'grin-stars',
      icon: [496, 512, [], "f587", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM94.6 168.9l34.9-5 15.5-31.6c2.9-5.8 11-5.8 13.9 0l15.5 31.6 34.9 5c6.2 1 8.9 8.6 4.3 13.2l-25.4 24.6 6 34.9c1 6.2-5.3 11-11 7.9L152 233.3l-31.3 16.3c-5.7 3.1-12-1.7-11-7.9l6-34.9-25.4-24.6c-4.6-4.7-1.9-12.3 4.3-13.3zM248 432c-60.6 0-134.5-38.3-143.8-93.3-2-11.8 9.3-21.5 20.7-17.9C155.1 330.5 200 336 248 336s92.9-5.5 123.1-15.2c11.5-3.7 22.6 6.1 20.7 17.9-9.3 55-83.2 93.3-143.8 93.3zm157.7-249.9l-25.4 24.6 6 34.9c1 6.2-5.3 11-11 7.9L344 233.3l-31.3 16.3c-5.7 3.1-12-1.7-11-7.9l6-34.9-25.4-24.6c-4.5-4.6-1.9-12.2 4.3-13.2l34.9-5 15.5-31.6c2.9-5.8 11-5.8 13.9 0l15.5 31.6 34.9 5c6.3.9 9 8.5 4.4 13.1z"]
    };
    exports.faGrinStars = faGrinStars;
    var faGrinTears = {
      prefix: 'fas',
      iconName: 'grin-tears',
      icon: [640, 512, [], "f588", "M102.4 256.1c-22.6 3.2-73.5 12-88.3 26.8-19.1 19.1-18.8 50.6.8 70.2s51 19.9 70.2.7c14.8-14.8 23.5-65.7 26.8-88.3.8-5.5-3.9-10.2-9.5-9.4zm523.4 26.8c-14.8-14.8-65.7-23.5-88.3-26.8-5.5-.8-10.3 3.9-9.5 9.5 3.2 22.6 12 73.5 26.8 88.3 19.2 19.2 50.6 18.9 70.2-.7s20-51.2.8-70.3zm-129.4-12.8c-3.8-26.6 19.1-49.5 45.7-45.7 8.9 1.3 16.8 2.7 24.3 4.1C552.7 104.5 447.7 8 320 8S87.3 104.5 73.6 228.5c7.5-1.4 15.4-2.8 24.3-4.1 33.2-3.9 48.6 25.3 45.7 45.7-11.8 82.3-29.9 100.4-35.8 106.4-.9.9-2 1.6-3 2.5 42.7 74.6 123 125 215.2 125s172.5-50.4 215.2-125.1c-1-.9-2.1-1.5-3-2.5-5.9-5.9-24-24-35.8-106.3zM400 152c23.8 0 52.7 29.3 56 71.4.7 8.6-10.8 12-14.9 4.5l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.2 7.4-15.6 4-14.9-4.5 3.1-42.1 32-71.4 55.8-71.4zm-160 0c23.8 0 52.7 29.3 56 71.4.7 8.6-10.8 12-14.9 4.5l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.2 7.4-15.6 4-14.9-4.5 3.1-42.1 32-71.4 55.8-71.4zm80 280c-60.6 0-134.5-38.3-143.8-93.3-2-11.7 9.2-21.6 20.7-17.9C227.1 330.5 272 336 320 336s92.9-5.5 123.1-15.2c11.4-3.7 22.6 6.1 20.7 17.9-9.3 55-83.2 93.3-143.8 93.3z"]
    };
    exports.faGrinTears = faGrinTears;
    var faGrinTongue = {
      prefix: 'fas',
      iconName: 'grin-tongue',
      icon: [496, 512, [], "f589", "M248 8C111 8 0 119 0 256c0 106.3 67 196.7 161 232-5.6-12.2-9-25.7-9-40v-45.5c-24.7-16.2-43.5-38.1-47.8-63.8-2-11.8 9.3-21.5 20.7-17.9C155.1 330.5 200 336 248 336s92.9-5.5 123.1-15.2c11.4-3.6 22.6 6.1 20.7 17.9-4.3 25.7-23.1 47.6-47.8 63.8V448c0 14.3-3.4 27.8-9 40 94-35.3 161-125.7 161-232C496 119 385 8 248 8zm-80 232c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm160 0c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm-34.9 134.6c-14.4-6.5-31.1 2.2-34.6 17.6l-1.8 7.8c-2.1 9.2-15.2 9.2-17.3 0l-1.8-7.8c-3.5-15.4-20.2-24.1-34.6-17.6-.9.4.3-.2-18.9 9.4v63c0 35.2 28 64.5 63.1 64.9 35.7.5 64.9-28.4 64.9-64v-64c-19.5-9.6-18.2-8.9-19-9.3z"]
    };
    exports.faGrinTongue = faGrinTongue;
    var faGrinTongueSquint = {
      prefix: 'fas',
      iconName: 'grin-tongue-squint',
      icon: [496, 512, [], "f58a", "M293.1 374.6c-14.4-6.5-31.1 2.2-34.6 17.6l-1.8 7.8c-2.1 9.2-15.2 9.2-17.3 0l-1.8-7.8c-3.5-15.4-20.2-24.1-34.6-17.6-.9.4.3-.2-18.9 9.4v63c0 35.2 28 64.5 63.1 64.9 35.7.5 64.9-28.4 64.9-64v-64c-19.5-9.6-18.2-8.9-19-9.3zM248 8C111 8 0 119 0 256c0 106.3 67 196.7 161 232-5.6-12.2-9-25.7-9-40v-45.5c-24.7-16.2-43.5-38.1-47.8-63.8-2-11.8 9.2-21.5 20.7-17.9C155.1 330.5 200 336 248 336s92.9-5.5 123.1-15.2c11.4-3.7 22.6 6.1 20.7 17.9-4.3 25.7-23.1 47.6-47.8 63.8V448c0 14.3-3.4 27.8-9 40 94-35.3 161-125.7 161-232C496 119 385 8 248 8zm-33.8 210.3l-80 48c-11.5 6.8-24-7.6-15.4-18l33.6-40.3-33.6-40.3c-8.6-10.3 3.8-24.9 15.4-18l80 48c7.7 4.7 7.7 15.9 0 20.6zm163 30c8.7 10.4-3.9 24.8-15.4 18l-80-48c-7.8-4.7-7.8-15.9 0-20.6l80-48c11.7-6.9 23.9 7.7 15.4 18L343.6 208l33.6 40.3z"]
    };
    exports.faGrinTongueSquint = faGrinTongueSquint;
    var faGrinTongueWink = {
      prefix: 'fas',
      iconName: 'grin-tongue-wink',
      icon: [496, 512, [], "f58b", "M344 184c-13.3 0-24 10.7-24 24s10.7 24 24 24 24-10.7 24-24-10.7-24-24-24zM248 8C111 8 0 119 0 256c0 106.3 67 196.7 161 232-5.6-12.2-9-25.7-9-40v-45.5c-24.7-16.2-43.5-38.1-47.8-63.8-2-11.8 9.3-21.5 20.7-17.9C155.1 330.5 200 336 248 336s92.9-5.5 123.1-15.2c11.5-3.7 22.6 6.1 20.7 17.9-4.3 25.7-23.1 47.6-47.8 63.8V448c0 14.3-3.4 27.8-9 40 94-35.3 161-125.7 161-232C496 119 385 8 248 8zm-56 225l-9.5-8.5c-14.8-13.2-46.2-13.2-61 0L112 233c-8.5 7.4-21.6.3-19.8-10.8 4-25.2 34.2-42.1 59.9-42.1S208 197 212 222.2c1.6 11.1-11.6 18.2-20 10.8zm152 39c-35.3 0-64-28.7-64-64s28.7-64 64-64 64 28.7 64 64-28.7 64-64 64zm-50.9 102.6c-14.4-6.5-31.1 2.2-34.6 17.6l-1.8 7.8c-2.1 9.2-15.2 9.2-17.3 0l-1.8-7.8c-3.5-15.4-20.2-24.1-34.6-17.6-.9.4.3-.2-18.9 9.4v63c0 35.2 28 64.5 63.1 64.9 35.7.5 64.9-28.4 64.9-64v-64c-19.5-9.6-18.2-8.9-19-9.3z"]
    };
    exports.faGrinTongueWink = faGrinTongueWink;
    var faGrinWink = {
      prefix: 'fas',
      iconName: 'grin-wink',
      icon: [496, 512, [], "f58c", "M0 256c0 137 111 248 248 248s248-111 248-248S385 8 248 8 0 119 0 256zm200-48c0 17.7-14.3 32-32 32s-32-14.3-32-32 14.3-32 32-32 32 14.3 32 32zm168 25l-9.5-8.5c-14.8-13.2-46.2-13.2-61 0L288 233c-8.3 7.4-21.6.4-19.8-10.8 4-25.2 34.2-42.1 59.9-42.1S384 197 388 222.2c1.6 11-11.5 18.2-20 10.8zm-243.1 87.8C155.1 330.5 200 336 248 336s92.9-5.5 123.1-15.2c11.3-3.7 22.6 6 20.7 17.9-9.2 55-83.2 93.3-143.8 93.3s-134.5-38.3-143.8-93.3c-2-11.9 9.3-21.6 20.7-17.9z"]
    };
    exports.faGrinWink = faGrinWink;
    var faGripHorizontal = {
      prefix: 'fas',
      iconName: 'grip-horizontal',
      icon: [448, 512, [], "f58d", "M96 288H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm160 0h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm160 0h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zM96 96H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm160 0h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm160 0h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32z"]
    };
    exports.faGripHorizontal = faGripHorizontal;
    var faGripLines = {
      prefix: 'fas',
      iconName: 'grip-lines',
      icon: [512, 512, [], "f7a4", "M496 288H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm0-128H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16z"]
    };
    exports.faGripLines = faGripLines;
    var faGripLinesVertical = {
      prefix: 'fas',
      iconName: 'grip-lines-vertical',
      icon: [256, 512, [], "f7a5", "M96 496V16c0-8.8-7.2-16-16-16H48c-8.8 0-16 7.2-16 16v480c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16zm128 0V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v480c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16z"]
    };
    exports.faGripLinesVertical = faGripLinesVertical;
    var faGripVertical = {
      prefix: 'fas',
      iconName: 'grip-vertical',
      icon: [320, 512, [], "f58e", "M96 32H32C14.33 32 0 46.33 0 64v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zM288 32h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32z"]
    };
    exports.faGripVertical = faGripVertical;
    var faGuitar = {
      prefix: 'fas',
      iconName: 'guitar',
      icon: [512, 512, [], "f7a6", "M502.63 39L473 9.37a32 32 0 0 0-45.26 0L381.46 55.7a35.14 35.14 0 0 0-8.53 13.79L360.77 106l-76.26 76.26c-12.16-8.76-25.5-15.74-40.1-19.14-33.45-7.78-67-.88-89.88 22a82.45 82.45 0 0 0-20.24 33.47c-6 18.56-23.21 32.69-42.15 34.46-23.7 2.27-45.73 11.45-62.61 28.44C-16.11 327-7.9 409 47.58 464.45S185 528 230.56 482.52c17-16.88 26.16-38.9 28.45-62.71 1.76-18.85 15.89-36.13 34.43-42.14a82.6 82.6 0 0 0 33.48-20.25c22.87-22.88 29.74-56.36 22-89.75-3.39-14.64-10.37-28-19.16-40.2L406 151.23l36.48-12.16a35.14 35.14 0 0 0 13.79-8.53l46.33-46.32a32 32 0 0 0 .03-45.22zM208 352a48 48 0 1 1 48-48 48 48 0 0 1-48 48z"]
    };
    exports.faGuitar = faGuitar;
    var faHSquare = {
      prefix: 'fas',
      iconName: 'h-square',
      icon: [448, 512, [], "f0fd", "M448 80v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48zm-112 48h-32c-8.837 0-16 7.163-16 16v80H160v-80c0-8.837-7.163-16-16-16h-32c-8.837 0-16 7.163-16 16v224c0 8.837 7.163 16 16 16h32c8.837 0 16-7.163 16-16v-80h128v80c0 8.837 7.163 16 16 16h32c8.837 0 16-7.163 16-16V144c0-8.837-7.163-16-16-16z"]
    };
    exports.faHSquare = faHSquare;
    var faHamburger = {
      prefix: 'fas',
      iconName: 'hamburger',
      icon: [512, 512, [], "f805", "M464 256H48a48 48 0 0 0 0 96h416a48 48 0 0 0 0-96zm16 128H32a16 16 0 0 0-16 16v16a64 64 0 0 0 64 64h352a64 64 0 0 0 64-64v-16a16 16 0 0 0-16-16zM58.64 224h394.72c34.57 0 54.62-43.9 34.82-75.88C448 83.2 359.55 32.1 256 32c-103.54.1-192 51.2-232.18 116.11C4 180.09 24.07 224 58.64 224zM384 112a16 16 0 1 1-16 16 16 16 0 0 1 16-16zM256 80a16 16 0 1 1-16 16 16 16 0 0 1 16-16zm-128 32a16 16 0 1 1-16 16 16 16 0 0 1 16-16z"]
    };
    exports.faHamburger = faHamburger;
    var faHammer = {
      prefix: 'fas',
      iconName: 'hammer',
      icon: [576, 512, [], "f6e3", "M571.31 193.94l-22.63-22.63c-6.25-6.25-16.38-6.25-22.63 0l-11.31 11.31-28.9-28.9c5.63-21.31.36-44.9-16.35-61.61l-45.25-45.25c-62.48-62.48-163.79-62.48-226.28 0l90.51 45.25v18.75c0 16.97 6.74 33.25 18.75 45.25l49.14 49.14c16.71 16.71 40.3 21.98 61.61 16.35l28.9 28.9-11.31 11.31c-6.25 6.25-6.25 16.38 0 22.63l22.63 22.63c6.25 6.25 16.38 6.25 22.63 0l90.51-90.51c6.23-6.24 6.23-16.37-.02-22.62zm-286.72-15.2c-3.7-3.7-6.84-7.79-9.85-11.95L19.64 404.96c-25.57 23.88-26.26 64.19-1.53 88.93s65.05 24.05 88.93-1.53l238.13-255.07c-3.96-2.91-7.9-5.87-11.44-9.41l-49.14-49.14z"]
    };
    exports.faHammer = faHammer;
    var faHamsa = {
      prefix: 'fas',
      iconName: 'hamsa',
      icon: [512, 512, [], "f665", "M509.34 307.25C504.28 295.56 492.75 288 480 288h-64V80c0-22-18-40-40-40s-40 18-40 40v134c0 5.52-4.48 10-10 10h-20c-5.52 0-10-4.48-10-10V40c0-22-18-40-40-40s-40 18-40 40v174c0 5.52-4.48 10-10 10h-20c-5.52 0-10-4.48-10-10V80c0-22-18-40-40-40S96 58 96 80v208H32c-12.75 0-24.28 7.56-29.34 19.25a31.966 31.966 0 0 0 5.94 34.58l102.69 110.03C146.97 490.08 199.69 512 256 512s109.03-21.92 144.72-60.14L503.4 341.83a31.966 31.966 0 0 0 5.94-34.58zM256 416c-53.02 0-96-64-96-64s42.98-64 96-64 96 64 96 64-42.98 64-96 64zm0-96c-17.67 0-32 14.33-32 32s14.33 32 32 32 32-14.33 32-32-14.33-32-32-32z"]
    };
    exports.faHamsa = faHamsa;
    var faHandHolding = {
      prefix: 'fas',
      iconName: 'hand-holding',
      icon: [576, 512, [], "f4bd", "M565.3 328.1c-11.8-10.7-30.2-10-42.6 0L430.3 402c-11.3 9.1-25.4 14-40 14H272c-8.8 0-16-7.2-16-16s7.2-16 16-16h78.3c15.9 0 30.7-10.9 33.3-26.6 3.3-20-12.1-37.4-31.6-37.4H192c-27 0-53.1 9.3-74.1 26.3L71.4 384H16c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h356.8c14.5 0 28.6-4.9 40-14L564 377c15.2-12.1 16.4-35.3 1.3-48.9z"]
    };
    exports.faHandHolding = faHandHolding;
    var faHandHoldingHeart = {
      prefix: 'fas',
      iconName: 'hand-holding-heart',
      icon: [576, 512, [], "f4be", "M275.3 250.5c7 7.4 18.4 7.4 25.5 0l108.9-114.2c31.6-33.2 29.8-88.2-5.6-118.8-30.8-26.7-76.7-21.9-104.9 7.7L288 36.9l-11.1-11.6C248.7-4.4 202.8-9.2 172 17.5c-35.3 30.6-37.2 85.6-5.6 118.8l108.9 114.2zm290 77.6c-11.8-10.7-30.2-10-42.6 0L430.3 402c-11.3 9.1-25.4 14-40 14H272c-8.8 0-16-7.2-16-16s7.2-16 16-16h78.3c15.9 0 30.7-10.9 33.3-26.6 3.3-20-12.1-37.4-31.6-37.4H192c-27 0-53.1 9.3-74.1 26.3L71.4 384H16c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h356.8c14.5 0 28.6-4.9 40-14L564 377c15.2-12.1 16.4-35.3 1.3-48.9z"]
    };
    exports.faHandHoldingHeart = faHandHoldingHeart;
    var faHandHoldingMedical = {
      prefix: 'fas',
      iconName: 'hand-holding-medical',
      icon: [576, 512, [], "e05c", "M159.88,175.82h64v64a16,16,0,0,0,16,16h64a16,16,0,0,0,16-16v-64h64a16,16,0,0,0,16-16v-64a16,16,0,0,0-16-16h-64v-64a16,16,0,0,0-16-16h-64a16,16,0,0,0-16,16v64h-64a16,16,0,0,0-16,16v64A16,16,0,0,0,159.88,175.82ZM568.07,336.13a39.91,39.91,0,0,0-55.93-8.47L392.47,415.84H271.86a16,16,0,0,1,0-32H350.1c16,0,30.75-10.87,33.37-26.61a32.06,32.06,0,0,0-31.62-37.38h-160a117.7,117.7,0,0,0-74.12,26.25l-46.5,37.74H15.87a16.11,16.11,0,0,0-16,16v96a16.11,16.11,0,0,0,16,16h347a104.8,104.8,0,0,0,61.7-20.27L559.6,392A40,40,0,0,0,568.07,336.13Z"]
    };
    exports.faHandHoldingMedical = faHandHoldingMedical;
    var faHandHoldingUsd = {
      prefix: 'fas',
      iconName: 'hand-holding-usd',
      icon: [576, 512, [], "f4c0", "M271.06,144.3l54.27,14.3a8.59,8.59,0,0,1,6.63,8.1c0,4.6-4.09,8.4-9.12,8.4h-35.6a30,30,0,0,1-11.19-2.2c-5.24-2.2-11.28-1.7-15.3,2l-19,17.5a11.68,11.68,0,0,0-2.25,2.66,11.42,11.42,0,0,0,3.88,15.74,83.77,83.77,0,0,0,34.51,11.5V240c0,8.8,7.83,16,17.37,16h17.37c9.55,0,17.38-7.2,17.38-16V222.4c32.93-3.6,57.84-31,53.5-63-3.15-23-22.46-41.3-46.56-47.7L282.68,97.4a8.59,8.59,0,0,1-6.63-8.1c0-4.6,4.09-8.4,9.12-8.4h35.6A30,30,0,0,1,332,83.1c5.23,2.2,11.28,1.7,15.3-2l19-17.5A11.31,11.31,0,0,0,368.47,61a11.43,11.43,0,0,0-3.84-15.78,83.82,83.82,0,0,0-34.52-11.5V16c0-8.8-7.82-16-17.37-16H295.37C285.82,0,278,7.2,278,16V33.6c-32.89,3.6-57.85,31-53.51,63C227.63,119.6,247,137.9,271.06,144.3ZM565.27,328.1c-11.8-10.7-30.2-10-42.6,0L430.27,402a63.64,63.64,0,0,1-40,14H272a16,16,0,0,1,0-32h78.29c15.9,0,30.71-10.9,33.25-26.6a31.2,31.2,0,0,0,.46-5.46A32,32,0,0,0,352,320H192a117.66,117.66,0,0,0-74.1,26.29L71.4,384H16A16,16,0,0,0,0,400v96a16,16,0,0,0,16,16H372.77a64,64,0,0,0,40-14L564,377a32,32,0,0,0,1.28-48.9Z"]
    };
    exports.faHandHoldingUsd = faHandHoldingUsd;
    var faHandHoldingWater = {
      prefix: 'fas',
      iconName: 'hand-holding-water',
      icon: [576, 512, [], "f4c1", "M288 256c53 0 96-42.1 96-94 0-40-57.1-120.7-83.2-155.6-6.4-8.5-19.2-8.5-25.6 0C249.1 41.3 192 122 192 162c0 51.9 43 94 96 94zm277.3 72.1c-11.8-10.7-30.2-10-42.6 0L430.3 402c-11.3 9.1-25.4 14-40 14H272c-8.8 0-16-7.2-16-16s7.2-16 16-16h78.3c15.9 0 30.7-10.9 33.3-26.6 3.3-20-12.1-37.4-31.6-37.4H192c-27 0-53.1 9.3-74.1 26.3L71.4 384H16c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h356.8c14.5 0 28.6-4.9 40-14L564 377c15.2-12.1 16.4-35.3 1.3-48.9z"]
    };
    exports.faHandHoldingWater = faHandHoldingWater;
    var faHandLizard = {
      prefix: 'fas',
      iconName: 'hand-lizard',
      icon: [576, 512, [], "f258", "M384 480h192V363.778a95.998 95.998 0 0 0-14.833-51.263L398.127 54.368A48 48 0 0 0 357.544 32H24C10.745 32 0 42.745 0 56v16c0 30.928 25.072 56 56 56h229.981c12.844 0 21.556 13.067 16.615 24.923l-21.41 51.385A32 32 0 0 1 251.648 224H128c-35.346 0-64 28.654-64 64v8c0 13.255 10.745 24 24 24h147.406a47.995 47.995 0 0 1 25.692 7.455l111.748 70.811A24.001 24.001 0 0 1 384 418.539V480z"]
    };
    exports.faHandLizard = faHandLizard;
    var faHandMiddleFinger = {
      prefix: 'fas',
      iconName: 'hand-middle-finger',
      icon: [512, 512, [], "f806", "M479.93 317.12a37.33 37.33 0 0 0-28.28-36.19L416 272v-49.59c0-11.44-9.69-21.29-23.15-23.54l-38.4-6.4C336.63 189.5 320 200.86 320 216v32a8 8 0 0 1-16 0V50c0-26.28-20.25-49.2-46.52-50A48 48 0 0 0 208 48v200a8 8 0 0 1-16 0v-32c0-15.15-16.63-26.51-34.45-23.54l-30.68 5.12c-18 3-30.87 16.12-30.87 31.38V376a8 8 0 0 1-16 0v-76l-27.36 15A37.34 37.34 0 0 0 32 348.4v73.47a37.31 37.31 0 0 0 10.93 26.39l30.93 30.93A112 112 0 0 0 153.05 512h215A112 112 0 0 0 480 400z"]
    };
    exports.faHandMiddleFinger = faHandMiddleFinger;
    var faHandPaper = {
      prefix: 'fas',
      iconName: 'hand-paper',
      icon: [448, 512, [], "f256", "M408.781 128.007C386.356 127.578 368 146.36 368 168.79V256h-8V79.79c0-22.43-18.356-41.212-40.781-40.783C297.488 39.423 280 57.169 280 79v177h-8V40.79C272 18.36 253.644-.422 231.219.007 209.488.423 192 18.169 192 40v216h-8V80.79c0-22.43-18.356-41.212-40.781-40.783C121.488 40.423 104 58.169 104 80v235.992l-31.648-43.519c-12.993-17.866-38.009-21.817-55.877-8.823-17.865 12.994-21.815 38.01-8.822 55.877l125.601 172.705A48 48 0 0 0 172.073 512h197.59c22.274 0 41.622-15.324 46.724-37.006l26.508-112.66a192.011 192.011 0 0 0 5.104-43.975V168c.001-21.831-17.487-39.577-39.218-39.993z"]
    };
    exports.faHandPaper = faHandPaper;
    var faHandPeace = {
      prefix: 'fas',
      iconName: 'hand-peace',
      icon: [448, 512, [], "f25b", "M408 216c-22.092 0-40 17.909-40 40h-8v-32c0-22.091-17.908-40-40-40s-40 17.909-40 40v32h-8V48c0-26.51-21.49-48-48-48s-48 21.49-48 48v208h-13.572L92.688 78.449C82.994 53.774 55.134 41.63 30.461 51.324 5.787 61.017-6.356 88.877 3.337 113.551l74.765 190.342-31.09 24.872c-15.381 12.306-19.515 33.978-9.741 51.081l64 112A39.998 39.998 0 0 0 136 512h240c18.562 0 34.686-12.77 38.937-30.838l32-136A39.97 39.97 0 0 0 448 336v-80c0-22.091-17.908-40-40-40z"]
    };
    exports.faHandPeace = faHandPeace;
    var faHandPointDown = {
      prefix: 'fas',
      iconName: 'hand-point-down',
      icon: [384, 512, [], "f0a7", "M91.826 467.2V317.966c-8.248 5.841-16.558 10.57-24.918 14.153C35.098 345.752-.014 322.222 0 288c.008-18.616 10.897-32.203 29.092-40 28.286-12.122 64.329-78.648 77.323-107.534 7.956-17.857 25.479-28.453 43.845-28.464l.001-.002h171.526c11.812 0 21.897 8.596 23.703 20.269 7.25 46.837 38.483 61.76 38.315 123.731-.007 2.724.195 13.254.195 16 0 50.654-22.122 81.574-71.263 72.6-9.297 18.597-39.486 30.738-62.315 16.45-21.177 24.645-53.896 22.639-70.944 6.299V467.2c0 24.15-20.201 44.8-43.826 44.8-23.283 0-43.826-21.35-43.826-44.8zM112 72V24c0-13.255 10.745-24 24-24h192c13.255 0 24 10.745 24 24v48c0 13.255-10.745 24-24 24H136c-13.255 0-24-10.745-24-24zm212-24c0-11.046-8.954-20-20-20s-20 8.954-20 20 8.954 20 20 20 20-8.954 20-20z"]
    };
    exports.faHandPointDown = faHandPointDown;
    var faHandPointLeft = {
      prefix: 'fas',
      iconName: 'hand-point-left',
      icon: [512, 512, [], "f0a5", "M44.8 155.826h149.234c-5.841-8.248-10.57-16.558-14.153-24.918C166.248 99.098 189.778 63.986 224 64c18.616.008 32.203 10.897 40 29.092 12.122 28.286 78.648 64.329 107.534 77.323 17.857 7.956 28.453 25.479 28.464 43.845l.002.001v171.526c0 11.812-8.596 21.897-20.269 23.703-46.837 7.25-61.76 38.483-123.731 38.315-2.724-.007-13.254.195-16 .195-50.654 0-81.574-22.122-72.6-71.263-18.597-9.297-30.738-39.486-16.45-62.315-24.645-21.177-22.639-53.896-6.299-70.944H44.8c-24.15 0-44.8-20.201-44.8-43.826 0-23.283 21.35-43.826 44.8-43.826zM440 176h48c13.255 0 24 10.745 24 24v192c0 13.255-10.745 24-24 24h-48c-13.255 0-24-10.745-24-24V200c0-13.255 10.745-24 24-24zm24 212c11.046 0 20-8.954 20-20s-8.954-20-20-20-20 8.954-20 20 8.954 20 20 20z"]
    };
    exports.faHandPointLeft = faHandPointLeft;
    var faHandPointRight = {
      prefix: 'fas',
      iconName: 'hand-point-right',
      icon: [512, 512, [], "f0a4", "M512 199.652c0 23.625-20.65 43.826-44.8 43.826h-99.851c16.34 17.048 18.346 49.766-6.299 70.944 14.288 22.829 2.147 53.017-16.45 62.315C353.574 425.878 322.654 448 272 448c-2.746 0-13.276-.203-16-.195-61.971.168-76.894-31.065-123.731-38.315C120.596 407.683 112 397.599 112 385.786V214.261l.002-.001c.011-18.366 10.607-35.889 28.464-43.845 28.886-12.994 95.413-49.038 107.534-77.323 7.797-18.194 21.384-29.084 40-29.092 34.222-.014 57.752 35.098 44.119 66.908-3.583 8.359-8.312 16.67-14.153 24.918H467.2c23.45 0 44.8 20.543 44.8 43.826zM96 200v192c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V200c0-13.255 10.745-24 24-24h48c13.255 0 24 10.745 24 24zM68 368c0-11.046-8.954-20-20-20s-20 8.954-20 20 8.954 20 20 20 20-8.954 20-20z"]
    };
    exports.faHandPointRight = faHandPointRight;
    var faHandPointUp = {
      prefix: 'fas',
      iconName: 'hand-point-up',
      icon: [384, 512, [], "f0a6", "M135.652 0c23.625 0 43.826 20.65 43.826 44.8v99.851c17.048-16.34 49.766-18.346 70.944 6.299 22.829-14.288 53.017-2.147 62.315 16.45C361.878 158.426 384 189.346 384 240c0 2.746-.203 13.276-.195 16 .168 61.971-31.065 76.894-38.315 123.731C343.683 391.404 333.599 400 321.786 400H150.261l-.001-.002c-18.366-.011-35.889-10.607-43.845-28.464C93.421 342.648 57.377 276.122 29.092 264 10.897 256.203.008 242.616 0 224c-.014-34.222 35.098-57.752 66.908-44.119 8.359 3.583 16.67 8.312 24.918 14.153V44.8c0-23.45 20.543-44.8 43.826-44.8zM136 416h192c13.255 0 24 10.745 24 24v48c0 13.255-10.745 24-24 24H136c-13.255 0-24-10.745-24-24v-48c0-13.255 10.745-24 24-24zm168 28c-11.046 0-20 8.954-20 20s8.954 20 20 20 20-8.954 20-20-8.954-20-20-20z"]
    };
    exports.faHandPointUp = faHandPointUp;
    var faHandPointer = {
      prefix: 'fas',
      iconName: 'hand-pointer',
      icon: [448, 512, [], "f25a", "M448 240v96c0 3.084-.356 6.159-1.063 9.162l-32 136C410.686 499.23 394.562 512 376 512H168a40.004 40.004 0 0 1-32.35-16.473l-127.997-176c-12.993-17.866-9.043-42.883 8.822-55.876 17.867-12.994 42.884-9.043 55.877 8.823L104 315.992V40c0-22.091 17.908-40 40-40s40 17.909 40 40v200h8v-40c0-22.091 17.908-40 40-40s40 17.909 40 40v40h8v-24c0-22.091 17.908-40 40-40s40 17.909 40 40v24h8c0-22.091 17.908-40 40-40s40 17.909 40 40zm-256 80h-8v96h8v-96zm88 0h-8v96h8v-96zm88 0h-8v96h8v-96z"]
    };
    exports.faHandPointer = faHandPointer;
    var faHandRock = {
      prefix: 'fas',
      iconName: 'hand-rock',
      icon: [512, 512, [], "f255", "M464.8 80c-26.9-.4-48.8 21.2-48.8 48h-8V96.8c0-26.3-20.9-48.3-47.2-48.8-26.9-.4-48.8 21.2-48.8 48v32h-8V80.8c0-26.3-20.9-48.3-47.2-48.8-26.9-.4-48.8 21.2-48.8 48v48h-8V96.8c0-26.3-20.9-48.3-47.2-48.8-26.9-.4-48.8 21.2-48.8 48v136l-8-7.1v-48.1c0-26.3-20.9-48.3-47.2-48.8C21.9 127.6 0 149.2 0 176v66.4c0 27.4 11.7 53.5 32.2 71.8l111.7 99.3c10.2 9.1 16.1 22.2 16.1 35.9v6.7c0 13.3 10.7 24 24 24h240c13.3 0 24-10.7 24-24v-2.9c0-12.8 2.6-25.5 7.5-37.3l49-116.3c5-11.8 7.5-24.5 7.5-37.3V128.8c0-26.3-20.9-48.4-47.2-48.8z"]
    };
    exports.faHandRock = faHandRock;
    var faHandScissors = {
      prefix: 'fas',
      iconName: 'hand-scissors',
      icon: [512, 512, [], "f257", "M216 440c0-22.092 17.909-40 40-40v-8h-32c-22.091 0-40-17.908-40-40s17.909-40 40-40h32v-8H48c-26.51 0-48-21.49-48-48s21.49-48 48-48h208v-13.572l-177.551-69.74c-24.674-9.694-36.818-37.555-27.125-62.228 9.693-24.674 37.554-36.817 62.228-27.124l190.342 74.765 24.872-31.09c12.306-15.381 33.978-19.515 51.081-9.741l112 64A40.002 40.002 0 0 1 512 168v240c0 18.562-12.77 34.686-30.838 38.937l-136 32A39.982 39.982 0 0 1 336 480h-80c-22.091 0-40-17.908-40-40z"]
    };
    exports.faHandScissors = faHandScissors;
    var faHandSparkles = {
      prefix: 'fas',
      iconName: 'hand-sparkles',
      icon: [640, 512, [], "e05d", "M106.66,170.64l.09,0,49.55-20.65a7.32,7.32,0,0,0,3.68-6h0a7.29,7.29,0,0,0-3.68-6l-49.57-20.67-.07,0L86,67.68a6.66,6.66,0,0,0-11.92,0l-20.7,49.63-.05,0L3.7,138A7.29,7.29,0,0,0,0,144H0a7.32,7.32,0,0,0,3.68,6L53.27,170.6l.07,0L74,220.26a6.65,6.65,0,0,0,11.92,0l20.69-49.62ZM471.38,467.41l-1-.42-1-.5a38.67,38.67,0,0,1,0-69.14l1-.49,1-.43,37.49-15.63,15.63-37.48.41-1,.47-.95c3.85-7.74,10.58-13.63,18.35-17.34,0-1.33.25-2.69.27-4V144a32,32,0,0,0-64,0v72a8,8,0,0,1-8,8H456a8,8,0,0,1-8-8V64a32,32,0,0,0-64,0V216a8,8,0,0,1-8,8H360a8,8,0,0,1-8-8V32a32,32,0,0,0-64,0V216a8,8,0,0,1-8,8H264a8,8,0,0,1-8-8V64a32,32,0,0,0-64,0v241l-23.59-32.49a40,40,0,0,0-64.71,47.09L229.3,492.21A48.07,48.07,0,0,0,268.09,512H465.7c19.24,0,35.65-11.73,43.24-28.79l-.07-.17ZM349.79,339.52,320,351.93l-12.42,29.78a4,4,0,0,1-7.15,0L288,351.93l-29.79-12.41a4,4,0,0,1,0-7.16L288,319.94l12.42-29.78a4,4,0,0,1,7.15,0L320,319.94l29.79,12.42a4,4,0,0,1,0,7.16ZM640,431.91a7.28,7.28,0,0,0-3.68-6l-49.57-20.67-.07,0L566,355.63a6.66,6.66,0,0,0-11.92,0l-20.7,49.63-.05,0L483.7,426a7.28,7.28,0,0,0-3.68,6h0a7.29,7.29,0,0,0,3.68,5.95l49.57,20.67.07,0L554,508.21a6.65,6.65,0,0,0,11.92,0l20.69-49.62h0l.09,0,49.55-20.66a7.29,7.29,0,0,0,3.68-5.95h0Z"]
    };
    exports.faHandSparkles = faHandSparkles;
    var faHandSpock = {
      prefix: 'fas',
      iconName: 'hand-spock',
      icon: [512, 512, [], "f259", "M510.9005,145.27027,442.604,432.09391A103.99507,103.99507,0,0,1,341.43745,512H214.074a135.96968,135.96968,0,0,1-93.18489-36.95291L12.59072,373.12723a39.992,39.992,0,0,1,54.8122-58.24988l60.59342,57.02528v0a283.24849,283.24849,0,0,0-11.6703-80.46734L73.63726,147.36011a40.00575,40.00575,0,1,1,76.71833-22.7187l37.15458,125.39477a8.33113,8.33113,0,0,0,16.05656-4.4414L153.26183,49.95406A39.99638,39.99638,0,1,1,230.73015,30.0166l56.09491,218.15825a10.42047,10.42047,0,0,0,20.30018-.501L344.80766,63.96966a40.052,40.052,0,0,1,51.30245-30.0893c19.86073,6.2998,30.86262,27.67378,26.67564,48.08487l-33.83869,164.966a7.55172,7.55172,0,0,0,14.74406,3.2666l29.3973-123.45874a39.99414,39.99414,0,1,1,77.81208,18.53121Z"]
    };
    exports.faHandSpock = faHandSpock;
    var faHands = {
      prefix: 'fas',
      iconName: 'hands',
      icon: [640, 512, [], "f4c2", "M204.8 230.4c-10.6-14.1-30.7-17-44.8-6.4-14.1 10.6-17 30.7-6.4 44.8l38.1 50.8c4.8 6.4 4.1 15.3-1.5 20.9l-12.8 12.8c-6.7 6.7-17.6 6.2-23.6-1.1L64 244.4V96c0-17.7-14.3-32-32-32S0 78.3 0 96v218.4c0 10.9 3.7 21.5 10.5 30l104.1 134.3c5 6.5 8.4 13.9 10.4 21.7 1.8 6.9 8.1 11.6 15.3 11.6H272c8.8 0 16-7.2 16-16V384c0-27.7-9-54.6-25.6-76.8l-57.6-76.8zM608 64c-17.7 0-32 14.3-32 32v148.4l-89.8 107.8c-6 7.2-17 7.7-23.6 1.1l-12.8-12.8c-5.6-5.6-6.3-14.5-1.5-20.9l38.1-50.8c10.6-14.1 7.7-34.2-6.4-44.8-14.1-10.6-34.2-7.7-44.8 6.4l-57.6 76.8C361 329.4 352 356.3 352 384v112c0 8.8 7.2 16 16 16h131.7c7.1 0 13.5-4.7 15.3-11.6 2-7.8 5.4-15.2 10.4-21.7l104.1-134.3c6.8-8.5 10.5-19.1 10.5-30V96c0-17.7-14.3-32-32-32z"]
    };
    exports.faHands = faHands;
    var faHandsHelping = {
      prefix: 'fas',
      iconName: 'hands-helping',
      icon: [640, 512, [], "f4c4", "M488 192H336v56c0 39.7-32.3 72-72 72s-72-32.3-72-72V126.4l-64.9 39C107.8 176.9 96 197.8 96 220.2v47.3l-80 46.2C.7 322.5-4.6 342.1 4.3 357.4l80 138.6c8.8 15.3 28.4 20.5 43.7 11.7L231.4 448H368c35.3 0 64-28.7 64-64h16c17.7 0 32-14.3 32-32v-64h8c13.3 0 24-10.7 24-24v-48c0-13.3-10.7-24-24-24zm147.7-37.4L555.7 16C546.9.7 527.3-4.5 512 4.3L408.6 64H306.4c-12 0-23.7 3.4-33.9 9.7L239 94.6c-9.4 5.8-15 16.1-15 27.1V248c0 22.1 17.9 40 40 40s40-17.9 40-40v-88h184c30.9 0 56 25.1 56 56v28.5l80-46.2c15.3-8.9 20.5-28.4 11.7-43.7z"]
    };
    exports.faHandsHelping = faHandsHelping;
    var faHandsWash = {
      prefix: 'fas',
      iconName: 'hands-wash',
      icon: [576, 512, [], "e05e", "M496,224a48,48,0,1,0-48-48A48,48,0,0,0,496,224ZM311.47,178.45A56.77,56.77,0,0,1,328,176a56,56,0,0,1,19,3.49l15.35-48.61A24,24,0,0,0,342,99.74c-11.53-1.35-22.21,6.44-25.71,17.51l-20.9,66.17ZM93.65,386.33c.8-.19,1.54-.54,2.35-.71V359.93a156,156,0,0,1,107.06-148l73.7-22.76L310.92,81.05a24,24,0,0,0-20.33-31.11c-11.53-1.34-22.22,6.45-25.72,17.52L231.42,173.88a8,8,0,0,1-15.26-4.83L259.53,31.26A24,24,0,0,0,239.2.15C227.67-1.19,217,6.6,213.49,17.66L165.56,169.37a8,8,0,1,1-15.26-4.82l38.56-122a24,24,0,0,0-20.33-31.11C157,10,146.32,17.83,142.82,28.9l-60,189.85L80.76,168.7A24,24,0,0,0,56.9,144.55c-13.23-.05-24.72,10.54-24.9,23.86V281.14A123.69,123.69,0,0,0,93.65,386.33ZM519.1,336H360a8,8,0,0,1,0-16H488a24,24,0,0,0,23.54-28.76C509.35,279.84,498.71,272,487.1,272H288l47.09-17.06a24,24,0,0,0-14.18-45.88L213.19,242.31A123.88,123.88,0,0,0,128,360v25.65a79.78,79.78,0,0,1,58,108.63A118.9,118.9,0,0,0,248,512H456a24,24,0,0,0,23.54-28.76C477.35,471.84,466.71,464,455.1,464H360a8,8,0,0,1,0-16H488a24,24,0,0,0,23.54-28.76C509.35,407.84,498.71,400,487.1,400H360a8,8,0,0,1,0-16H520a24,24,0,0,0,23.54-28.76C541.35,343.84,530.71,336,519.1,336ZM416,64a32,32,0,1,0-32-32A32,32,0,0,0,416,64ZM112,416a48,48,0,1,0,48,48A48,48,0,0,0,112,416Z"]
    };
    exports.faHandsWash = faHandsWash;
    var faHandshake = {
      prefix: 'fas',
      iconName: 'handshake',
      icon: [640, 512, [], "f2b5", "M434.7 64h-85.9c-8 0-15.7 3-21.6 8.4l-98.3 90c-.1.1-.2.3-.3.4-16.6 15.6-16.3 40.5-2.1 56 12.7 13.9 39.4 17.6 56.1 2.7.1-.1.3-.1.4-.2l79.9-73.2c6.5-5.9 16.7-5.5 22.6 1 6 6.5 5.5 16.6-1 22.6l-26.1 23.9L504 313.8c2.9 2.4 5.5 5 7.9 7.7V128l-54.6-54.6c-5.9-6-14.1-9.4-22.6-9.4zM544 128.2v223.9c0 17.7 14.3 32 32 32h64V128.2h-96zm48 223.9c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zM0 384h64c17.7 0 32-14.3 32-32V128.2H0V384zm48-63.9c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16c0-8.9 7.2-16 16-16zm435.9 18.6L334.6 217.5l-30 27.5c-29.7 27.1-75.2 24.5-101.7-4.4-26.9-29.4-24.8-74.9 4.4-101.7L289.1 64h-83.8c-8.5 0-16.6 3.4-22.6 9.4L128 128v223.9h18.3l90.5 81.9c27.4 22.3 67.7 18.1 90-9.3l.2-.2 17.9 15.5c15.9 13 39.4 10.5 52.3-5.4l31.4-38.6 5.4 4.4c13.7 11.1 33.9 9.1 45-4.7l9.5-11.7c11.2-13.8 9.1-33.9-4.6-45.1z"]
    };
    exports.faHandshake = faHandshake;
    var faHandshakeAltSlash = {
      prefix: 'fas',
      iconName: 'handshake-alt-slash',
      icon: [640, 512, [], "e05f", "M358.59,195.6,504.2,313.8a63.4,63.4,0,0,1,22.21,37.91H624a16.05,16.05,0,0,0,16-16V143.91A16,16,0,0,0,624,128H512L457.41,73.41A32,32,0,0,0,434.8,64H348.91a32,32,0,0,0-21.61,8.41l-88.12,80.68-25.69-19.85L289.09,64H205.3a32,32,0,0,0-22.6,9.41l-20.34,20.3L45.47,3.38A16,16,0,0,0,23,6.19L3.38,31.46A16,16,0,0,0,6.19,53.91L594.54,508.63A16,16,0,0,0,617,505.82l19.64-25.27a16,16,0,0,0-2.81-22.45L303.4,202.72l32.69-29.92,27-24.7a16,16,0,0,1,21.61,23.61ZM16,128A16.05,16.05,0,0,0,0,144V335.91a16,16,0,0,0,16,16H146.3l90.5,81.89a64,64,0,0,0,90-9.3l.2-.2,17.91,15.5a37.16,37.16,0,0,0,52.29-5.39l8.8-10.82L23.56,128Z"]
    };
    exports.faHandshakeAltSlash = faHandshakeAltSlash;
    var faHandshakeSlash = {
      prefix: 'fas',
      iconName: 'handshake-slash',
      icon: [640, 512, [], "e060", "M0,128.21V384H64a32,32,0,0,0,32-32V184L23.83,128.21ZM48,320.1a16,16,0,1,1-16,16A16,16,0,0,1,48,320.1Zm80,31.81h18.3l90.5,81.89a64,64,0,0,0,90-9.3l.2-.2,17.91,15.5a37.16,37.16,0,0,0,52.29-5.39l8.8-10.82L128,208.72Zm416-223.7V352.1a32,32,0,0,0,32,32h64V128.21ZM592,352.1a16,16,0,1,1,16-16A16,16,0,0,1,592,352.1ZM303.33,202.67l59.58-54.57a16,16,0,0,1,21.59,23.61L358.41,195.6,504,313.8a73.08,73.08,0,0,1,7.91,7.7V128L457.3,73.41A31.76,31.76,0,0,0,434.7,64H348.8a31.93,31.93,0,0,0-21.6,8.41l-88.07,80.64-25.64-19.81L289.09,64H205.3a32,32,0,0,0-22.6,9.41L162.36,93.72,45.47,3.38A16,16,0,0,0,23,6.19L3.38,31.46A16,16,0,0,0,6.19,53.91L594.53,508.63A16,16,0,0,0,617,505.82l19.65-25.27a16,16,0,0,0-2.82-22.45Z"]
    };
    exports.faHandshakeSlash = faHandshakeSlash;
    var faHanukiah = {
      prefix: 'fas',
      iconName: 'hanukiah',
      icon: [640, 512, [], "f6e6", "M232 160c-4.42 0-8 3.58-8 8v120h32V168c0-4.42-3.58-8-8-8h-16zm-64 0c-4.42 0-8 3.58-8 8v120h32V168c0-4.42-3.58-8-8-8h-16zm224 0c-4.42 0-8 3.58-8 8v120h32V168c0-4.42-3.58-8-8-8h-16zm64 0c-4.42 0-8 3.58-8 8v120h32V168c0-4.42-3.58-8-8-8h-16zm88 8c0-4.42-3.58-8-8-8h-16c-4.42 0-8 3.58-8 8v120h32V168zm-440-8c-4.42 0-8 3.58-8 8v120h32V168c0-4.42-3.58-8-8-8h-16zm520 0h-32c-8.84 0-16 7.16-16 16v112c0 17.67-14.33 32-32 32H352V128c0-8.84-7.16-16-16-16h-32c-8.84 0-16 7.16-16 16v192H96c-17.67 0-32-14.33-32-32V176c0-8.84-7.16-16-16-16H16c-8.84 0-16 7.16-16 16v112c0 53.02 42.98 96 96 96h192v64H112c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h416c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16H352v-64h192c53.02 0 96-42.98 96-96V176c0-8.84-7.16-16-16-16zm-16-32c13.25 0 24-11.94 24-26.67S608 48 608 48s-24 38.61-24 53.33S594.75 128 608 128zm-576 0c13.25 0 24-11.94 24-26.67S32 48 32 48 8 86.61 8 101.33 18.75 128 32 128zm288-48c13.25 0 24-11.94 24-26.67S320 0 320 0s-24 38.61-24 53.33S306.75 80 320 80zm-208 48c13.25 0 24-11.94 24-26.67S112 48 112 48s-24 38.61-24 53.33S98.75 128 112 128zm64 0c13.25 0 24-11.94 24-26.67S176 48 176 48s-24 38.61-24 53.33S162.75 128 176 128zm64 0c13.25 0 24-11.94 24-26.67S240 48 240 48s-24 38.61-24 53.33S226.75 128 240 128zm160 0c13.25 0 24-11.94 24-26.67S400 48 400 48s-24 38.61-24 53.33S386.75 128 400 128zm64 0c13.25 0 24-11.94 24-26.67S464 48 464 48s-24 38.61-24 53.33S450.75 128 464 128zm64 0c13.25 0 24-11.94 24-26.67S528 48 528 48s-24 38.61-24 53.33S514.75 128 528 128z"]
    };
    exports.faHanukiah = faHanukiah;
    var faHardHat = {
      prefix: 'fas',
      iconName: 'hard-hat',
      icon: [512, 512, [], "f807", "M480 288c0-80.25-49.28-148.92-119.19-177.62L320 192V80a16 16 0 0 0-16-16h-96a16 16 0 0 0-16 16v112l-40.81-81.62C81.28 139.08 32 207.75 32 288v64h448zm16 96H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h480a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z"]
    };
    exports.faHardHat = faHardHat;
    var faHashtag = {
      prefix: 'fas',
      iconName: 'hashtag',
      icon: [448, 512, [], "f292", "M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z"]
    };
    exports.faHashtag = faHashtag;
    var faHatCowboy = {
      prefix: 'fas',
      iconName: 'hat-cowboy',
      icon: [640, 512, [], "f8c0", "M490 296.9C480.51 239.51 450.51 64 392.3 64c-14 0-26.49 5.93-37 14a58.21 58.21 0 0 1-70.58 0c-10.51-8-23-14-37-14-58.2 0-88.2 175.47-97.71 232.88C188.81 309.47 243.73 320 320 320s131.23-10.51 170-23.1zm142.9-37.18a16 16 0 0 0-19.75 1.5c-1 .9-101.27 90.78-293.16 90.78-190.82 0-292.22-89.94-293.24-90.84A16 16 0 0 0 1 278.53C1.73 280.55 78.32 480 320 480s318.27-199.45 319-201.47a16 16 0 0 0-6.09-18.81z"]
    };
    exports.faHatCowboy = faHatCowboy;
    var faHatCowboySide = {
      prefix: 'fas',
      iconName: 'hat-cowboy-side',
      icon: [640, 512, [], "f8c1", "M260.8 291.06c-28.63-22.94-62-35.06-96.4-35.06C87 256 21.47 318.72 1.43 412.06c-3.55 16.6-.43 33.83 8.57 47.3C18.75 472.47 31.83 480 45.88 480H592c-103.21 0-155-37.07-233.19-104.46zm234.65-18.29L468.4 116.2A64 64 0 0 0 392 64.41L200.85 105a64 64 0 0 0-50.35 55.79L143.61 226c6.9-.83 13.7-2 20.79-2 41.79 0 82 14.55 117.29 42.82l98 84.48C450.76 412.54 494.9 448 592 448a48 48 0 0 0 48-48c0-25.39-29.6-119.33-144.55-127.23z"]
    };
    exports.faHatCowboySide = faHatCowboySide;
    var faHatWizard = {
      prefix: 'fas',
      iconName: 'hat-wizard',
      icon: [512, 512, [], "f6e8", "M496 448H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h480c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zm-304-64l-64-32 64-32 32-64 32 64 64 32-64 32-16 32h208l-86.41-201.63a63.955 63.955 0 0 1-1.89-45.45L416 0 228.42 107.19a127.989 127.989 0 0 0-53.46 59.15L64 416h144l-16-32zm64-224l16-32 16 32 32 16-32 16-16 32-16-32-32-16 32-16z"]
    };
    exports.faHatWizard = faHatWizard;
    var faHdd = {
      prefix: 'fas',
      iconName: 'hdd',
      icon: [576, 512, [], "f0a0", "M576 304v96c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48v-96c0-26.51 21.49-48 48-48h480c26.51 0 48 21.49 48 48zm-48-80a79.557 79.557 0 0 1 30.777 6.165L462.25 85.374A48.003 48.003 0 0 0 422.311 64H153.689a48 48 0 0 0-39.938 21.374L17.223 230.165A79.557 79.557 0 0 1 48 224h480zm-48 96c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm-96 0c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32z"]
    };
    exports.faHdd = faHdd;
    var faHeadSideCough = {
      prefix: 'fas',
      iconName: 'head-side-cough',
      icon: [640, 512, [], "e061", "M616,304a24,24,0,1,0-24-24A24,24,0,0,0,616,304ZM552,416a24,24,0,1,0,24,24A24,24,0,0,0,552,416Zm-64-56a24,24,0,1,0,24,24A24,24,0,0,0,488,360ZM616,464a24,24,0,1,0,24,24A24,24,0,0,0,616,464Zm0-104a24,24,0,1,0,24,24A24,24,0,0,0,616,360Zm-64-40a24,24,0,1,0,24,24A24,24,0,0,0,552,320Zm-74.78-45c-21-47.12-48.5-151.75-73.12-186.75A208.13,208.13,0,0,0,234.1,0H192C86,0,0,86,0,192c0,56.75,24.75,107.62,64,142.88V512H288V480h64a64,64,0,0,0,64-64H320a32,32,0,0,1,0-64h96V320h32A32,32,0,0,0,477.22,275ZM288,224a32,32,0,1,1,32-32A32.07,32.07,0,0,1,288,224Z"]
    };
    exports.faHeadSideCough = faHeadSideCough;
    var faHeadSideCoughSlash = {
      prefix: 'fas',
      iconName: 'head-side-cough-slash',
      icon: [640, 512, [], "e062", "M454.11,319.21c19.56-3.81,31.62-25,23.11-44.21-21-47.12-48.5-151.75-73.12-186.75A208.13,208.13,0,0,0,234.1,0H192A190.64,190.64,0,0,0,84.18,33.3L45.46,3.38A16,16,0,0,0,23,6.19L3.37,31.46A16,16,0,0,0,6.18,53.91L594.53,508.63A16,16,0,0,0,617,505.82l19.64-25.27a16,16,0,0,0-2.81-22.45ZM313.39,210.45,263.61,172c5.88-7.14,14.43-12,24.36-12a32.06,32.06,0,0,1,32,32C320,199,317.24,205.17,313.39,210.45ZM616,304a24,24,0,1,0-24-24A24,24,0,0,0,616,304Zm-64,64a24,24,0,1,0-24-24A24,24,0,0,0,552,368ZM288,384a32,32,0,0,1,32-32h19.54L20.73,105.59A190.86,190.86,0,0,0,0,192c0,56.75,24.75,107.62,64,142.88V512H288V480h64a64,64,0,0,0,64-64H320A32,32,0,0,1,288,384Zm328-24a24,24,0,1,0,24,24A24,24,0,0,0,616,360Z"]
    };
    exports.faHeadSideCoughSlash = faHeadSideCoughSlash;
    var faHeadSideMask = {
      prefix: 'fas',
      iconName: 'head-side-mask',
      icon: [512, 512, [], "e063", "M.15,184.42C-2.17,244.21,23,298.06,64,334.88V512H224V316.51L3.67,156.25A182.28,182.28,0,0,0,.15,184.42ZM509.22,275c-21-47.12-48.5-151.75-73.12-186.75A208.11,208.11,0,0,0,266.11,0H200C117,0,42.48,50.57,13.25,123.65L239.21,288H511.76A31.35,31.35,0,0,0,509.22,275ZM320,224a32,32,0,1,1,32-32A32.07,32.07,0,0,1,320,224Zm16,144H496l16-48H256V512H401.88a64,64,0,0,0,60.71-43.76L464,464H336a16,16,0,0,1,0-32H474.67l10.67-32H336a16,16,0,0,1,0-32Z"]
    };
    exports.faHeadSideMask = faHeadSideMask;
    var faHeadSideVirus = {
      prefix: 'fas',
      iconName: 'head-side-virus',
      icon: [512, 512, [], "e064", "M272,240a16,16,0,1,0,16,16A16,16,0,0,0,272,240Zm-64-64a16,16,0,1,0,16,16A16,16,0,0,0,208,176Zm301.2,99c-20.93-47.12-48.43-151.73-73.07-186.75A207.9,207.9,0,0,0,266.09,0H192C86,0,0,86,0,192A191.23,191.23,0,0,0,64,334.81V512H320V448h64a64,64,0,0,0,64-64V320H480A32,32,0,0,0,509.2,275ZM368,240H355.88c-28.51,0-42.79,34.47-22.63,54.63l8.58,8.57a16,16,0,1,1-22.63,22.63l-8.57-8.58C290.47,297.09,256,311.37,256,339.88V352a16,16,0,0,1-32,0V339.88c0-28.51-34.47-42.79-54.63-22.63l-8.57,8.58a16,16,0,0,1-22.63-22.63l8.58-8.57c20.16-20.16,5.88-54.63-22.63-54.63H112a16,16,0,0,1,0-32h12.12c28.51,0,42.79-34.47,22.63-54.63l-8.58-8.57a16,16,0,0,1,22.63-22.63l8.57,8.58c20.16,20.16,54.63,5.88,54.63-22.63V96a16,16,0,0,1,32,0v12.12c0,28.51,34.47,42.79,54.63,22.63l8.57-8.58a16,16,0,0,1,22.63,22.63l-8.58,8.57C313.09,173.53,327.37,208,355.88,208H368a16,16,0,0,1,0,32Z"]
    };
    exports.faHeadSideVirus = faHeadSideVirus;
    var faHeading = {
      prefix: 'fas',
      iconName: 'heading',
      icon: [512, 512, [], "f1dc", "M448 96v320h32a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H320a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32V288H160v128h32a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H32a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h32V96H32a16 16 0 0 1-16-16V48a16 16 0 0 1 16-16h160a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16h-32v128h192V96h-32a16 16 0 0 1-16-16V48a16 16 0 0 1 16-16h160a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16z"]
    };
    exports.faHeading = faHeading;
    var faHeadphones = {
      prefix: 'fas',
      iconName: 'headphones',
      icon: [512, 512, [], "f025", "M256 32C114.52 32 0 146.496 0 288v48a32 32 0 0 0 17.689 28.622l14.383 7.191C34.083 431.903 83.421 480 144 480h24c13.255 0 24-10.745 24-24V280c0-13.255-10.745-24-24-24h-24c-31.342 0-59.671 12.879-80 33.627V288c0-105.869 86.131-192 192-192s192 86.131 192 192v1.627C427.671 268.879 399.342 256 368 256h-24c-13.255 0-24 10.745-24 24v176c0 13.255 10.745 24 24 24h24c60.579 0 109.917-48.098 111.928-108.187l14.382-7.191A32 32 0 0 0 512 336v-48c0-141.479-114.496-256-256-256z"]
    };
    exports.faHeadphones = faHeadphones;
    var faHeadphonesAlt = {
      prefix: 'fas',
      iconName: 'headphones-alt',
      icon: [512, 512, [], "f58f", "M160 288h-16c-35.35 0-64 28.7-64 64.12v63.76c0 35.41 28.65 64.12 64 64.12h16c17.67 0 32-14.36 32-32.06V320.06c0-17.71-14.33-32.06-32-32.06zm208 0h-16c-17.67 0-32 14.35-32 32.06v127.88c0 17.7 14.33 32.06 32 32.06h16c35.35 0 64-28.71 64-64.12v-63.76c0-35.41-28.65-64.12-64-64.12zM256 32C112.91 32 4.57 151.13 0 288v112c0 8.84 7.16 16 16 16h16c8.84 0 16-7.16 16-16V288c0-114.67 93.33-207.8 208-207.82 114.67.02 208 93.15 208 207.82v112c0 8.84 7.16 16 16 16h16c8.84 0 16-7.16 16-16V288C507.43 151.13 399.09 32 256 32z"]
    };
    exports.faHeadphonesAlt = faHeadphonesAlt;
    var faHeadset = {
      prefix: 'fas',
      iconName: 'headset',
      icon: [512, 512, [], "f590", "M192 208c0-17.67-14.33-32-32-32h-16c-35.35 0-64 28.65-64 64v48c0 35.35 28.65 64 64 64h16c17.67 0 32-14.33 32-32V208zm176 144c35.35 0 64-28.65 64-64v-48c0-35.35-28.65-64-64-64h-16c-17.67 0-32 14.33-32 32v112c0 17.67 14.33 32 32 32h16zM256 0C113.18 0 4.58 118.83 0 256v16c0 8.84 7.16 16 16 16h16c8.84 0 16-7.16 16-16v-16c0-114.69 93.31-208 208-208s208 93.31 208 208h-.12c.08 2.43.12 165.72.12 165.72 0 23.35-18.93 42.28-42.28 42.28H320c0-26.51-21.49-48-48-48h-32c-26.51 0-48 21.49-48 48s21.49 48 48 48h181.72c49.86 0 90.28-40.42 90.28-90.28V256C507.42 118.83 398.82 0 256 0z"]
    };
    exports.faHeadset = faHeadset;
    var faHeart = {
      prefix: 'fas',
      iconName: 'heart',
      icon: [512, 512, [], "f004", "M462.3 62.6C407.5 15.9 326 24.3 275.7 76.2L256 96.5l-19.7-20.3C186.1 24.3 104.5 15.9 49.7 62.6c-62.8 53.6-66.1 149.8-9.9 207.9l193.5 199.8c12.5 12.9 32.8 12.9 45.3 0l193.5-199.8c56.3-58.1 53-154.3-9.8-207.9z"]
    };
    exports.faHeart = faHeart;
    var faHeartBroken = {
      prefix: 'fas',
      iconName: 'heart-broken',
      icon: [512, 512, [], "f7a9", "M473.7 73.8l-2.4-2.5c-46-47-118-51.7-169.6-14.8L336 159.9l-96 64 48 128-144-144 96-64-28.6-86.5C159.7 19.6 87 24 40.7 71.4l-2.4 2.4C-10.4 123.6-12.5 202.9 31 256l212.1 218.6c7.1 7.3 18.6 7.3 25.7 0L481 255.9c43.5-53 41.4-132.3-7.3-182.1z"]
    };
    exports.faHeartBroken = faHeartBroken;
    var faHeartbeat = {
      prefix: 'fas',
      iconName: 'heartbeat',
      icon: [512, 512, [], "f21e", "M320.2 243.8l-49.7 99.4c-6 12.1-23.4 11.7-28.9-.6l-56.9-126.3-30 71.7H60.6l182.5 186.5c7.1 7.3 18.6 7.3 25.7 0L451.4 288H342.3l-22.1-44.2zM473.7 73.9l-2.4-2.5c-51.5-52.6-135.8-52.6-187.4 0L256 100l-27.9-28.5c-51.5-52.7-135.9-52.7-187.4 0l-2.4 2.4C-10.4 123.7-12.5 203 31 256h102.4l35.9-86.2c5.4-12.9 23.6-13.2 29.4-.4l58.2 129.3 49-97.9c5.9-11.8 22.7-11.8 28.6 0l27.6 55.2H481c43.5-53 41.4-132.3-7.3-182.1z"]
    };
    exports.faHeartbeat = faHeartbeat;
    var faHelicopter = {
      prefix: 'fas',
      iconName: 'helicopter',
      icon: [640, 512, [], "f533", "M304 384h272c17.67 0 32-14.33 32-32 0-123.71-100.29-224-224-224V64h176c8.84 0 16-7.16 16-16V16c0-8.84-7.16-16-16-16H144c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h176v64H112L68.8 70.4C65.78 66.37 61.03 64 56 64H16.01C5.6 64-2.04 73.78.49 83.88L32 192l160 64 86.4 115.2A31.992 31.992 0 0 0 304 384zm112-188.49C478.55 208.3 528.03 257.44 540.79 320H416V195.51zm219.37 263.3l-22.15-22.2c-6.25-6.26-16.24-6.1-22.64.01-7.09 6.77-13.84 11.25-24.64 11.25H240c-8.84 0-16 7.18-16 16.03v32.06c0 8.85 7.16 16.03 16 16.03h325.94c14.88 0 35.3-.47 68.45-29.52 7.02-6.14 7.57-17.05.98-23.66z"]
    };
    exports.faHelicopter = faHelicopter;
    var faHighlighter = {
      prefix: 'fas',
      iconName: 'highlighter',
      icon: [544, 512, [], "f591", "M0 479.98L99.92 512l35.45-35.45-67.04-67.04L0 479.98zm124.61-240.01a36.592 36.592 0 0 0-10.79 38.1l13.05 42.83-50.93 50.94 96.23 96.23 50.86-50.86 42.74 13.08c13.73 4.2 28.65-.01 38.15-10.78l35.55-41.64-173.34-173.34-41.52 35.44zm403.31-160.7l-63.2-63.2c-20.49-20.49-53.38-21.52-75.12-2.35L190.55 183.68l169.77 169.78L530.27 154.4c19.18-21.74 18.15-54.63-2.35-75.13z"]
    };
    exports.faHighlighter = faHighlighter;
    var faHiking = {
      prefix: 'fas',
      iconName: 'hiking',
      icon: [384, 512, [], "f6ec", "M80.95 472.23c-4.28 17.16 6.14 34.53 23.28 38.81 2.61.66 5.22.95 7.8.95 14.33 0 27.37-9.7 31.02-24.23l25.24-100.97-52.78-52.78-34.56 138.22zm14.89-196.12L137 117c2.19-8.42-3.14-16.95-11.92-19.06-43.88-10.52-88.35 15.07-99.32 57.17L.49 253.24c-2.19 8.42 3.14 16.95 11.92 19.06l63.56 15.25c8.79 2.1 17.68-3.02 19.87-11.44zM368 160h-16c-8.84 0-16 7.16-16 16v16h-34.75l-46.78-46.78C243.38 134.11 228.61 128 212.91 128c-27.02 0-50.47 18.3-57.03 44.52l-26.92 107.72a32.012 32.012 0 0 0 8.42 30.39L224 397.25V480c0 17.67 14.33 32 32 32s32-14.33 32-32v-82.75c0-17.09-6.66-33.16-18.75-45.25l-46.82-46.82c.15-.5.49-.89.62-1.41l19.89-79.57 22.43 22.43c6 6 14.14 9.38 22.62 9.38h48v240c0 8.84 7.16 16 16 16h16c8.84 0 16-7.16 16-16V176c.01-8.84-7.15-16-15.99-16zM240 96c26.51 0 48-21.49 48-48S266.51 0 240 0s-48 21.49-48 48 21.49 48 48 48z"]
    };
    exports.faHiking = faHiking;
    var faHippo = {
      prefix: 'fas',
      iconName: 'hippo',
      icon: [640, 512, [], "f6ed", "M581.12 96.2c-27.67-.15-52.5 17.58-76.6 26.62C489.98 88.27 455.83 64 416 64c-11.28 0-21.95 2.3-32 5.88V56c0-13.26-10.75-24-24-24h-16c-13.25 0-24 10.74-24 24v48.98C286.01 79.58 241.24 64 192 64 85.96 64 0 135.64 0 224v240c0 8.84 7.16 16 16 16h64c8.84 0 16-7.16 16-16v-70.79C128.35 407.57 166.72 416 208 416s79.65-8.43 112-22.79V464c0 8.84 7.16 16 16 16h64c8.84 0 16-7.16 16-16V288h128v32c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-32c17.67 0 32-14.33 32-32v-92.02c0-34.09-24.79-67.59-58.88-67.78zM448 176c-8.84 0-16-7.16-16-16s7.16-16 16-16 16 7.16 16 16-7.16 16-16 16z"]
    };
    exports.faHippo = faHippo;
    var faHistory = {
      prefix: 'fas',
      iconName: 'history',
      icon: [512, 512, [], "f1da", "M504 255.531c.253 136.64-111.18 248.372-247.82 248.468-59.015.042-113.223-20.53-155.822-54.911-11.077-8.94-11.905-25.541-1.839-35.607l11.267-11.267c8.609-8.609 22.353-9.551 31.891-1.984C173.062 425.135 212.781 440 256 440c101.705 0 184-82.311 184-184 0-101.705-82.311-184-184-184-48.814 0-93.149 18.969-126.068 49.932l50.754 50.754c10.08 10.08 2.941 27.314-11.313 27.314H24c-8.837 0-16-7.163-16-16V38.627c0-14.254 17.234-21.393 27.314-11.314l49.372 49.372C129.209 34.136 189.552 8 256 8c136.81 0 247.747 110.78 248 247.531zm-180.912 78.784l9.823-12.63c8.138-10.463 6.253-25.542-4.21-33.679L288 256.349V152c0-13.255-10.745-24-24-24h-16c-13.255 0-24 10.745-24 24v135.651l65.409 50.874c10.463 8.137 25.541 6.253 33.679-4.21z"]
    };
    exports.faHistory = faHistory;
    var faHockeyPuck = {
      prefix: 'fas',
      iconName: 'hockey-puck',
      icon: [512, 512, [], "f453", "M0 160c0-53 114.6-96 256-96s256 43 256 96-114.6 96-256 96S0 213 0 160zm0 82.2V352c0 53 114.6 96 256 96s256-43 256-96V242.2c-113.4 82.3-398.5 82.4-512 0z"]
    };
    exports.faHockeyPuck = faHockeyPuck;
    var faHollyBerry = {
      prefix: 'fas',
      iconName: 'holly-berry',
      icon: [448, 512, [], "f7aa", "M144 192c26.5 0 48-21.5 48-48s-21.5-48-48-48-48 21.5-48 48 21.5 48 48 48zm112-48c0 26.5 21.5 48 48 48s48-21.5 48-48-21.5-48-48-48-48 21.5-48 48zm-32-48c26.5 0 48-21.5 48-48S250.5 0 224 0s-48 21.5-48 48 21.5 48 48 48zm-16.2 139.1c.1-12.4-13.1-20.1-23.8-13.7-34.3 20.3-71.4 32.7-108.7 36.2-9.7.9-15.6 11.3-11.6 20.2 6.2 13.9 11.1 28.6 14.7 43.8 3.6 15.2-5.3 30.6-20.2 35.1-14.9 4.5-30.1 7.6-45.3 9.1-9.7 1-15.7 11.3-11.7 20.2 15 32.8 22.9 69.5 23 107.7.1 14.4 15.2 23.1 27.6 16 33.2-19 68.9-30.5 104.8-33.9 9.7-.9 15.6-11.3 11.6-20.2-6.2-13.9-11.1-28.6-14.7-43.8-3.6-15.2 5.3-30.6 20.2-35.1 14.9-4.5 30.1-7.6 45.3-9.1 9.7-1 15.7-11.3 11.7-20.2-15.5-34.2-23.3-72.5-22.9-112.3zM435 365.6c-15.2-1.6-30.3-4.7-45.3-9.1-14.9-4.5-23.8-19.9-20.2-35.1 3.6-15.2 8.5-29.8 14.7-43.8 4-8.9-1.9-19.3-11.6-20.2-37.3-3.5-74.4-15.9-108.7-36.2-10.7-6.3-23.9 1.4-23.8 13.7 0 1.6-.2 3.2-.2 4.9.2 33.3 7 65.7 19.9 94 5.7 12.4 5.2 26.6-.6 38.9 4.9 1.2 9.9 2.2 14.8 3.7 14.9 4.5 23.8 19.9 20.2 35.1-3.6 15.2-8.5 29.8-14.7 43.8-4 8.9 1.9 19.3 11.6 20.2 35.9 3.4 71.6 14.9 104.8 33.9 12.5 7.1 27.6-1.6 27.6-16 .2-38.2 8-75 23-107.7 4.3-8.7-1.8-19.1-11.5-20.1z"]
    };
    exports.faHollyBerry = faHollyBerry;
    var faHome = {
      prefix: 'fas',
      iconName: 'home',
      icon: [576, 512, [], "f015", "M280.37 148.26L96 300.11V464a16 16 0 0 0 16 16l112.06-.29a16 16 0 0 0 15.92-16V368a16 16 0 0 1 16-16h64a16 16 0 0 1 16 16v95.64a16 16 0 0 0 16 16.05L464 480a16 16 0 0 0 16-16V300L295.67 148.26a12.19 12.19 0 0 0-15.3 0zM571.6 251.47L488 182.56V44.05a12 12 0 0 0-12-12h-56a12 12 0 0 0-12 12v72.61L318.47 43a48 48 0 0 0-61 0L4.34 251.47a12 12 0 0 0-1.6 16.9l25.5 31A12 12 0 0 0 45.15 301l235.22-193.74a12.19 12.19 0 0 1 15.3 0L530.9 301a12 12 0 0 0 16.9-1.6l25.5-31a12 12 0 0 0-1.7-16.93z"]
    };
    exports.faHome = faHome;
    var faHorse = {
      prefix: 'fas',
      iconName: 'horse',
      icon: [576, 512, [], "f6f0", "M575.92 76.6c-.01-8.13-3.02-15.87-8.58-21.8-3.78-4.03-8.58-9.12-13.69-14.5 11.06-6.84 19.5-17.49 22.18-30.66C576.85 4.68 572.96 0 567.9 0H447.92c-70.69 0-128 57.31-128 128H160c-28.84 0-54.4 12.98-72 33.11V160c-48.53 0-88 39.47-88 88v56c0 8.84 7.16 16 16 16h16c8.84 0 16-7.16 16-16v-56c0-13.22 6.87-24.39 16.78-31.68-.21 2.58-.78 5.05-.78 7.68 0 27.64 11.84 52.36 30.54 69.88l-25.72 68.6a63.945 63.945 0 0 0-2.16 37.99l24.85 99.41A15.982 15.982 0 0 0 107.02 512h65.96c10.41 0 18.05-9.78 15.52-19.88l-26.31-105.26 23.84-63.59L320 345.6V496c0 8.84 7.16 16 16 16h64c8.84 0 16-7.16 16-16V318.22c19.74-20.19 32-47.75 32-78.22 0-.22-.07-.42-.08-.64V136.89l16 7.11 18.9 37.7c7.45 14.87 25.05 21.55 40.49 15.37l32.55-13.02a31.997 31.997 0 0 0 20.12-29.74l-.06-77.71zm-64 19.4c-8.84 0-16-7.16-16-16s7.16-16 16-16 16 7.16 16 16-7.16 16-16 16z"]
    };
    exports.faHorse = faHorse;
    var faHorseHead = {
      prefix: 'fas',
      iconName: 'horse-head',
      icon: [512, 512, [], "f7ab", "M509.8 332.5l-69.9-164.3c-14.9-41.2-50.4-71-93-79.2 18-10.6 46.3-35.9 34.2-82.3-1.3-5-7.1-7.9-12-6.1L166.9 76.3C35.9 123.4 0 238.9 0 398.8V480c0 17.7 14.3 32 32 32h236.2c23.8 0 39.3-25 28.6-46.3L256 384v-.7c-45.6-3.5-84.6-30.7-104.3-69.6-1.6-3.1-.9-6.9 1.6-9.3l12.1-12.1c3.9-3.9 10.6-2.7 12.9 2.4 14.8 33.7 48.2 57.4 87.4 57.4 17.2 0 33-5.1 46.8-13.2l46 63.9c6 8.4 15.7 13.3 26 13.3h50.3c8.5 0 16.6-3.4 22.6-9.4l45.3-39.8c8.9-9.1 11.7-22.6 7.1-34.4zM328 224c-13.3 0-24-10.7-24-24s10.7-24 24-24 24 10.7 24 24-10.7 24-24 24z"]
    };
    exports.faHorseHead = faHorseHead;
    var faHospital = {
      prefix: 'fas',
      iconName: 'hospital',
      icon: [448, 512, [], "f0f8", "M448 492v20H0v-20c0-6.627 5.373-12 12-12h20V120c0-13.255 10.745-24 24-24h88V24c0-13.255 10.745-24 24-24h112c13.255 0 24 10.745 24 24v72h88c13.255 0 24 10.745 24 24v360h20c6.627 0 12 5.373 12 12zM308 192h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12zm-168 64h40c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12zm104 128h-40c-6.627 0-12 5.373-12 12v84h64v-84c0-6.627-5.373-12-12-12zm64-96h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12zm-116 12c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40zM182 96h26v26a6 6 0 0 0 6 6h20a6 6 0 0 0 6-6V96h26a6 6 0 0 0 6-6V70a6 6 0 0 0-6-6h-26V38a6 6 0 0 0-6-6h-20a6 6 0 0 0-6 6v26h-26a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6z"]
    };
    exports.faHospital = faHospital;
    var faHospitalAlt = {
      prefix: 'fas',
      iconName: 'hospital-alt',
      icon: [576, 512, [], "f47d", "M544 96H416V32c0-17.7-14.3-32-32-32H192c-17.7 0-32 14.3-32 32v64H32c-17.7 0-32 14.3-32 32v368c0 8.8 7.2 16 16 16h544c8.8 0 16-7.2 16-16V128c0-17.7-14.3-32-32-32zM160 436c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm0-128c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm160 128c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm0-128c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm16-170c0 3.3-2.7 6-6 6h-26v26c0 3.3-2.7 6-6 6h-20c-3.3 0-6-2.7-6-6v-26h-26c-3.3 0-6-2.7-6-6v-20c0-3.3 2.7-6 6-6h26V86c0-3.3 2.7-6 6-6h20c3.3 0 6 2.7 6 6v26h26c3.3 0 6 2.7 6 6v20zm144 298c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm0-128c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40z"]
    };
    exports.faHospitalAlt = faHospitalAlt;
    var faHospitalSymbol = {
      prefix: 'fas',
      iconName: 'hospital-symbol',
      icon: [512, 512, [], "f47e", "M256 0C114.6 0 0 114.6 0 256s114.6 256 256 256 256-114.6 256-256S397.4 0 256 0zm112 376c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-88h-96v88c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V136c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v88h96v-88c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v240z"]
    };
    exports.faHospitalSymbol = faHospitalSymbol;
    var faHospitalUser = {
      prefix: 'fas',
      iconName: 'hospital-user',
      icon: [640, 512, [], "f80d", "M480 320a96 96 0 1 0-96-96 96 96 0 0 0 96 96zm48 32a22.88 22.88 0 0 0-7.06 1.09 124.76 124.76 0 0 1-81.89 0A22.82 22.82 0 0 0 432 352a112 112 0 0 0-112 112.62c.14 26.26 21.73 47.38 48 47.38h224c26.27 0 47.86-21.12 48-47.38A112 112 0 0 0 528 352zm-198.09 10.45A145.19 145.19 0 0 1 352 344.62V128a32 32 0 0 0-32-32h-32V32a32 32 0 0 0-32-32H96a32 32 0 0 0-32 32v64H32a32 32 0 0 0-32 32v368a16 16 0 0 0 16 16h288.31A78.62 78.62 0 0 1 288 464.79a143.06 143.06 0 0 1 41.91-102.34zM144 404a12 12 0 0 1-12 12H92a12 12 0 0 1-12-12v-40a12 12 0 0 1 12-12h40a12 12 0 0 1 12 12zm0-128a12 12 0 0 1-12 12H92a12 12 0 0 1-12-12v-40a12 12 0 0 1 12-12h40a12 12 0 0 1 12 12zm48-122a6 6 0 0 1-6 6h-20a6 6 0 0 1-6-6v-26h-26a6 6 0 0 1-6-6v-20a6 6 0 0 1 6-6h26V70a6 6 0 0 1 6-6h20a6 6 0 0 1 6 6v26h26a6 6 0 0 1 6 6v20a6 6 0 0 1-6 6h-26zm80 250a12 12 0 0 1-12 12h-40a12 12 0 0 1-12-12v-40a12 12 0 0 1 12-12h40a12 12 0 0 1 12 12zm0-128a12 12 0 0 1-12 12h-40a12 12 0 0 1-12-12v-40a12 12 0 0 1 12-12h40a12 12 0 0 1 12 12z"]
    };
    exports.faHospitalUser = faHospitalUser;
    var faHotTub = {
      prefix: 'fas',
      iconName: 'hot-tub',
      icon: [512, 512, [], "f593", "M414.21 177.65c1.02 8.21 7.75 14.35 15.75 14.35h16.12c9.51 0 17.08-8.57 16-18.35-4.34-39.11-22.4-74.53-50.13-97.16-17.37-14.17-28.82-36.75-31.98-62.15C378.96 6.14 372.22 0 364.23 0h-16.12c-9.51 0-17.09 8.57-16 18.35 4.34 39.11 22.4 74.53 50.13 97.16 17.36 14.17 28.82 36.75 31.97 62.14zm-108 0c1.02 8.21 7.75 14.35 15.75 14.35h16.12c9.51 0 17.08-8.57 16-18.35-4.34-39.11-22.4-74.53-50.13-97.16-17.37-14.17-28.82-36.75-31.98-62.15C270.96 6.14 264.22 0 256.23 0h-16.12c-9.51 0-17.09 8.57-16 18.35 4.34 39.11 22.4 74.53 50.13 97.16 17.36 14.17 28.82 36.75 31.97 62.14zM480 256H256l-110.93-83.2a63.99 63.99 0 0 0-38.4-12.8H64c-35.35 0-64 28.65-64 64v224c0 35.35 28.65 64 64 64h384c35.35 0 64-28.65 64-64V288c0-17.67-14.33-32-32-32zM128 440c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8V328c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v112zm96 0c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8V328c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v112zm96 0c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8V328c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v112zm96 0c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8V328c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v112zM64 128c35.35 0 64-28.65 64-64S99.35 0 64 0 0 28.65 0 64s28.65 64 64 64z"]
    };
    exports.faHotTub = faHotTub;
    var faHotdog = {
      prefix: 'fas',
      iconName: 'hotdog',
      icon: [512, 512, [], "f80f", "M488.56 23.44a80 80 0 0 0-113.12 0l-352 352a80 80 0 1 0 113.12 113.12l352-352a80 80 0 0 0 0-113.12zm-49.93 95.19c-19.6 19.59-37.52 22.67-51.93 25.14C373.76 146 364.4 147.6 352 160s-14 21.76-16.23 34.71c-2.48 14.4-5.55 32.33-25.15 51.92s-37.52 22.67-51.92 25.15C245.75 274 236.4 275.6 224 288s-14 21.75-16.23 34.7c-2.47 14.4-5.54 32.33-25.14 51.92s-37.53 22.68-51.93 25.15C117.76 402 108.4 403.6 96 416a16 16 0 0 1-22.63-22.63c19.6-19.59 37.52-22.67 51.92-25.14 13-2.22 22.3-3.82 34.71-16.23s14-21.75 16.22-34.7c2.48-14.4 5.55-32.33 25.15-51.92s37.52-22.67 51.92-25.14c13-2.22 22.3-3.83 34.7-16.23s14-21.76 16.24-34.71c2.47-14.4 5.54-32.33 25.14-51.92s37.52-22.68 51.92-25.15C394.24 110 403.59 108.41 416 96a16 16 0 0 1 22.63 22.63zM31.44 322.18L322.18 31.44l-11.54-11.55c-25-25-63.85-26.66-86.79-3.72L16.17 223.85c-22.94 22.94-21.27 61.79 3.72 86.78zm449.12-132.36L189.82 480.56l11.54 11.55c25 25 63.85 26.66 86.79 3.72l207.68-207.68c22.94-22.94 21.27-61.79-3.72-86.79z"]
    };
    exports.faHotdog = faHotdog;
    var faHotel = {
      prefix: 'fas',
      iconName: 'hotel',
      icon: [576, 512, [], "f594", "M560 64c8.84 0 16-7.16 16-16V16c0-8.84-7.16-16-16-16H16C7.16 0 0 7.16 0 16v32c0 8.84 7.16 16 16 16h15.98v384H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h240v-80c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v80h240c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16h-16V64h16zm-304 44.8c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4c0 6.4-6.4 12.8-12.8 12.8h-38.4c-6.4 0-12.8-6.4-12.8-12.8v-38.4zm0 96c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4c0 6.4-6.4 12.8-12.8 12.8h-38.4c-6.4 0-12.8-6.4-12.8-12.8v-38.4zm-128-96c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4c0 6.4-6.4 12.8-12.8 12.8h-38.4c-6.4 0-12.8-6.4-12.8-12.8v-38.4zM179.2 256h-38.4c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4c0 6.4-6.4 12.8-12.8 12.8zM192 384c0-53.02 42.98-96 96-96s96 42.98 96 96H192zm256-140.8c0 6.4-6.4 12.8-12.8 12.8h-38.4c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4zm0-96c0 6.4-6.4 12.8-12.8 12.8h-38.4c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4z"]
    };
    exports.faHotel = faHotel;
    var faHourglass = {
      prefix: 'fas',
      iconName: 'hourglass',
      icon: [384, 512, [], "f254", "M360 64c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24 0 90.965 51.016 167.734 120.842 192C75.016 280.266 24 357.035 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24 0-90.965-51.016-167.734-120.842-192C308.984 231.734 360 154.965 360 64z"]
    };
    exports.faHourglass = faHourglass;
    var faHourglassEnd = {
      prefix: 'fas',
      iconName: 'hourglass-end',
      icon: [384, 512, [], "f253", "M360 64c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24 0 90.965 51.016 167.734 120.842 192C75.016 280.266 24 357.035 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24 0-90.965-51.016-167.734-120.842-192C308.984 231.734 360 154.965 360 64zM192 208c-57.787 0-104-66.518-104-144h208c0 77.945-46.51 144-104 144z"]
    };
    exports.faHourglassEnd = faHourglassEnd;
    var faHourglassHalf = {
      prefix: 'fas',
      iconName: 'hourglass-half',
      icon: [384, 512, [], "f252", "M360 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24 0 90.965 51.016 167.734 120.842 192C75.016 280.266 24 357.035 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24 0-90.965-51.016-167.734-120.842-192C308.984 231.734 360 154.965 360 64c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24zm-75.078 384H99.08c17.059-46.797 52.096-80 92.92-80 40.821 0 75.862 33.196 92.922 80zm.019-256H99.078C91.988 108.548 88 86.748 88 64h208c0 22.805-3.987 44.587-11.059 64z"]
    };
    exports.faHourglassHalf = faHourglassHalf;
    var faHourglassStart = {
      prefix: 'fas',
      iconName: 'hourglass-start',
      icon: [384, 512, [], "f251", "M360 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24 0 90.965 51.016 167.734 120.842 192C75.016 280.266 24 357.035 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24 0-90.965-51.016-167.734-120.842-192C308.984 231.734 360 154.965 360 64c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24zm-64 448H88c0-77.458 46.204-144 104-144 57.786 0 104 66.517 104 144z"]
    };
    exports.faHourglassStart = faHourglassStart;
    var faHouseDamage = {
      prefix: 'fas',
      iconName: 'house-damage',
      icon: [576, 512, [], "f6f1", "M288 114.96L69.47 307.71c-1.62 1.46-3.69 2.14-5.47 3.35V496c0 8.84 7.16 16 16 16h149.23L192 439.19l104.11-64-60.16-119.22L384 392.75l-104.11 64L319.81 512H496c8.84 0 16-7.16 16-16V311.1c-1.7-1.16-3.72-1.82-5.26-3.2L288 114.96zm282.69 121.32L512 184.45V48c0-8.84-7.16-16-16-16h-64c-8.84 0-16 7.16-16 16v51.69L314.75 10.31C307.12 3.45 297.56.01 288 0s-19.1 3.41-26.7 10.27L5.31 236.28c-6.57 5.91-7.12 16.02-1.21 22.6l21.4 23.82c5.9 6.57 16.02 7.12 22.6 1.21L277.42 81.63c6.05-5.33 15.12-5.33 21.17 0L527.91 283.9c6.57 5.9 16.69 5.36 22.6-1.21l21.4-23.82c5.9-6.57 5.36-16.69-1.22-22.59z"]
    };
    exports.faHouseDamage = faHouseDamage;
    var faHouseUser = {
      prefix: 'fas',
      iconName: 'house-user',
      icon: [576, 512, [], "e065", "M570.69,236.27,512,184.44V48a16,16,0,0,0-16-16H432a16,16,0,0,0-16,16V99.67L314.78,10.3C308.5,4.61,296.53,0,288,0s-20.46,4.61-26.74,10.3l-256,226A18.27,18.27,0,0,0,0,248.2a18.64,18.64,0,0,0,4.09,10.71L25.5,282.7a21.14,21.14,0,0,0,12,5.3,21.67,21.67,0,0,0,10.69-4.11l15.9-14V480a32,32,0,0,0,32,32H480a32,32,0,0,0,32-32V269.88l15.91,14A21.94,21.94,0,0,0,538.63,288a20.89,20.89,0,0,0,11.87-5.31l21.41-23.81A21.64,21.64,0,0,0,576,248.19,21,21,0,0,0,570.69,236.27ZM288,176a64,64,0,1,1-64,64A64,64,0,0,1,288,176ZM400,448H176a16,16,0,0,1-16-16,96,96,0,0,1,96-96h64a96,96,0,0,1,96,96A16,16,0,0,1,400,448Z"]
    };
    exports.faHouseUser = faHouseUser;
    var faHryvnia = {
      prefix: 'fas',
      iconName: 'hryvnia',
      icon: [384, 512, [], "f6f2", "M368 240c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16h-41.86c13.41-28.63 13.74-63.33-4.13-94.05C303.34 49.84 267.1 32 229.96 32h-78.82c-24.32 0-47.86 8.53-66.54 24.09L72.83 65.9c-10.18 8.49-11.56 23.62-3.07 33.8l20.49 24.59c8.49 10.19 23.62 11.56 33.81 3.07l11.73-9.78c4.32-3.6 9.77-5.57 15.39-5.57h83.62c11.69 0 21.2 9.52 21.2 21.2 0 5.91-2.48 11.58-6.81 15.58L219.7 176H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h134.37l-34.67 32H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h41.86c-13.41 28.63-13.74 63.33 4.13 94.05C80.66 462.15 116.9 480 154.04 480h78.82c24.32 0 47.86-8.53 66.54-24.09l11.77-9.81c10.18-8.49 11.56-23.62 3.07-33.8l-20.49-24.59c-8.49-10.19-23.62-11.56-33.81-3.07l-11.75 9.8a23.992 23.992 0 0 1-15.36 5.56H149.2c-11.69 0-21.2-9.52-21.2-21.2 0-5.91 2.48-11.58 6.81-15.58L164.3 336H368c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16H233.63l34.67-32H368z"]
    };
    exports.faHryvnia = faHryvnia;
    var faICursor = {
      prefix: 'fas',
      iconName: 'i-cursor',
      icon: [256, 512, [], "f246", "M256 52.048V12.065C256 5.496 250.726.148 244.158.066 211.621-.344 166.469.011 128 37.959 90.266.736 46.979-.114 11.913.114 5.318.157 0 5.519 0 12.114v39.645c0 6.687 5.458 12.078 12.145 11.998C38.111 63.447 96 67.243 96 112.182V224H60c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h36v112c0 44.932-56.075 48.031-83.95 47.959C5.404 447.942 0 453.306 0 459.952v39.983c0 6.569 5.274 11.917 11.842 11.999 32.537.409 77.689.054 116.158-37.894 37.734 37.223 81.021 38.073 116.087 37.845 6.595-.043 11.913-5.405 11.913-12V460.24c0-6.687-5.458-12.078-12.145-11.998C217.889 448.553 160 444.939 160 400V288h36c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-36V112.182c0-44.932 56.075-48.213 83.95-48.142 6.646.018 12.05-5.346 12.05-11.992z"]
    };
    exports.faICursor = faICursor;
    var faIceCream = {
      prefix: 'fas',
      iconName: 'ice-cream',
      icon: [448, 512, [], "f810", "M368 160h-.94a144 144 0 1 0-286.12 0H80a48 48 0 0 0 0 96h288a48 48 0 0 0 0-96zM195.38 493.69a31.52 31.52 0 0 0 57.24 0L352 288H96z"]
    };
    exports.faIceCream = faIceCream;
    var faIcicles = {
      prefix: 'fas',
      iconName: 'icicles',
      icon: [512, 512, [], "f7ad", "M511.4 37.9C515.1 18.2 500 0 480 0H32C10.6 0-4.8 20.7 1.4 41.2l87.1 273.4c2.5 7.2 12.7 7.2 15.1 0L140 190.5l44.2 187.3c1.9 8.3 13.7 8.3 15.6 0l46.5-196.9 34.1 133.4c2.3 7.6 13 7.6 15.3 0l45.8-172.5 66.7 363.8c1.7 8.6 14 8.6 15.7 0l87.5-467.7z"]
    };
    exports.faIcicles = faIcicles;
    var faIcons = {
      prefix: 'fas',
      iconName: 'icons',
      icon: [512, 512, [], "f86d", "M116.65 219.35a15.68 15.68 0 0 0 22.65 0l96.75-99.83c28.15-29 26.5-77.1-4.91-103.88C203.75-7.7 163-3.5 137.86 22.44L128 32.58l-9.85-10.14C93.05-3.5 52.25-7.7 24.86 15.64c-31.41 26.78-33 74.85-5 103.88zm143.92 100.49h-48l-7.08-14.24a27.39 27.39 0 0 0-25.66-17.78h-71.71a27.39 27.39 0 0 0-25.66 17.78l-7 14.24h-48A27.45 27.45 0 0 0 0 347.3v137.25A27.44 27.44 0 0 0 27.43 512h233.14A27.45 27.45 0 0 0 288 484.55V347.3a27.45 27.45 0 0 0-27.43-27.46zM144 468a52 52 0 1 1 52-52 52 52 0 0 1-52 52zm355.4-115.9h-60.58l22.36-50.75c2.1-6.65-3.93-13.21-12.18-13.21h-75.59c-6.3 0-11.66 3.9-12.5 9.1l-16.8 106.93c-1 6.3 4.88 11.89 12.5 11.89h62.31l-24.2 83c-1.89 6.65 4.2 12.9 12.23 12.9a13.26 13.26 0 0 0 10.92-5.25l92.4-138.91c4.88-6.91-1.16-15.7-10.87-15.7zM478.08.33L329.51 23.17C314.87 25.42 304 38.92 304 54.83V161.6a83.25 83.25 0 0 0-16-1.7c-35.35 0-64 21.48-64 48s28.65 48 64 48c35.2 0 63.73-21.32 64-47.66V99.66l112-17.22v47.18a83.25 83.25 0 0 0-16-1.7c-35.35 0-64 21.48-64 48s28.65 48 64 48c35.2 0 63.73-21.32 64-47.66V32c0-19.48-16-34.42-33.92-31.67z"]
    };
    exports.faIcons = faIcons;
    var faIdBadge = {
      prefix: 'fas',
      iconName: 'id-badge',
      icon: [384, 512, [], "f2c1", "M336 0H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zM144 32h96c8.8 0 16 7.2 16 16s-7.2 16-16 16h-96c-8.8 0-16-7.2-16-16s7.2-16 16-16zm48 128c35.3 0 64 28.7 64 64s-28.7 64-64 64-64-28.7-64-64 28.7-64 64-64zm112 236.8c0 10.6-10 19.2-22.4 19.2H102.4C90 416 80 407.4 80 396.8v-19.2c0-31.8 30.1-57.6 67.2-57.6h5c12.3 5.1 25.7 8 39.8 8s27.6-2.9 39.8-8h5c37.1 0 67.2 25.8 67.2 57.6v19.2z"]
    };
    exports.faIdBadge = faIdBadge;
    var faIdCard = {
      prefix: 'fas',
      iconName: 'id-card',
      icon: [576, 512, [], "f2c2", "M528 32H48C21.5 32 0 53.5 0 80v16h576V80c0-26.5-21.5-48-48-48zM0 432c0 26.5 21.5 48 48 48h480c26.5 0 48-21.5 48-48V128H0v304zm352-232c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H360c-4.4 0-8-3.6-8-8v-16zm0 64c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H360c-4.4 0-8-3.6-8-8v-16zm0 64c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H360c-4.4 0-8-3.6-8-8v-16zM176 192c35.3 0 64 28.7 64 64s-28.7 64-64 64-64-28.7-64-64 28.7-64 64-64zM67.1 396.2C75.5 370.5 99.6 352 128 352h8.2c12.3 5.1 25.7 8 39.8 8s27.6-2.9 39.8-8h8.2c28.4 0 52.5 18.5 60.9 44.2 3.2 9.9-5.2 19.8-15.6 19.8H82.7c-10.4 0-18.8-10-15.6-19.8z"]
    };
    exports.faIdCard = faIdCard;
    var faIdCardAlt = {
      prefix: 'fas',
      iconName: 'id-card-alt',
      icon: [576, 512, [], "f47f", "M528 64H384v96H192V64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h480c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM288 224c35.3 0 64 28.7 64 64s-28.7 64-64 64-64-28.7-64-64 28.7-64 64-64zm93.3 224H194.7c-10.4 0-18.8-10-15.6-19.8 8.3-25.6 32.4-44.2 60.9-44.2h8.2c12.3 5.1 25.7 8 39.8 8s27.6-2.9 39.8-8h8.2c28.4 0 52.5 18.5 60.9 44.2 3.2 9.8-5.2 19.8-15.6 19.8zM352 32c0-17.7-14.3-32-32-32h-64c-17.7 0-32 14.3-32 32v96h128V32z"]
    };
    exports.faIdCardAlt = faIdCardAlt;
    var faIgloo = {
      prefix: 'fas',
      iconName: 'igloo',
      icon: [576, 512, [], "f7ae", "M320 33.9c-10.5-1.2-21.2-1.9-32-1.9-99.8 0-187.8 50.8-239.4 128H320V33.9zM96 192H30.3C11.1 230.6 0 274 0 320h96V192zM352 39.4V160h175.4C487.2 99.9 424.8 55.9 352 39.4zM480 320h96c0-46-11.1-89.4-30.3-128H480v128zm-64 64v96h128c17.7 0 32-14.3 32-32v-96H411.5c2.6 10.3 4.5 20.9 4.5 32zm32-192H128v128h49.8c22.2-38.1 63-64 110.2-64s88 25.9 110.2 64H448V192zM0 448c0 17.7 14.3 32 32 32h128v-96c0-11.1 1.9-21.7 4.5-32H0v96zm288-160c-53 0-96 43-96 96v96h192v-96c0-53-43-96-96-96z"]
    };
    exports.faIgloo = faIgloo;
    var faImage = {
      prefix: 'fas',
      iconName: 'image',
      icon: [512, 512, [], "f03e", "M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56zM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48z"]
    };
    exports.faImage = faImage;
    var faImages = {
      prefix: 'fas',
      iconName: 'images',
      icon: [576, 512, [], "f302", "M480 416v16c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V176c0-26.51 21.49-48 48-48h16v208c0 44.112 35.888 80 80 80h336zm96-80V80c0-26.51-21.49-48-48-48H144c-26.51 0-48 21.49-48 48v256c0 26.51 21.49 48 48 48h384c26.51 0 48-21.49 48-48zM256 128c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-96 144l55.515-55.515c4.686-4.686 12.284-4.686 16.971 0L272 256l135.515-135.515c4.686-4.686 12.284-4.686 16.971 0L512 208v112H160v-48z"]
    };
    exports.faImages = faImages;
    var faInbox = {
      prefix: 'fas',
      iconName: 'inbox',
      icon: [576, 512, [], "f01c", "M567.938 243.908L462.25 85.374A48.003 48.003 0 0 0 422.311 64H153.689a48 48 0 0 0-39.938 21.374L8.062 243.908A47.994 47.994 0 0 0 0 270.533V400c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V270.533a47.994 47.994 0 0 0-8.062-26.625zM162.252 128h251.497l85.333 128H376l-32 64H232l-32-64H76.918l85.334-128z"]
    };
    exports.faInbox = faInbox;
    var faIndent = {
      prefix: 'fas',
      iconName: 'indent',
      icon: [448, 512, [], "f03c", "M27.31 363.3l96-96a16 16 0 0 0 0-22.62l-96-96C17.27 138.66 0 145.78 0 160v192c0 14.31 17.33 21.3 27.31 11.3zM432 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm3.17-128H204.83A12.82 12.82 0 0 0 192 300.83v38.34A12.82 12.82 0 0 0 204.83 352h230.34A12.82 12.82 0 0 0 448 339.17v-38.34A12.82 12.82 0 0 0 435.17 288zm0-128H204.83A12.82 12.82 0 0 0 192 172.83v38.34A12.82 12.82 0 0 0 204.83 224h230.34A12.82 12.82 0 0 0 448 211.17v-38.34A12.82 12.82 0 0 0 435.17 160zM432 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"]
    };
    exports.faIndent = faIndent;
    var faIndustry = {
      prefix: 'fas',
      iconName: 'industry',
      icon: [512, 512, [], "f275", "M475.115 163.781L336 252.309v-68.28c0-18.916-20.931-30.399-36.885-20.248L160 252.309V56c0-13.255-10.745-24-24-24H24C10.745 32 0 42.745 0 56v400c0 13.255 10.745 24 24 24h464c13.255 0 24-10.745 24-24V184.029c0-18.917-20.931-30.399-36.885-20.248z"]
    };
    exports.faIndustry = faIndustry;
    var faInfinity = {
      prefix: 'fas',
      iconName: 'infinity',
      icon: [640, 512, [], "f534", "M471.1 96C405 96 353.3 137.3 320 174.6 286.7 137.3 235 96 168.9 96 75.8 96 0 167.8 0 256s75.8 160 168.9 160c66.1 0 117.8-41.3 151.1-78.6 33.3 37.3 85 78.6 151.1 78.6 93.1 0 168.9-71.8 168.9-160S564.2 96 471.1 96zM168.9 320c-40.2 0-72.9-28.7-72.9-64s32.7-64 72.9-64c38.2 0 73.4 36.1 94 64-20.4 27.6-55.9 64-94 64zm302.2 0c-38.2 0-73.4-36.1-94-64 20.4-27.6 55.9-64 94-64 40.2 0 72.9 28.7 72.9 64s-32.7 64-72.9 64z"]
    };
    exports.faInfinity = faInfinity;
    var faInfo = {
      prefix: 'fas',
      iconName: 'info',
      icon: [192, 512, [], "f129", "M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"]
    };
    exports.faInfo = faInfo;
    var faInfoCircle = {
      prefix: 'fas',
      iconName: 'info-circle',
      icon: [512, 512, [], "f05a", "M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"]
    };
    exports.faInfoCircle = faInfoCircle;
    var faItalic = {
      prefix: 'fas',
      iconName: 'italic',
      icon: [320, 512, [], "f033", "M320 48v32a16 16 0 0 1-16 16h-62.76l-80 320H208a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H16a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h62.76l80-320H112a16 16 0 0 1-16-16V48a16 16 0 0 1 16-16h192a16 16 0 0 1 16 16z"]
    };
    exports.faItalic = faItalic;
    var faJedi = {
      prefix: 'fas',
      iconName: 'jedi',
      icon: [576, 512, [], "f669", "M535.95308,352c-42.64069,94.17188-137.64086,160-247.9848,160q-6.39844,0-12.84377-.29688C171.15558,506.9375,81.26481,442.23438,40.01474,352H79.93668L21.3272,293.40625a264.82522,264.82522,0,0,1-5.10938-39.42187,273.6653,273.6653,0,0,1,.5-29.98438H63.93665L22.546,182.625A269.79782,269.79782,0,0,1,130.51489,20.54688a16.06393,16.06393,0,0,1,9.28127-3,16.36332,16.36332,0,0,1,13.5,7.25,16.02739,16.02739,0,0,1,1.625,15.09374,138.387,138.387,0,0,0-9.84376,51.26563c0,45.10937,21.04691,86.57813,57.71884,113.73437a16.29989,16.29989,0,0,1,1.20313,25.39063c-26.54692,23.98437-41.17194,56.5-41.17194,91.57813,0,60.03124,42.95319,110.28124,99.89079,121.92187l2.5-65.26563L238.062,397a8.33911,8.33911,0,0,1-10-.75,8.025,8.025,0,0,1-1.39063-9.9375l20.125-33.76562-42.06257-8.73438a7.9898,7.9898,0,0,1,0-15.65625l42.06257-8.71875-20.10941-33.73438a7.99122,7.99122,0,0,1,11.35939-10.71874L268.437,295.64062,279.95265,7.67188a7.97138,7.97138,0,0,1,8-7.67188h.04687a8.02064,8.02064,0,0,1,7.95314,7.70312L307.48394,295.625l30.39068-20.67188a8.08327,8.08327,0,0,1,10,.8125,7.99866,7.99866,0,0,1,1.39062,9.90626L329.12461,319.4375l42.07819,8.73438a7.99373,7.99373,0,0,1,0,15.65624l-42.07819,8.71876,20.1094,33.73437a7.97791,7.97791,0,0,1-1.32812,9.92187A8.25739,8.25739,0,0,1,337.87462,397L310.7027,378.53125l2.5,65.34375c48.48446-9.40625,87.57828-48.15625,97.31267-96.5A123.52652,123.52652,0,0,0,371.9528,230.29688a16.30634,16.30634,0,0,1,1.20313-25.42188c36.65631-27.17188,57.6876-68.60938,57.6876-113.73438a138.01689,138.01689,0,0,0-9.85939-51.3125,15.98132,15.98132,0,0,1,1.60937-15.09374,16.36914,16.36914,0,0,1,13.5-7.23438,16.02453,16.02453,0,0,1,9.25,2.98438A271.26947,271.26947,0,0,1,553.25,182.76562L511.99992,224h46.9532C559.3125,229.76562,560,235.45312,560,241.26562a270.092,270.092,0,0,1-5.125,51.85938L495.98427,352Z"]
    };
    exports.faJedi = faJedi;
    var faJoint = {
      prefix: 'fas',
      iconName: 'joint',
      icon: [640, 512, [], "f595", "M444.34 181.1c22.38 15.68 35.66 41.16 35.66 68.59V280c0 4.42 3.58 8 8 8h48c4.42 0 8-3.58 8-8v-30.31c0-43.24-21.01-83.41-56.34-108.06C463.85 125.02 448 99.34 448 70.31V8c0-4.42-3.58-8-8-8h-48c-4.42 0-8 3.58-8 8v66.4c0 43.69 24.56 81.63 60.34 106.7zM194.97 358.98C126.03 370.07 59.69 394.69 0 432c83.65 52.28 180.3 80 278.94 80h88.57L254.79 380.49c-14.74-17.2-37.45-25.11-59.82-21.51zM553.28 87.09c-5.67-3.8-9.28-9.96-9.28-16.78V8c0-4.42-3.58-8-8-8h-48c-4.42 0-8 3.58-8 8v62.31c0 22.02 10.17 43.41 28.64 55.39C550.79 153.04 576 199.54 576 249.69V280c0 4.42 3.58 8 8 8h48c4.42 0 8-3.58 8-8v-30.31c0-65.44-32.41-126.19-86.72-162.6zM360.89 352.05c-34.4.06-86.81.15-88.21.17l117.8 137.43A63.987 63.987 0 0 0 439.07 512h88.45L409.57 374.4a63.955 63.955 0 0 0-48.68-22.35zM616 352H432l117.99 137.65A63.987 63.987 0 0 0 598.58 512H616c13.25 0 24-10.75 24-24V376c0-13.26-10.75-24-24-24z"]
    };
    exports.faJoint = faJoint;
    var faJournalWhills = {
      prefix: 'fas',
      iconName: 'journal-whills',
      icon: [448, 512, [], "f66a", "M438.40625,377.59375c-3.20313,12.8125-3.20313,57.60937,0,73.60937Q447.9922,460.78907,448,470.40625v16c0,16-12.79688,25.59375-25.59375,25.59375H96c-54.40625,0-96-41.59375-96-96V96C0,41.59375,41.59375,0,96,0H422.40625C438.40625,0,448,9.59375,448,25.59375v332.8125Q448,372.79688,438.40625,377.59375ZM380.79688,384H96c-16,0-32,12.79688-32,32s12.79688,32,32,32H380.79688ZM128.01562,176.01562c0,.51563.14063.98438.14063,1.5l37.10937,32.46876A7.99954,7.99954,0,0,1,160,224h-.01562a9.17678,9.17678,0,0,1-5.25-1.98438L131.14062,201.375C142.6875,250.95312,186.90625,288,240,288s97.3125-37.04688,108.875-86.625l-23.59375,20.64062a8.02516,8.02516,0,0,1-5.26563,1.96876H320a9.14641,9.14641,0,0,1-6.01562-2.71876A9.26508,9.26508,0,0,1,312,216a9.097,9.097,0,0,1,2.73438-6.01562l37.10937-32.46876c.01563-.53124.15625-1,.15625-1.51562,0-11.04688-2.09375-21.51562-5.06251-31.59375l-21.26562,21.25a8.00467,8.00467,0,0,1-11.32812-11.3125l26.42187-26.40625a111.81517,111.81517,0,0,0-46.35937-49.26562,63.02336,63.02336,0,0,1-14.0625,82.64062A55.83846,55.83846,0,0,1,251.625,254.73438l-1.42188-34.28126,12.67188,8.625a3.967,3.967,0,0,0,2.25.6875,3.98059,3.98059,0,0,0,3.43749-6.03124l-8.53124-14.3125,17.90625-3.71876a4.00647,4.00647,0,0,0,0-7.84374l-17.90625-3.71876,8.53124-14.3125a3.98059,3.98059,0,0,0-3.43749-6.03124,4.726,4.726,0,0,0-2.25.67187L248.6875,184.125,244,71.82812a4.00386,4.00386,0,0,0-8,0l-4.625,110.8125-12-8.15624a4.003,4.003,0,0,0-5.68751,5.35937l8.53126,14.3125L204.3125,197.875a3.99686,3.99686,0,0,0,0,7.82812l17.90625,3.73438-8.53126,14.29688a4.72469,4.72469,0,0,0-.56249,2.04687,4.59547,4.59547,0,0,0,1.25,2.90625,4.01059,4.01059,0,0,0,2.75,1.09375,4.09016,4.09016,0,0,0,2.25-.6875l10.35937-7.04687L228.375,254.76562a55.86414,55.86414,0,0,1-28.71875-93.45312,63.01119,63.01119,0,0,1-14.04688-82.65625,111.93158,111.93158,0,0,0-46.375,49.26563l26.42187,26.42187a7.99917,7.99917,0,0,1-11.3125,11.3125l-21.26563-21.26563C130.09375,154.48438,128,164.95312,128.01562,176.01562Z"]
    };
    exports.faJournalWhills = faJournalWhills;
    var faKaaba = {
      prefix: 'fas',
      iconName: 'kaaba',
      icon: [576, 512, [], "f66b", "M554.12 83.51L318.36 4.93a95.962 95.962 0 0 0-60.71 0L21.88 83.51A32.006 32.006 0 0 0 0 113.87v49.01l265.02-79.51c15.03-4.5 30.92-4.5 45.98 0l265 79.51v-49.01c0-13.77-8.81-26-21.88-30.36zm-279.9 30.52L0 196.3v228.38c0 15 10.42 27.98 25.06 31.24l242.12 53.8a95.937 95.937 0 0 0 41.65 0l242.12-53.8c14.64-3.25 25.06-16.24 25.06-31.24V196.29l-274.2-82.26c-9.04-2.72-18.59-2.72-27.59 0zM128 230.11c0 3.61-2.41 6.77-5.89 7.72l-80 21.82C37.02 261.03 32 257.2 32 251.93v-16.58c0-3.61 2.41-6.77 5.89-7.72l80-21.82c5.09-1.39 10.11 2.44 10.11 7.72v16.58zm144-39.28c0 3.61-2.41 6.77-5.89 7.72l-96 26.18c-5.09 1.39-10.11-2.44-10.11-7.72v-16.58c0-3.61 2.41-6.77 5.89-7.72l96-26.18c5.09-1.39 10.11 2.44 10.11 7.72v16.58zm176 22.7c0-5.28 5.02-9.11 10.11-7.72l80 21.82c3.48.95 5.89 4.11 5.89 7.72v16.58c0 5.28-5.02 9.11-10.11 7.72l-80-21.82a7.997 7.997 0 0 1-5.89-7.72v-16.58zm-144-39.27c0-5.28 5.02-9.11 10.11-7.72l96 26.18c3.48.95 5.89 4.11 5.89 7.72v16.58c0 5.28-5.02 9.11-10.11 7.72l-96-26.18a7.997 7.997 0 0 1-5.89-7.72v-16.58z"]
    };
    exports.faKaaba = faKaaba;
    var faKey = {
      prefix: 'fas',
      iconName: 'key',
      icon: [512, 512, [], "f084", "M512 176.001C512 273.203 433.202 352 336 352c-11.22 0-22.19-1.062-32.827-3.069l-24.012 27.014A23.999 23.999 0 0 1 261.223 384H224v40c0 13.255-10.745 24-24 24h-40v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24v-78.059c0-6.365 2.529-12.47 7.029-16.971l161.802-161.802C163.108 213.814 160 195.271 160 176 160 78.798 238.797.001 335.999 0 433.488-.001 512 78.511 512 176.001zM336 128c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48-48 21.49-48 48z"]
    };
    exports.faKey = faKey;
    var faKeyboard = {
      prefix: 'fas',
      iconName: 'keyboard',
      icon: [576, 512, [], "f11c", "M528 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h480c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM128 180v-40c0-6.627-5.373-12-12-12H76c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm-336 96v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm-336 96v-40c0-6.627-5.373-12-12-12H76c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm288 0v-40c0-6.627-5.373-12-12-12H172c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h232c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12z"]
    };
    exports.faKeyboard = faKeyboard;
    var faKhanda = {
      prefix: 'fas',
      iconName: 'khanda',
      icon: [512, 512, [], "f66d", "M415.81 66c-6.37-3.5-14.37-2.33-19.36 3.02a15.974 15.974 0 0 0-1.91 19.52c16.49 26.16 25.2 56.39 25.2 87.41-.19 53.25-26.77 102.69-71.27 132.41l-76.63 53.35v-20.1l44.05-36.09c3.92-4.2 5-10.09 2.81-15.28L310.85 273c33.84-19.26 56.94-55.25 56.94-96.99 0-40.79-22.02-76.13-54.59-95.71l5.22-11.44c2.34-5.53.93-11.83-3.57-16.04L255.86 0l-58.99 52.81c-4.5 4.21-5.9 10.51-3.57 16.04l5.22 11.44c-32.57 19.58-54.59 54.93-54.59 95.72 0 41.75 23.09 77.73 56.94 96.99l-7.85 17.24c-2.19 5.18-1.1 11.07 2.81 15.28l44.05 36.09v19.9l-76.59-53.33C119.02 278.62 92.44 229.19 92.26 176c0-31.08 8.71-61.31 25.2-87.47 3.87-6.16 2.4-13.77-2.59-19.08-5-5.34-13.68-6.2-20.02-2.7C16.32 109.6-22.3 205.3 13.36 295.99c7.07 17.99 17.89 34.38 30.46 49.06l55.97 65.36c4.87 5.69 13.04 7.24 19.65 3.72l79.35-42.23L228 392.23l-47.08 32.78c-1.67-.37-3.23-1.01-5.01-1.01-13.25 0-23.99 10.74-23.99 24 0 13.25 10.74 24 23.99 24 12.1 0 21.69-9.11 23.33-20.76l40.63-28.28v29.95c-9.39 5.57-15.99 15.38-15.99 27.1 0 17.67 14.32 32 31.98 32s31.98-14.33 31.98-32c0-11.71-6.61-21.52-15.99-27.1v-30.15l40.91 28.48C314.41 462.89 324 472 336.09 472c13.25 0 23.99-10.75 23.99-24 0-13.26-10.74-24-23.99-24-1.78 0-3.34.64-5.01 1.01L284 392.23l29.21-20.34 79.35 42.23c6.61 3.52 14.78 1.97 19.65-3.71l52.51-61.31c18.87-22.02 34-47.5 41.25-75.59 21.62-83.66-16.45-167.27-90.16-207.51zm-95.99 110c0 22.3-11.49 41.92-28.83 53.38l-5.65-12.41c-8.75-24.52-8.75-51.04 0-75.56l7.83-17.18c16.07 11.65 26.65 30.45 26.65 51.77zm-127.93 0c0-21.32 10.58-40.12 26.66-51.76l7.83 17.18c8.75 24.52 8.75 51.03 0 75.56l-5.65 12.41c-17.34-11.46-28.84-31.09-28.84-53.39z"]
    };
    exports.faKhanda = faKhanda;
    var faKiss = {
      prefix: 'fas',
      iconName: 'kiss',
      icon: [496, 512, [], "f596", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm-80 232c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm136 156c0 19.2-28.7 41.5-71.5 44-8.5.8-12.1-11.8-3.6-15.4l17-7.2c13-5.5 20.8-13.5 20.8-21.5s-7.8-16-20.8-21.5l-17-7.2c-6-2.5-6.1-12.2 0-14.8l17-7.2c13-5.5 20.8-13.5 20.8-21.5s-7.8-16-20.8-21.5l-17-7.2c-8.6-3.6-4.8-16.5 3.6-15.4 42.8 2.5 71.5 24.8 71.5 44 0 13-13.4 27.3-35.2 36C290.6 368.7 304 383 304 396zm24-156c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faKiss = faKiss;
    var faKissBeam = {
      prefix: 'fas',
      iconName: 'kiss-beam',
      icon: [496, 512, [], "f597", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm-39 219.9l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.2 7.4-15.6 4-14.9-4.5 3.3-42.1 32.2-71.4 56-71.4s52.7 29.3 56 71.4c.5 8.5-10.9 12-15.1 4.5zM304 396c0 19.2-28.7 41.5-71.5 44-8.5.8-12.1-11.8-3.6-15.4l17-7.2c13-5.5 20.8-13.5 20.8-21.5s-7.8-16-20.8-21.5l-17-7.2c-6-2.5-6.1-12.2 0-14.8l17-7.2c13-5.5 20.8-13.5 20.8-21.5s-7.8-16-20.8-21.5l-17-7.2c-8.6-3.6-4.8-16.5 3.6-15.4 42.8 2.5 71.5 24.8 71.5 44 0 13-13.4 27.3-35.2 36C290.6 368.7 304 383 304 396zm65-168.1l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.1 7.3-15.6 4-14.9-4.5 3.3-42.1 32.2-71.4 56-71.4s52.7 29.3 56 71.4c.5 8.5-10.9 12-15.1 4.5z"]
    };
    exports.faKissBeam = faKissBeam;
    var faKissWinkHeart = {
      prefix: 'fas',
      iconName: 'kiss-wink-heart',
      icon: [504, 512, [], "f598", "M501.1 402.5c-8-20.8-31.5-31.5-53.1-25.9l-8.4 2.2-2.3-8.4c-5.9-21.4-27-36.5-49-33-25.2 4-40.6 28.6-34 52.6l22.9 82.6c1.5 5.3 7 8.5 12.4 7.1l83-21.5c24.1-6.3 37.7-31.8 28.5-55.7zm-177.6-4c-5.6-20.3-2.3-42 9-59.7 29.7-46.3 98.7-45.5 127.8 4.3 6.4.1 12.6 1.4 18.6 2.9 10.9-27.9 17.1-58.2 17.1-90C496 119 385 8 248 8S0 119 0 256s111 248 248 248c35.4 0 68.9-7.5 99.4-20.9-.3-.7-23.9-84.6-23.9-84.6zM168 240c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm120 156c0 19.2-28.7 41.5-71.5 44-8.5.8-12.1-11.8-3.6-15.4l17-7.2c13-5.5 20.8-13.5 20.8-21.5s-7.8-16-20.8-21.5l-17-7.2c-6-2.5-5.7-12.3 0-14.8l17-7.2c13-5.5 20.8-13.5 20.8-21.5s-7.8-16-20.8-21.5l-17-7.2c-8.8-3.7-4.6-16.6 3.6-15.4 42.8 2.5 71.5 24.8 71.5 44 0 13-13.4 27.3-35.2 36C274.6 368.7 288 383 288 396zm16-179c-8.3 7.4-21.6.4-19.8-10.8 4-25.2 34.2-42.1 59.9-42.1S400 181 404 206.2c1.7 11.1-11.3 18.3-19.8 10.8l-9.5-8.5c-14.8-13.2-46.2-13.2-61 0L304 217z"]
    };
    exports.faKissWinkHeart = faKissWinkHeart;
    var faKiwiBird = {
      prefix: 'fas',
      iconName: 'kiwi-bird',
      icon: [576, 512, [], "f535", "M575.81 217.98C572.64 157.41 518.28 112 457.63 112h-9.37c-52.82 0-104.25-16.25-147.74-46.24-41.99-28.96-96.04-41.62-153.21-28.7C129.3 41.12-.08 78.24 0 224c.04 70.95 38.68 132.8 95.99 166.01V464c0 8.84 7.16 16 16 16h16c8.84 0 16-7.16 16-16v-54.26c15.36 3.96 31.4 6.26 48 6.26 5.44 0 10.68-.73 16-1.18V464c0 8.84 7.16 16 16 16h16c8.84 0 16-7.16 16-16v-59.43c14.24-5.06 27.88-11.39 40.34-19.51C342.07 355.25 393.86 336 448.46 336c25.48 0 16.01-.31 23.05-.78l74.41 136.44c2.86 5.23 8.3 8.34 14.05 8.34 1.31 0 2.64-.16 3.95-.5 7.09-1.8 12.05-8.19 12.05-15.5 0 0 .14-240.24-.16-246.02zM463.97 248c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm80 153.25l-39.86-73.08c15.12-5.83 28.73-14.6 39.86-25.98v99.06z"]
    };
    exports.faKiwiBird = faKiwiBird;
    var faLandmark = {
      prefix: 'fas',
      iconName: 'landmark',
      icon: [512, 512, [], "f66f", "M501.62 92.11L267.24 2.04a31.958 31.958 0 0 0-22.47 0L10.38 92.11A16.001 16.001 0 0 0 0 107.09V144c0 8.84 7.16 16 16 16h480c8.84 0 16-7.16 16-16v-36.91c0-6.67-4.14-12.64-10.38-14.98zM64 192v160H48c-8.84 0-16 7.16-16 16v48h448v-48c0-8.84-7.16-16-16-16h-16V192h-64v160h-96V192h-64v160h-96V192H64zm432 256H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h480c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16z"]
    };
    exports.faLandmark = faLandmark;
    var faLanguage = {
      prefix: 'fas',
      iconName: 'language',
      icon: [640, 512, [], "f1ab", "M152.1 236.2c-3.5-12.1-7.8-33.2-7.8-33.2h-.5s-4.3 21.1-7.8 33.2l-11.1 37.5H163zM616 96H336v320h280c13.3 0 24-10.7 24-24V120c0-13.3-10.7-24-24-24zm-24 120c0 6.6-5.4 12-12 12h-11.4c-6.9 23.6-21.7 47.4-42.7 69.9 8.4 6.4 17.1 12.5 26.1 18 5.5 3.4 7.3 10.5 4.1 16.2l-7.9 13.9c-3.4 5.9-10.9 7.8-16.7 4.3-12.6-7.8-24.5-16.1-35.4-24.9-10.9 8.7-22.7 17.1-35.4 24.9-5.8 3.5-13.3 1.6-16.7-4.3l-7.9-13.9c-3.2-5.6-1.4-12.8 4.2-16.2 9.3-5.7 18-11.7 26.1-18-7.9-8.4-14.9-17-21-25.7-4-5.7-2.2-13.6 3.7-17.1l6.5-3.9 7.3-4.3c5.4-3.2 12.4-1.7 16 3.4 5 7 10.8 14 17.4 20.9 13.5-14.2 23.8-28.9 30-43.2H412c-6.6 0-12-5.4-12-12v-16c0-6.6 5.4-12 12-12h64v-16c0-6.6 5.4-12 12-12h16c6.6 0 12 5.4 12 12v16h64c6.6 0 12 5.4 12 12zM0 120v272c0 13.3 10.7 24 24 24h280V96H24c-13.3 0-24 10.7-24 24zm58.9 216.1L116.4 167c1.7-4.9 6.2-8.1 11.4-8.1h32.5c5.1 0 9.7 3.3 11.4 8.1l57.5 169.1c2.6 7.8-3.1 15.9-11.4 15.9h-22.9a12 12 0 0 1-11.5-8.6l-9.4-31.9h-60.2l-9.1 31.8c-1.5 5.1-6.2 8.7-11.5 8.7H70.3c-8.2 0-14-8.1-11.4-15.9z"]
    };
    exports.faLanguage = faLanguage;
    var faLaptop = {
      prefix: 'fas',
      iconName: 'laptop',
      icon: [640, 512, [], "f109", "M624 416H381.54c-.74 19.81-14.71 32-32.74 32H288c-18.69 0-33.02-17.47-32.77-32H16c-8.8 0-16 7.2-16 16v16c0 35.2 28.8 64 64 64h512c35.2 0 64-28.8 64-64v-16c0-8.8-7.2-16-16-16zM576 48c0-26.4-21.6-48-48-48H112C85.6 0 64 21.6 64 48v336h512V48zm-64 272H128V64h384v256z"]
    };
    exports.faLaptop = faLaptop;
    var faLaptopCode = {
      prefix: 'fas',
      iconName: 'laptop-code',
      icon: [640, 512, [], "f5fc", "M255.03 261.65c6.25 6.25 16.38 6.25 22.63 0l11.31-11.31c6.25-6.25 6.25-16.38 0-22.63L253.25 192l35.71-35.72c6.25-6.25 6.25-16.38 0-22.63l-11.31-11.31c-6.25-6.25-16.38-6.25-22.63 0l-58.34 58.34c-6.25 6.25-6.25 16.38 0 22.63l58.35 58.34zm96.01-11.3l11.31 11.31c6.25 6.25 16.38 6.25 22.63 0l58.34-58.34c6.25-6.25 6.25-16.38 0-22.63l-58.34-58.34c-6.25-6.25-16.38-6.25-22.63 0l-11.31 11.31c-6.25 6.25-6.25 16.38 0 22.63L386.75 192l-35.71 35.72c-6.25 6.25-6.25 16.38 0 22.63zM624 416H381.54c-.74 19.81-14.71 32-32.74 32H288c-18.69 0-33.02-17.47-32.77-32H16c-8.8 0-16 7.2-16 16v16c0 35.2 28.8 64 64 64h512c35.2 0 64-28.8 64-64v-16c0-8.8-7.2-16-16-16zM576 48c0-26.4-21.6-48-48-48H112C85.6 0 64 21.6 64 48v336h512V48zm-64 272H128V64h384v256z"]
    };
    exports.faLaptopCode = faLaptopCode;
    var faLaptopHouse = {
      prefix: 'fas',
      iconName: 'laptop-house',
      icon: [640, 512, [], "e066", "M272,288H208a16,16,0,0,1-16-16V208a16,16,0,0,1,16-16h64a16,16,0,0,1,16,16v37.12C299.11,232.24,315,224,332.8,224H469.74l6.65-7.53A16.51,16.51,0,0,0,480,207a16.31,16.31,0,0,0-4.75-10.61L416,144V48a16,16,0,0,0-16-16H368a16,16,0,0,0-16,16V87.3L263.5,8.92C258,4,247.45,0,240.05,0s-17.93,4-23.47,8.92L4.78,196.42A16.15,16.15,0,0,0,0,207a16.4,16.4,0,0,0,3.55,9.39L22.34,237.7A16.22,16.22,0,0,0,33,242.48,16.51,16.51,0,0,0,42.34,239L64,219.88V384a32,32,0,0,0,32,32H272ZM629.33,448H592V288c0-17.67-12.89-32-28.8-32H332.8c-15.91,0-28.8,14.33-28.8,32V448H266.67A10.67,10.67,0,0,0,256,458.67v10.66A42.82,42.82,0,0,0,298.6,512H597.4A42.82,42.82,0,0,0,640,469.33V458.67A10.67,10.67,0,0,0,629.33,448ZM544,448H352V304H544Z"]
    };
    exports.faLaptopHouse = faLaptopHouse;
    var faLaptopMedical = {
      prefix: 'fas',
      iconName: 'laptop-medical',
      icon: [640, 512, [], "f812", "M232 224h56v56a8 8 0 0 0 8 8h48a8 8 0 0 0 8-8v-56h56a8 8 0 0 0 8-8v-48a8 8 0 0 0-8-8h-56v-56a8 8 0 0 0-8-8h-48a8 8 0 0 0-8 8v56h-56a8 8 0 0 0-8 8v48a8 8 0 0 0 8 8zM576 48a48.14 48.14 0 0 0-48-48H112a48.14 48.14 0 0 0-48 48v336h512zm-64 272H128V64h384zm112 96H381.54c-.74 19.81-14.71 32-32.74 32H288c-18.69 0-33-17.47-32.77-32H16a16 16 0 0 0-16 16v16a64.19 64.19 0 0 0 64 64h512a64.19 64.19 0 0 0 64-64v-16a16 16 0 0 0-16-16z"]
    };
    exports.faLaptopMedical = faLaptopMedical;
    var faLaugh = {
      prefix: 'fas',
      iconName: 'laugh',
      icon: [496, 512, [], "f599", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm80 152c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm-160 0c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm88 272h-16c-73.4 0-134-55-142.9-126-1.2-9.5 6.3-18 15.9-18h270c9.6 0 17.1 8.4 15.9 18-8.9 71-69.5 126-142.9 126z"]
    };
    exports.faLaugh = faLaugh;
    var faLaughBeam = {
      prefix: 'fas',
      iconName: 'laugh-beam',
      icon: [496, 512, [], "f59a", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm24 199.4c3.3-42.1 32.2-71.4 56-71.4s52.7 29.3 56 71.4c.7 8.6-10.8 11.9-14.9 4.5l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.2 7.4-15.8 4.1-15.1-4.5zm-160 0c3.3-42.1 32.2-71.4 56-71.4s52.7 29.3 56 71.4c.7 8.6-10.8 11.9-14.9 4.5l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.3 7.4-15.8 4-15.1-4.5zM398.9 306C390 377 329.4 432 256 432h-16c-73.4 0-134-55-142.9-126-1.2-9.5 6.3-18 15.9-18h270c9.6 0 17.1 8.4 15.9 18z"]
    };
    exports.faLaughBeam = faLaughBeam;
    var faLaughSquint = {
      prefix: 'fas',
      iconName: 'laugh-squint',
      icon: [496, 512, [], "f59b", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm33.8 161.7l80-48c11.6-6.9 24 7.7 15.4 18L343.6 180l33.6 40.3c8.7 10.4-3.9 24.8-15.4 18l-80-48c-7.7-4.7-7.7-15.9 0-20.6zm-163-30c-8.6-10.3 3.8-24.9 15.4-18l80 48c7.8 4.7 7.8 15.9 0 20.6l-80 48c-11.5 6.8-24-7.6-15.4-18l33.6-40.3-33.6-40.3zM398.9 306C390 377 329.4 432 256 432h-16c-73.4 0-134-55-142.9-126-1.2-9.5 6.3-18 15.9-18h270c9.6 0 17.1 8.4 15.9 18z"]
    };
    exports.faLaughSquint = faLaughSquint;
    var faLaughWink = {
      prefix: 'fas',
      iconName: 'laugh-wink',
      icon: [496, 512, [], "f59c", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm20.1 198.1c4-25.2 34.2-42.1 59.9-42.1s55.9 16.9 59.9 42.1c1.7 11.1-11.4 18.3-19.8 10.8l-9.5-8.5c-14.8-13.2-46.2-13.2-61 0L288 217c-8.4 7.4-21.6.3-19.9-10.9zM168 160c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm230.9 146C390 377 329.4 432 256 432h-16c-73.4 0-134-55-142.9-126-1.2-9.5 6.3-18 15.9-18h270c9.6 0 17.1 8.4 15.9 18z"]
    };
    exports.faLaughWink = faLaughWink;
    var faLayerGroup = {
      prefix: 'fas',
      iconName: 'layer-group',
      icon: [512, 512, [], "f5fd", "M12.41 148.02l232.94 105.67c6.8 3.09 14.49 3.09 21.29 0l232.94-105.67c16.55-7.51 16.55-32.52 0-40.03L266.65 2.31a25.607 25.607 0 0 0-21.29 0L12.41 107.98c-16.55 7.51-16.55 32.53 0 40.04zm487.18 88.28l-58.09-26.33-161.64 73.27c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.51 209.97l-58.1 26.33c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 276.3c16.55-7.5 16.55-32.5 0-40zm0 127.8l-57.87-26.23-161.86 73.37c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.29 337.87 12.41 364.1c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 404.1c16.55-7.5 16.55-32.5 0-40z"]
    };
    exports.faLayerGroup = faLayerGroup;
    var faLeaf = {
      prefix: 'fas',
      iconName: 'leaf',
      icon: [576, 512, [], "f06c", "M546.2 9.7c-5.6-12.5-21.6-13-28.3-1.2C486.9 62.4 431.4 96 368 96h-80C182 96 96 182 96 288c0 7 .8 13.7 1.5 20.5C161.3 262.8 253.4 224 384 224c8.8 0 16 7.2 16 16s-7.2 16-16 16C132.6 256 26 410.1 2.4 468c-6.6 16.3 1.2 34.9 17.5 41.6 16.4 6.8 35-1.1 41.8-17.3 1.5-3.6 20.9-47.9 71.9-90.6 32.4 43.9 94 85.8 174.9 77.2C465.5 467.5 576 326.7 576 154.3c0-50.2-10.8-102.2-29.8-144.6z"]
    };
    exports.faLeaf = faLeaf;
    var faLemon = {
      prefix: 'fas',
      iconName: 'lemon',
      icon: [512, 512, [], "f094", "M489.038 22.963C465.944-.13 434.648-5.93 413.947 6.129c-58.906 34.312-181.25-53.077-321.073 86.746S40.441 355.041 6.129 413.945c-12.059 20.702-6.26 51.999 16.833 75.093 23.095 23.095 54.392 28.891 75.095 16.832 58.901-34.31 181.246 53.079 321.068-86.743S471.56 156.96 505.871 98.056c12.059-20.702 6.261-51.999-16.833-75.093zM243.881 95.522c-58.189 14.547-133.808 90.155-148.358 148.358-1.817 7.27-8.342 12.124-15.511 12.124-1.284 0-2.59-.156-3.893-.481-8.572-2.144-13.784-10.83-11.642-19.403C81.901 166.427 166.316 81.93 236.119 64.478c8.575-2.143 17.261 3.069 19.403 11.642s-3.069 17.259-11.641 19.402z"]
    };
    exports.faLemon = faLemon;
    var faLessThan = {
      prefix: 'fas',
      iconName: 'less-than',
      icon: [384, 512, [], "f536", "M365.46 357.74L147.04 255.89l218.47-101.88c16.02-7.47 22.95-26.51 15.48-42.53l-13.52-29C360 66.46 340.96 59.53 324.94 67L18.48 209.91a32.014 32.014 0 0 0-18.48 29v34.24c0 12.44 7.21 23.75 18.48 29l306.31 142.83c16.06 7.49 35.15.54 42.64-15.52l13.56-29.08c7.49-16.06.54-35.15-15.53-42.64z"]
    };
    exports.faLessThan = faLessThan;
    var faLessThanEqual = {
      prefix: 'fas',
      iconName: 'less-than-equal',
      icon: [448, 512, [], "f537", "M54.98 214.2l301.41 119.87c18.39 6.03 38.71-2.54 45.38-19.15l12.09-30.08c6.68-16.61-2.82-34.97-21.21-41l-175.44-68.05 175.56-68.09c18.29-6 27.74-24.27 21.1-40.79l-12.03-29.92c-6.64-16.53-26.86-25.06-45.15-19.06L54.98 137.89C41.21 142.41 32 154.5 32 168.07v15.96c0 13.56 9.21 25.65 22.98 30.17zM424 400H24c-13.25 0-24 10.74-24 24v48c0 13.25 10.75 24 24 24h400c13.25 0 24-10.75 24-24v-48c0-13.26-10.75-24-24-24z"]
    };
    exports.faLessThanEqual = faLessThanEqual;
    var faLevelDownAlt = {
      prefix: 'fas',
      iconName: 'level-down-alt',
      icon: [320, 512, [], "f3be", "M313.553 392.331L209.587 504.334c-9.485 10.214-25.676 10.229-35.174 0L70.438 392.331C56.232 377.031 67.062 352 88.025 352H152V80H68.024a11.996 11.996 0 0 1-8.485-3.515l-56-56C-4.021 12.926 1.333 0 12.024 0H208c13.255 0 24 10.745 24 24v328h63.966c20.878 0 31.851 24.969 17.587 40.331z"]
    };
    exports.faLevelDownAlt = faLevelDownAlt;
    var faLevelUpAlt = {
      prefix: 'fas',
      iconName: 'level-up-alt',
      icon: [320, 512, [], "f3bf", "M313.553 119.669L209.587 7.666c-9.485-10.214-25.676-10.229-35.174 0L70.438 119.669C56.232 134.969 67.062 160 88.025 160H152v272H68.024a11.996 11.996 0 0 0-8.485 3.515l-56 56C-4.021 499.074 1.333 512 12.024 512H208c13.255 0 24-10.745 24-24V160h63.966c20.878 0 31.851-24.969 17.587-40.331z"]
    };
    exports.faLevelUpAlt = faLevelUpAlt;
    var faLifeRing = {
      prefix: 'fas',
      iconName: 'life-ring',
      icon: [512, 512, [], "f1cd", "M256 8C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm173.696 119.559l-63.399 63.399c-10.987-18.559-26.67-34.252-45.255-45.255l63.399-63.399a218.396 218.396 0 0 1 45.255 45.255zM256 352c-53.019 0-96-42.981-96-96s42.981-96 96-96 96 42.981 96 96-42.981 96-96 96zM127.559 82.304l63.399 63.399c-18.559 10.987-34.252 26.67-45.255 45.255l-63.399-63.399a218.372 218.372 0 0 1 45.255-45.255zM82.304 384.441l63.399-63.399c10.987 18.559 26.67 34.252 45.255 45.255l-63.399 63.399a218.396 218.396 0 0 1-45.255-45.255zm302.137 45.255l-63.399-63.399c18.559-10.987 34.252-26.67 45.255-45.255l63.399 63.399a218.403 218.403 0 0 1-45.255 45.255z"]
    };
    exports.faLifeRing = faLifeRing;
    var faLightbulb = {
      prefix: 'fas',
      iconName: 'lightbulb',
      icon: [352, 512, [], "f0eb", "M96.06 454.35c.01 6.29 1.87 12.45 5.36 17.69l17.09 25.69a31.99 31.99 0 0 0 26.64 14.28h61.71a31.99 31.99 0 0 0 26.64-14.28l17.09-25.69a31.989 31.989 0 0 0 5.36-17.69l.04-38.35H96.01l.05 38.35zM0 176c0 44.37 16.45 84.85 43.56 115.78 16.52 18.85 42.36 58.23 52.21 91.45.04.26.07.52.11.78h160.24c.04-.26.07-.51.11-.78 9.85-33.22 35.69-72.6 52.21-91.45C335.55 260.85 352 220.37 352 176 352 78.61 272.91-.3 175.45 0 73.44.31 0 82.97 0 176zm176-80c-44.11 0-80 35.89-80 80 0 8.84-7.16 16-16 16s-16-7.16-16-16c0-61.76 50.24-112 112-112 8.84 0 16 7.16 16 16s-7.16 16-16 16z"]
    };
    exports.faLightbulb = faLightbulb;
    var faLink = {
      prefix: 'fas',
      iconName: 'link',
      icon: [512, 512, [], "f0c1", "M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z"]
    };
    exports.faLink = faLink;
    var faLiraSign = {
      prefix: 'fas',
      iconName: 'lira-sign',
      icon: [384, 512, [], "f195", "M371.994 256h-48.019C317.64 256 312 260.912 312 267.246 312 368 230.179 416 144 416V256.781l134.603-29.912A12 12 0 0 0 288 215.155v-40.976c0-7.677-7.109-13.38-14.603-11.714L144 191.219V160.78l134.603-29.912A12 12 0 0 0 288 119.154V78.179c0-7.677-7.109-13.38-14.603-11.714L144 95.219V44c0-6.627-5.373-12-12-12H76c-6.627 0-12 5.373-12 12v68.997L9.397 125.131A12 12 0 0 0 0 136.845v40.976c0 7.677 7.109 13.38 14.603 11.714L64 178.558v30.439L9.397 221.131A12 12 0 0 0 0 232.845v40.976c0 7.677 7.109 13.38 14.603 11.714L64 274.558V468c0 6.627 5.373 12 12 12h79.583c134.091 0 223.255-77.834 228.408-211.592.261-6.782-5.211-12.408-11.997-12.408z"]
    };
    exports.faLiraSign = faLiraSign;
    var faList = {
      prefix: 'fas',
      iconName: 'list',
      icon: [512, 512, [], "f03a", "M80 368H16a16 16 0 0 0-16 16v64a16 16 0 0 0 16 16h64a16 16 0 0 0 16-16v-64a16 16 0 0 0-16-16zm0-320H16A16 16 0 0 0 0 64v64a16 16 0 0 0 16 16h64a16 16 0 0 0 16-16V64a16 16 0 0 0-16-16zm0 160H16a16 16 0 0 0-16 16v64a16 16 0 0 0 16 16h64a16 16 0 0 0 16-16v-64a16 16 0 0 0-16-16zm416 176H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z"]
    };
    exports.faList = faList;
    var faListAlt = {
      prefix: 'fas',
      iconName: 'list-alt',
      icon: [512, 512, [], "f022", "M464 480H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48zM128 120c-22.091 0-40 17.909-40 40s17.909 40 40 40 40-17.909 40-40-17.909-40-40-40zm0 96c-22.091 0-40 17.909-40 40s17.909 40 40 40 40-17.909 40-40-17.909-40-40-40zm0 96c-22.091 0-40 17.909-40 40s17.909 40 40 40 40-17.909 40-40-17.909-40-40-40zm288-136v-32c0-6.627-5.373-12-12-12H204c-6.627 0-12 5.373-12 12v32c0 6.627 5.373 12 12 12h200c6.627 0 12-5.373 12-12zm0 96v-32c0-6.627-5.373-12-12-12H204c-6.627 0-12 5.373-12 12v32c0 6.627 5.373 12 12 12h200c6.627 0 12-5.373 12-12zm0 96v-32c0-6.627-5.373-12-12-12H204c-6.627 0-12 5.373-12 12v32c0 6.627 5.373 12 12 12h200c6.627 0 12-5.373 12-12z"]
    };
    exports.faListAlt = faListAlt;
    var faListOl = {
      prefix: 'fas',
      iconName: 'list-ol',
      icon: [512, 512, [], "f0cb", "M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"]
    };
    exports.faListOl = faListOl;
    var faListUl = {
      prefix: 'fas',
      iconName: 'list-ul',
      icon: [512, 512, [], "f0ca", "M48 48a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm0 160a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm0 160a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm448 16H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z"]
    };
    exports.faListUl = faListUl;
    var faLocationArrow = {
      prefix: 'fas',
      iconName: 'location-arrow',
      icon: [512, 512, [], "f124", "M444.52 3.52L28.74 195.42c-47.97 22.39-31.98 92.75 19.19 92.75h175.91v175.91c0 51.17 70.36 67.17 92.75 19.19l191.9-415.78c15.99-38.39-25.59-79.97-63.97-63.97z"]
    };
    exports.faLocationArrow = faLocationArrow;
    var faLock = {
      prefix: 'fas',
      iconName: 'lock',
      icon: [448, 512, [], "f023", "M400 224h-24v-72C376 68.2 307.8 0 224 0S72 68.2 72 152v72H48c-26.5 0-48 21.5-48 48v192c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V272c0-26.5-21.5-48-48-48zm-104 0H152v-72c0-39.7 32.3-72 72-72s72 32.3 72 72v72z"]
    };
    exports.faLock = faLock;
    var faLockOpen = {
      prefix: 'fas',
      iconName: 'lock-open',
      icon: [576, 512, [], "f3c1", "M423.5 0C339.5.3 272 69.5 272 153.5V224H48c-26.5 0-48 21.5-48 48v192c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V272c0-26.5-21.5-48-48-48h-48v-71.1c0-39.6 31.7-72.5 71.3-72.9 40-.4 72.7 32.1 72.7 72v80c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24v-80C576 68 507.5-.3 423.5 0z"]
    };
    exports.faLockOpen = faLockOpen;
    var faLongArrowAltDown = {
      prefix: 'fas',
      iconName: 'long-arrow-alt-down',
      icon: [256, 512, [], "f309", "M168 345.941V44c0-6.627-5.373-12-12-12h-56c-6.627 0-12 5.373-12 12v301.941H41.941c-21.382 0-32.09 25.851-16.971 40.971l86.059 86.059c9.373 9.373 24.569 9.373 33.941 0l86.059-86.059c15.119-15.119 4.411-40.971-16.971-40.971H168z"]
    };
    exports.faLongArrowAltDown = faLongArrowAltDown;
    var faLongArrowAltLeft = {
      prefix: 'fas',
      iconName: 'long-arrow-alt-left',
      icon: [448, 512, [], "f30a", "M134.059 296H436c6.627 0 12-5.373 12-12v-56c0-6.627-5.373-12-12-12H134.059v-46.059c0-21.382-25.851-32.09-40.971-16.971L7.029 239.029c-9.373 9.373-9.373 24.569 0 33.941l86.059 86.059c15.119 15.119 40.971 4.411 40.971-16.971V296z"]
    };
    exports.faLongArrowAltLeft = faLongArrowAltLeft;
    var faLongArrowAltRight = {
      prefix: 'fas',
      iconName: 'long-arrow-alt-right',
      icon: [448, 512, [], "f30b", "M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z"]
    };
    exports.faLongArrowAltRight = faLongArrowAltRight;
    var faLongArrowAltUp = {
      prefix: 'fas',
      iconName: 'long-arrow-alt-up',
      icon: [256, 512, [], "f30c", "M88 166.059V468c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12V166.059h46.059c21.382 0 32.09-25.851 16.971-40.971l-86.059-86.059c-9.373-9.373-24.569-9.373-33.941 0l-86.059 86.059c-15.119 15.119-4.411 40.971 16.971 40.971H88z"]
    };
    exports.faLongArrowAltUp = faLongArrowAltUp;
    var faLowVision = {
      prefix: 'fas',
      iconName: 'low-vision',
      icon: [576, 512, [], "f2a8", "M569.344 231.631C512.96 135.949 407.81 72 288 72c-28.468 0-56.102 3.619-82.451 10.409L152.778 10.24c-7.601-10.858-22.564-13.5-33.423-5.9l-13.114 9.178c-10.86 7.601-13.502 22.566-5.9 33.426l43.131 58.395C89.449 131.73 40.228 174.683 6.682 231.581c-.01.017-.023.033-.034.05-8.765 14.875-8.964 33.528 0 48.739 38.5 65.332 99.742 115.862 172.859 141.349L55.316 244.302A272.194 272.194 0 0 1 83.61 208.39l119.4 170.58h.01l40.63 58.04a330.055 330.055 0 0 0 78.94 1.17l-189.98-271.4a277.628 277.628 0 0 1 38.777-21.563l251.836 356.544c7.601 10.858 22.564 13.499 33.423 5.9l13.114-9.178c10.86-7.601 13.502-22.567 5.9-33.426l-43.12-58.377-.007-.009c57.161-27.978 104.835-72.04 136.81-126.301a47.938 47.938 0 0 0 .001-48.739zM390.026 345.94l-19.066-27.23c24.682-32.567 27.711-76.353 8.8-111.68v.03c0 23.65-19.17 42.82-42.82 42.82-23.828 0-42.82-19.349-42.82-42.82 0-23.65 19.17-42.82 42.82-42.82h.03c-24.75-13.249-53.522-15.643-79.51-7.68l-19.068-27.237C253.758 123.306 270.488 120 288 120c75.162 0 136 60.826 136 136 0 34.504-12.833 65.975-33.974 89.94z"]
    };
    exports.faLowVision = faLowVision;
    var faLuggageCart = {
      prefix: 'fas',
      iconName: 'luggage-cart',
      icon: [640, 512, [], "f59d", "M224 320h32V96h-32c-17.67 0-32 14.33-32 32v160c0 17.67 14.33 32 32 32zm352-32V128c0-17.67-14.33-32-32-32h-32v224h32c17.67 0 32-14.33 32-32zm48 96H128V16c0-8.84-7.16-16-16-16H16C7.16 0 0 7.16 0 16v32c0 8.84 7.16 16 16 16h48v368c0 8.84 7.16 16 16 16h82.94c-1.79 5.03-2.94 10.36-2.94 16 0 26.51 21.49 48 48 48s48-21.49 48-48c0-5.64-1.15-10.97-2.94-16h197.88c-1.79 5.03-2.94 10.36-2.94 16 0 26.51 21.49 48 48 48s48-21.49 48-48c0-5.64-1.15-10.97-2.94-16H624c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM480 96V48c0-26.51-21.49-48-48-48h-96c-26.51 0-48 21.49-48 48v272h192V96zm-48 0h-96V48h96v48z"]
    };
    exports.faLuggageCart = faLuggageCart;
    var faLungs = {
      prefix: 'fas',
      iconName: 'lungs',
      icon: [640, 512, [], "f604", "M636.11 390.15C614.44 308.85 580.07 231 534.1 159.13 511.98 124.56 498.03 96 454.05 96 415.36 96 384 125.42 384 161.71v60.11l-32.88-21.92a15.996 15.996 0 0 1-7.12-13.31V16c0-8.84-7.16-16-16-16h-16c-8.84 0-16 7.16-16 16v170.59c0 5.35-2.67 10.34-7.12 13.31L256 221.82v-60.11C256 125.42 224.64 96 185.95 96c-43.98 0-57.93 28.56-80.05 63.13C59.93 231 25.56 308.85 3.89 390.15 1.3 399.84 0 409.79 0 419.78c0 61.23 62.48 105.44 125.24 88.62l59.5-15.95c42.18-11.3 71.26-47.47 71.26-88.62v-87.49l-85.84 57.23a7.992 7.992 0 0 1-11.09-2.22l-8.88-13.31a7.992 7.992 0 0 1 2.22-11.09L320 235.23l167.59 111.72a7.994 7.994 0 0 1 2.22 11.09l-8.88 13.31a7.994 7.994 0 0 1-11.09 2.22L384 316.34v87.49c0 41.15 29.08 77.31 71.26 88.62l59.5 15.95C577.52 525.22 640 481.01 640 419.78c0-9.99-1.3-19.94-3.89-29.63z"]
    };
    exports.faLungs = faLungs;
    var faLungsVirus = {
      prefix: 'fas',
      iconName: 'lungs-virus',
      icon: [640, 512, [], "e067", "M344,150.68V16A16,16,0,0,0,328,0H312a16,16,0,0,0-16,16V150.68a46.45,46.45,0,0,1,48,0ZM195.54,444.46a48.06,48.06,0,0,1,0-67.88l8.58-8.58H192a48,48,0,0,1,0-96h12.12l-8.58-8.57a48,48,0,0,1,60.46-74V161.75C256,125.38,224.62,96,186,96c-44,0-58,28.5-80.12,63.13a819.52,819.52,0,0,0-102,231A113.16,113.16,0,0,0,0,419.75C0,481,62.5,525.26,125.25,508.38l59.5-15.87a98.51,98.51,0,0,0,52.5-34.75,46.49,46.49,0,0,1-41.71-13.3Zm226.29-22.63a16,16,0,0,0,0-22.62l-8.58-8.58C393.09,370.47,407.37,336,435.88,336H448a16,16,0,0,0,0-32H435.88c-28.51,0-42.79-34.47-22.63-54.62l8.58-8.58a16,16,0,0,0-22.63-22.63l-8.57,8.58C370.47,246.91,336,232.63,336,204.12V192a16,16,0,0,0-32,0v12.12c0,28.51-34.47,42.79-54.63,22.63l-8.57-8.58a16,16,0,0,0-22.63,22.63l8.58,8.58c20.16,20.15,5.88,54.62-22.63,54.62H192a16,16,0,0,0,0,32h12.12c28.51,0,42.79,34.47,22.63,54.63l-8.58,8.58a16,16,0,1,0,22.63,22.62l8.57-8.57C269.53,393.1,304,407.38,304,435.88V448a16,16,0,0,0,32,0V435.88c0-28.5,34.47-42.78,54.63-22.62l8.57,8.57a16,16,0,0,0,22.63,0ZM288,304a16,16,0,1,1,16-16A16,16,0,0,1,288,304Zm64,64a16,16,0,1,1,16-16A16,16,0,0,1,352,368Zm284.12,22.13a819.52,819.52,0,0,0-102-231C512,124.5,498,96,454,96c-38.62,0-70,29.38-70,65.75v27.72a48,48,0,0,1,60.46,74L435.88,272H448a48,48,0,0,1,0,96H435.88l8.58,8.58a47.7,47.7,0,0,1-41.71,81.18,98.51,98.51,0,0,0,52.5,34.75l59.5,15.87C577.5,525.26,640,481,640,419.75A113.16,113.16,0,0,0,636.12,390.13Z"]
    };
    exports.faLungsVirus = faLungsVirus;
    var faMagic = {
      prefix: 'fas',
      iconName: 'magic',
      icon: [512, 512, [], "f0d0", "M224 96l16-32 32-16-32-16-16-32-16 32-32 16 32 16 16 32zM80 160l26.66-53.33L160 80l-53.34-26.67L80 0 53.34 53.33 0 80l53.34 26.67L80 160zm352 128l-26.66 53.33L352 368l53.34 26.67L432 448l26.66-53.33L512 368l-53.34-26.67L432 288zm70.62-193.77L417.77 9.38C411.53 3.12 403.34 0 395.15 0c-8.19 0-16.38 3.12-22.63 9.38L9.38 372.52c-12.5 12.5-12.5 32.76 0 45.25l84.85 84.85c6.25 6.25 14.44 9.37 22.62 9.37 8.19 0 16.38-3.12 22.63-9.37l363.14-363.15c12.5-12.48 12.5-32.75 0-45.24zM359.45 203.46l-50.91-50.91 86.6-86.6 50.91 50.91-86.6 86.6z"]
    };
    exports.faMagic = faMagic;
    var faMagnet = {
      prefix: 'fas',
      iconName: 'magnet',
      icon: [512, 512, [], "f076", "M164.07 148.1H12a12 12 0 0 1-12-12v-80a36 36 0 0 1 36-36h104a36 36 0 0 1 36 36v80a11.89 11.89 0 0 1-11.93 12zm347.93-12V56a36 36 0 0 0-36-36H372a36 36 0 0 0-36 36v80a12 12 0 0 0 12 12h152a11.89 11.89 0 0 0 12-11.9zm-164 44a12 12 0 0 0-12 12v52c0 128.1-160 127.9-160 0v-52a12 12 0 0 0-12-12H12.1a12 12 0 0 0-12 12.1c.1 21.4.6 40.3 0 53.3 0 150.6 136.17 246.6 256.75 246.6s255-96 255-246.7c-.6-12.8-.2-33 0-53.2a12 12 0 0 0-12-12.1z"]
    };
    exports.faMagnet = faMagnet;
    var faMailBulk = {
      prefix: 'fas',
      iconName: 'mail-bulk',
      icon: [576, 512, [], "f674", "M160 448c-25.6 0-51.2-22.4-64-32-64-44.8-83.2-60.8-96-70.4V480c0 17.67 14.33 32 32 32h256c17.67 0 32-14.33 32-32V345.6c-12.8 9.6-32 25.6-96 70.4-12.8 9.6-38.4 32-64 32zm128-192H32c-17.67 0-32 14.33-32 32v16c25.6 19.2 22.4 19.2 115.2 86.4 9.6 6.4 28.8 25.6 44.8 25.6s35.2-19.2 44.8-22.4c92.8-67.2 89.6-67.2 115.2-86.4V288c0-17.67-14.33-32-32-32zm256-96H224c-17.67 0-32 14.33-32 32v32h96c33.21 0 60.59 25.42 63.71 57.82l.29-.22V416h192c17.67 0 32-14.33 32-32V192c0-17.67-14.33-32-32-32zm-32 128h-64v-64h64v64zm-352-96c0-35.29 28.71-64 64-64h224V32c0-17.67-14.33-32-32-32H96C78.33 0 64 14.33 64 32v192h96v-32z"]
    };
    exports.faMailBulk = faMailBulk;
    var faMale = {
      prefix: 'fas',
      iconName: 'male',
      icon: [192, 512, [], "f183", "M96 0c35.346 0 64 28.654 64 64s-28.654 64-64 64-64-28.654-64-64S60.654 0 96 0m48 144h-11.36c-22.711 10.443-49.59 10.894-73.28 0H48c-26.51 0-48 21.49-48 48v136c0 13.255 10.745 24 24 24h16v136c0 13.255 10.745 24 24 24h64c13.255 0 24-10.745 24-24V352h16c13.255 0 24-10.745 24-24V192c0-26.51-21.49-48-48-48z"]
    };
    exports.faMale = faMale;
    var faMap = {
      prefix: 'fas',
      iconName: 'map',
      icon: [576, 512, [], "f279", "M0 117.66v346.32c0 11.32 11.43 19.06 21.94 14.86L160 416V32L20.12 87.95A32.006 32.006 0 0 0 0 117.66zM192 416l192 64V96L192 32v384zM554.06 33.16L416 96v384l139.88-55.95A31.996 31.996 0 0 0 576 394.34V48.02c0-11.32-11.43-19.06-21.94-14.86z"]
    };
    exports.faMap = faMap;
    var faMapMarked = {
      prefix: 'fas',
      iconName: 'map-marked',
      icon: [576, 512, [], "f59f", "M288 0c-69.59 0-126 56.41-126 126 0 56.26 82.35 158.8 113.9 196.02 6.39 7.54 17.82 7.54 24.2 0C331.65 284.8 414 182.26 414 126 414 56.41 357.59 0 288 0zM20.12 215.95A32.006 32.006 0 0 0 0 245.66v250.32c0 11.32 11.43 19.06 21.94 14.86L160 448V214.92c-8.84-15.98-16.07-31.54-21.25-46.42L20.12 215.95zM288 359.67c-14.07 0-27.38-6.18-36.51-16.96-19.66-23.2-40.57-49.62-59.49-76.72v182l192 64V266c-18.92 27.09-39.82 53.52-59.49 76.72-9.13 10.77-22.44 16.95-36.51 16.95zm266.06-198.51L416 224v288l139.88-55.95A31.996 31.996 0 0 0 576 426.34V176.02c0-11.32-11.43-19.06-21.94-14.86z"]
    };
    exports.faMapMarked = faMapMarked;
    var faMapMarkedAlt = {
      prefix: 'fas',
      iconName: 'map-marked-alt',
      icon: [576, 512, [], "f5a0", "M288 0c-69.59 0-126 56.41-126 126 0 56.26 82.35 158.8 113.9 196.02 6.39 7.54 17.82 7.54 24.2 0C331.65 284.8 414 182.26 414 126 414 56.41 357.59 0 288 0zm0 168c-23.2 0-42-18.8-42-42s18.8-42 42-42 42 18.8 42 42-18.8 42-42 42zM20.12 215.95A32.006 32.006 0 0 0 0 245.66v250.32c0 11.32 11.43 19.06 21.94 14.86L160 448V214.92c-8.84-15.98-16.07-31.54-21.25-46.42L20.12 215.95zM288 359.67c-14.07 0-27.38-6.18-36.51-16.96-19.66-23.2-40.57-49.62-59.49-76.72v182l192 64V266c-18.92 27.09-39.82 53.52-59.49 76.72-9.13 10.77-22.44 16.95-36.51 16.95zm266.06-198.51L416 224v288l139.88-55.95A31.996 31.996 0 0 0 576 426.34V176.02c0-11.32-11.43-19.06-21.94-14.86z"]
    };
    exports.faMapMarkedAlt = faMapMarkedAlt;
    var faMapMarker = {
      prefix: 'fas',
      iconName: 'map-marker',
      icon: [384, 512, [], "f041", "M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0z"]
    };
    exports.faMapMarker = faMapMarker;
    var faMapMarkerAlt = {
      prefix: 'fas',
      iconName: 'map-marker-alt',
      icon: [384, 512, [], "f3c5", "M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0zM192 272c44.183 0 80-35.817 80-80s-35.817-80-80-80-80 35.817-80 80 35.817 80 80 80z"]
    };
    exports.faMapMarkerAlt = faMapMarkerAlt;
    var faMapPin = {
      prefix: 'fas',
      iconName: 'map-pin',
      icon: [288, 512, [], "f276", "M112 316.94v156.69l22.02 33.02c4.75 7.12 15.22 7.12 19.97 0L176 473.63V316.94c-10.39 1.92-21.06 3.06-32 3.06s-21.61-1.14-32-3.06zM144 0C64.47 0 0 64.47 0 144s64.47 144 144 144 144-64.47 144-144S223.53 0 144 0zm0 76c-37.5 0-68 30.5-68 68 0 6.62-5.38 12-12 12s-12-5.38-12-12c0-50.73 41.28-92 92-92 6.62 0 12 5.38 12 12s-5.38 12-12 12z"]
    };
    exports.faMapPin = faMapPin;
    var faMapSigns = {
      prefix: 'fas',
      iconName: 'map-signs',
      icon: [512, 512, [], "f277", "M507.31 84.69L464 41.37c-6-6-14.14-9.37-22.63-9.37H288V16c0-8.84-7.16-16-16-16h-32c-8.84 0-16 7.16-16 16v16H56c-13.25 0-24 10.75-24 24v80c0 13.25 10.75 24 24 24h385.37c8.49 0 16.62-3.37 22.63-9.37l43.31-43.31c6.25-6.26 6.25-16.38 0-22.63zM224 496c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16V384h-64v112zm232-272H288v-32h-64v32H70.63c-8.49 0-16.62 3.37-22.63 9.37L4.69 276.69c-6.25 6.25-6.25 16.38 0 22.63L48 342.63c6 6 14.14 9.37 22.63 9.37H456c13.25 0 24-10.75 24-24v-80c0-13.25-10.75-24-24-24z"]
    };
    exports.faMapSigns = faMapSigns;
    var faMarker = {
      prefix: 'fas',
      iconName: 'marker',
      icon: [512, 512, [], "f5a1", "M93.95 290.03A327.038 327.038 0 0 0 .17 485.11l-.03.23c-1.7 15.28 11.21 28.2 26.49 26.51a327.02 327.02 0 0 0 195.34-93.8l75.4-75.4-128.02-128.02-75.4 75.4zM485.49 26.51c-35.35-35.35-92.67-35.35-128.02 0l-21.76 21.76-36.56-36.55c-15.62-15.62-40.95-15.62-56.56 0L138.47 115.84c-6.25 6.25-6.25 16.38 0 22.63l22.62 22.62c6.25 6.25 16.38 6.25 22.63 0l87.15-87.15 19.59 19.59L191.98 192 320 320.02l165.49-165.49c35.35-35.35 35.35-92.66 0-128.02z"]
    };
    exports.faMarker = faMarker;
    var faMars = {
      prefix: 'fas',
      iconName: 'mars',
      icon: [384, 512, [], "f222", "M372 64h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-80.7 80.7c-22.2-14-48.5-22.1-76.7-22.1C64.5 160 0 224.5 0 304s64.5 144 144 144 144-64.5 144-144c0-28.2-8.1-54.5-22.1-76.7l80.7-80.7 16.9 16.9c7.6 7.6 20.5 2.2 20.5-8.5V76c0-6.6-5.4-12-12-12zM144 384c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"]
    };
    exports.faMars = faMars;
    var faMarsDouble = {
      prefix: 'fas',
      iconName: 'mars-double',
      icon: [512, 512, [], "f227", "M340 0h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-48.7 48.7C198.5 72.1 172.2 64 144 64 64.5 64 0 128.5 0 208s64.5 144 144 144 144-64.5 144-144c0-28.2-8.1-54.5-22.1-76.7l48.7-48.7 16.9 16.9c2.4 2.4 5.5 3.5 8.4 3.5 6.2 0 12.1-4.8 12.1-12V12c0-6.6-5.4-12-12-12zM144 288c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80zm356-128.1h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-48.7 48.7c-18.2-11.4-39-18.9-61.5-21.3-2.1 21.8-8.2 43.3-18.4 63.3 1.1 0 2.2-.1 3.2-.1 44.1 0 80 35.9 80 80s-35.9 80-80 80-80-35.9-80-80c0-1.1 0-2.2.1-3.2-20 10.2-41.5 16.4-63.3 18.4C168.4 455.6 229.6 512 304 512c79.5 0 144-64.5 144-144 0-28.2-8.1-54.5-22.1-76.7l48.7-48.7 16.9 16.9c2.4 2.4 5.4 3.5 8.4 3.5 6.2 0 12.1-4.8 12.1-12v-79c0-6.7-5.4-12.1-12-12.1z"]
    };
    exports.faMarsDouble = faMarsDouble;
    var faMarsStroke = {
      prefix: 'fas',
      iconName: 'mars-stroke',
      icon: [384, 512, [], "f229", "M372 64h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-17.5 17.5-14.1-14.1c-4.7-4.7-12.3-4.7-17 0L224.5 133c-4.7 4.7-4.7 12.3 0 17l14.1 14.1-18 18c-22.2-14-48.5-22.1-76.7-22.1C64.5 160 0 224.5 0 304s64.5 144 144 144 144-64.5 144-144c0-28.2-8.1-54.5-22.1-76.7l18-18 14.1 14.1c4.7 4.7 12.3 4.7 17 0l28.3-28.3c4.7-4.7 4.7-12.3 0-17L329.2 164l17.5-17.5 16.9 16.9c7.6 7.6 20.5 2.2 20.5-8.5V76c-.1-6.6-5.5-12-12.1-12zM144 384c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"]
    };
    exports.faMarsStroke = faMarsStroke;
    var faMarsStrokeH = {
      prefix: 'fas',
      iconName: 'mars-stroke-h',
      icon: [480, 512, [], "f22b", "M476.2 247.5l-55.9-55.9c-7.6-7.6-20.5-2.2-20.5 8.5V224H376v-20c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v20h-27.6c-5.8-25.6-18.7-49.9-38.6-69.8C189.6 98 98.4 98 42.2 154.2c-56.2 56.2-56.2 147.4 0 203.6 56.2 56.2 147.4 56.2 203.6 0 19.9-19.9 32.8-44.2 38.6-69.8H312v20c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-20h23.9v23.9c0 10.7 12.9 16 20.5 8.5l55.9-55.9c4.6-4.7 4.6-12.3-.1-17zm-275.6 65.1c-31.2 31.2-81.9 31.2-113.1 0-31.2-31.2-31.2-81.9 0-113.1 31.2-31.2 81.9-31.2 113.1 0 31.2 31.1 31.2 81.9 0 113.1z"]
    };
    exports.faMarsStrokeH = faMarsStrokeH;
    var faMarsStrokeV = {
      prefix: 'fas',
      iconName: 'mars-stroke-v',
      icon: [288, 512, [], "f22a", "M245.8 234.2c-19.9-19.9-44.2-32.8-69.8-38.6v-25.4h20c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-20V81.4h23.9c10.7 0 16-12.9 8.5-20.5L152.5 5.1c-4.7-4.7-12.3-4.7-17 0L79.6 61c-7.6 7.6-2.2 20.5 8.5 20.5H112v24.7H92c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h20v25.4c-25.6 5.8-49.9 18.7-69.8 38.6-56.2 56.2-56.2 147.4 0 203.6 56.2 56.2 147.4 56.2 203.6 0 56.3-56.2 56.3-147.4 0-203.6zm-45.2 158.4c-31.2 31.2-81.9 31.2-113.1 0-31.2-31.2-31.2-81.9 0-113.1 31.2-31.2 81.9-31.2 113.1 0 31.2 31.1 31.2 81.9 0 113.1z"]
    };
    exports.faMarsStrokeV = faMarsStrokeV;
    var faMask = {
      prefix: 'fas',
      iconName: 'mask',
      icon: [640, 512, [], "f6fa", "M320.67 64c-442.6 0-357.57 384-158.46 384 39.9 0 77.47-20.69 101.42-55.86l25.73-37.79c15.66-22.99 46.97-22.99 62.63 0l25.73 37.79C401.66 427.31 439.23 448 479.13 448c189.86 0 290.63-384-158.46-384zM184 308.36c-41.06 0-67.76-25.66-80.08-41.05-5.23-6.53-5.23-16.09 0-22.63 12.32-15.4 39.01-41.05 80.08-41.05s67.76 25.66 80.08 41.05c5.23 6.53 5.23 16.09 0 22.63-12.32 15.4-39.02 41.05-80.08 41.05zm272 0c-41.06 0-67.76-25.66-80.08-41.05-5.23-6.53-5.23-16.09 0-22.63 12.32-15.4 39.01-41.05 80.08-41.05s67.76 25.66 80.08 41.05c5.23 6.53 5.23 16.09 0 22.63-12.32 15.4-39.02 41.05-80.08 41.05z"]
    };
    exports.faMask = faMask;
    var faMedal = {
      prefix: 'fas',
      iconName: 'medal',
      icon: [512, 512, [], "f5a2", "M223.75 130.75L154.62 15.54A31.997 31.997 0 0 0 127.18 0H16.03C3.08 0-4.5 14.57 2.92 25.18l111.27 158.96c29.72-27.77 67.52-46.83 109.56-53.39zM495.97 0H384.82c-11.24 0-21.66 5.9-27.44 15.54l-69.13 115.21c42.04 6.56 79.84 25.62 109.56 53.38L509.08 25.18C516.5 14.57 508.92 0 495.97 0zM256 160c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm92.52 157.26l-37.93 36.96 8.97 52.22c1.6 9.36-8.26 16.51-16.65 12.09L256 393.88l-46.9 24.65c-8.4 4.45-18.25-2.74-16.65-12.09l8.97-52.22-37.93-36.96c-6.82-6.64-3.05-18.23 6.35-19.59l52.43-7.64 23.43-47.52c2.11-4.28 6.19-6.39 10.28-6.39 4.11 0 8.22 2.14 10.33 6.39l23.43 47.52 52.43 7.64c9.4 1.36 13.17 12.95 6.35 19.59z"]
    };
    exports.faMedal = faMedal;
    var faMedkit = {
      prefix: 'fas',
      iconName: 'medkit',
      icon: [512, 512, [], "f0fa", "M96 480h320V128h-32V80c0-26.51-21.49-48-48-48H176c-26.51 0-48 21.49-48 48v48H96v352zm96-384h128v32H192V96zm320 80v256c0 26.51-21.49 48-48 48h-16V128h16c26.51 0 48 21.49 48 48zM64 480H48c-26.51 0-48-21.49-48-48V176c0-26.51 21.49-48 48-48h16v352zm288-208v32c0 8.837-7.163 16-16 16h-48v48c0 8.837-7.163 16-16 16h-32c-8.837 0-16-7.163-16-16v-48h-48c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h48v-48c0-8.837 7.163-16 16-16h32c8.837 0 16 7.163 16 16v48h48c8.837 0 16 7.163 16 16z"]
    };
    exports.faMedkit = faMedkit;
    var faMeh = {
      prefix: 'fas',
      iconName: 'meh',
      icon: [496, 512, [], "f11a", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm-80 168c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm176 192H152c-21.2 0-21.2-32 0-32h192c21.2 0 21.2 32 0 32zm-16-128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faMeh = faMeh;
    var faMehBlank = {
      prefix: 'fas',
      iconName: 'meh-blank',
      icon: [496, 512, [], "f5a4", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm-80 232c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm160 0c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faMehBlank = faMehBlank;
    var faMehRollingEyes = {
      prefix: 'fas',
      iconName: 'meh-rolling-eyes',
      icon: [496, 512, [], "f5a5", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM88 224c0-24.3 13.7-45.2 33.6-56-.7 2.6-1.6 5.2-1.6 8 0 17.7 14.3 32 32 32s32-14.3 32-32c0-2.8-.9-5.4-1.6-8 19.9 10.8 33.6 31.7 33.6 56 0 35.3-28.7 64-64 64s-64-28.7-64-64zm224 176H184c-21.2 0-21.2-32 0-32h128c21.2 0 21.2 32 0 32zm32-112c-35.3 0-64-28.7-64-64 0-24.3 13.7-45.2 33.6-56-.7 2.6-1.6 5.2-1.6 8 0 17.7 14.3 32 32 32s32-14.3 32-32c0-2.8-.9-5.4-1.6-8 19.9 10.8 33.6 31.7 33.6 56 0 35.3-28.7 64-64 64z"]
    };
    exports.faMehRollingEyes = faMehRollingEyes;
    var faMemory = {
      prefix: 'fas',
      iconName: 'memory',
      icon: [640, 512, [], "f538", "M640 130.94V96c0-17.67-14.33-32-32-32H32C14.33 64 0 78.33 0 96v34.94c18.6 6.61 32 24.19 32 45.06s-13.4 38.45-32 45.06V320h640v-98.94c-18.6-6.61-32-24.19-32-45.06s13.4-38.45 32-45.06zM224 256h-64V128h64v128zm128 0h-64V128h64v128zm128 0h-64V128h64v128zM0 448h64v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h128v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h128v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h128v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h64v-96H0v96z"]
    };
    exports.faMemory = faMemory;
    var faMenorah = {
      prefix: 'fas',
      iconName: 'menorah',
      icon: [640, 512, [], "f676", "M144 128h-32c-8.84 0-16 7.16-16 16v144h64V144c0-8.84-7.16-16-16-16zm96 0h-32c-8.84 0-16 7.16-16 16v144h64V144c0-8.84-7.16-16-16-16zm192 0h-32c-8.84 0-16 7.16-16 16v144h64V144c0-8.84-7.16-16-16-16zm96 0h-32c-8.84 0-16 7.16-16 16v144h64V144c0-8.84-7.16-16-16-16zm80-32c17.67 0 32-14.33 32-32S608 0 608 0s-32 46.33-32 64 14.33 32 32 32zm-96 0c17.67 0 32-14.33 32-32S512 0 512 0s-32 46.33-32 64 14.33 32 32 32zm-96 0c17.67 0 32-14.33 32-32S416 0 416 0s-32 46.33-32 64 14.33 32 32 32zm-96 0c17.67 0 32-14.33 32-32S320 0 320 0s-32 46.33-32 64 14.33 32 32 32zm-96 0c17.67 0 32-14.33 32-32S224 0 224 0s-32 46.33-32 64 14.33 32 32 32zm-96 0c17.67 0 32-14.33 32-32S128 0 128 0 96 46.33 96 64s14.33 32 32 32zm-96 0c17.67 0 32-14.33 32-32S32 0 32 0 0 46.33 0 64s14.33 32 32 32zm544 192c0 17.67-14.33 32-32 32H352V144c0-8.84-7.16-16-16-16h-32c-8.84 0-16 7.16-16 16v176H96c-17.67 0-32-14.33-32-32V144c0-8.84-7.16-16-16-16H16c-8.84 0-16 7.16-16 16v144c0 53.02 42.98 96 96 96h192v64H112c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h416c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16H352v-64h192c53.02 0 96-42.98 96-96V144c0-8.84-7.16-16-16-16h-32c-8.84 0-16 7.16-16 16v144z"]
    };
    exports.faMenorah = faMenorah;
    var faMercury = {
      prefix: 'fas',
      iconName: 'mercury',
      icon: [288, 512, [], "f223", "M288 208c0-44.2-19.9-83.7-51.2-110.1 2.5-1.8 4.9-3.8 7.2-5.8 24.7-21.2 39.8-48.8 43.2-78.8.9-7.1-4.7-13.3-11.9-13.3h-40.5C229 0 224.1 4.1 223 9.8c-2.4 12.5-9.6 24.3-20.7 33.8C187 56.8 166.3 64 144 64s-43-7.2-58.4-20.4C74.5 34.1 67.4 22.3 64.9 9.8 63.8 4.1 58.9 0 53.2 0H12.7C5.5 0-.1 6.2.8 13.3 4.2 43.4 19.2 71 44 92.2c2.3 2 4.7 3.9 7.2 5.8C19.9 124.3 0 163.8 0 208c0 68.5 47.9 125.9 112 140.4V400H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v36c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-36h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-51.6c64.1-14.5 112-71.9 112-140.4zm-224 0c0-44.1 35.9-80 80-80s80 35.9 80 80-35.9 80-80 80-80-35.9-80-80z"]
    };
    exports.faMercury = faMercury;
    var faMeteor = {
      prefix: 'fas',
      iconName: 'meteor',
      icon: [512, 512, [], "f753", "M511.328,20.8027c-11.60759,38.70264-34.30724,111.70173-61.30311,187.70077,6.99893,2.09372,13.4042,4,18.60653,5.59368a16.06158,16.06158,0,0,1,9.49854,22.906c-22.106,42.29635-82.69047,152.795-142.47819,214.40356-.99984,1.09373-1.99969,2.5-2.99954,3.49995A194.83046,194.83046,0,1,1,57.085,179.41009c.99985-1,2.40588-2,3.49947-3,61.59994-59.90549,171.97367-120.40473,214.37343-142.4982a16.058,16.058,0,0,1,22.90274,9.49988c1.59351,5.09368,3.49947,11.5936,5.5929,18.59351C379.34818,35.00565,452.43074,12.30281,491.12794.70921A16.18325,16.18325,0,0,1,511.328,20.8027ZM319.951,320.00207A127.98041,127.98041,0,1,0,191.97061,448.00046,127.97573,127.97573,0,0,0,319.951,320.00207Zm-127.98041-31.9996a31.9951,31.9951,0,1,1-31.9951-31.9996A31.959,31.959,0,0,1,191.97061,288.00247Zm31.9951,79.999a15.99755,15.99755,0,1,1-15.99755-15.9998A16.04975,16.04975,0,0,1,223.96571,368.00147Z"]
    };
    exports.faMeteor = faMeteor;
    var faMicrochip = {
      prefix: 'fas',
      iconName: 'microchip',
      icon: [512, 512, [], "f2db", "M416 48v416c0 26.51-21.49 48-48 48H144c-26.51 0-48-21.49-48-48V48c0-26.51 21.49-48 48-48h224c26.51 0 48 21.49 48 48zm96 58v12a6 6 0 0 1-6 6h-18v6a6 6 0 0 1-6 6h-42V88h42a6 6 0 0 1 6 6v6h18a6 6 0 0 1 6 6zm0 96v12a6 6 0 0 1-6 6h-18v6a6 6 0 0 1-6 6h-42v-48h42a6 6 0 0 1 6 6v6h18a6 6 0 0 1 6 6zm0 96v12a6 6 0 0 1-6 6h-18v6a6 6 0 0 1-6 6h-42v-48h42a6 6 0 0 1 6 6v6h18a6 6 0 0 1 6 6zm0 96v12a6 6 0 0 1-6 6h-18v6a6 6 0 0 1-6 6h-42v-48h42a6 6 0 0 1 6 6v6h18a6 6 0 0 1 6 6zM30 376h42v48H30a6 6 0 0 1-6-6v-6H6a6 6 0 0 1-6-6v-12a6 6 0 0 1 6-6h18v-6a6 6 0 0 1 6-6zm0-96h42v48H30a6 6 0 0 1-6-6v-6H6a6 6 0 0 1-6-6v-12a6 6 0 0 1 6-6h18v-6a6 6 0 0 1 6-6zm0-96h42v48H30a6 6 0 0 1-6-6v-6H6a6 6 0 0 1-6-6v-12a6 6 0 0 1 6-6h18v-6a6 6 0 0 1 6-6zm0-96h42v48H30a6 6 0 0 1-6-6v-6H6a6 6 0 0 1-6-6v-12a6 6 0 0 1 6-6h18v-6a6 6 0 0 1 6-6z"]
    };
    exports.faMicrochip = faMicrochip;
    var faMicrophone = {
      prefix: 'fas',
      iconName: 'microphone',
      icon: [352, 512, [], "f130", "M176 352c53.02 0 96-42.98 96-96V96c0-53.02-42.98-96-96-96S80 42.98 80 96v160c0 53.02 42.98 96 96 96zm160-160h-16c-8.84 0-16 7.16-16 16v48c0 74.8-64.49 134.82-140.79 127.38C96.71 376.89 48 317.11 48 250.3V208c0-8.84-7.16-16-16-16H16c-8.84 0-16 7.16-16 16v40.16c0 89.64 63.97 169.55 152 181.69V464H96c-8.84 0-16 7.16-16 16v16c0 8.84 7.16 16 16 16h160c8.84 0 16-7.16 16-16v-16c0-8.84-7.16-16-16-16h-56v-33.77C285.71 418.47 352 344.9 352 256v-48c0-8.84-7.16-16-16-16z"]
    };
    exports.faMicrophone = faMicrophone;
    var faMicrophoneAlt = {
      prefix: 'fas',
      iconName: 'microphone-alt',
      icon: [352, 512, [], "f3c9", "M336 192h-16c-8.84 0-16 7.16-16 16v48c0 74.8-64.49 134.82-140.79 127.38C96.71 376.89 48 317.11 48 250.3V208c0-8.84-7.16-16-16-16H16c-8.84 0-16 7.16-16 16v40.16c0 89.64 63.97 169.55 152 181.69V464H96c-8.84 0-16 7.16-16 16v16c0 8.84 7.16 16 16 16h160c8.84 0 16-7.16 16-16v-16c0-8.84-7.16-16-16-16h-56v-33.77C285.71 418.47 352 344.9 352 256v-48c0-8.84-7.16-16-16-16zM176 352c53.02 0 96-42.98 96-96h-85.33c-5.89 0-10.67-3.58-10.67-8v-16c0-4.42 4.78-8 10.67-8H272v-32h-85.33c-5.89 0-10.67-3.58-10.67-8v-16c0-4.42 4.78-8 10.67-8H272v-32h-85.33c-5.89 0-10.67-3.58-10.67-8v-16c0-4.42 4.78-8 10.67-8H272c0-53.02-42.98-96-96-96S80 42.98 80 96v160c0 53.02 42.98 96 96 96z"]
    };
    exports.faMicrophoneAlt = faMicrophoneAlt;
    var faMicrophoneAltSlash = {
      prefix: 'fas',
      iconName: 'microphone-alt-slash',
      icon: [640, 512, [], "f539", "M633.82 458.1L476.26 336.33C488.74 312.21 496 284.98 496 256v-48c0-8.84-7.16-16-16-16h-16c-8.84 0-16 7.16-16 16v48c0 17.92-3.96 34.8-10.72 50.2l-26.55-20.52c3.1-9.4 5.28-19.22 5.28-29.67h-43.67l-41.4-32H416v-32h-85.33c-5.89 0-10.67-3.58-10.67-8v-16c0-4.42 4.78-8 10.67-8H416v-32h-85.33c-5.89 0-10.67-3.58-10.67-8v-16c0-4.42 4.78-8 10.67-8H416c0-53.02-42.98-96-96-96s-96 42.98-96 96v45.36L45.47 3.37C38.49-2.05 28.43-.8 23.01 6.18L3.37 31.45C-2.05 38.42-.8 48.47 6.18 53.9l588.36 454.73c6.98 5.43 17.03 4.17 22.46-2.81l19.64-25.27c5.41-6.97 4.16-17.02-2.82-22.45zM400 464h-56v-33.78c11.71-1.62 23.1-4.28 33.96-8.08l-50.4-38.96c-6.71.4-13.41.87-20.35.2-55.85-5.45-98.74-48.63-111.18-101.85L144 241.31v6.85c0 89.64 63.97 169.55 152 181.69V464h-56c-8.84 0-16 7.16-16 16v16c0 8.84 7.16 16 16 16h160c8.84 0 16-7.16 16-16v-16c0-8.84-7.16-16-16-16z"]
    };
    exports.faMicrophoneAltSlash = faMicrophoneAltSlash;
    var faMicrophoneSlash = {
      prefix: 'fas',
      iconName: 'microphone-slash',
      icon: [640, 512, [], "f131", "M633.82 458.1l-157.8-121.96C488.61 312.13 496 285.01 496 256v-48c0-8.84-7.16-16-16-16h-16c-8.84 0-16 7.16-16 16v48c0 17.92-3.96 34.8-10.72 50.2l-26.55-20.52c3.1-9.4 5.28-19.22 5.28-29.67V96c0-53.02-42.98-96-96-96s-96 42.98-96 96v45.36L45.47 3.37C38.49-2.05 28.43-.8 23.01 6.18L3.37 31.45C-2.05 38.42-.8 48.47 6.18 53.9l588.36 454.73c6.98 5.43 17.03 4.17 22.46-2.81l19.64-25.27c5.41-6.97 4.16-17.02-2.82-22.45zM400 464h-56v-33.77c11.66-1.6 22.85-4.54 33.67-8.31l-50.11-38.73c-6.71.4-13.41.87-20.35.2-55.85-5.45-98.74-48.63-111.18-101.85L144 241.31v6.85c0 89.64 63.97 169.55 152 181.69V464h-56c-8.84 0-16 7.16-16 16v16c0 8.84 7.16 16 16 16h160c8.84 0 16-7.16 16-16v-16c0-8.84-7.16-16-16-16z"]
    };
    exports.faMicrophoneSlash = faMicrophoneSlash;
    var faMicroscope = {
      prefix: 'fas',
      iconName: 'microscope',
      icon: [512, 512, [], "f610", "M160 320h12v16c0 8.84 7.16 16 16 16h40c8.84 0 16-7.16 16-16v-16h12c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32V16c0-8.84-7.16-16-16-16h-64c-8.84 0-16 7.16-16 16v16c-17.67 0-32 14.33-32 32v224c0 17.67 14.33 32 32 32zm304 128h-1.29C493.24 413.99 512 369.2 512 320c0-105.88-86.12-192-192-192v64c70.58 0 128 57.42 128 128s-57.42 128-128 128H48c-26.51 0-48 21.49-48 48 0 8.84 7.16 16 16 16h480c8.84 0 16-7.16 16-16 0-26.51-21.49-48-48-48zm-360-32h208c4.42 0 8-3.58 8-8v-16c0-4.42-3.58-8-8-8H104c-4.42 0-8 3.58-8 8v16c0 4.42 3.58 8 8 8z"]
    };
    exports.faMicroscope = faMicroscope;
    var faMinus = {
      prefix: 'fas',
      iconName: 'minus',
      icon: [448, 512, [], "f068", "M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"]
    };
    exports.faMinus = faMinus;
    var faMinusCircle = {
      prefix: 'fas',
      iconName: 'minus-circle',
      icon: [512, 512, [], "f056", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zM124 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H124z"]
    };
    exports.faMinusCircle = faMinusCircle;
    var faMinusSquare = {
      prefix: 'fas',
      iconName: 'minus-square',
      icon: [448, 512, [], "f146", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zM92 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H92z"]
    };
    exports.faMinusSquare = faMinusSquare;
    var faMitten = {
      prefix: 'fas',
      iconName: 'mitten',
      icon: [448, 512, [], "f7b5", "M368 416H48c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16h320c8.8 0 16-7.2 16-16v-64c0-8.8-7.2-16-16-16zm57-209.1c-27.2-22.6-67.5-19-90.1 8.2l-20.9 25-29.6-128.4c-18-77.5-95.4-125.9-172.8-108C34.2 21.6-14.2 98.9 3.7 176.4L51.6 384h309l72.5-87c22.7-27.2 19-67.5-8.1-90.1z"]
    };
    exports.faMitten = faMitten;
    var faMobile = {
      prefix: 'fas',
      iconName: 'mobile',
      icon: [320, 512, [], "f10b", "M272 0H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h224c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zM160 480c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faMobile = faMobile;
    var faMobileAlt = {
      prefix: 'fas',
      iconName: 'mobile-alt',
      icon: [320, 512, [], "f3cd", "M272 0H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h224c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zM160 480c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm112-108c0 6.6-5.4 12-12 12H60c-6.6 0-12-5.4-12-12V60c0-6.6 5.4-12 12-12h200c6.6 0 12 5.4 12 12v312z"]
    };
    exports.faMobileAlt = faMobileAlt;
    var faMoneyBill = {
      prefix: 'fas',
      iconName: 'money-bill',
      icon: [640, 512, [], "f0d6", "M608 64H32C14.33 64 0 78.33 0 96v320c0 17.67 14.33 32 32 32h576c17.67 0 32-14.33 32-32V96c0-17.67-14.33-32-32-32zM48 400v-64c35.35 0 64 28.65 64 64H48zm0-224v-64h64c0 35.35-28.65 64-64 64zm272 176c-44.19 0-80-42.99-80-96 0-53.02 35.82-96 80-96s80 42.98 80 96c0 53.03-35.83 96-80 96zm272 48h-64c0-35.35 28.65-64 64-64v64zm0-224c-35.35 0-64-28.65-64-64h64v64z"]
    };
    exports.faMoneyBill = faMoneyBill;
    var faMoneyBillAlt = {
      prefix: 'fas',
      iconName: 'money-bill-alt',
      icon: [640, 512, [], "f3d1", "M352 288h-16v-88c0-4.42-3.58-8-8-8h-13.58c-4.74 0-9.37 1.4-13.31 4.03l-15.33 10.22a7.994 7.994 0 0 0-2.22 11.09l8.88 13.31a7.994 7.994 0 0 0 11.09 2.22l.47-.31V288h-16c-4.42 0-8 3.58-8 8v16c0 4.42 3.58 8 8 8h64c4.42 0 8-3.58 8-8v-16c0-4.42-3.58-8-8-8zM608 64H32C14.33 64 0 78.33 0 96v320c0 17.67 14.33 32 32 32h576c17.67 0 32-14.33 32-32V96c0-17.67-14.33-32-32-32zM48 400v-64c35.35 0 64 28.65 64 64H48zm0-224v-64h64c0 35.35-28.65 64-64 64zm272 192c-53.02 0-96-50.15-96-112 0-61.86 42.98-112 96-112s96 50.14 96 112c0 61.87-43 112-96 112zm272 32h-64c0-35.35 28.65-64 64-64v64zm0-224c-35.35 0-64-28.65-64-64h64v64z"]
    };
    exports.faMoneyBillAlt = faMoneyBillAlt;
    var faMoneyBillWave = {
      prefix: 'fas',
      iconName: 'money-bill-wave',
      icon: [640, 512, [], "f53a", "M621.16 54.46C582.37 38.19 543.55 32 504.75 32c-123.17-.01-246.33 62.34-369.5 62.34-30.89 0-61.76-3.92-92.65-13.72-3.47-1.1-6.95-1.62-10.35-1.62C15.04 79 0 92.32 0 110.81v317.26c0 12.63 7.23 24.6 18.84 29.46C57.63 473.81 96.45 480 135.25 480c123.17 0 246.34-62.35 369.51-62.35 30.89 0 61.76 3.92 92.65 13.72 3.47 1.1 6.95 1.62 10.35 1.62 17.21 0 32.25-13.32 32.25-31.81V83.93c-.01-12.64-7.24-24.6-18.85-29.47zM48 132.22c20.12 5.04 41.12 7.57 62.72 8.93C104.84 170.54 79 192.69 48 192.69v-60.47zm0 285v-47.78c34.37 0 62.18 27.27 63.71 61.4-22.53-1.81-43.59-6.31-63.71-13.62zM320 352c-44.19 0-80-42.99-80-96 0-53.02 35.82-96 80-96s80 42.98 80 96c0 53.03-35.83 96-80 96zm272 27.78c-17.52-4.39-35.71-6.85-54.32-8.44 5.87-26.08 27.5-45.88 54.32-49.28v57.72zm0-236.11c-30.89-3.91-54.86-29.7-55.81-61.55 19.54 2.17 38.09 6.23 55.81 12.66v48.89z"]
    };
    exports.faMoneyBillWave = faMoneyBillWave;
    var faMoneyBillWaveAlt = {
      prefix: 'fas',
      iconName: 'money-bill-wave-alt',
      icon: [640, 512, [], "f53b", "M621.16 54.46C582.37 38.19 543.55 32 504.75 32c-123.17-.01-246.33 62.34-369.5 62.34-30.89 0-61.76-3.92-92.65-13.72-3.47-1.1-6.95-1.62-10.35-1.62C15.04 79 0 92.32 0 110.81v317.26c0 12.63 7.23 24.6 18.84 29.46C57.63 473.81 96.45 480 135.25 480c123.17 0 246.34-62.35 369.51-62.35 30.89 0 61.76 3.92 92.65 13.72 3.47 1.1 6.95 1.62 10.35 1.62 17.21 0 32.25-13.32 32.25-31.81V83.93c-.01-12.64-7.24-24.6-18.85-29.47zM320 352c-44.19 0-80-42.99-80-96 0-53.02 35.82-96 80-96s80 42.98 80 96c0 53.03-35.83 96-80 96z"]
    };
    exports.faMoneyBillWaveAlt = faMoneyBillWaveAlt;
    var faMoneyCheck = {
      prefix: 'fas',
      iconName: 'money-check',
      icon: [640, 512, [], "f53c", "M0 448c0 17.67 14.33 32 32 32h576c17.67 0 32-14.33 32-32V128H0v320zm448-208c0-8.84 7.16-16 16-16h96c8.84 0 16 7.16 16 16v32c0 8.84-7.16 16-16 16h-96c-8.84 0-16-7.16-16-16v-32zm0 120c0-4.42 3.58-8 8-8h112c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8H456c-4.42 0-8-3.58-8-8v-16zM64 264c0-4.42 3.58-8 8-8h304c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8v-16zm0 96c0-4.42 3.58-8 8-8h176c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8v-16zM624 32H16C7.16 32 0 39.16 0 48v48h640V48c0-8.84-7.16-16-16-16z"]
    };
    exports.faMoneyCheck = faMoneyCheck;
    var faMoneyCheckAlt = {
      prefix: 'fas',
      iconName: 'money-check-alt',
      icon: [640, 512, [], "f53d", "M608 32H32C14.33 32 0 46.33 0 64v384c0 17.67 14.33 32 32 32h576c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zM176 327.88V344c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8v-16.29c-11.29-.58-22.27-4.52-31.37-11.35-3.9-2.93-4.1-8.77-.57-12.14l11.75-11.21c2.77-2.64 6.89-2.76 10.13-.73 3.87 2.42 8.26 3.72 12.82 3.72h28.11c6.5 0 11.8-5.92 11.8-13.19 0-5.95-3.61-11.19-8.77-12.73l-45-13.5c-18.59-5.58-31.58-23.42-31.58-43.39 0-24.52 19.05-44.44 42.67-45.07V152c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v16.29c11.29.58 22.27 4.51 31.37 11.35 3.9 2.93 4.1 8.77.57 12.14l-11.75 11.21c-2.77 2.64-6.89 2.76-10.13.73-3.87-2.43-8.26-3.72-12.82-3.72h-28.11c-6.5 0-11.8 5.92-11.8 13.19 0 5.95 3.61 11.19 8.77 12.73l45 13.5c18.59 5.58 31.58 23.42 31.58 43.39 0 24.53-19.05 44.44-42.67 45.07zM416 312c0 4.42-3.58 8-8 8H296c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h112c4.42 0 8 3.58 8 8v16zm160 0c0 4.42-3.58 8-8 8h-80c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h80c4.42 0 8 3.58 8 8v16zm0-96c0 4.42-3.58 8-8 8H296c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h272c4.42 0 8 3.58 8 8v16z"]
    };
    exports.faMoneyCheckAlt = faMoneyCheckAlt;
    var faMonument = {
      prefix: 'fas',
      iconName: 'monument',
      icon: [384, 512, [], "f5a6", "M368 448H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h352c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zm-78.86-347.26a31.97 31.97 0 0 0-9.21-19.44L203.31 4.69c-6.25-6.25-16.38-6.25-22.63 0l-76.6 76.61a31.97 31.97 0 0 0-9.21 19.44L64 416h256l-30.86-315.26zM240 307.2c0 6.4-6.4 12.8-12.8 12.8h-70.4c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h70.4c6.4 0 12.8 6.4 12.8 12.8v38.4z"]
    };
    exports.faMonument = faMonument;
    var faMoon = {
      prefix: 'fas',
      iconName: 'moon',
      icon: [512, 512, [], "f186", "M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z"]
    };
    exports.faMoon = faMoon;
    var faMortarPestle = {
      prefix: 'fas',
      iconName: 'mortar-pestle',
      icon: [512, 512, [], "f5a7", "M501.54 60.91c17.22-17.22 12.51-46.25-9.27-57.14a35.696 35.696 0 0 0-37.37 3.37L251.09 160h151.37l99.08-99.09zM496 192H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h16c0 80.98 50.2 150.11 121.13 178.32-12.76 16.87-21.72 36.8-24.95 58.69-1.46 9.92 6.04 18.98 16.07 18.98h223.5c10.03 0 17.53-9.06 16.07-18.98-3.22-21.89-12.18-41.82-24.95-58.69C429.8 406.11 480 336.98 480 256h16c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16z"]
    };
    exports.faMortarPestle = faMortarPestle;
    var faMosque = {
      prefix: 'fas',
      iconName: 'mosque',
      icon: [640, 512, [], "f678", "M0 480c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V160H0v320zm579.16-192c17.86-17.39 28.84-37.34 28.84-58.91 0-52.86-41.79-93.79-87.92-122.9-41.94-26.47-80.63-57.77-111.96-96.22L400 0l-8.12 9.97c-31.33 38.45-70.01 69.76-111.96 96.22C233.79 135.3 192 176.23 192 229.09c0 21.57 10.98 41.52 28.84 58.91h358.32zM608 320H192c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h32v-64c0-17.67 14.33-32 32-32s32 14.33 32 32v64h64v-72c0-48 48-72 48-72s48 24 48 72v72h64v-64c0-17.67 14.33-32 32-32s32 14.33 32 32v64h32c17.67 0 32-14.33 32-32V352c0-17.67-14.33-32-32-32zM64 0S0 32 0 96v32h128V96c0-64-64-96-64-96z"]
    };
    exports.faMosque = faMosque;
    var faMotorcycle = {
      prefix: 'fas',
      iconName: 'motorcycle',
      icon: [640, 512, [], "f21c", "M512.9 192c-14.9-.1-29.1 2.3-42.4 6.9L437.6 144H520c13.3 0 24-10.7 24-24V88c0-13.3-10.7-24-24-24h-45.3c-6.8 0-13.3 2.9-17.8 7.9l-37.5 41.7-22.8-38C392.2 68.4 384.4 64 376 64h-80c-8.8 0-16 7.2-16 16v16c0 8.8 7.2 16 16 16h66.4l19.2 32H227.9c-17.7-23.1-44.9-40-99.9-40H72.5C59 104 47.7 115 48 128.5c.2 13 10.9 23.5 24 23.5h56c24.5 0 38.7 10.9 47.8 24.8l-11.3 20.5c-13-3.9-26.9-5.7-41.3-5.2C55.9 194.5 1.6 249.6 0 317c-1.6 72.1 56.3 131 128 131 59.6 0 109.7-40.8 124-96h84.2c13.7 0 24.6-11.4 24-25.1-2.1-47.1 17.5-93.7 56.2-125l12.5 20.8c-27.6 23.7-45.1 58.9-44.8 98.2.5 69.6 57.2 126.5 126.8 127.1 71.6.7 129.8-57.5 129.2-129.1-.7-69.6-57.6-126.4-127.2-126.9zM128 400c-44.1 0-80-35.9-80-80s35.9-80 80-80c4.2 0 8.4.3 12.5 1L99 316.4c-8.8 16 2.8 35.6 21 35.6h81.3c-12.4 28.2-40.6 48-73.3 48zm463.9-75.6c-2.2 40.6-35 73.4-75.5 75.5-46.1 2.5-84.4-34.3-84.4-79.9 0-21.4 8.4-40.8 22.1-55.1l49.4 82.4c4.5 7.6 14.4 10 22 5.5l13.7-8.2c7.6-4.5 10-14.4 5.5-22l-48.6-80.9c5.2-1.1 10.5-1.6 15.9-1.6 45.6-.1 82.3 38.2 79.9 84.3z"]
    };
    exports.faMotorcycle = faMotorcycle;
    var faMountain = {
      prefix: 'fas',
      iconName: 'mountain',
      icon: [640, 512, [], "f6fc", "M634.92 462.7l-288-448C341.03 5.54 330.89 0 320 0s-21.03 5.54-26.92 14.7l-288 448a32.001 32.001 0 0 0-1.17 32.64A32.004 32.004 0 0 0 32 512h576c11.71 0 22.48-6.39 28.09-16.67a31.983 31.983 0 0 0-1.17-32.63zM320 91.18L405.39 224H320l-64 64-38.06-38.06L320 91.18z"]
    };
    exports.faMountain = faMountain;
    var faMouse = {
      prefix: 'fas',
      iconName: 'mouse',
      icon: [384, 512, [], "f8cc", "M0 352a160 160 0 0 0 160 160h64a160 160 0 0 0 160-160V224H0zM176 0h-16A160 160 0 0 0 0 160v32h176zm48 0h-16v192h176v-32A160 160 0 0 0 224 0z"]
    };
    exports.faMouse = faMouse;
    var faMousePointer = {
      prefix: 'fas',
      iconName: 'mouse-pointer',
      icon: [320, 512, [], "f245", "M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z"]
    };
    exports.faMousePointer = faMousePointer;
    var faMugHot = {
      prefix: 'fas',
      iconName: 'mug-hot',
      icon: [512, 512, [], "f7b6", "M127.1 146.5c1.3 7.7 8 13.5 16 13.5h16.5c9.8 0 17.6-8.5 16.3-18-3.8-28.2-16.4-54.2-36.6-74.7-14.4-14.7-23.6-33.3-26.4-53.5C111.8 5.9 105 0 96.8 0H80.4C70.6 0 63 8.5 64.1 18c3.9 31.9 18 61.3 40.6 84.4 12 12.2 19.7 27.5 22.4 44.1zm112 0c1.3 7.7 8 13.5 16 13.5h16.5c9.8 0 17.6-8.5 16.3-18-3.8-28.2-16.4-54.2-36.6-74.7-14.4-14.7-23.6-33.3-26.4-53.5C223.8 5.9 217 0 208.8 0h-16.4c-9.8 0-17.5 8.5-16.3 18 3.9 31.9 18 61.3 40.6 84.4 12 12.2 19.7 27.5 22.4 44.1zM400 192H32c-17.7 0-32 14.3-32 32v192c0 53 43 96 96 96h192c53 0 96-43 96-96h16c61.8 0 112-50.2 112-112s-50.2-112-112-112zm0 160h-16v-96h16c26.5 0 48 21.5 48 48s-21.5 48-48 48z"]
    };
    exports.faMugHot = faMugHot;
    var faMusic = {
      prefix: 'fas',
      iconName: 'music',
      icon: [512, 512, [], "f001", "M470.38 1.51L150.41 96A32 32 0 0 0 128 126.51v261.41A139 139 0 0 0 96 384c-53 0-96 28.66-96 64s43 64 96 64 96-28.66 96-64V214.32l256-75v184.61a138.4 138.4 0 0 0-32-3.93c-53 0-96 28.66-96 64s43 64 96 64 96-28.65 96-64V32a32 32 0 0 0-41.62-30.49z"]
    };
    exports.faMusic = faMusic;
    var faNetworkWired = {
      prefix: 'fas',
      iconName: 'network-wired',
      icon: [640, 512, [], "f6ff", "M640 264v-16c0-8.84-7.16-16-16-16H344v-40h72c17.67 0 32-14.33 32-32V32c0-17.67-14.33-32-32-32H224c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h72v40H16c-8.84 0-16 7.16-16 16v16c0 8.84 7.16 16 16 16h104v40H64c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h160c17.67 0 32-14.33 32-32V352c0-17.67-14.33-32-32-32h-56v-40h304v40h-56c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h160c17.67 0 32-14.33 32-32V352c0-17.67-14.33-32-32-32h-56v-40h104c8.84 0 16-7.16 16-16zM256 128V64h128v64H256zm-64 320H96v-64h96v64zm352 0h-96v-64h96v64z"]
    };
    exports.faNetworkWired = faNetworkWired;
    var faNeuter = {
      prefix: 'fas',
      iconName: 'neuter',
      icon: [288, 512, [], "f22c", "M288 176c0-79.5-64.5-144-144-144S0 96.5 0 176c0 68.5 47.9 125.9 112 140.4V468c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V316.4c64.1-14.5 112-71.9 112-140.4zm-144 80c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"]
    };
    exports.faNeuter = faNeuter;
    var faNewspaper = {
      prefix: 'fas',
      iconName: 'newspaper',
      icon: [576, 512, [], "f1ea", "M552 64H88c-13.255 0-24 10.745-24 24v8H24c-13.255 0-24 10.745-24 24v272c0 30.928 25.072 56 56 56h472c26.51 0 48-21.49 48-48V88c0-13.255-10.745-24-24-24zM56 400a8 8 0 0 1-8-8V144h16v248a8 8 0 0 1-8 8zm236-16H140c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm208 0H348c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm-208-96H140c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm208 0H348c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm0-96H140c-6.627 0-12-5.373-12-12v-40c0-6.627 5.373-12 12-12h360c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12z"]
    };
    exports.faNewspaper = faNewspaper;
    var faNotEqual = {
      prefix: 'fas',
      iconName: 'not-equal',
      icon: [448, 512, [], "f53e", "M416 208c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32h-23.88l51.87-66.81c5.37-7.02 4.04-17.06-2.97-22.43L415.61 3.3c-7.02-5.38-17.06-4.04-22.44 2.97L311.09 112H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h204.56l-74.53 96H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h55.49l-51.87 66.81c-5.37 7.01-4.04 17.05 2.97 22.43L64 508.7c7.02 5.38 17.06 4.04 22.43-2.97L168.52 400H416c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32H243.05l74.53-96H416z"]
    };
    exports.faNotEqual = faNotEqual;
    var faNotesMedical = {
      prefix: 'fas',
      iconName: 'notes-medical',
      icon: [384, 512, [], "f481", "M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm96 304c0 4.4-3.6 8-8 8h-56v56c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-56h-56c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h56v-56c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v56h56c4.4 0 8 3.6 8 8v48zm0-192c0 4.4-3.6 8-8 8H104c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h176c4.4 0 8 3.6 8 8v16z"]
    };
    exports.faNotesMedical = faNotesMedical;
    var faObjectGroup = {
      prefix: 'fas',
      iconName: 'object-group',
      icon: [512, 512, [], "f247", "M480 128V96h20c6.627 0 12-5.373 12-12V44c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v20H64V44c0-6.627-5.373-12-12-12H12C5.373 32 0 37.373 0 44v40c0 6.627 5.373 12 12 12h20v320H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-20h384v20c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-20V128zM96 276V140c0-6.627 5.373-12 12-12h168c6.627 0 12 5.373 12 12v136c0 6.627-5.373 12-12 12H108c-6.627 0-12-5.373-12-12zm320 96c0 6.627-5.373 12-12 12H236c-6.627 0-12-5.373-12-12v-52h72c13.255 0 24-10.745 24-24v-72h84c6.627 0 12 5.373 12 12v136z"]
    };
    exports.faObjectGroup = faObjectGroup;
    var faObjectUngroup = {
      prefix: 'fas',
      iconName: 'object-ungroup',
      icon: [576, 512, [], "f248", "M64 320v26a6 6 0 0 1-6 6H6a6 6 0 0 1-6-6v-52a6 6 0 0 1 6-6h26V96H6a6 6 0 0 1-6-6V38a6 6 0 0 1 6-6h52a6 6 0 0 1 6 6v26h288V38a6 6 0 0 1 6-6h52a6 6 0 0 1 6 6v52a6 6 0 0 1-6 6h-26v192h26a6 6 0 0 1 6 6v52a6 6 0 0 1-6 6h-52a6 6 0 0 1-6-6v-26H64zm480-64v-32h26a6 6 0 0 0 6-6v-52a6 6 0 0 0-6-6h-52a6 6 0 0 0-6 6v26H408v72h8c13.255 0 24 10.745 24 24v64c0 13.255-10.745 24-24 24h-64c-13.255 0-24-10.745-24-24v-8H192v72h-26a6 6 0 0 0-6 6v52a6 6 0 0 0 6 6h52a6 6 0 0 0 6-6v-26h288v26a6 6 0 0 0 6 6h52a6 6 0 0 0 6-6v-52a6 6 0 0 0-6-6h-26V256z"]
    };
    exports.faObjectUngroup = faObjectUngroup;
    var faOilCan = {
      prefix: 'fas',
      iconName: 'oil-can',
      icon: [640, 512, [], "f613", "M629.8 160.31L416 224l-50.49-25.24a64.07 64.07 0 0 0-28.62-6.76H280v-48h56c8.84 0 16-7.16 16-16v-16c0-8.84-7.16-16-16-16H176c-8.84 0-16 7.16-16 16v16c0 8.84 7.16 16 16 16h56v48h-56L37.72 166.86a31.9 31.9 0 0 0-5.79-.53C14.67 166.33 0 180.36 0 198.34v94.95c0 15.46 11.06 28.72 26.28 31.48L96 337.46V384c0 17.67 14.33 32 32 32h274.63c8.55 0 16.75-3.42 22.76-9.51l212.26-214.75c1.5-1.5 2.34-3.54 2.34-5.66V168c.01-5.31-5.08-9.15-10.19-7.69zM96 288.67l-48-8.73v-62.43l48 8.73v62.43zm453.33 84.66c0 23.56 19.1 42.67 42.67 42.67s42.67-19.1 42.67-42.67S592 288 592 288s-42.67 61.77-42.67 85.33z"]
    };
    exports.faOilCan = faOilCan;
    var faOm = {
      prefix: 'fas',
      iconName: 'om',
      icon: [512, 512, [], "f679", "M360.6 60.94a10.43 10.43 0 0 0 14.76 0l21.57-21.56a10.43 10.43 0 0 0 0-14.76L375.35 3.06c-4.08-4.07-10.68-4.07-14.76 0l-21.57 21.56a10.43 10.43 0 0 0 0 14.76l21.58 21.56zM412.11 192c-26.69 0-51.77 10.39-70.64 29.25l-24.25 24.25c-6.78 6.77-15.78 10.5-25.38 10.5H245c10.54-22.1 14.17-48.11 7.73-75.23-10.1-42.55-46.36-76.11-89.52-83.19-36.15-5.93-70.9 5.04-96.01 28.78-7.36 6.96-6.97 18.85 1.12 24.93l26.15 19.63c5.72 4.3 13.66 4.32 19.2-.21 8.45-6.9 19.02-10.71 30.27-10.71 26.47 0 48.01 21.53 48.01 48s-21.54 48-48.01 48h-31.9c-11.96 0-19.74 12.58-14.39 23.28l16.09 32.17c2.53 5.06 7.6 8.1 13.17 8.55h33.03c35.3 0 64.01 28.7 64.01 64s-28.71 64-64.01 64c-96.02 0-122.35-54.02-145.15-92.03-4.53-7.55-14.77-3.58-14.79 5.22C-.09 416 41.13 512 159.94 512c70.59 0 128.02-57.42 128.02-128 0-23.42-6.78-45.1-17.81-64h21.69c26.69 0 51.77-10.39 70.64-29.25l24.25-24.25c6.78-6.77 15.78-10.5 25.38-10.5 19.78 0 35.88 16.09 35.88 35.88V392c0 13.23-18.77 24-32.01 24-39.4 0-66.67-24.24-81.82-42.89-4.77-5.87-14.2-2.54-14.2 5.02V416s0 64 96.02 64c48.54 0 96.02-39.47 96.02-88V291.88c0-55.08-44.8-99.88-99.89-99.88zm42.18-124.73c-85.55 65.12-169.05 2.75-172.58.05-6.02-4.62-14.44-4.38-20.14.55-5.74 4.92-7.27 13.17-3.66 19.8 1.61 2.95 40.37 72.34 118.8 72.34 79.92 0 98.78-31.36 101.75-37.66 1.02-2.12 1.53-4.47 1.53-6.83V80c0-13.22-15.14-20.69-25.7-12.73z"]
    };
    exports.faOm = faOm;
    var faOtter = {
      prefix: 'fas',
      iconName: 'otter',
      icon: [640, 512, [], "f700", "M608 32h-32l-13.25-13.25A63.97 63.97 0 0 0 517.49 0H497c-11.14 0-22.08 2.91-31.75 8.43L312 96h-56C149.96 96 64 181.96 64 288v1.61c0 32.75-16 62.14-39.56 84.89-18.19 17.58-28.1 43.68-23.19 71.8 6.76 38.8 42.9 65.7 82.28 65.7H192c17.67 0 32-14.33 32-32s-14.33-32-32-32H80c-8.83 0-16-7.17-16-16s7.17-16 16-16h224c8.84 0 16-7.16 16-16v-16c0-17.67-14.33-32-32-32h-64l149.49-80.5L448 416h80c8.84 0 16-7.16 16-16v-16c0-17.67-14.33-32-32-32h-28.22l-55.11-110.21L521.14 192H544c53.02 0 96-42.98 96-96V64c0-17.67-14.33-32-32-32zm-96 16c8.84 0 16 7.16 16 16s-7.16 16-16 16-16-7.16-16-16 7.16-16 16-16zm32 96h-34.96L407.2 198.84l-13.77-27.55L512 112h77.05c-6.62 18.58-24.22 32-45.05 32z"]
    };
    exports.faOtter = faOtter;
    var faOutdent = {
      prefix: 'fas',
      iconName: 'outdent',
      icon: [448, 512, [], "f03b", "M100.69 363.29c10 10 27.31 2.93 27.31-11.31V160c0-14.32-17.33-21.31-27.31-11.31l-96 96a16 16 0 0 0 0 22.62zM432 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm3.17-128H204.83A12.82 12.82 0 0 0 192 300.83v38.34A12.82 12.82 0 0 0 204.83 352h230.34A12.82 12.82 0 0 0 448 339.17v-38.34A12.82 12.82 0 0 0 435.17 288zm0-128H204.83A12.82 12.82 0 0 0 192 172.83v38.34A12.82 12.82 0 0 0 204.83 224h230.34A12.82 12.82 0 0 0 448 211.17v-38.34A12.82 12.82 0 0 0 435.17 160zM432 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"]
    };
    exports.faOutdent = faOutdent;
    var faPager = {
      prefix: 'fas',
      iconName: 'pager',
      icon: [512, 512, [], "f815", "M448 64H64a64 64 0 0 0-64 64v256a64 64 0 0 0 64 64h384a64 64 0 0 0 64-64V128a64 64 0 0 0-64-64zM160 368H80a16 16 0 0 1-16-16v-16a16 16 0 0 1 16-16h80zm128-16a16 16 0 0 1-16 16h-80v-48h80a16 16 0 0 1 16 16zm160-128a32 32 0 0 1-32 32H96a32 32 0 0 1-32-32v-64a32 32 0 0 1 32-32h320a32 32 0 0 1 32 32z"]
    };
    exports.faPager = faPager;
    var faPaintBrush = {
      prefix: 'fas',
      iconName: 'paint-brush',
      icon: [512, 512, [], "f1fc", "M167.02 309.34c-40.12 2.58-76.53 17.86-97.19 72.3-2.35 6.21-8 9.98-14.59 9.98-11.11 0-45.46-27.67-55.25-34.35C0 439.62 37.93 512 128 512c75.86 0 128-43.77 128-120.19 0-3.11-.65-6.08-.97-9.13l-88.01-73.34zM457.89 0c-15.16 0-29.37 6.71-40.21 16.45C213.27 199.05 192 203.34 192 257.09c0 13.7 3.25 26.76 8.73 38.7l63.82 53.18c7.21 1.8 14.64 3.03 22.39 3.03 62.11 0 98.11-45.47 211.16-256.46 7.38-14.35 13.9-29.85 13.9-45.99C512 20.64 486 0 457.89 0z"]
    };
    exports.faPaintBrush = faPaintBrush;
    var faPaintRoller = {
      prefix: 'fas',
      iconName: 'paint-roller',
      icon: [512, 512, [], "f5aa", "M416 128V32c0-17.67-14.33-32-32-32H32C14.33 0 0 14.33 0 32v96c0 17.67 14.33 32 32 32h352c17.67 0 32-14.33 32-32zm32-64v128c0 17.67-14.33 32-32 32H256c-35.35 0-64 28.65-64 64v32c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V352c0-17.67-14.33-32-32-32v-32h160c53.02 0 96-42.98 96-96v-64c0-35.35-28.65-64-64-64z"]
    };
    exports.faPaintRoller = faPaintRoller;
    var faPalette = {
      prefix: 'fas',
      iconName: 'palette',
      icon: [512, 512, [], "f53f", "M204.3 5C104.9 24.4 24.8 104.3 5.2 203.4c-37 187 131.7 326.4 258.8 306.7 41.2-6.4 61.4-54.6 42.5-91.7-23.1-45.4 9.9-98.4 60.9-98.4h79.7c35.8 0 64.8-29.6 64.9-65.3C511.5 97.1 368.1-26.9 204.3 5zM96 320c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm32-128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128-64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faPalette = faPalette;
    var faPallet = {
      prefix: 'fas',
      iconName: 'pallet',
      icon: [640, 512, [], "f482", "M144 256h352c8.8 0 16-7.2 16-16V16c0-8.8-7.2-16-16-16H384v128l-64-32-64 32V0H144c-8.8 0-16 7.2-16 16v224c0 8.8 7.2 16 16 16zm480 128c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h48v64H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h608c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16h-48v-64h48zm-336 64H128v-64h160v64zm224 0H352v-64h160v64z"]
    };
    exports.faPallet = faPallet;
    var faPaperPlane = {
      prefix: 'fas',
      iconName: 'paper-plane',
      icon: [512, 512, [], "f1d8", "M476 3.2L12.5 270.6c-18.1 10.4-15.8 35.6 2.2 43.2L121 358.4l287.3-253.2c5.5-4.9 13.3 2.6 8.6 8.3L176 407v80.5c0 23.6 28.5 32.9 42.5 15.8L282 426l124.6 52.2c14.2 6 30.4-2.9 33-18.2l72-432C515 7.8 493.3-6.8 476 3.2z"]
    };
    exports.faPaperPlane = faPaperPlane;
    var faPaperclip = {
      prefix: 'fas',
      iconName: 'paperclip',
      icon: [448, 512, [], "f0c6", "M43.246 466.142c-58.43-60.289-57.341-157.511 1.386-217.581L254.392 34c44.316-45.332 116.351-45.336 160.671 0 43.89 44.894 43.943 117.329 0 162.276L232.214 383.128c-29.855 30.537-78.633 30.111-107.982-.998-28.275-29.97-27.368-77.473 1.452-106.953l143.743-146.835c6.182-6.314 16.312-6.422 22.626-.241l22.861 22.379c6.315 6.182 6.422 16.312.241 22.626L171.427 319.927c-4.932 5.045-5.236 13.428-.648 18.292 4.372 4.634 11.245 4.711 15.688.165l182.849-186.851c19.613-20.062 19.613-52.725-.011-72.798-19.189-19.627-49.957-19.637-69.154 0L90.39 293.295c-34.763 35.56-35.299 93.12-1.191 128.313 34.01 35.093 88.985 35.137 123.058.286l172.06-175.999c6.177-6.319 16.307-6.433 22.626-.256l22.877 22.364c6.319 6.177 6.434 16.307.256 22.626l-172.06 175.998c-59.576 60.938-155.943 60.216-214.77-.485z"]
    };
    exports.faPaperclip = faPaperclip;
    var faParachuteBox = {
      prefix: 'fas',
      iconName: 'parachute-box',
      icon: [512, 512, [], "f4cd", "M511.9 175c-9.1-75.6-78.4-132.4-158.3-158.7C390 55.7 416 116.9 416 192h28.1L327.5 321.5c-2.5-.6-4.8-1.5-7.5-1.5h-48V192h112C384 76.8 315.1 0 256 0S128 76.8 128 192h112v128h-48c-2.7 0-5 .9-7.5 1.5L67.9 192H96c0-75.1 26-136.3 62.4-175.7C78.5 42.7 9.2 99.5.1 175c-1.1 9.1 6.8 17 16 17h8.7l136.7 151.9c-.7 2.6-1.6 5.2-1.6 8.1v128c0 17.7 14.3 32 32 32h128c17.7 0 32-14.3 32-32V352c0-2.9-.9-5.4-1.6-8.1L487.1 192h8.7c9.3 0 17.2-7.8 16.1-17z"]
    };
    exports.faParachuteBox = faParachuteBox;
    var faParagraph = {
      prefix: 'fas',
      iconName: 'paragraph',
      icon: [448, 512, [], "f1dd", "M448 48v32a16 16 0 0 1-16 16h-48v368a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16V96h-32v368a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16V352h-32a160 160 0 0 1 0-320h240a16 16 0 0 1 16 16z"]
    };
    exports.faParagraph = faParagraph;
    var faParking = {
      prefix: 'fas',
      iconName: 'parking',
      icon: [448, 512, [], "f540", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zM240 320h-48v48c0 8.8-7.2 16-16 16h-32c-8.8 0-16-7.2-16-16V144c0-8.8 7.2-16 16-16h96c52.9 0 96 43.1 96 96s-43.1 96-96 96zm0-128h-48v64h48c17.6 0 32-14.4 32-32s-14.4-32-32-32z"]
    };
    exports.faParking = faParking;
    var faPassport = {
      prefix: 'fas',
      iconName: 'passport',
      icon: [448, 512, [], "f5ab", "M129.62 176h39.09c1.49-27.03 6.54-51.35 14.21-70.41-27.71 13.24-48.02 39.19-53.3 70.41zm0 32c5.29 31.22 25.59 57.17 53.3 70.41-7.68-19.06-12.72-43.38-14.21-70.41h-39.09zM224 286.69c7.69-7.45 20.77-34.42 23.43-78.69h-46.87c2.67 44.26 15.75 71.24 23.44 78.69zM200.57 176h46.87c-2.66-44.26-15.74-71.24-23.43-78.69-7.7 7.45-20.78 34.43-23.44 78.69zm64.51 102.41c27.71-13.24 48.02-39.19 53.3-70.41h-39.09c-1.49 27.03-6.53 51.35-14.21 70.41zM416 0H64C28.65 0 0 28.65 0 64v384c0 35.35 28.65 64 64 64h352c17.67 0 32-14.33 32-32V32c0-17.67-14.33-32-32-32zm-80 416H112c-8.8 0-16-7.2-16-16s7.2-16 16-16h224c8.8 0 16 7.2 16 16s-7.2 16-16 16zm-112-96c-70.69 0-128-57.31-128-128S153.31 64 224 64s128 57.31 128 128-57.31 128-128 128zm41.08-214.41c7.68 19.06 12.72 43.38 14.21 70.41h39.09c-5.28-31.22-25.59-57.17-53.3-70.41z"]
    };
    exports.faPassport = faPassport;
    var faPastafarianism = {
      prefix: 'fas',
      iconName: 'pastafarianism',
      icon: [640, 512, [], "f67b", "M624.54 347.67c-32.7-12.52-57.36 4.25-75.37 16.45-17.06 11.53-23.25 14.42-31.41 11.36-8.12-3.09-10.83-9.38-15.89-29.38-3.33-13.15-7.44-29.32-17.95-42.65 2.24-2.91 4.43-5.79 6.38-8.57C500.47 304.45 513.71 312 532 312c33.95 0 50.87-25.78 62.06-42.83 10.59-16.14 15-21.17 21.94-21.17 13.25 0 24-10.75 24-24s-10.75-24-24-24c-33.95 0-50.87 25.78-62.06 42.83-10.6 16.14-15 21.17-21.94 21.17-17.31 0-37.48-61.43-97.26-101.91l17.25-34.5C485.43 125.5 512 97.98 512 64c0-35.35-28.65-64-64-64s-64 28.65-64 64c0 13.02 3.94 25.1 10.62 35.21l-18.15 36.3c-16.98-4.6-35.6-7.51-56.46-7.51s-39.49 2.91-56.46 7.51l-18.15-36.3C252.06 89.1 256 77.02 256 64c0-35.35-28.65-64-64-64s-64 28.65-64 64c0 33.98 26.56 61.5 60.02 63.6l17.25 34.5C145.68 202.44 125.15 264 108 264c-6.94 0-11.34-5.03-21.94-21.17C74.88 225.78 57.96 200 24 200c-13.25 0-24 10.75-24 24s10.75 24 24 24c6.94 0 11.34 5.03 21.94 21.17C57.13 286.22 74.05 312 108 312c18.29 0 31.53-7.55 41.7-17.11 1.95 2.79 4.14 5.66 6.38 8.57-10.51 13.33-14.62 29.5-17.95 42.65-5.06 20-7.77 26.28-15.89 29.38-8.11 3.06-14.33.17-31.41-11.36-18.03-12.2-42.72-28.92-75.37-16.45-12.39 4.72-18.59 18.58-13.87 30.97 4.72 12.41 18.61 18.61 30.97 13.88 8.16-3.09 14.34-.19 31.39 11.36 13.55 9.16 30.83 20.86 52.42 20.84 7.17 0 14.83-1.28 22.97-4.39 32.66-12.44 39.98-41.33 45.33-62.44 2.21-8.72 3.99-14.49 5.95-18.87 16.62 13.61 36.95 25.88 61.64 34.17-9.96 37-32.18 90.8-60.26 90.8-13.25 0-24 10.75-24 24s10.75 24 24 24c66.74 0 97.05-88.63 107.42-129.14 6.69.6 13.42 1.14 20.58 1.14s13.89-.54 20.58-1.14C350.95 423.37 381.26 512 448 512c13.25 0 24-10.75 24-24s-10.75-24-24-24c-27.94 0-50.21-53.81-60.22-90.81 24.69-8.29 45-20.56 61.62-34.16 1.96 4.38 3.74 10.15 5.95 18.87 5.34 21.11 12.67 50 45.33 62.44 8.14 3.11 15.8 4.39 22.97 4.39 21.59 0 38.87-11.69 52.42-20.84 17.05-11.55 23.28-14.45 31.39-11.36 12.39 4.75 26.27-1.47 30.97-13.88 4.71-12.4-1.49-26.26-13.89-30.98zM448 48c8.82 0 16 7.18 16 16s-7.18 16-16 16-16-7.18-16-16 7.18-16 16-16zm-256 0c8.82 0 16 7.18 16 16s-7.18 16-16 16-16-7.18-16-16 7.18-16 16-16z"]
    };
    exports.faPastafarianism = faPastafarianism;
    var faPaste = {
      prefix: 'fas',
      iconName: 'paste',
      icon: [448, 512, [], "f0ea", "M128 184c0-30.879 25.122-56 56-56h136V56c0-13.255-10.745-24-24-24h-80.61C204.306 12.89 183.637 0 160 0s-44.306 12.89-55.39 32H24C10.745 32 0 42.745 0 56v336c0 13.255 10.745 24 24 24h104V184zm32-144c13.255 0 24 10.745 24 24s-10.745 24-24 24-24-10.745-24-24 10.745-24 24-24zm184 248h104v200c0 13.255-10.745 24-24 24H184c-13.255 0-24-10.745-24-24V184c0-13.255 10.745-24 24-24h136v104c0 13.2 10.8 24 24 24zm104-38.059V256h-96v-96h6.059a24 24 0 0 1 16.97 7.029l65.941 65.941a24.002 24.002 0 0 1 7.03 16.971z"]
    };
    exports.faPaste = faPaste;
    var faPause = {
      prefix: 'fas',
      iconName: 'pause',
      icon: [448, 512, [], "f04c", "M144 479H48c-26.5 0-48-21.5-48-48V79c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm304-48V79c0-26.5-21.5-48-48-48h-96c-26.5 0-48 21.5-48 48v352c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48z"]
    };
    exports.faPause = faPause;
    var faPauseCircle = {
      prefix: 'fas',
      iconName: 'pause-circle',
      icon: [512, 512, [], "f28b", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm-16 328c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h48c8.8 0 16 7.2 16 16v160zm112 0c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h48c8.8 0 16 7.2 16 16v160z"]
    };
    exports.faPauseCircle = faPauseCircle;
    var faPaw = {
      prefix: 'fas',
      iconName: 'paw',
      icon: [512, 512, [], "f1b0", "M256 224c-79.41 0-192 122.76-192 200.25 0 34.9 26.81 55.75 71.74 55.75 48.84 0 81.09-25.08 120.26-25.08 39.51 0 71.85 25.08 120.26 25.08 44.93 0 71.74-20.85 71.74-55.75C448 346.76 335.41 224 256 224zm-147.28-12.61c-10.4-34.65-42.44-57.09-71.56-50.13-29.12 6.96-44.29 40.69-33.89 75.34 10.4 34.65 42.44 57.09 71.56 50.13 29.12-6.96 44.29-40.69 33.89-75.34zm84.72-20.78c30.94-8.14 46.42-49.94 34.58-93.36s-46.52-72.01-77.46-63.87-46.42 49.94-34.58 93.36c11.84 43.42 46.53 72.02 77.46 63.87zm281.39-29.34c-29.12-6.96-61.15 15.48-71.56 50.13-10.4 34.65 4.77 68.38 33.89 75.34 29.12 6.96 61.15-15.48 71.56-50.13 10.4-34.65-4.77-68.38-33.89-75.34zm-156.27 29.34c30.94 8.14 65.62-20.45 77.46-63.87 11.84-43.42-3.64-85.21-34.58-93.36s-65.62 20.45-77.46 63.87c-11.84 43.42 3.64 85.22 34.58 93.36z"]
    };
    exports.faPaw = faPaw;
    var faPeace = {
      prefix: 'fas',
      iconName: 'peace',
      icon: [496, 512, [], "f67c", "M248 8C111.03 8 0 119.03 0 256s111.03 248 248 248 248-111.03 248-248S384.97 8 248 8zm184 248c0 31.93-8.2 61.97-22.57 88.17L280 240.63V74.97c86.23 15.21 152 90.5 152 181.03zM216 437.03c-33.86-5.97-64.49-21.2-89.29-43.02L216 322.57v114.46zm64-114.46L369.29 394c-24.8 21.82-55.43 37.05-89.29 43.02V322.57zm-64-247.6v165.66L86.57 344.17C72.2 317.97 64 287.93 64 256c0-90.53 65.77-165.82 152-181.03z"]
    };
    exports.faPeace = faPeace;
    var faPen = {
      prefix: 'fas',
      iconName: 'pen',
      icon: [512, 512, [], "f304", "M290.74 93.24l128.02 128.02-277.99 277.99-114.14 12.6C11.35 513.54-1.56 500.62.14 485.34l12.7-114.22 277.9-277.88zm207.2-19.06l-60.11-60.11c-18.75-18.75-49.16-18.75-67.91 0l-56.55 56.55 128.02 128.02 56.55-56.55c18.75-18.76 18.75-49.16 0-67.91z"]
    };
    exports.faPen = faPen;
    var faPenAlt = {
      prefix: 'fas',
      iconName: 'pen-alt',
      icon: [512, 512, [], "f305", "M497.94 74.17l-60.11-60.11c-18.75-18.75-49.16-18.75-67.91 0l-56.55 56.55 128.02 128.02 56.55-56.55c18.75-18.75 18.75-49.15 0-67.91zm-246.8-20.53c-15.62-15.62-40.94-15.62-56.56 0L75.8 172.43c-6.25 6.25-6.25 16.38 0 22.62l22.63 22.63c6.25 6.25 16.38 6.25 22.63 0l101.82-101.82 22.63 22.62L93.95 290.03A327.038 327.038 0 0 0 .17 485.11l-.03.23c-1.7 15.28 11.21 28.2 26.49 26.51a327.02 327.02 0 0 0 195.34-93.8l196.79-196.79-82.77-82.77-84.85-84.85z"]
    };
    exports.faPenAlt = faPenAlt;
    var faPenFancy = {
      prefix: 'fas',
      iconName: 'pen-fancy',
      icon: [512, 512, [], "f5ac", "M79.18 282.94a32.005 32.005 0 0 0-20.24 20.24L0 480l4.69 4.69 92.89-92.89c-.66-2.56-1.57-5.03-1.57-7.8 0-17.67 14.33-32 32-32s32 14.33 32 32-14.33 32-32 32c-2.77 0-5.24-.91-7.8-1.57l-92.89 92.89L32 512l176.82-58.94a31.983 31.983 0 0 0 20.24-20.24l33.07-84.07-98.88-98.88-84.07 33.07zM369.25 28.32L186.14 227.81l97.85 97.85 199.49-183.11C568.4 67.48 443.73-55.94 369.25 28.32z"]
    };
    exports.faPenFancy = faPenFancy;
    var faPenNib = {
      prefix: 'fas',
      iconName: 'pen-nib',
      icon: [512, 512, [], "f5ad", "M136.6 138.79a64.003 64.003 0 0 0-43.31 41.35L0 460l14.69 14.69L164.8 324.58c-2.99-6.26-4.8-13.18-4.8-20.58 0-26.51 21.49-48 48-48s48 21.49 48 48-21.49 48-48 48c-7.4 0-14.32-1.81-20.58-4.8L37.31 497.31 52 512l279.86-93.29a64.003 64.003 0 0 0 41.35-43.31L416 224 288 96l-151.4 42.79zm361.34-64.62l-60.11-60.11c-18.75-18.75-49.16-18.75-67.91 0l-56.55 56.55 128.02 128.02 56.55-56.55c18.75-18.75 18.75-49.15 0-67.91z"]
    };
    exports.faPenNib = faPenNib;
    var faPenSquare = {
      prefix: 'fas',
      iconName: 'pen-square',
      icon: [448, 512, [], "f14b", "M400 480H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zM238.1 177.9L102.4 313.6l-6.3 57.1c-.8 7.6 5.6 14.1 13.3 13.3l57.1-6.3L302.2 242c2.3-2.3 2.3-6.1 0-8.5L246.7 178c-2.5-2.4-6.3-2.4-8.6-.1zM345 165.1L314.9 135c-9.4-9.4-24.6-9.4-33.9 0l-23.1 23.1c-2.3 2.3-2.3 6.1 0 8.5l55.5 55.5c2.3 2.3 6.1 2.3 8.5 0L345 199c9.3-9.3 9.3-24.5 0-33.9z"]
    };
    exports.faPenSquare = faPenSquare;
    var faPencilAlt = {
      prefix: 'fas',
      iconName: 'pencil-alt',
      icon: [512, 512, [], "f303", "M497.9 142.1l-46.1 46.1c-4.7 4.7-12.3 4.7-17 0l-111-111c-4.7-4.7-4.7-12.3 0-17l46.1-46.1c18.7-18.7 49.1-18.7 67.9 0l60.1 60.1c18.8 18.7 18.8 49.1 0 67.9zM284.2 99.8L21.6 362.4.4 483.9c-2.9 16.4 11.4 30.6 27.8 27.8l121.5-21.3 262.6-262.6c4.7-4.7 4.7-12.3 0-17l-111-111c-4.8-4.7-12.4-4.7-17.1 0zM124.1 339.9c-5.5-5.5-5.5-14.3 0-19.8l154-154c5.5-5.5 14.3-5.5 19.8 0s5.5 14.3 0 19.8l-154 154c-5.5 5.5-14.3 5.5-19.8 0zM88 424h48v36.3l-64.5 11.3-31.1-31.1L51.7 376H88v48z"]
    };
    exports.faPencilAlt = faPencilAlt;
    var faPencilRuler = {
      prefix: 'fas',
      iconName: 'pencil-ruler',
      icon: [512, 512, [], "f5ae", "M109.46 244.04l134.58-134.56-44.12-44.12-61.68 61.68a7.919 7.919 0 0 1-11.21 0l-11.21-11.21c-3.1-3.1-3.1-8.12 0-11.21l61.68-61.68-33.64-33.65C131.47-3.1 111.39-3.1 99 9.29L9.29 99c-12.38 12.39-12.39 32.47 0 44.86l100.17 100.18zm388.47-116.8c18.76-18.76 18.75-49.17 0-67.93l-45.25-45.25c-18.76-18.76-49.18-18.76-67.95 0l-46.02 46.01 113.2 113.2 46.02-46.03zM316.08 82.71l-297 296.96L.32 487.11c-2.53 14.49 10.09 27.11 24.59 24.56l107.45-18.84L429.28 195.9 316.08 82.71zm186.63 285.43l-33.64-33.64-61.68 61.68c-3.1 3.1-8.12 3.1-11.21 0l-11.21-11.21c-3.09-3.1-3.09-8.12 0-11.21l61.68-61.68-44.14-44.14L267.93 402.5l100.21 100.2c12.39 12.39 32.47 12.39 44.86 0l89.71-89.7c12.39-12.39 12.39-32.47 0-44.86z"]
    };
    exports.faPencilRuler = faPencilRuler;
    var faPeopleArrows = {
      prefix: 'fas',
      iconName: 'people-arrows',
      icon: [576, 512, [], "e068", "M96,128A64,64,0,1,0,32,64,64,64,0,0,0,96,128Zm0,176.08a44.11,44.11,0,0,1,13.64-32L181.77,204c1.65-1.55,3.77-2.31,5.61-3.57A63.91,63.91,0,0,0,128,160H64A64,64,0,0,0,0,224v96a32,32,0,0,0,32,32V480a32,32,0,0,0,32,32h64a32,32,0,0,0,32-32V383.61l-50.36-47.53A44.08,44.08,0,0,1,96,304.08ZM480,128a64,64,0,1,0-64-64A64,64,0,0,0,480,128Zm32,32H448a63.91,63.91,0,0,0-59.38,40.42c1.84,1.27,4,2,5.62,3.59l72.12,68.06a44.37,44.37,0,0,1,0,64L416,383.62V480a32,32,0,0,0,32,32h64a32,32,0,0,0,32-32V352a32,32,0,0,0,32-32V224A64,64,0,0,0,512,160ZM444.4,295.34l-72.12-68.06A12,12,0,0,0,352,236v36H224V236a12,12,0,0,0-20.28-8.73L131.6,295.34a12.4,12.4,0,0,0,0,17.47l72.12,68.07A12,12,0,0,0,224,372.14V336H352v36.14a12,12,0,0,0,20.28,8.74l72.12-68.07A12.4,12.4,0,0,0,444.4,295.34Z"]
    };
    exports.faPeopleArrows = faPeopleArrows;
    var faPeopleCarry = {
      prefix: 'fas',
      iconName: 'people-carry',
      icon: [640, 512, [], "f4ce", "M128 96c26.5 0 48-21.5 48-48S154.5 0 128 0 80 21.5 80 48s21.5 48 48 48zm384 0c26.5 0 48-21.5 48-48S538.5 0 512 0s-48 21.5-48 48 21.5 48 48 48zm125.7 372.1l-44-110-41.1 46.4-2 18.2 27.7 69.2c5 12.5 17 20.1 29.7 20.1 4 0 8-.7 11.9-2.3 16.4-6.6 24.4-25.2 17.8-41.6zm-34.2-209.8L585 178.1c-4.6-20-18.6-36.8-37.5-44.9-18.5-8-39-6.7-56.1 3.3-22.7 13.4-39.7 34.5-48.1 59.4L432 229.8 416 240v-96c0-8.8-7.2-16-16-16H240c-8.8 0-16 7.2-16 16v96l-16.1-10.2-11.3-33.9c-8.3-25-25.4-46-48.1-59.4-17.2-10-37.6-11.3-56.1-3.3-18.9 8.1-32.9 24.9-37.5 44.9l-18.4 80.2c-4.6 20 .7 41.2 14.4 56.7l67.2 75.9 10.1 92.6C130 499.8 143.8 512 160 512c1.2 0 2.3-.1 3.5-.2 17.6-1.9 30.2-17.7 28.3-35.3l-10.1-92.8c-1.5-13-6.9-25.1-15.6-35l-43.3-49 17.6-70.3 6.8 20.4c4.1 12.5 11.9 23.4 24.5 32.6l51.1 32.5c4.6 2.9 12.1 4.6 17.2 5h160c5.1-.4 12.6-2.1 17.2-5l51.1-32.5c12.6-9.2 20.4-20 24.5-32.6l6.8-20.4 17.6 70.3-43.3 49c-8.7 9.9-14.1 22-15.6 35l-10.1 92.8c-1.9 17.6 10.8 33.4 28.3 35.3 1.2.1 2.3.2 3.5.2 16.1 0 30-12.1 31.8-28.5l10.1-92.6 67.2-75.9c13.6-15.5 19-36.7 14.4-56.7zM46.3 358.1l-44 110c-6.6 16.4 1.4 35 17.8 41.6 16.8 6.6 35.1-1.7 41.6-17.8l27.7-69.2-2-18.2-41.1-46.4z"]
    };
    exports.faPeopleCarry = faPeopleCarry;
    var faPepperHot = {
      prefix: 'fas',
      iconName: 'pepper-hot',
      icon: [512, 512, [], "f816", "M330.67 263.12V173.4l-52.75-24.22C219.44 218.76 197.58 400 56 400a56 56 0 0 0 0 112c212.64 0 370.65-122.87 419.18-210.34l-37.05-38.54zm131.09-128.37C493.92 74.91 477.18 26.48 458.62 3a8 8 0 0 0-11.93-.59l-22.9 23a8.06 8.06 0 0 0-.89 10.23c6.86 10.36 17.05 35.1-1.4 72.32A142.85 142.85 0 0 0 364.34 96c-28 0-54 8.54-76.34 22.59l74.67 34.29v78.24h89.09L506.44 288c3.26-12.62 5.56-25.63 5.56-39.31a154 154 0 0 0-50.24-113.94z"]
    };
    exports.faPepperHot = faPepperHot;
    var faPercent = {
      prefix: 'fas',
      iconName: 'percent',
      icon: [448, 512, [], "f295", "M112 224c61.9 0 112-50.1 112-112S173.9 0 112 0 0 50.1 0 112s50.1 112 112 112zm0-160c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zm224 224c-61.9 0-112 50.1-112 112s50.1 112 112 112 112-50.1 112-112-50.1-112-112-112zm0 160c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zM392.3.2l31.6-.1c19.4-.1 30.9 21.8 19.7 37.8L77.4 501.6a23.95 23.95 0 0 1-19.6 10.2l-33.4.1c-19.5 0-30.9-21.9-19.7-37.8l368-463.7C377.2 4 384.5.2 392.3.2z"]
    };
    exports.faPercent = faPercent;
    var faPercentage = {
      prefix: 'fas',
      iconName: 'percentage',
      icon: [384, 512, [], "f541", "M109.25 173.25c24.99-24.99 24.99-65.52 0-90.51-24.99-24.99-65.52-24.99-90.51 0-24.99 24.99-24.99 65.52 0 90.51 25 25 65.52 25 90.51 0zm256 165.49c-24.99-24.99-65.52-24.99-90.51 0-24.99 24.99-24.99 65.52 0 90.51 24.99 24.99 65.52 24.99 90.51 0 25-24.99 25-65.51 0-90.51zm-1.94-231.43l-22.62-22.62c-12.5-12.5-32.76-12.5-45.25 0L20.69 359.44c-12.5 12.5-12.5 32.76 0 45.25l22.62 22.62c12.5 12.5 32.76 12.5 45.25 0l274.75-274.75c12.5-12.49 12.5-32.75 0-45.25z"]
    };
    exports.faPercentage = faPercentage;
    var faPersonBooth = {
      prefix: 'fas',
      iconName: 'person-booth',
      icon: [576, 512, [], "f756", "M192 496c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V320h-64v176zm32-272h-50.9l-45.2-45.3C115.8 166.6 99.7 160 82.7 160H64c-17.1 0-33.2 6.7-45.3 18.8C6.7 190.9 0 207 0 224.1L.2 320 0 480c0 17.7 14.3 32 31.9 32 17.6 0 32-14.3 32-32l.1-100.7c.9.5 1.6 1.3 2.5 1.7l29.1 43v56c0 17.7 14.3 32 32 32s32-14.3 32-32v-56.5c0-9.9-2.3-19.8-6.7-28.6l-41.2-61.3V253l20.9 20.9c9.1 9.1 21.1 14.1 33.9 14.1H224c17.7 0 32-14.3 32-32s-14.3-32-32-32zM64 128c26.5 0 48-21.5 48-48S90.5 32 64 32 16 53.5 16 80s21.5 48 48 48zm224-96l31.5 223.1-30.9 154.6c-4.3 21.6 13 38.3 31.4 38.3 15.2 0 28-9.1 32.3-30.4.9 16.9 14.6 30.4 31.7 30.4 17.7 0 32-14.3 32-32 0 17.7 14.3 32 32 32s32-14.3 32-32V0H288v32zm-96 0v160h64V0h-32c-17.7 0-32 14.3-32 32zM544 0h-32v496c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V32c0-17.7-14.3-32-32-32z"]
    };
    exports.faPersonBooth = faPersonBooth;
    var faPhone = {
      prefix: 'fas',
      iconName: 'phone',
      icon: [512, 512, [], "f095", "M493.4 24.6l-104-24c-11.3-2.6-22.9 3.3-27.5 13.9l-48 112c-4.2 9.8-1.4 21.3 6.9 28l60.6 49.6c-36 76.7-98.9 140.5-177.2 177.2l-49.6-60.6c-6.8-8.3-18.2-11.1-28-6.9l-112 48C3.9 366.5-2 378.1.6 389.4l24 104C27.1 504.2 36.7 512 48 512c256.1 0 464-207.5 464-464 0-11.2-7.7-20.9-18.6-23.4z"]
    };
    exports.faPhone = faPhone;
    var faPhoneAlt = {
      prefix: 'fas',
      iconName: 'phone-alt',
      icon: [512, 512, [], "f879", "M497.39 361.8l-112-48a24 24 0 0 0-28 6.9l-49.6 60.6A370.66 370.66 0 0 1 130.6 204.11l60.6-49.6a23.94 23.94 0 0 0 6.9-28l-48-112A24.16 24.16 0 0 0 122.6.61l-104 24A24 24 0 0 0 0 48c0 256.5 207.9 464 464 464a24 24 0 0 0 23.4-18.6l24-104a24.29 24.29 0 0 0-14.01-27.6z"]
    };
    exports.faPhoneAlt = faPhoneAlt;
    var faPhoneSlash = {
      prefix: 'fas',
      iconName: 'phone-slash',
      icon: [640, 512, [], "f3dd", "M268.2 381.4l-49.6-60.6c-6.8-8.3-18.2-11.1-28-6.9l-112 48c-10.7 4.6-16.5 16.1-13.9 27.5l24 104c2.5 10.8 12.1 18.6 23.4 18.6 100.7 0 193.7-32.4 269.7-86.9l-80-61.8c-10.9 6.5-22.1 12.7-33.6 18.1zm365.6 76.7L475.1 335.5C537.9 256.4 576 156.9 576 48c0-11.2-7.7-20.9-18.6-23.4l-104-24c-11.3-2.6-22.9 3.3-27.5 13.9l-48 112c-4.2 9.8-1.4 21.3 6.9 28l60.6 49.6c-12.2 26.1-27.9 50.3-46 72.8L45.5 3.4C38.5-2 28.5-.8 23 6.2L3.4 31.4c-5.4 7-4.2 17 2.8 22.4l588.4 454.7c7 5.4 17 4.2 22.5-2.8l19.6-25.3c5.4-6.8 4.1-16.9-2.9-22.3z"]
    };
    exports.faPhoneSlash = faPhoneSlash;
    var faPhoneSquare = {
      prefix: 'fas',
      iconName: 'phone-square',
      icon: [448, 512, [], "f098", "M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM94 416c-7.033 0-13.057-4.873-14.616-11.627l-14.998-65a15 15 0 0 1 8.707-17.16l69.998-29.999a15 15 0 0 1 17.518 4.289l30.997 37.885c48.944-22.963 88.297-62.858 110.781-110.78l-37.886-30.997a15.001 15.001 0 0 1-4.289-17.518l30-69.998a15 15 0 0 1 17.16-8.707l65 14.998A14.997 14.997 0 0 1 384 126c0 160.292-129.945 290-290 290z"]
    };
    exports.faPhoneSquare = faPhoneSquare;
    var faPhoneSquareAlt = {
      prefix: 'fas',
      iconName: 'phone-square-alt',
      icon: [448, 512, [], "f87b", "M400 32H48A48 48 0 0 0 0 80v352a48 48 0 0 0 48 48h352a48 48 0 0 0 48-48V80a48 48 0 0 0-48-48zm-16.39 307.37l-15 65A15 15 0 0 1 354 416C194 416 64 286.29 64 126a15.7 15.7 0 0 1 11.63-14.61l65-15A18.23 18.23 0 0 1 144 96a16.27 16.27 0 0 1 13.79 9.09l30 70A17.9 17.9 0 0 1 189 181a17 17 0 0 1-5.5 11.61l-37.89 31a231.91 231.91 0 0 0 110.78 110.78l31-37.89A17 17 0 0 1 299 291a17.85 17.85 0 0 1 5.91 1.21l70 30A16.25 16.25 0 0 1 384 336a17.41 17.41 0 0 1-.39 3.37z"]
    };
    exports.faPhoneSquareAlt = faPhoneSquareAlt;
    var faPhoneVolume = {
      prefix: 'fas',
      iconName: 'phone-volume',
      icon: [384, 512, [], "f2a0", "M97.333 506.966c-129.874-129.874-129.681-340.252 0-469.933 5.698-5.698 14.527-6.632 21.263-2.422l64.817 40.513a17.187 17.187 0 0 1 6.849 20.958l-32.408 81.021a17.188 17.188 0 0 1-17.669 10.719l-55.81-5.58c-21.051 58.261-20.612 122.471 0 179.515l55.811-5.581a17.188 17.188 0 0 1 17.669 10.719l32.408 81.022a17.188 17.188 0 0 1-6.849 20.958l-64.817 40.513a17.19 17.19 0 0 1-21.264-2.422zM247.126 95.473c11.832 20.047 11.832 45.008 0 65.055-3.95 6.693-13.108 7.959-18.718 2.581l-5.975-5.726c-3.911-3.748-4.793-9.622-2.261-14.41a32.063 32.063 0 0 0 0-29.945c-2.533-4.788-1.65-10.662 2.261-14.41l5.975-5.726c5.61-5.378 14.768-4.112 18.718 2.581zm91.787-91.187c60.14 71.604 60.092 175.882 0 247.428-4.474 5.327-12.53 5.746-17.552.933l-5.798-5.557c-4.56-4.371-4.977-11.529-.93-16.379 49.687-59.538 49.646-145.933 0-205.422-4.047-4.85-3.631-12.008.93-16.379l5.798-5.557c5.022-4.813 13.078-4.394 17.552.933zm-45.972 44.941c36.05 46.322 36.108 111.149 0 157.546-4.39 5.641-12.697 6.251-17.856 1.304l-5.818-5.579c-4.4-4.219-4.998-11.095-1.285-15.931 26.536-34.564 26.534-82.572 0-117.134-3.713-4.836-3.115-11.711 1.285-15.931l5.818-5.579c5.159-4.947 13.466-4.337 17.856 1.304z"]
    };
    exports.faPhoneVolume = faPhoneVolume;
    var faPhotoVideo = {
      prefix: 'fas',
      iconName: 'photo-video',
      icon: [640, 512, [], "f87c", "M608 0H160a32 32 0 0 0-32 32v96h160V64h192v320h128a32 32 0 0 0 32-32V32a32 32 0 0 0-32-32zM232 103a9 9 0 0 1-9 9h-30a9 9 0 0 1-9-9V73a9 9 0 0 1 9-9h30a9 9 0 0 1 9 9zm352 208a9 9 0 0 1-9 9h-30a9 9 0 0 1-9-9v-30a9 9 0 0 1 9-9h30a9 9 0 0 1 9 9zm0-104a9 9 0 0 1-9 9h-30a9 9 0 0 1-9-9v-30a9 9 0 0 1 9-9h30a9 9 0 0 1 9 9zm0-104a9 9 0 0 1-9 9h-30a9 9 0 0 1-9-9V73a9 9 0 0 1 9-9h30a9 9 0 0 1 9 9zm-168 57H32a32 32 0 0 0-32 32v288a32 32 0 0 0 32 32h384a32 32 0 0 0 32-32V192a32 32 0 0 0-32-32zM96 224a32 32 0 1 1-32 32 32 32 0 0 1 32-32zm288 224H64v-32l64-64 32 32 128-128 96 96z"]
    };
    exports.faPhotoVideo = faPhotoVideo;
    var faPiggyBank = {
      prefix: 'fas',
      iconName: 'piggy-bank',
      icon: [576, 512, [], "f4d3", "M560 224h-29.5c-8.8-20-21.6-37.7-37.4-52.5L512 96h-32c-29.4 0-55.4 13.5-73 34.3-7.6-1.1-15.1-2.3-23-2.3H256c-77.4 0-141.9 55-156.8 128H56c-14.8 0-26.5-13.5-23.5-28.8C34.7 215.8 45.4 208 57 208h1c3.3 0 6-2.7 6-6v-20c0-3.3-2.7-6-6-6-28.5 0-53.9 20.4-57.5 48.6C-3.9 258.8 22.7 288 56 288h40c0 52.2 25.4 98.1 64 127.3V496c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16v-48h128v48c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16v-80.7c11.8-8.9 22.3-19.4 31.3-31.3H560c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16zm-128 64c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zM256 96h128c5.4 0 10.7.4 15.9.8 0-.3.1-.5.1-.8 0-53-43-96-96-96s-96 43-96 96c0 2.1.5 4.1.6 6.2 15.2-3.9 31-6.2 47.4-6.2z"]
    };
    exports.faPiggyBank = faPiggyBank;
    var faPills = {
      prefix: 'fas',
      iconName: 'pills',
      icon: [576, 512, [], "f484", "M112 32C50.1 32 0 82.1 0 144v224c0 61.9 50.1 112 112 112s112-50.1 112-112V144c0-61.9-50.1-112-112-112zm48 224H64V144c0-26.5 21.5-48 48-48s48 21.5 48 48v112zm139.7-29.7c-3.5-3.5-9.4-3.1-12.3.8-45.3 62.5-40.4 150.1 15.9 206.4 56.3 56.3 143.9 61.2 206.4 15.9 4-2.9 4.3-8.8.8-12.3L299.7 226.3zm229.8-19c-56.3-56.3-143.9-61.2-206.4-15.9-4 2.9-4.3 8.8-.8 12.3l210.8 210.8c3.5 3.5 9.4 3.1 12.3-.8 45.3-62.6 40.5-150.1-15.9-206.4z"]
    };
    exports.faPills = faPills;
    var faPizzaSlice = {
      prefix: 'fas',
      iconName: 'pizza-slice',
      icon: [512, 512, [], "f818", "M158.87.15c-16.16-1.52-31.2 8.42-35.33 24.12l-14.81 56.27c187.62 5.49 314.54 130.61 322.48 317l56.94-15.78c15.72-4.36 25.49-19.68 23.62-35.9C490.89 165.08 340.78 17.32 158.87.15zm-58.47 112L.55 491.64a16.21 16.21 0 0 0 20 19.75l379-105.1c-4.27-174.89-123.08-292.14-299.15-294.1zM128 416a32 32 0 1 1 32-32 32 32 0 0 1-32 32zm48-152a32 32 0 1 1 32-32 32 32 0 0 1-32 32zm104 104a32 32 0 1 1 32-32 32 32 0 0 1-32 32z"]
    };
    exports.faPizzaSlice = faPizzaSlice;
    var faPlaceOfWorship = {
      prefix: 'fas',
      iconName: 'place-of-worship',
      icon: [640, 512, [], "f67f", "M620.61 366.55L512 320v192h112c8.84 0 16-7.16 16-16V395.96a32 32 0 0 0-19.39-29.41zM0 395.96V496c0 8.84 7.16 16 16 16h112V320L19.39 366.55A32 32 0 0 0 0 395.96zm464.46-149.28L416 217.6V102.63c0-8.49-3.37-16.62-9.38-22.63L331.31 4.69c-6.25-6.25-16.38-6.25-22.62 0L233.38 80c-6 6-9.38 14.14-9.38 22.63V217.6l-48.46 29.08A31.997 31.997 0 0 0 160 274.12V512h96v-96c0-35.35 28.66-64 64-64s64 28.65 64 64v96h96V274.12c0-11.24-5.9-21.66-15.54-27.44z"]
    };
    exports.faPlaceOfWorship = faPlaceOfWorship;
    var faPlane = {
      prefix: 'fas',
      iconName: 'plane',
      icon: [576, 512, [], "f072", "M480 192H365.71L260.61 8.06A16.014 16.014 0 0 0 246.71 0h-65.5c-10.63 0-18.3 10.17-15.38 20.39L214.86 192H112l-43.2-57.6c-3.02-4.03-7.77-6.4-12.8-6.4H16.01C5.6 128-2.04 137.78.49 147.88L32 256 .49 364.12C-2.04 374.22 5.6 384 16.01 384H56c5.04 0 9.78-2.37 12.8-6.4L112 320h102.86l-49.03 171.6c-2.92 10.22 4.75 20.4 15.38 20.4h65.5c5.74 0 11.04-3.08 13.89-8.06L365.71 320H480c35.35 0 96-28.65 96-64s-60.65-64-96-64z"]
    };
    exports.faPlane = faPlane;
    var faPlaneArrival = {
      prefix: 'fas',
      iconName: 'plane-arrival',
      icon: [640, 512, [], "f5af", "M624 448H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h608c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM44.81 205.66l88.74 80a62.607 62.607 0 0 0 25.47 13.93l287.6 78.35c26.48 7.21 54.56 8.72 81 1.36 29.67-8.27 43.44-21.21 47.25-35.71 3.83-14.5-1.73-32.71-23.37-54.96-19.28-19.82-44.35-32.79-70.83-40l-97.51-26.56L282.8 30.22c-1.51-5.81-5.95-10.35-11.66-11.91L206.05.58c-10.56-2.88-20.9 5.32-20.71 16.44l47.92 164.21-102.2-27.84-27.59-67.88c-1.93-4.89-6.01-8.57-11.02-9.93L52.72 64.75c-10.34-2.82-20.53 5-20.72 15.88l.23 101.78c.19 8.91 6.03 17.34 12.58 23.25z"]
    };
    exports.faPlaneArrival = faPlaneArrival;
    var faPlaneDeparture = {
      prefix: 'fas',
      iconName: 'plane-departure',
      icon: [640, 512, [], "f5b0", "M624 448H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h608c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM80.55 341.27c6.28 6.84 15.1 10.72 24.33 10.71l130.54-.18a65.62 65.62 0 0 0 29.64-7.12l290.96-147.65c26.74-13.57 50.71-32.94 67.02-58.31 18.31-28.48 20.3-49.09 13.07-63.65-7.21-14.57-24.74-25.27-58.25-27.45-29.85-1.94-59.54 5.92-86.28 19.48l-98.51 49.99-218.7-82.06a17.799 17.799 0 0 0-18-1.11L90.62 67.29c-10.67 5.41-13.25 19.65-5.17 28.53l156.22 98.1-103.21 52.38-72.35-36.47a17.804 17.804 0 0 0-16.07.02L9.91 230.22c-10.44 5.3-13.19 19.12-5.57 28.08l76.21 82.97z"]
    };
    exports.faPlaneDeparture = faPlaneDeparture;
    var faPlaneSlash = {
      prefix: 'fas',
      iconName: 'plane-slash',
      icon: [640, 512, [], "e069", "M32.48,147.88,64,256,32.48,364.13A16,16,0,0,0,48,384H88a16,16,0,0,0,12.8-6.41L144,320H246.85l-49,171.59A16,16,0,0,0,213.2,512h65.5a16,16,0,0,0,13.89-8.06l66.6-116.54L34.35,136.34A15.47,15.47,0,0,0,32.48,147.88ZM633.82,458.09,455.14,320H512c35.34,0,96-28.66,96-64s-60.66-64-96-64H397.7L292.61,8.06C290.06,3.61,283.84,0,278.71,0H213.2a16,16,0,0,0-15.38,20.39l36.94,129.29L45.46,3.38A16,16,0,0,0,23,6.19L3.37,31.45A16,16,0,0,0,6.18,53.91L594.54,508.63A16,16,0,0,0,617,505.81l19.64-25.26A16,16,0,0,0,633.82,458.09Z"]
    };
    exports.faPlaneSlash = faPlaneSlash;
    var faPlay = {
      prefix: 'fas',
      iconName: 'play',
      icon: [448, 512, [], "f04b", "M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z"]
    };
    exports.faPlay = faPlay;
    var faPlayCircle = {
      prefix: 'fas',
      iconName: 'play-circle',
      icon: [512, 512, [], "f144", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z"]
    };
    exports.faPlayCircle = faPlayCircle;
    var faPlug = {
      prefix: 'fas',
      iconName: 'plug',
      icon: [384, 512, [], "f1e6", "M320,32a32,32,0,0,0-64,0v96h64Zm48,128H16A16,16,0,0,0,0,176v32a16,16,0,0,0,16,16H32v32A160.07,160.07,0,0,0,160,412.8V512h64V412.8A160.07,160.07,0,0,0,352,256V224h16a16,16,0,0,0,16-16V176A16,16,0,0,0,368,160ZM128,32a32,32,0,0,0-64,0v96h64Z"]
    };
    exports.faPlug = faPlug;
    var faPlus = {
      prefix: 'fas',
      iconName: 'plus',
      icon: [448, 512, [], "f067", "M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"]
    };
    exports.faPlus = faPlus;
    var faPlusCircle = {
      prefix: 'fas',
      iconName: 'plus-circle',
      icon: [512, 512, [], "f055", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"]
    };
    exports.faPlusCircle = faPlusCircle;
    var faPlusSquare = {
      prefix: 'fas',
      iconName: 'plus-square',
      icon: [448, 512, [], "f0fe", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-32 252c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92H92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"]
    };
    exports.faPlusSquare = faPlusSquare;
    var faPodcast = {
      prefix: 'fas',
      iconName: 'podcast',
      icon: [448, 512, [], "f2ce", "M267.429 488.563C262.286 507.573 242.858 512 224 512c-18.857 0-38.286-4.427-43.428-23.437C172.927 460.134 160 388.898 160 355.75c0-35.156 31.142-43.75 64-43.75s64 8.594 64 43.75c0 32.949-12.871 104.179-20.571 132.813zM156.867 288.554c-18.693-18.308-29.958-44.173-28.784-72.599 2.054-49.724 42.395-89.956 92.124-91.881C274.862 121.958 320 165.807 320 220c0 26.827-11.064 51.116-28.866 68.552-2.675 2.62-2.401 6.986.628 9.187 9.312 6.765 16.46 15.343 21.234 25.363 1.741 3.654 6.497 4.66 9.449 1.891 28.826-27.043 46.553-65.783 45.511-108.565-1.855-76.206-63.595-138.208-139.793-140.369C146.869 73.753 80 139.215 80 220c0 41.361 17.532 78.7 45.55 104.989 2.953 2.771 7.711 1.77 9.453-1.887 4.774-10.021 11.923-18.598 21.235-25.363 3.029-2.2 3.304-6.566.629-9.185zM224 0C100.204 0 0 100.185 0 224c0 89.992 52.602 165.647 125.739 201.408 4.333 2.118 9.267-1.544 8.535-6.31-2.382-15.512-4.342-30.946-5.406-44.339-.146-1.836-1.149-3.486-2.678-4.512-47.4-31.806-78.564-86.016-78.187-147.347.592-96.237 79.29-174.648 175.529-174.899C320.793 47.747 400 126.797 400 224c0 61.932-32.158 116.49-80.65 147.867-.999 14.037-3.069 30.588-5.624 47.23-.732 4.767 4.203 8.429 8.535 6.31C395.227 389.727 448 314.187 448 224 448 100.205 347.815 0 224 0zm0 160c-35.346 0-64 28.654-64 64s28.654 64 64 64 64-28.654 64-64-28.654-64-64-64z"]
    };
    exports.faPodcast = faPodcast;
    var faPoll = {
      prefix: 'fas',
      iconName: 'poll',
      icon: [448, 512, [], "f681", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zM160 368c0 8.84-7.16 16-16 16h-32c-8.84 0-16-7.16-16-16V240c0-8.84 7.16-16 16-16h32c8.84 0 16 7.16 16 16v128zm96 0c0 8.84-7.16 16-16 16h-32c-8.84 0-16-7.16-16-16V144c0-8.84 7.16-16 16-16h32c8.84 0 16 7.16 16 16v224zm96 0c0 8.84-7.16 16-16 16h-32c-8.84 0-16-7.16-16-16v-64c0-8.84 7.16-16 16-16h32c8.84 0 16 7.16 16 16v64z"]
    };
    exports.faPoll = faPoll;
    var faPollH = {
      prefix: 'fas',
      iconName: 'poll-h',
      icon: [448, 512, [], "f682", "M448 432V80c0-26.5-21.5-48-48-48H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48zM112 192c-8.84 0-16-7.16-16-16v-32c0-8.84 7.16-16 16-16h128c8.84 0 16 7.16 16 16v32c0 8.84-7.16 16-16 16H112zm0 96c-8.84 0-16-7.16-16-16v-32c0-8.84 7.16-16 16-16h224c8.84 0 16 7.16 16 16v32c0 8.84-7.16 16-16 16H112zm0 96c-8.84 0-16-7.16-16-16v-32c0-8.84 7.16-16 16-16h64c8.84 0 16 7.16 16 16v32c0 8.84-7.16 16-16 16h-64z"]
    };
    exports.faPollH = faPollH;
    var faPoo = {
      prefix: 'fas',
      iconName: 'poo',
      icon: [512, 512, [], "f2fe", "M451.4 369.1C468.7 356 480 335.4 480 312c0-39.8-32.2-72-72-72h-14.1c13.4-11.7 22.1-28.8 22.1-48 0-35.3-28.7-64-64-64h-5.9c3.6-10.1 5.9-20.7 5.9-32 0-53-43-96-96-96-5.2 0-10.2.7-15.1 1.5C250.3 14.6 256 30.6 256 48c0 44.2-35.8 80-80 80h-16c-35.3 0-64 28.7-64 64 0 19.2 8.7 36.3 22.1 48H104c-39.8 0-72 32.2-72 72 0 23.4 11.3 44 28.6 57.1C26.3 374.6 0 404.1 0 440c0 39.8 32.2 72 72 72h368c39.8 0 72-32.2 72-72 0-35.9-26.3-65.4-60.6-70.9zM192 256c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm159.5 139C341 422.9 293 448 256 448s-85-25.1-95.5-53c-2-5.3 2-11 7.8-11h175.4c5.8 0 9.8 5.7 7.8 11zM320 320c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faPoo = faPoo;
    var faPooStorm = {
      prefix: 'fas',
      iconName: 'poo-storm',
      icon: [448, 512, [], "f75a", "M308 336h-57.7l17.3-64.9c2-7.6-3.7-15.1-11.6-15.1h-68c-6 0-11.1 4.5-11.9 10.4l-16 120c-1 7.2 4.6 13.6 11.9 13.6h59.3l-23 97.2c-1.8 7.6 4 14.8 11.7 14.8 4.2 0 8.2-2.2 10.4-6l88-152c4.6-8-1.2-18-10.4-18zm66.4-111.3c5.9-9.6 9.6-20.6 9.6-32.7 0-35.3-28.7-64-64-64h-5.9c3.6-10.1 5.9-20.7 5.9-32 0-53-43-96-96-96-5.2 0-10.2.7-15.1 1.5C218.3 14.6 224 30.6 224 48c0 44.2-35.8 80-80 80h-16c-35.3 0-64 28.7-64 64 0 12.1 3.7 23.1 9.6 32.7C32.6 228 0 262.2 0 304c0 44 36 80 80 80h48.3c.1-.6 0-1.2 0-1.8l16-120c3-21.8 21.7-38.2 43.7-38.2h68c13.8 0 26.5 6.3 34.9 17.2s11.2 24.8 7.6 38.1l-6.6 24.7h16c15.7 0 30.3 8.4 38.1 22 7.8 13.6 7.8 30.5 0 44l-8.1 14h30c44 0 80-36 80-80 .1-41.8-32.5-76-73.5-79.3z"]
    };
    exports.faPooStorm = faPooStorm;
    var faPoop = {
      prefix: 'fas',
      iconName: 'poop',
      icon: [512, 512, [], "f619", "M451.36 369.14C468.66 355.99 480 335.41 480 312c0-39.77-32.24-72-72-72h-14.07c13.42-11.73 22.07-28.78 22.07-48 0-35.35-28.65-64-64-64h-5.88c3.57-10.05 5.88-20.72 5.88-32 0-53.02-42.98-96-96-96-5.17 0-10.15.74-15.11 1.52C250.31 14.64 256 30.62 256 48c0 44.18-35.82 80-80 80h-16c-35.35 0-64 28.65-64 64 0 19.22 8.65 36.27 22.07 48H104c-39.76 0-72 32.23-72 72 0 23.41 11.34 43.99 28.64 57.14C26.31 374.62 0 404.12 0 440c0 39.76 32.24 72 72 72h368c39.76 0 72-32.24 72-72 0-35.88-26.31-65.38-60.64-70.86z"]
    };
    exports.faPoop = faPoop;
    var faPortrait = {
      prefix: 'fas',
      iconName: 'portrait',
      icon: [384, 512, [], "f3e0", "M336 0H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zM192 128c35.3 0 64 28.7 64 64s-28.7 64-64 64-64-28.7-64-64 28.7-64 64-64zm112 236.8c0 10.6-10 19.2-22.4 19.2H102.4C90 384 80 375.4 80 364.8v-19.2c0-31.8 30.1-57.6 67.2-57.6h5c12.3 5.1 25.7 8 39.8 8s27.6-2.9 39.8-8h5c37.1 0 67.2 25.8 67.2 57.6v19.2z"]
    };
    exports.faPortrait = faPortrait;
    var faPoundSign = {
      prefix: 'fas',
      iconName: 'pound-sign',
      icon: [320, 512, [], "f154", "M308 352h-45.495c-6.627 0-12 5.373-12 12v50.848H128V288h84c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-84v-63.556c0-32.266 24.562-57.086 61.792-57.086 23.658 0 45.878 11.505 57.652 18.849 5.151 3.213 11.888 2.051 15.688-2.685l28.493-35.513c4.233-5.276 3.279-13.005-2.119-17.081C273.124 54.56 236.576 32 187.931 32 106.026 32 48 84.742 48 157.961V224H20c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h28v128H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h296c6.627 0 12-5.373 12-12V364c0-6.627-5.373-12-12-12z"]
    };
    exports.faPoundSign = faPoundSign;
    var faPowerOff = {
      prefix: 'fas',
      iconName: 'power-off',
      icon: [512, 512, [], "f011", "M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z"]
    };
    exports.faPowerOff = faPowerOff;
    var faPray = {
      prefix: 'fas',
      iconName: 'pray',
      icon: [384, 512, [], "f683", "M256 128c35.35 0 64-28.65 64-64S291.35 0 256 0s-64 28.65-64 64 28.65 64 64 64zm-30.63 169.75c14.06 16.72 39 19.09 55.97 5.22l88-72.02c17.09-13.98 19.59-39.19 5.62-56.28-13.97-17.11-39.19-19.59-56.31-5.62l-57.44 47-38.91-46.31c-15.44-18.39-39.22-27.92-64-25.33-24.19 2.48-45.25 16.27-56.37 36.92l-49.37 92.03c-23.4 43.64-8.69 96.37 34.19 123.75L131.56 432H40c-22.09 0-40 17.91-40 40s17.91 40 40 40h208c34.08 0 53.77-42.79 28.28-68.28L166.42 333.86l34.8-64.87 24.15 28.76z"]
    };
    exports.faPray = faPray;
    var faPrayingHands = {
      prefix: 'fas',
      iconName: 'praying-hands',
      icon: [640, 512, [], "f684", "M272 191.91c-17.6 0-32 14.4-32 32v80c0 8.84-7.16 16-16 16s-16-7.16-16-16v-76.55c0-17.39 4.72-34.47 13.69-49.39l77.75-129.59c9.09-15.16 4.19-34.81-10.97-43.91-14.45-8.67-32.72-4.3-42.3 9.21-.2.23-.62.21-.79.48l-117.26 175.9C117.56 205.9 112 224.31 112 243.29v80.23l-90.12 30.04A31.974 31.974 0 0 0 0 383.91v96c0 10.82 8.52 32 32 32 2.69 0 5.41-.34 8.06-1.03l179.19-46.62C269.16 449.99 304 403.8 304 351.91v-128c0-17.6-14.4-32-32-32zm346.12 161.73L528 323.6v-80.23c0-18.98-5.56-37.39-16.12-53.23L394.62 14.25c-.18-.27-.59-.24-.79-.48-9.58-13.51-27.85-17.88-42.3-9.21-15.16 9.09-20.06 28.75-10.97 43.91l77.75 129.59c8.97 14.92 13.69 32 13.69 49.39V304c0 8.84-7.16 16-16 16s-16-7.16-16-16v-80c0-17.6-14.4-32-32-32s-32 14.4-32 32v128c0 51.89 34.84 98.08 84.75 112.34l179.19 46.62c2.66.69 5.38 1.03 8.06 1.03 23.48 0 32-21.18 32-32v-96c0-13.77-8.81-25.99-21.88-30.35z"]
    };
    exports.faPrayingHands = faPrayingHands;
    var faPrescription = {
      prefix: 'fas',
      iconName: 'prescription',
      icon: [384, 512, [], "f5b1", "M301.26 352l78.06-78.06c6.25-6.25 6.25-16.38 0-22.63l-22.63-22.63c-6.25-6.25-16.38-6.25-22.63 0L256 306.74l-83.96-83.96C219.31 216.8 256 176.89 256 128c0-53.02-42.98-96-96-96H16C7.16 32 0 39.16 0 48v256c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-80h18.75l128 128-78.06 78.06c-6.25 6.25-6.25 16.38 0 22.63l22.63 22.63c6.25 6.25 16.38 6.25 22.63 0L256 397.25l78.06 78.06c6.25 6.25 16.38 6.25 22.63 0l22.63-22.63c6.25-6.25 6.25-16.38 0-22.63L301.26 352zM64 96h96c17.64 0 32 14.36 32 32s-14.36 32-32 32H64V96z"]
    };
    exports.faPrescription = faPrescription;
    var faPrescriptionBottle = {
      prefix: 'fas',
      iconName: 'prescription-bottle',
      icon: [384, 512, [], "f485", "M32 192h120c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H32v64h120c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H32v64h120c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H32v64c0 17.6 14.4 32 32 32h256c17.6 0 32-14.4 32-32V128H32v64zM360 0H24C10.8 0 0 10.8 0 24v48c0 13.2 10.8 24 24 24h336c13.2 0 24-10.8 24-24V24c0-13.2-10.8-24-24-24z"]
    };
    exports.faPrescriptionBottle = faPrescriptionBottle;
    var faPrescriptionBottleAlt = {
      prefix: 'fas',
      iconName: 'prescription-bottle-alt',
      icon: [384, 512, [], "f486", "M360 0H24C10.8 0 0 10.8 0 24v48c0 13.2 10.8 24 24 24h336c13.2 0 24-10.8 24-24V24c0-13.2-10.8-24-24-24zM32 480c0 17.6 14.4 32 32 32h256c17.6 0 32-14.4 32-32V128H32v352zm64-184c0-4.4 3.6-8 8-8h56v-56c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v56h56c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8h-56v56c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-56h-56c-4.4 0-8-3.6-8-8v-48z"]
    };
    exports.faPrescriptionBottleAlt = faPrescriptionBottleAlt;
    var faPrint = {
      prefix: 'fas',
      iconName: 'print',
      icon: [512, 512, [], "f02f", "M448 192V77.25c0-8.49-3.37-16.62-9.37-22.63L393.37 9.37c-6-6-14.14-9.37-22.63-9.37H96C78.33 0 64 14.33 64 32v160c-35.35 0-64 28.65-64 64v112c0 8.84 7.16 16 16 16h48v96c0 17.67 14.33 32 32 32h320c17.67 0 32-14.33 32-32v-96h48c8.84 0 16-7.16 16-16V256c0-35.35-28.65-64-64-64zm-64 256H128v-96h256v96zm0-224H128V64h192v48c0 8.84 7.16 16 16 16h48v96zm48 72c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z"]
    };
    exports.faPrint = faPrint;
    var faProcedures = {
      prefix: 'fas',
      iconName: 'procedures',
      icon: [640, 512, [], "f487", "M528 224H272c-8.8 0-16 7.2-16 16v144H64V144c0-8.8-7.2-16-16-16H16c-8.8 0-16 7.2-16 16v352c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-48h512v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V336c0-61.9-50.1-112-112-112zM136 96h126.1l27.6 55.2c5.9 11.8 22.7 11.8 28.6 0L368 51.8 390.1 96H512c8.8 0 16-7.2 16-16s-7.2-16-16-16H409.9L382.3 8.8C376.4-3 359.6-3 353.7 8.8L304 108.2l-19.9-39.8c-1.4-2.7-4.1-4.4-7.2-4.4H136c-4.4 0-8 3.6-8 8v16c0 4.4 3.6 8 8 8zm24 256c35.3 0 64-28.7 64-64s-28.7-64-64-64-64 28.7-64 64 28.7 64 64 64z"]
    };
    exports.faProcedures = faProcedures;
    var faProjectDiagram = {
      prefix: 'fas',
      iconName: 'project-diagram',
      icon: [640, 512, [], "f542", "M384 320H256c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h128c17.67 0 32-14.33 32-32V352c0-17.67-14.33-32-32-32zM192 32c0-17.67-14.33-32-32-32H32C14.33 0 0 14.33 0 32v128c0 17.67 14.33 32 32 32h95.72l73.16 128.04C211.98 300.98 232.4 288 256 288h.28L192 175.51V128h224V64H192V32zM608 0H480c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h128c17.67 0 32-14.33 32-32V32c0-17.67-14.33-32-32-32z"]
    };
    exports.faProjectDiagram = faProjectDiagram;
    var faPumpMedical = {
      prefix: 'fas',
      iconName: 'pump-medical',
      icon: [384, 512, [], "e06a", "M235.51,159.82H84.24A64,64,0,0,0,20.51,218L.14,442a64,64,0,0,0,63.74,69.8h192A64,64,0,0,0,319.61,442L299.24,218A64,64,0,0,0,235.51,159.82Zm4.37,173.33a13.35,13.35,0,0,1-13.34,13.34h-40v40a13.33,13.33,0,0,1-13.33,13.33H146.54a13.33,13.33,0,0,1-13.33-13.33v-40h-40a13.34,13.34,0,0,1-13.33-13.34V306.49a13.33,13.33,0,0,1,13.33-13.34h40v-40a13.33,13.33,0,0,1,13.33-13.33h26.67a13.33,13.33,0,0,1,13.33,13.33v40h40a13.34,13.34,0,0,1,13.34,13.34ZM379.19,93.88,335.87,50.56a64,64,0,0,0-45.24-18.74H223.88a32,32,0,0,0-32-32h-64a32,32,0,0,0-32,32v96h128v-32h66.75l43.31,43.31a16,16,0,0,0,22.63,0l22.62-22.62A16,16,0,0,0,379.19,93.88Z"]
    };
    exports.faPumpMedical = faPumpMedical;
    var faPumpSoap = {
      prefix: 'fas',
      iconName: 'pump-soap',
      icon: [384, 512, [], "e06b", "M235.63,160H84.37a64,64,0,0,0-63.74,58.21L.27,442.21A64,64,0,0,0,64,512H256a64,64,0,0,0,63.74-69.79l-20.36-224A64,64,0,0,0,235.63,160ZM160,416c-33.12,0-60-26.33-60-58.75,0-25,35.7-75.47,52-97.27A10,10,0,0,1,168,260c16.33,21.8,52,72.27,52,97.27C220,389.67,193.12,416,160,416ZM379.31,94.06,336,50.74A64,64,0,0,0,290.75,32H224A32,32,0,0,0,192,0H128A32,32,0,0,0,96,32v96H224V96h66.75l43.31,43.31a16,16,0,0,0,22.63,0l22.62-22.62A16,16,0,0,0,379.31,94.06Z"]
    };
    exports.faPumpSoap = faPumpSoap;
    var faPuzzlePiece = {
      prefix: 'fas',
      iconName: 'puzzle-piece',
      icon: [576, 512, [], "f12e", "M519.442 288.651c-41.519 0-59.5 31.593-82.058 31.593C377.409 320.244 432 144 432 144s-196.288 80-196.288-3.297c0-35.827 36.288-46.25 36.288-85.985C272 19.216 243.885 0 210.539 0c-34.654 0-66.366 18.891-66.366 56.346 0 41.364 31.711 59.277 31.711 81.75C175.885 207.719 0 166.758 0 166.758v333.237s178.635 41.047 178.635-28.662c0-22.473-40-40.107-40-81.471 0-37.456 29.25-56.346 63.577-56.346 33.673 0 61.788 19.216 61.788 54.717 0 39.735-36.288 50.158-36.288 85.985 0 60.803 129.675 25.73 181.23 25.73 0 0-34.725-120.101 25.827-120.101 35.962 0 46.423 36.152 86.308 36.152C556.712 416 576 387.99 576 354.443c0-34.199-18.962-65.792-56.558-65.792z"]
    };
    exports.faPuzzlePiece = faPuzzlePiece;
    var faQrcode = {
      prefix: 'fas',
      iconName: 'qrcode',
      icon: [448, 512, [], "f029", "M0 224h192V32H0v192zM64 96h64v64H64V96zm192-64v192h192V32H256zm128 128h-64V96h64v64zM0 480h192V288H0v192zm64-128h64v64H64v-64zm352-64h32v128h-96v-32h-32v96h-64V288h96v32h64v-32zm0 160h32v32h-32v-32zm-64 0h32v32h-32v-32z"]
    };
    exports.faQrcode = faQrcode;
    var faQuestion = {
      prefix: 'fas',
      iconName: 'question',
      icon: [384, 512, [], "f128", "M202.021 0C122.202 0 70.503 32.703 29.914 91.026c-7.363 10.58-5.093 25.086 5.178 32.874l43.138 32.709c10.373 7.865 25.132 6.026 33.253-4.148 25.049-31.381 43.63-49.449 82.757-49.449 30.764 0 68.816 19.799 68.816 49.631 0 22.552-18.617 34.134-48.993 51.164-35.423 19.86-82.299 44.576-82.299 106.405V320c0 13.255 10.745 24 24 24h72.471c13.255 0 24-10.745 24-24v-5.773c0-42.86 125.268-44.645 125.268-160.627C377.504 66.256 286.902 0 202.021 0zM192 373.459c-38.196 0-69.271 31.075-69.271 69.271 0 38.195 31.075 69.27 69.271 69.27s69.271-31.075 69.271-69.271-31.075-69.27-69.271-69.27z"]
    };
    exports.faQuestion = faQuestion;
    var faQuestionCircle = {
      prefix: 'fas',
      iconName: 'question-circle',
      icon: [512, 512, [], "f059", "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z"]
    };
    exports.faQuestionCircle = faQuestionCircle;
    var faQuidditch = {
      prefix: 'fas',
      iconName: 'quidditch',
      icon: [640, 512, [], "f458", "M256.5 216.8L343.2 326s-16.6 102.4-76.6 150.1C206.7 523.8 0 510.2 0 510.2s3.8-23.1 11-55.4l94.6-112.2c4-4.7-.9-11.6-6.6-9.5l-60.4 22.1c14.4-41.7 32.7-80 54.6-97.5 59.9-47.8 163.3-40.9 163.3-40.9zm238 135c-44 0-79.8 35.8-79.8 79.9 0 44.1 35.7 79.9 79.8 79.9 44.1 0 79.8-35.8 79.8-79.9 0-44.2-35.8-79.9-79.8-79.9zM636.5 31L616.7 6c-5.5-6.9-15.5-8-22.4-2.6L361.8 181.3l-34.1-43c-5.1-6.4-15.1-5.2-18.6 2.2l-25.3 54.6 86.7 109.2 58.8-12.4c8-1.7 11.4-11.2 6.3-17.6l-34.1-42.9L634 53.5c6.9-5.5 8-15.6 2.5-22.5z"]
    };
    exports.faQuidditch = faQuidditch;
    var faQuoteLeft = {
      prefix: 'fas',
      iconName: 'quote-left',
      icon: [512, 512, [], "f10d", "M464 256h-80v-64c0-35.3 28.7-64 64-64h8c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24h-8c-88.4 0-160 71.6-160 160v240c0 26.5 21.5 48 48 48h128c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48zm-288 0H96v-64c0-35.3 28.7-64 64-64h8c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24h-8C71.6 32 0 103.6 0 192v240c0 26.5 21.5 48 48 48h128c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48z"]
    };
    exports.faQuoteLeft = faQuoteLeft;
    var faQuoteRight = {
      prefix: 'fas',
      iconName: 'quote-right',
      icon: [512, 512, [], "f10e", "M464 32H336c-26.5 0-48 21.5-48 48v128c0 26.5 21.5 48 48 48h80v64c0 35.3-28.7 64-64 64h-8c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24h8c88.4 0 160-71.6 160-160V80c0-26.5-21.5-48-48-48zm-288 0H48C21.5 32 0 53.5 0 80v128c0 26.5 21.5 48 48 48h80v64c0 35.3-28.7 64-64 64h-8c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24h8c88.4 0 160-71.6 160-160V80c0-26.5-21.5-48-48-48z"]
    };
    exports.faQuoteRight = faQuoteRight;
    var faQuran = {
      prefix: 'fas',
      iconName: 'quran',
      icon: [448, 512, [], "f687", "M448 358.4V25.6c0-16-9.6-25.6-25.6-25.6H96C41.6 0 0 41.6 0 96v320c0 54.4 41.6 96 96 96h326.4c12.8 0 25.6-9.6 25.6-25.6v-16c0-6.4-3.2-12.8-9.6-19.2-3.2-16-3.2-60.8 0-73.6 6.4-3.2 9.6-9.6 9.6-19.2zM301.08 145.82c.6-1.21 1.76-1.82 2.92-1.82s2.32.61 2.92 1.82l11.18 22.65 25 3.63c2.67.39 3.74 3.67 1.81 5.56l-18.09 17.63 4.27 24.89c.36 2.11-1.31 3.82-3.21 3.82-.5 0-1.02-.12-1.52-.38L304 211.87l-22.36 11.75c-.5.26-1.02.38-1.52.38-1.9 0-3.57-1.71-3.21-3.82l4.27-24.89-18.09-17.63c-1.94-1.89-.87-5.17 1.81-5.56l24.99-3.63 11.19-22.65zm-57.89-69.01c13.67 0 27.26 2.49 40.38 7.41a6.775 6.775 0 1 1-2.38 13.12c-.67 0-3.09-.21-4.13-.21-52.31 0-94.86 42.55-94.86 94.86 0 52.3 42.55 94.86 94.86 94.86 1.03 0 3.48-.21 4.13-.21 3.93 0 6.8 3.14 6.8 6.78 0 2.98-1.94 5.51-4.62 6.42-13.07 4.87-26.59 7.34-40.19 7.34C179.67 307.19 128 255.51 128 192c0-63.52 51.67-115.19 115.19-115.19zM380.8 448H96c-19.2 0-32-12.8-32-32s16-32 32-32h284.8v64z"]
    };
    exports.faQuran = faQuran;
    var faRadiation = {
      prefix: 'fas',
      iconName: 'radiation',
      icon: [496, 512, [], "f7b9", "M328.2 255.8h151.6c9.1 0 16.8-7.7 16.2-16.8-5.1-75.8-44.4-142.2-102.5-184.2-7.4-5.3-17.9-2.9-22.7 4.8L290.4 188c22.6 14.3 37.8 39.2 37.8 67.8zm-37.8 67.7c-12.3 7.7-26.8 12.4-42.4 12.4-15.6 0-30-4.7-42.4-12.4L125.2 452c-4.8 7.7-2.4 18.1 5.6 22.4C165.7 493.2 205.6 504 248 504s82.3-10.8 117.2-29.6c8-4.3 10.4-14.8 5.6-22.4l-80.4-128.5zM248 303.8c26.5 0 48-21.5 48-48s-21.5-48-48-48-48 21.5-48 48 21.5 48 48 48zm-231.8-48h151.6c0-28.6 15.2-53.5 37.8-67.7L125.2 59.7c-4.8-7.7-15.3-10.2-22.7-4.8C44.4 96.9 5.1 163.3 0 239.1c-.6 9 7.1 16.7 16.2 16.7z"]
    };
    exports.faRadiation = faRadiation;
    var faRadiationAlt = {
      prefix: 'fas',
      iconName: 'radiation-alt',
      icon: [496, 512, [], "f7ba", "M312 256h79.1c9.2 0 16.9-7.7 16-16.8-4.6-43.6-27-81.8-59.5-107.8-7.6-6.1-18.8-4.5-24 3.8L281.9 202c18 11.2 30.1 31.2 30.1 54zm-97.8 54.1L172.4 377c-4.9 7.8-2.4 18.4 5.8 22.5 21.1 10.4 44.7 16.5 69.8 16.5s48.7-6.1 69.9-16.5c8.2-4.1 10.6-14.7 5.8-22.5l-41.8-66.9c-9.8 6.2-21.4 9.9-33.8 9.9s-24.1-3.7-33.9-9.9zM104.9 256H184c0-22.8 12.1-42.8 30.2-54.1l-41.7-66.8c-5.2-8.3-16.4-9.9-24-3.8-32.6 26-54.9 64.2-59.5 107.8-1.1 9.2 6.7 16.9 15.9 16.9zM248 504c137 0 248-111 248-248S385 8 248 8 0 119 0 256s111 248 248 248zm0-432c101.5 0 184 82.5 184 184s-82.5 184-184 184S64 357.5 64 256 146.5 72 248 72zm0 216c17.7 0 32-14.3 32-32s-14.3-32-32-32-32 14.3-32 32 14.3 32 32 32z"]
    };
    exports.faRadiationAlt = faRadiationAlt;
    var faRainbow = {
      prefix: 'fas',
      iconName: 'rainbow',
      icon: [576, 512, [], "f75b", "M268.3 32.7C115.4 42.9 0 176.9 0 330.2V464c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V320C64 186.8 180.9 80.3 317.5 97.9 430.4 112.4 512 214 512 327.8V464c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V320c0-165.3-140-298.6-307.7-287.3zm-5.6 96.9C166 142 96 229.1 96 326.7V464c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V320c0-74.8 64.5-134.8 140.8-127.4 66.5 6.5 115.2 66.2 115.2 133.1V464c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V320c0-114.2-100.2-205.4-217.3-190.4zm6.2 96.3c-45.6 8.9-76.9 51.5-76.9 97.9V464c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V320c0-17.6 14.3-32 32-32s32 14.4 32 32v144c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V320c0-59.2-53.8-106-115.1-94.1z"]
    };
    exports.faRainbow = faRainbow;
    var faRandom = {
      prefix: 'fas',
      iconName: 'random',
      icon: [512, 512, [], "f074", "M504.971 359.029c9.373 9.373 9.373 24.569 0 33.941l-80 79.984c-15.01 15.01-40.971 4.49-40.971-16.971V416h-58.785a12.004 12.004 0 0 1-8.773-3.812l-70.556-75.596 53.333-57.143L352 336h32v-39.981c0-21.438 25.943-31.998 40.971-16.971l80 79.981zM12 176h84l52.781 56.551 53.333-57.143-70.556-75.596A11.999 11.999 0 0 0 122.785 96H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12zm372 0v39.984c0 21.46 25.961 31.98 40.971 16.971l80-79.984c9.373-9.373 9.373-24.569 0-33.941l-80-79.981C409.943 24.021 384 34.582 384 56.019V96h-58.785a12.004 12.004 0 0 0-8.773 3.812L96 336H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h110.785c3.326 0 6.503-1.381 8.773-3.812L352 176h32z"]
    };
    exports.faRandom = faRandom;
    var faReceipt = {
      prefix: 'fas',
      iconName: 'receipt',
      icon: [384, 512, [], "f543", "M358.4 3.2L320 48 265.6 3.2a15.9 15.9 0 0 0-19.2 0L192 48 137.6 3.2a15.9 15.9 0 0 0-19.2 0L64 48 25.6 3.2C15-4.7 0 2.8 0 16v480c0 13.2 15 20.7 25.6 12.8L64 464l54.4 44.8a15.9 15.9 0 0 0 19.2 0L192 464l54.4 44.8a15.9 15.9 0 0 0 19.2 0L320 464l38.4 44.8c10.5 7.9 25.6.4 25.6-12.8V16c0-13.2-15-20.7-25.6-12.8zM320 360c0 4.4-3.6 8-8 8H72c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h240c4.4 0 8 3.6 8 8v16zm0-96c0 4.4-3.6 8-8 8H72c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h240c4.4 0 8 3.6 8 8v16zm0-96c0 4.4-3.6 8-8 8H72c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h240c4.4 0 8 3.6 8 8v16z"]
    };
    exports.faReceipt = faReceipt;
    var faRecordVinyl = {
      prefix: 'fas',
      iconName: 'record-vinyl',
      icon: [512, 512, [], "f8d9", "M256 152a104 104 0 1 0 104 104 104 104 0 0 0-104-104zm0 128a24 24 0 1 1 24-24 24 24 0 0 1-24 24zm0-272C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 376a128 128 0 1 1 128-128 128 128 0 0 1-128 128z"]
    };
    exports.faRecordVinyl = faRecordVinyl;
    var faRecycle = {
      prefix: 'fas',
      iconName: 'recycle',
      icon: [512, 512, [], "f1b8", "M184.561 261.903c3.232 13.997-12.123 24.635-24.068 17.168l-40.736-25.455-50.867 81.402C55.606 356.273 70.96 384 96.012 384H148c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12H96.115c-75.334 0-121.302-83.048-81.408-146.88l50.822-81.388-40.725-25.448c-12.081-7.547-8.966-25.961 4.879-29.158l110.237-25.45c8.611-1.988 17.201 3.381 19.189 11.99l25.452 110.237zm98.561-182.915l41.289 66.076-40.74 25.457c-12.051 7.528-9 25.953 4.879 29.158l110.237 25.45c8.672 1.999 17.215-3.438 19.189-11.99l25.45-110.237c3.197-13.844-11.99-24.719-24.068-17.168l-40.687 25.424-41.263-66.082c-37.521-60.033-125.209-60.171-162.816 0l-17.963 28.766c-3.51 5.62-1.8 13.021 3.82 16.533l33.919 21.195c5.62 3.512 13.024 1.803 16.536-3.817l17.961-28.743c12.712-20.341 41.973-19.676 54.257-.022zM497.288 301.12l-27.515-44.065c-3.511-5.623-10.916-7.334-16.538-3.821l-33.861 21.159c-5.62 3.512-7.33 10.915-3.818 16.536l27.564 44.112c13.257 21.211-2.057 48.96-27.136 48.96H320V336.02c0-14.213-17.242-21.383-27.313-11.313l-80 79.981c-6.249 6.248-6.249 16.379 0 22.627l80 79.989C302.689 517.308 320 510.3 320 495.989V448h95.88c75.274 0 121.335-82.997 81.408-146.88z"]
    };
    exports.faRecycle = faRecycle;
    var faRedo = {
      prefix: 'fas',
      iconName: 'redo',
      icon: [512, 512, [], "f01e", "M500.33 0h-47.41a12 12 0 0 0-12 12.57l4 82.76A247.42 247.42 0 0 0 256 8C119.34 8 7.9 119.53 8 256.19 8.1 393.07 119.1 504 256 504a247.1 247.1 0 0 0 166.18-63.91 12 12 0 0 0 .48-17.43l-34-34a12 12 0 0 0-16.38-.55A176 176 0 1 1 402.1 157.8l-101.53-4.87a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12h200.33a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12z"]
    };
    exports.faRedo = faRedo;
    var faRedoAlt = {
      prefix: 'fas',
      iconName: 'redo-alt',
      icon: [512, 512, [], "f2f9", "M256.455 8c66.269.119 126.437 26.233 170.859 68.685l35.715-35.715C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.75c-30.864-28.899-70.801-44.907-113.23-45.273-92.398-.798-170.283 73.977-169.484 169.442C88.764 348.009 162.184 424 256 424c41.127 0 79.997-14.678 110.629-41.556 4.743-4.161 11.906-3.908 16.368.553l39.662 39.662c4.872 4.872 4.631 12.815-.482 17.433C378.202 479.813 319.926 504 256 504 119.034 504 8.001 392.967 8 256.002 7.999 119.193 119.646 7.755 256.455 8z"]
    };
    exports.faRedoAlt = faRedoAlt;
    var faRegistered = {
      prefix: 'fas',
      iconName: 'registered',
      icon: [512, 512, [], "f25d", "M285.363 207.475c0 18.6-9.831 28.431-28.431 28.431h-29.876v-56.14h23.378c28.668 0 34.929 8.773 34.929 27.709zM504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM363.411 360.414c-46.729-84.825-43.299-78.636-44.702-80.98 23.432-15.172 37.945-42.979 37.945-74.486 0-54.244-31.5-89.252-105.498-89.252h-70.667c-13.255 0-24 10.745-24 24V372c0 13.255 10.745 24 24 24h22.567c13.255 0 24-10.745 24-24v-71.663h25.556l44.129 82.937a24.001 24.001 0 0 0 21.188 12.727h24.464c18.261-.001 29.829-19.591 21.018-35.587z"]
    };
    exports.faRegistered = faRegistered;
    var faRemoveFormat = {
      prefix: 'fas',
      iconName: 'remove-format',
      icon: [640, 512, [], "f87d", "M336 416h-11.17l9.26-27.77L267 336.4 240.49 416H208a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm297.82 42.1L377 259.59 426.17 112H544v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16H176a16 16 0 0 0-16 16v43.9L45.46 3.38A16 16 0 0 0 23 6.19L3.37 31.46a16 16 0 0 0 2.81 22.45l588.36 454.72a16 16 0 0 0 22.46-2.81l19.64-25.27a16 16 0 0 0-2.82-22.45zM309.91 207.76L224 141.36V112h117.83z"]
    };
    exports.faRemoveFormat = faRemoveFormat;
    var faReply = {
      prefix: 'fas',
      iconName: 'reply',
      icon: [512, 512, [], "f3e5", "M8.309 189.836L184.313 37.851C199.719 24.546 224 35.347 224 56.015v80.053c160.629 1.839 288 34.032 288 186.258 0 61.441-39.581 122.309-83.333 154.132-13.653 9.931-33.111-2.533-28.077-18.631 45.344-145.012-21.507-183.51-176.59-185.742V360c0 20.7-24.3 31.453-39.687 18.164l-176.004-152c-11.071-9.562-11.086-26.753 0-36.328z"]
    };
    exports.faReply = faReply;
    var faReplyAll = {
      prefix: 'fas',
      iconName: 'reply-all',
      icon: [576, 512, [], "f122", "M136.309 189.836L312.313 37.851C327.72 24.546 352 35.348 352 56.015v82.763c129.182 10.231 224 52.212 224 183.548 0 61.441-39.582 122.309-83.333 154.132-13.653 9.931-33.111-2.533-28.077-18.631 38.512-123.162-3.922-169.482-112.59-182.015v84.175c0 20.701-24.3 31.453-39.687 18.164L136.309 226.164c-11.071-9.561-11.086-26.753 0-36.328zm-128 36.328L184.313 378.15C199.7 391.439 224 380.687 224 359.986v-15.818l-108.606-93.785A55.96 55.96 0 0 1 96 207.998a55.953 55.953 0 0 1 19.393-42.38L224 71.832V56.015c0-20.667-24.28-31.469-39.687-18.164L8.309 189.836c-11.086 9.575-11.071 26.767 0 36.328z"]
    };
    exports.faReplyAll = faReplyAll;
    var faRepublican = {
      prefix: 'fas',
      iconName: 'republican',
      icon: [640, 512, [], "f75e", "M544 192c0-88.4-71.6-160-160-160H160C71.6 32 0 103.6 0 192v64h544v-64zm-367.7-21.6l-19.8 19.3 4.7 27.3c.8 4.9-4.3 8.6-8.7 6.3L128 210.4l-24.5 12.9c-4.3 2.3-9.5-1.4-8.7-6.3l4.7-27.3-19.8-19.3c-3.6-3.5-1.6-9.5 3.3-10.2l27.4-4 12.2-24.8c2.2-4.5 8.6-4.4 10.7 0l12.2 24.8 27.4 4c5 .7 6.9 6.7 3.4 10.2zm144 0l-19.8 19.3 4.7 27.3c.8 4.9-4.3 8.6-8.7 6.3L272 210.4l-24.5 12.9c-4.3 2.3-9.5-1.4-8.7-6.3l4.7-27.3-19.8-19.3c-3.6-3.5-1.6-9.5 3.3-10.2l27.4-4 12.2-24.8c2.2-4.5 8.6-4.4 10.7 0l12.2 24.8 27.4 4c5 .7 6.9 6.7 3.4 10.2zm144 0l-19.8 19.3 4.7 27.3c.8 4.9-4.3 8.6-8.7 6.3L416 210.4l-24.5 12.9c-4.3 2.3-9.5-1.4-8.7-6.3l4.7-27.3-19.8-19.3c-3.6-3.5-1.6-9.5 3.3-10.2l27.4-4 12.2-24.8c2.2-4.5 8.6-4.4 10.7 0l12.2 24.8 27.4 4c5 .7 6.9 6.7 3.4 10.2zM624 320h-32c-8.8 0-16 7.2-16 16v64c0 8.8-7.2 16-16 16s-16-7.2-16-16V288H0v176c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16v-80h192v80c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16V352h32v43.3c0 41.8 30 80.1 71.6 84.3 47.8 4.9 88.4-32.7 88.4-79.6v-64c0-8.8-7.2-16-16-16z"]
    };
    exports.faRepublican = faRepublican;
    var faRestroom = {
      prefix: 'fas',
      iconName: 'restroom',
      icon: [640, 512, [], "f7bd", "M128 128c35.3 0 64-28.7 64-64S163.3 0 128 0 64 28.7 64 64s28.7 64 64 64zm384 0c35.3 0 64-28.7 64-64S547.3 0 512 0s-64 28.7-64 64 28.7 64 64 64zm127.3 226.5l-45.6-185.8c-3.3-13.5-15.5-23-29.8-24.2-15 9.7-32.8 15.5-52 15.5-19.2 0-37-5.8-52-15.5-14.3 1.2-26.5 10.7-29.8 24.2l-45.6 185.8C381 369.6 393 384 409.2 384H464v104c0 13.3 10.7 24 24 24h48c13.3 0 24-10.7 24-24V384h54.8c16.2 0 28.2-14.4 24.5-29.5zM336 0h-32c-8.8 0-16 7.2-16 16v480c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V16c0-8.8-7.2-16-16-16zM180.1 144.4c-15 9.8-32.9 15.6-52.1 15.6-19.2 0-37.1-5.8-52.1-15.6C51.3 146.5 32 166.9 32 192v136c0 13.3 10.7 24 24 24h8v136c0 13.3 10.7 24 24 24h80c13.3 0 24-10.7 24-24V352h8c13.3 0 24-10.7 24-24V192c0-25.1-19.3-45.5-43.9-47.6z"]
    };
    exports.faRestroom = faRestroom;
    var faRetweet = {
      prefix: 'fas',
      iconName: 'retweet',
      icon: [640, 512, [], "f079", "M629.657 343.598L528.971 444.284c-9.373 9.372-24.568 9.372-33.941 0L394.343 343.598c-9.373-9.373-9.373-24.569 0-33.941l10.823-10.823c9.562-9.562 25.133-9.34 34.419.492L480 342.118V160H292.451a24.005 24.005 0 0 1-16.971-7.029l-16-16C244.361 121.851 255.069 96 276.451 96H520c13.255 0 24 10.745 24 24v222.118l40.416-42.792c9.285-9.831 24.856-10.054 34.419-.492l10.823 10.823c9.372 9.372 9.372 24.569-.001 33.941zm-265.138 15.431A23.999 23.999 0 0 0 347.548 352H160V169.881l40.416 42.792c9.286 9.831 24.856 10.054 34.419.491l10.822-10.822c9.373-9.373 9.373-24.569 0-33.941L144.971 67.716c-9.373-9.373-24.569-9.373-33.941 0L10.343 168.402c-9.373 9.373-9.373 24.569 0 33.941l10.822 10.822c9.562 9.562 25.133 9.34 34.419-.491L96 169.881V392c0 13.255 10.745 24 24 24h243.549c21.382 0 32.09-25.851 16.971-40.971l-16.001-16z"]
    };
    exports.faRetweet = faRetweet;
    var faRibbon = {
      prefix: 'fas',
      iconName: 'ribbon',
      icon: [448, 512, [], "f4d6", "M6.1 444.3c-9.6 10.8-7.5 27.6 4.5 35.7l68.8 27.9c9.9 6.7 23.3 5 31.3-3.8l91.8-101.9-79.2-87.9-117.2 130zm435.8 0s-292-324.6-295.4-330.1c15.4-8.4 40.2-17.9 77.5-17.9s62.1 9.5 77.5 17.9c-3.3 5.6-56 64.6-56 64.6l79.1 87.7 34.2-38c28.7-31.9 33.3-78.6 11.4-115.5l-43.7-73.5c-4.3-7.2-9.9-13.3-16.8-18-40.7-27.6-127.4-29.7-171.4 0-6.9 4.7-12.5 10.8-16.8 18l-43.6 73.2c-1.5 2.5-37.1 62.2 11.5 116L337.5 504c8 8.9 21.4 10.5 31.3 3.8l68.8-27.9c11.9-8 14-24.8 4.3-35.6z"]
    };
    exports.faRibbon = faRibbon;
    var faRing = {
      prefix: 'fas',
      iconName: 'ring',
      icon: [512, 512, [], "f70b", "M256 64C110.06 64 0 125.91 0 208v98.13C0 384.48 114.62 448 256 448s256-63.52 256-141.87V208c0-82.09-110.06-144-256-144zm0 64c106.04 0 192 35.82 192 80 0 9.26-3.97 18.12-10.91 26.39C392.15 208.21 328.23 192 256 192s-136.15 16.21-181.09 42.39C67.97 226.12 64 217.26 64 208c0-44.18 85.96-80 192-80zM120.43 264.64C155.04 249.93 201.64 240 256 240s100.96 9.93 135.57 24.64C356.84 279.07 308.93 288 256 288s-100.84-8.93-135.57-23.36z"]
    };
    exports.faRing = faRing;
    var faRoad = {
      prefix: 'fas',
      iconName: 'road',
      icon: [576, 512, [], "f018", "M573.19 402.67l-139.79-320C428.43 71.29 417.6 64 405.68 64h-97.59l2.45 23.16c.5 4.72-3.21 8.84-7.96 8.84h-29.16c-4.75 0-8.46-4.12-7.96-8.84L267.91 64h-97.59c-11.93 0-22.76 7.29-27.73 18.67L2.8 402.67C-6.45 423.86 8.31 448 30.54 448h196.84l10.31-97.68c.86-8.14 7.72-14.32 15.91-14.32h68.8c8.19 0 15.05 6.18 15.91 14.32L348.62 448h196.84c22.23 0 36.99-24.14 27.73-45.33zM260.4 135.16a8 8 0 0 1 7.96-7.16h39.29c4.09 0 7.53 3.09 7.96 7.16l4.6 43.58c.75 7.09-4.81 13.26-11.93 13.26h-40.54c-7.13 0-12.68-6.17-11.93-13.26l4.59-43.58zM315.64 304h-55.29c-9.5 0-16.91-8.23-15.91-17.68l5.07-48c.86-8.14 7.72-14.32 15.91-14.32h45.15c8.19 0 15.05 6.18 15.91 14.32l5.07 48c1 9.45-6.41 17.68-15.91 17.68z"]
    };
    exports.faRoad = faRoad;
    var faRobot = {
      prefix: 'fas',
      iconName: 'robot',
      icon: [640, 512, [], "f544", "M32,224H64V416H32A31.96166,31.96166,0,0,1,0,384V256A31.96166,31.96166,0,0,1,32,224Zm512-48V448a64.06328,64.06328,0,0,1-64,64H160a64.06328,64.06328,0,0,1-64-64V176a79.974,79.974,0,0,1,80-80H288V32a32,32,0,0,1,64,0V96H464A79.974,79.974,0,0,1,544,176ZM264,256a40,40,0,1,0-40,40A39.997,39.997,0,0,0,264,256Zm-8,128H192v32h64Zm96,0H288v32h64ZM456,256a40,40,0,1,0-40,40A39.997,39.997,0,0,0,456,256Zm-8,128H384v32h64ZM640,256V384a31.96166,31.96166,0,0,1-32,32H576V224h32A31.96166,31.96166,0,0,1,640,256Z"]
    };
    exports.faRobot = faRobot;
    var faRocket = {
      prefix: 'fas',
      iconName: 'rocket',
      icon: [512, 512, [], "f135", "M505.12019,19.09375c-1.18945-5.53125-6.65819-11-12.207-12.1875C460.716,0,435.507,0,410.40747,0,307.17523,0,245.26909,55.20312,199.05238,128H94.83772c-16.34763.01562-35.55658,11.875-42.88664,26.48438L2.51562,253.29688A28.4,28.4,0,0,0,0,264a24.00867,24.00867,0,0,0,24.00582,24H127.81618l-22.47457,22.46875c-11.36521,11.36133-12.99607,32.25781,0,45.25L156.24582,406.625c11.15623,11.1875,32.15619,13.15625,45.27726,0l22.47457-22.46875V488a24.00867,24.00867,0,0,0,24.00581,24,28.55934,28.55934,0,0,0,10.707-2.51562l98.72834-49.39063c14.62888-7.29687,26.50776-26.5,26.50776-42.85937V312.79688c72.59753-46.3125,128.03493-108.40626,128.03493-211.09376C512.07526,76.5,512.07526,51.29688,505.12019,19.09375ZM384.04033,168A40,40,0,1,1,424.05,128,40.02322,40.02322,0,0,1,384.04033,168Z"]
    };
    exports.faRocket = faRocket;
    var faRoute = {
      prefix: 'fas',
      iconName: 'route',
      icon: [512, 512, [], "f4d7", "M416 320h-96c-17.6 0-32-14.4-32-32s14.4-32 32-32h96s96-107 96-160-43-96-96-96-96 43-96 96c0 25.5 22.2 63.4 45.3 96H320c-52.9 0-96 43.1-96 96s43.1 96 96 96h96c17.6 0 32 14.4 32 32s-14.4 32-32 32H185.5c-16 24.8-33.8 47.7-47.3 64H416c52.9 0 96-43.1 96-96s-43.1-96-96-96zm0-256c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zM96 256c-53 0-96 43-96 96s96 160 96 160 96-107 96-160-43-96-96-96zm0 128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faRoute = faRoute;
    var faRss = {
      prefix: 'fas',
      iconName: 'rss',
      icon: [448, 512, [], "f09e", "M128.081 415.959c0 35.369-28.672 64.041-64.041 64.041S0 451.328 0 415.959s28.672-64.041 64.041-64.041 64.04 28.673 64.04 64.041zm175.66 47.25c-8.354-154.6-132.185-278.587-286.95-286.95C7.656 175.765 0 183.105 0 192.253v48.069c0 8.415 6.49 15.472 14.887 16.018 111.832 7.284 201.473 96.702 208.772 208.772.547 8.397 7.604 14.887 16.018 14.887h48.069c9.149.001 16.489-7.655 15.995-16.79zm144.249.288C439.596 229.677 251.465 40.445 16.503 32.01 7.473 31.686 0 38.981 0 48.016v48.068c0 8.625 6.835 15.645 15.453 15.999 191.179 7.839 344.627 161.316 352.465 352.465.353 8.618 7.373 15.453 15.999 15.453h48.068c9.034-.001 16.329-7.474 16.005-16.504z"]
    };
    exports.faRss = faRss;
    var faRssSquare = {
      prefix: 'fas',
      iconName: 'rss-square',
      icon: [448, 512, [], "f143", "M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM112 416c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48zm157.533 0h-34.335c-6.011 0-11.051-4.636-11.442-10.634-5.214-80.05-69.243-143.92-149.123-149.123-5.997-.39-10.633-5.431-10.633-11.441v-34.335c0-6.535 5.468-11.777 11.994-11.425 110.546 5.974 198.997 94.536 204.964 204.964.352 6.526-4.89 11.994-11.425 11.994zm103.027 0h-34.334c-6.161 0-11.175-4.882-11.427-11.038-5.598-136.535-115.204-246.161-251.76-251.76C68.882 152.949 64 147.935 64 141.774V107.44c0-6.454 5.338-11.664 11.787-11.432 167.83 6.025 302.21 141.191 308.205 308.205.232 6.449-4.978 11.787-11.432 11.787z"]
    };
    exports.faRssSquare = faRssSquare;
    var faRubleSign = {
      prefix: 'fas',
      iconName: 'ruble-sign',
      icon: [384, 512, [], "f158", "M239.36 320C324.48 320 384 260.542 384 175.071S324.48 32 239.36 32H76c-6.627 0-12 5.373-12 12v206.632H12c-6.627 0-12 5.373-12 12V308c0 6.627 5.373 12 12 12h52v32H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v52c0 6.627 5.373 12 12 12h58.56c6.627 0 12-5.373 12-12v-52H308c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12H146.56v-32h92.8zm-92.8-219.252h78.72c46.72 0 74.88 29.11 74.88 74.323 0 45.832-28.16 75.561-76.16 75.561h-77.44V100.748z"]
    };
    exports.faRubleSign = faRubleSign;
    var faRuler = {
      prefix: 'fas',
      iconName: 'ruler',
      icon: [640, 512, [], "f545", "M635.7 167.2L556.1 31.7c-8.8-15-28.3-20.1-43.5-11.5l-69 39.1L503.3 161c2.2 3.8.9 8.5-2.9 10.7l-13.8 7.8c-3.8 2.2-8.7.9-10.9-2.9L416 75l-55.2 31.3 27.9 47.4c2.2 3.8.9 8.5-2.9 10.7l-13.8 7.8c-3.8 2.2-8.7.9-10.9-2.9L333.2 122 278 153.3 337.8 255c2.2 3.7.9 8.5-2.9 10.7l-13.8 7.8c-3.8 2.2-8.7.9-10.9-2.9l-59.7-101.7-55.2 31.3 27.9 47.4c2.2 3.8.9 8.5-2.9 10.7l-13.8 7.8c-3.8 2.2-8.7.9-10.9-2.9l-27.9-47.5-55.2 31.3 59.7 101.7c2.2 3.7.9 8.5-2.9 10.7l-13.8 7.8c-3.8 2.2-8.7.9-10.9-2.9L84.9 262.9l-69 39.1C.7 310.7-4.6 329.8 4.2 344.8l79.6 135.6c8.8 15 28.3 20.1 43.5 11.5L624.1 210c15.2-8.6 20.4-27.8 11.6-42.8z"]
    };
    exports.faRuler = faRuler;
    var faRulerCombined = {
      prefix: 'fas',
      iconName: 'ruler-combined',
      icon: [512, 512, [], "f546", "M160 288h-56c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h56v-64h-56c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h56V96h-56c-4.42 0-8-3.58-8-8V72c0-4.42 3.58-8 8-8h56V32c0-17.67-14.33-32-32-32H32C14.33 0 0 14.33 0 32v448c0 2.77.91 5.24 1.57 7.8L160 329.38V288zm320 64h-32v56c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8v-56h-64v56c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8v-56h-64v56c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8v-56h-41.37L24.2 510.43c2.56.66 5.04 1.57 7.8 1.57h448c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32z"]
    };
    exports.faRulerCombined = faRulerCombined;
    var faRulerHorizontal = {
      prefix: 'fas',
      iconName: 'ruler-horizontal',
      icon: [576, 512, [], "f547", "M544 128h-48v88c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8v-88h-64v88c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8v-88h-64v88c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8v-88h-64v88c0 4.42-3.58 8-8 8h-16c-4.42 0-8-3.58-8-8v-88h-64v88c0 4.42-3.58 8-8 8H88c-4.42 0-8-3.58-8-8v-88H32c-17.67 0-32 14.33-32 32v192c0 17.67 14.33 32 32 32h512c17.67 0 32-14.33 32-32V160c0-17.67-14.33-32-32-32z"]
    };
    exports.faRulerHorizontal = faRulerHorizontal;
    var faRulerVertical = {
      prefix: 'fas',
      iconName: 'ruler-vertical',
      icon: [256, 512, [], "f548", "M168 416c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h88v-64h-88c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h88v-64h-88c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h88v-64h-88c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h88V32c0-17.67-14.33-32-32-32H32C14.33 0 0 14.33 0 32v448c0 17.67 14.33 32 32 32h192c17.67 0 32-14.33 32-32v-64h-88z"]
    };
    exports.faRulerVertical = faRulerVertical;
    var faRunning = {
      prefix: 'fas',
      iconName: 'running',
      icon: [416, 512, [], "f70c", "M272 96c26.51 0 48-21.49 48-48S298.51 0 272 0s-48 21.49-48 48 21.49 48 48 48zM113.69 317.47l-14.8 34.52H32c-17.67 0-32 14.33-32 32s14.33 32 32 32h77.45c19.25 0 36.58-11.44 44.11-29.09l8.79-20.52-10.67-6.3c-17.32-10.23-30.06-25.37-37.99-42.61zM384 223.99h-44.03l-26.06-53.25c-12.5-25.55-35.45-44.23-61.78-50.94l-71.08-21.14c-28.3-6.8-57.77-.55-80.84 17.14l-39.67 30.41c-14.03 10.75-16.69 30.83-5.92 44.86s30.84 16.66 44.86 5.92l39.69-30.41c7.67-5.89 17.44-8 25.27-6.14l14.7 4.37-37.46 87.39c-12.62 29.48-1.31 64.01 26.3 80.31l84.98 50.17-27.47 87.73c-5.28 16.86 4.11 34.81 20.97 40.09 3.19 1 6.41 1.48 9.58 1.48 13.61 0 26.23-8.77 30.52-22.45l31.64-101.06c5.91-20.77-2.89-43.08-21.64-54.39l-61.24-36.14 31.31-78.28 20.27 41.43c8 16.34 24.92 26.89 43.11 26.89H384c17.67 0 32-14.33 32-32s-14.33-31.99-32-31.99z"]
    };
    exports.faRunning = faRunning;
    var faRupeeSign = {
      prefix: 'fas',
      iconName: 'rupee-sign',
      icon: [320, 512, [], "f156", "M308 96c6.627 0 12-5.373 12-12V44c0-6.627-5.373-12-12-12H12C5.373 32 0 37.373 0 44v44.748c0 6.627 5.373 12 12 12h85.28c27.308 0 48.261 9.958 60.97 27.252H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h158.757c-6.217 36.086-32.961 58.632-74.757 58.632H12c-6.627 0-12 5.373-12 12v53.012c0 3.349 1.4 6.546 3.861 8.818l165.052 152.356a12.001 12.001 0 0 0 8.139 3.182h82.562c10.924 0 16.166-13.408 8.139-20.818L116.871 319.906c76.499-2.34 131.144-53.395 138.318-127.906H308c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-58.69c-3.486-11.541-8.28-22.246-14.252-32H308z"]
    };
    exports.faRupeeSign = faRupeeSign;
    var faSadCry = {
      prefix: 'fas',
      iconName: 'sad-cry',
      icon: [496, 512, [], "f5b3", "M248 8C111 8 0 119 0 256c0 90.1 48.2 168.7 120 212.1V288c0-8.8 7.2-16 16-16s16 7.2 16 16v196.7c29.5 12.4 62 19.3 96 19.3s66.5-6.9 96-19.3V288c0-8.8 7.2-16 16-16s16 7.2 16 16v180.1C447.8 424.7 496 346 496 256 496 119 385 8 248 8zm-65.5 216.5c-14.8-13.2-46.2-13.2-61 0L112 233c-3.8 3.3-9.3 4-13.7 1.6-4.4-2.4-6.9-7.4-6.1-12.4 4-25.2 34.2-42.1 59.9-42.1S208 197 212 222.2c.8 5-1.7 10-6.1 12.4-5.8 3.1-11.2.7-13.7-1.6l-9.7-8.5zM248 416c-26.5 0-48-28.7-48-64s21.5-64 48-64 48 28.7 48 64-21.5 64-48 64zm149.8-181.5c-5.8 3.1-11.2.7-13.7-1.6l-9.5-8.5c-14.8-13.2-46.2-13.2-61 0L304 233c-3.8 3.3-9.3 4-13.7 1.6-4.4-2.4-6.9-7.4-6.1-12.4 4-25.2 34.2-42.1 59.9-42.1S400 197 404 222.2c.6 4.9-1.8 9.9-6.2 12.3z"]
    };
    exports.faSadCry = faSadCry;
    var faSadTear = {
      prefix: 'fas',
      iconName: 'sad-tear',
      icon: [496, 512, [], "f5b4", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm80 168c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zM152 416c-26.5 0-48-21-48-47 0-20 28.5-60.4 41.6-77.8 3.2-4.3 9.6-4.3 12.8 0C171.5 308.6 200 349 200 369c0 26-21.5 47-48 47zm16-176c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm170.2 154.2C315.8 367.4 282.9 352 248 352c-21.2 0-21.2-32 0-32 44.4 0 86.3 19.6 114.7 53.8 13.8 16.4-11.2 36.5-24.5 20.4z"]
    };
    exports.faSadTear = faSadTear;
    var faSatellite = {
      prefix: 'fas',
      iconName: 'satellite',
      icon: [512, 512, [], "f7bf", "M502.60969,310.04206l-96.70393,96.71625a31.88151,31.88151,0,0,1-45.00765,0L280.572,326.34115l-9.89231,9.90759a190.56343,190.56343,0,0,1-5.40716,168.52287c-4.50077,8.50115-16.39342,9.59505-23.20707,2.79725L134.54715,400.05428l-17.7999,17.79929c.70324,2.60972,1.60965,5.00067,1.60965,7.79793a32.00544,32.00544,0,1,1-32.00544-32.00434c2.79735,0,5.18838.90637,7.7982,1.60959l17.7999-17.79929L4.43129,269.94287c-6.798-6.81342-5.70409-18.6119,2.79735-23.20627a190.58161,190.58161,0,0,1,168.52864-5.407l9.79854-9.79821-80.31053-80.41716a32.002,32.002,0,0,1,0-45.09987L201.96474,9.29814A31.62639,31.62639,0,0,1,224.46868,0a31.99951,31.99951,0,0,1,22.59759,9.29814l80.32615,80.30777,47.805-47.89713a33.6075,33.6075,0,0,1,47.50808,0l47.50807,47.50645a33.63308,33.63308,0,0,1,0,47.50644l-47.805,47.89713L502.71908,265.036A31.78938,31.78938,0,0,1,502.60969,310.04206ZM219.56159,197.433l73.82505-73.82252-68.918-68.9-73.80942,73.80689Zm237.74352,90.106-68.90233-68.9156-73.825,73.82252,68.918,68.9Z"]
    };
    exports.faSatellite = faSatellite;
    var faSatelliteDish = {
      prefix: 'fas',
      iconName: 'satellite-dish',
      icon: [512, 512, [], "f7c0", "M305.44954,462.59c7.39157,7.29792,6.18829,20.09661-3.00038,25.00356-77.713,41.80281-176.72559,29.9105-242.34331-35.7082C-5.49624,386.28227-17.404,287.362,24.41381,209.554c4.89125-9.095,17.68975-10.29834,25.00318-3.00043L166.22872,323.36708l27.39411-27.39452c-.68759-2.60974-1.594-5.00071-1.594-7.81361a32.00407,32.00407,0,1,1,32.00407,32.00455c-2.79723,0-5.20378-.89075-7.79786-1.594l-27.40974,27.41015ZM511.9758,303.06732a16.10336,16.10336,0,0,1-16.002,17.00242H463.86031a15.96956,15.96956,0,0,1-15.89265-15.00213C440.46671,175.5492,336.45348,70.53427,207.03078,63.53328a15.84486,15.84486,0,0,1-15.00191-15.90852V16.02652A16.09389,16.09389,0,0,1,209.031.02425C372.25491,8.61922,503.47472,139.841,511.9758,303.06732Zm-96.01221-.29692a16.21093,16.21093,0,0,1-16.11142,17.29934H367.645a16.06862,16.06862,0,0,1-15.89265-14.70522c-6.90712-77.01094-68.118-138.91037-144.92467-145.22376a15.94,15.94,0,0,1-14.79876-15.89289V112.13393a16.134,16.134,0,0,1,17.29908-16.096C319.45132,104.5391,407.55627,192.64538,415.96359,302.7704Z"]
    };
    exports.faSatelliteDish = faSatelliteDish;
    var faSave = {
      prefix: 'fas',
      iconName: 'save',
      icon: [448, 512, [], "f0c7", "M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"]
    };
    exports.faSave = faSave;
    var faSchool = {
      prefix: 'fas',
      iconName: 'school',
      icon: [640, 512, [], "f549", "M0 224v272c0 8.84 7.16 16 16 16h80V192H32c-17.67 0-32 14.33-32 32zm360-48h-24v-40c0-4.42-3.58-8-8-8h-16c-4.42 0-8 3.58-8 8v64c0 4.42 3.58 8 8 8h48c4.42 0 8-3.58 8-8v-16c0-4.42-3.58-8-8-8zm137.75-63.96l-160-106.67a32.02 32.02 0 0 0-35.5 0l-160 106.67A32.002 32.002 0 0 0 128 138.66V512h128V368c0-8.84 7.16-16 16-16h96c8.84 0 16 7.16 16 16v144h128V138.67c0-10.7-5.35-20.7-14.25-26.63zM320 256c-44.18 0-80-35.82-80-80s35.82-80 80-80 80 35.82 80 80-35.82 80-80 80zm288-64h-64v320h80c8.84 0 16-7.16 16-16V224c0-17.67-14.33-32-32-32z"]
    };
    exports.faSchool = faSchool;
    var faScrewdriver = {
      prefix: 'fas',
      iconName: 'screwdriver',
      icon: [512, 512, [], "f54a", "M448 0L320 96v62.06l-83.03 83.03c6.79 4.25 13.27 9.06 19.07 14.87 5.8 5.8 10.62 12.28 14.87 19.07L353.94 192H416l96-128-64-64zM128 278.59L10.92 395.67c-14.55 14.55-14.55 38.15 0 52.71l52.7 52.7c14.56 14.56 38.15 14.56 52.71 0L233.41 384c29.11-29.11 29.11-76.3 0-105.41s-76.3-29.11-105.41 0z"]
    };
    exports.faScrewdriver = faScrewdriver;
    var faScroll = {
      prefix: 'fas',
      iconName: 'scroll',
      icon: [640, 512, [], "f70e", "M48 0C21.53 0 0 21.53 0 48v64c0 8.84 7.16 16 16 16h80V48C96 21.53 74.47 0 48 0zm208 412.57V352h288V96c0-52.94-43.06-96-96-96H111.59C121.74 13.41 128 29.92 128 48v368c0 38.87 34.65 69.65 74.75 63.12C234.22 474 256 444.46 256 412.57zM288 384v32c0 52.93-43.06 96-96 96h336c61.86 0 112-50.14 112-112 0-8.84-7.16-16-16-16H288z"]
    };
    exports.faScroll = faScroll;
    var faSdCard = {
      prefix: 'fas',
      iconName: 'sd-card',
      icon: [384, 512, [], "f7c2", "M320 0H128L0 128v320c0 35.3 28.7 64 64 64h256c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64zM160 160h-48V64h48v96zm80 0h-48V64h48v96zm80 0h-48V64h48v96z"]
    };
    exports.faSdCard = faSdCard;
    var faSearch = {
      prefix: 'fas',
      iconName: 'search',
      icon: [512, 512, [], "f002", "M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"]
    };
    exports.faSearch = faSearch;
    var faSearchDollar = {
      prefix: 'fas',
      iconName: 'search-dollar',
      icon: [512, 512, [], "f688", "M505.04 442.66l-99.71-99.69c-4.5-4.5-10.6-7-17-7h-16.3c27.6-35.3 44-79.69 44-127.99C416.03 93.09 322.92 0 208.02 0S0 93.09 0 207.98s93.11 207.98 208.02 207.98c48.3 0 92.71-16.4 128.01-44v16.3c0 6.4 2.5 12.5 7 17l99.71 99.69c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.59.1-33.99zm-297.02-90.7c-79.54 0-144-64.34-144-143.98 0-79.53 64.35-143.98 144-143.98 79.54 0 144 64.34 144 143.98 0 79.53-64.35 143.98-144 143.98zm27.11-152.54l-45.01-13.5c-5.16-1.55-8.77-6.78-8.77-12.73 0-7.27 5.3-13.19 11.8-13.19h28.11c4.56 0 8.96 1.29 12.82 3.72 3.24 2.03 7.36 1.91 10.13-.73l11.75-11.21c3.53-3.37 3.33-9.21-.57-12.14-9.1-6.83-20.08-10.77-31.37-11.35V112c0-4.42-3.58-8-8-8h-16c-4.42 0-8 3.58-8 8v16.12c-23.63.63-42.68 20.55-42.68 45.07 0 19.97 12.99 37.81 31.58 43.39l45.01 13.5c5.16 1.55 8.77 6.78 8.77 12.73 0 7.27-5.3 13.19-11.8 13.19h-28.1c-4.56 0-8.96-1.29-12.82-3.72-3.24-2.03-7.36-1.91-10.13.73l-11.75 11.21c-3.53 3.37-3.33 9.21.57 12.14 9.1 6.83 20.08 10.77 31.37 11.35V304c0 4.42 3.58 8 8 8h16c4.42 0 8-3.58 8-8v-16.12c23.63-.63 42.68-20.54 42.68-45.07 0-19.97-12.99-37.81-31.59-43.39z"]
    };
    exports.faSearchDollar = faSearchDollar;
    var faSearchLocation = {
      prefix: 'fas',
      iconName: 'search-location',
      icon: [512, 512, [], "f689", "M505.04 442.66l-99.71-99.69c-4.5-4.5-10.6-7-17-7h-16.3c27.6-35.3 44-79.69 44-127.99C416.03 93.09 322.92 0 208.02 0S0 93.09 0 207.98s93.11 207.98 208.02 207.98c48.3 0 92.71-16.4 128.01-44v16.3c0 6.4 2.5 12.5 7 17l99.71 99.69c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.59.1-33.99zm-297.02-90.7c-79.54 0-144-64.34-144-143.98 0-79.53 64.35-143.98 144-143.98 79.54 0 144 64.34 144 143.98 0 79.53-64.35 143.98-144 143.98zm.02-239.96c-40.78 0-73.84 33.05-73.84 73.83 0 32.96 48.26 93.05 66.75 114.86a9.24 9.24 0 0 0 14.18 0c18.49-21.81 66.75-81.89 66.75-114.86 0-40.78-33.06-73.83-73.84-73.83zm0 96c-13.26 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z"]
    };
    exports.faSearchLocation = faSearchLocation;
    var faSearchMinus = {
      prefix: 'fas',
      iconName: 'search-minus',
      icon: [512, 512, [], "f010", "M304 192v32c0 6.6-5.4 12-12 12H124c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12zm201 284.7L476.7 505c-9.4 9.4-24.6 9.4-33.9 0L343 405.3c-4.5-4.5-7-10.6-7-17V372c-35.3 27.6-79.7 44-128 44C93.1 416 0 322.9 0 208S93.1 0 208 0s208 93.1 208 208c0 48.3-16.4 92.7-44 128h16.3c6.4 0 12.5 2.5 17 7l99.7 99.7c9.3 9.4 9.3 24.6 0 34zM344 208c0-75.2-60.8-136-136-136S72 132.8 72 208s60.8 136 136 136 136-60.8 136-136z"]
    };
    exports.faSearchMinus = faSearchMinus;
    var faSearchPlus = {
      prefix: 'fas',
      iconName: 'search-plus',
      icon: [512, 512, [], "f00e", "M304 192v32c0 6.6-5.4 12-12 12h-56v56c0 6.6-5.4 12-12 12h-32c-6.6 0-12-5.4-12-12v-56h-56c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h56v-56c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v56h56c6.6 0 12 5.4 12 12zm201 284.7L476.7 505c-9.4 9.4-24.6 9.4-33.9 0L343 405.3c-4.5-4.5-7-10.6-7-17V372c-35.3 27.6-79.7 44-128 44C93.1 416 0 322.9 0 208S93.1 0 208 0s208 93.1 208 208c0 48.3-16.4 92.7-44 128h16.3c6.4 0 12.5 2.5 17 7l99.7 99.7c9.3 9.4 9.3 24.6 0 34zM344 208c0-75.2-60.8-136-136-136S72 132.8 72 208s60.8 136 136 136 136-60.8 136-136z"]
    };
    exports.faSearchPlus = faSearchPlus;
    var faSeedling = {
      prefix: 'fas',
      iconName: 'seedling',
      icon: [512, 512, [], "f4d8", "M64 96H0c0 123.7 100.3 224 224 224v144c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V320C288 196.3 187.7 96 64 96zm384-64c-84.2 0-157.4 46.5-195.7 115.2 27.7 30.2 48.2 66.9 59 107.6C424 243.1 512 147.9 512 32h-64z"]
    };
    exports.faSeedling = faSeedling;
    var faServer = {
      prefix: 'fas',
      iconName: 'server',
      icon: [512, 512, [], "f233", "M480 160H32c-17.673 0-32-14.327-32-32V64c0-17.673 14.327-32 32-32h448c17.673 0 32 14.327 32 32v64c0 17.673-14.327 32-32 32zm-48-88c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm-64 0c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm112 248H32c-17.673 0-32-14.327-32-32v-64c0-17.673 14.327-32 32-32h448c17.673 0 32 14.327 32 32v64c0 17.673-14.327 32-32 32zm-48-88c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm-64 0c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm112 248H32c-17.673 0-32-14.327-32-32v-64c0-17.673 14.327-32 32-32h448c17.673 0 32 14.327 32 32v64c0 17.673-14.327 32-32 32zm-48-88c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm-64 0c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24z"]
    };
    exports.faServer = faServer;
    var faShapes = {
      prefix: 'fas',
      iconName: 'shapes',
      icon: [512, 512, [], "f61f", "M128,256A128,128,0,1,0,256,384,128,128,0,0,0,128,256Zm379-54.86L400.07,18.29a37.26,37.26,0,0,0-64.14,0L229,201.14C214.76,225.52,232.58,256,261.09,256H474.91C503.42,256,521.24,225.52,507,201.14ZM480,288H320a32,32,0,0,0-32,32V480a32,32,0,0,0,32,32H480a32,32,0,0,0,32-32V320A32,32,0,0,0,480,288Z"]
    };
    exports.faShapes = faShapes;
    var faShare = {
      prefix: 'fas',
      iconName: 'share',
      icon: [512, 512, [], "f064", "M503.691 189.836L327.687 37.851C312.281 24.546 288 35.347 288 56.015v80.053C127.371 137.907 0 170.1 0 322.326c0 61.441 39.581 122.309 83.333 154.132 13.653 9.931 33.111-2.533 28.077-18.631C66.066 312.814 132.917 274.316 288 272.085V360c0 20.7 24.3 31.453 39.687 18.164l176.004-152c11.071-9.562 11.086-26.753 0-36.328z"]
    };
    exports.faShare = faShare;
    var faShareAlt = {
      prefix: 'fas',
      iconName: 'share-alt',
      icon: [448, 512, [], "f1e0", "M352 320c-22.608 0-43.387 7.819-59.79 20.895l-102.486-64.054a96.551 96.551 0 0 0 0-41.683l102.486-64.054C308.613 184.181 329.392 192 352 192c53.019 0 96-42.981 96-96S405.019 0 352 0s-96 42.981-96 96c0 7.158.79 14.13 2.276 20.841L155.79 180.895C139.387 167.819 118.608 160 96 160c-53.019 0-96 42.981-96 96s42.981 96 96 96c22.608 0 43.387-7.819 59.79-20.895l102.486 64.054A96.301 96.301 0 0 0 256 416c0 53.019 42.981 96 96 96s96-42.981 96-96-42.981-96-96-96z"]
    };
    exports.faShareAlt = faShareAlt;
    var faShareAltSquare = {
      prefix: 'fas',
      iconName: 'share-alt-square',
      icon: [448, 512, [], "f1e1", "M448 80v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48zM304 296c-14.562 0-27.823 5.561-37.783 14.671l-67.958-40.775a56.339 56.339 0 0 0 0-27.793l67.958-40.775C276.177 210.439 289.438 216 304 216c30.928 0 56-25.072 56-56s-25.072-56-56-56-56 25.072-56 56c0 4.797.605 9.453 1.74 13.897l-67.958 40.775C171.823 205.561 158.562 200 144 200c-30.928 0-56 25.072-56 56s25.072 56 56 56c14.562 0 27.823-5.561 37.783-14.671l67.958 40.775a56.088 56.088 0 0 0-1.74 13.897c0 30.928 25.072 56 56 56s56-25.072 56-56C360 321.072 334.928 296 304 296z"]
    };
    exports.faShareAltSquare = faShareAltSquare;
    var faShareSquare = {
      prefix: 'fas',
      iconName: 'share-square',
      icon: [576, 512, [], "f14d", "M568.482 177.448L424.479 313.433C409.3 327.768 384 317.14 384 295.985v-71.963c-144.575.97-205.566 35.113-164.775 171.353 4.483 14.973-12.846 26.567-25.006 17.33C155.252 383.105 120 326.488 120 269.339c0-143.937 117.599-172.5 264-173.312V24.012c0-21.174 25.317-31.768 40.479-17.448l144.003 135.988c10.02 9.463 10.028 25.425 0 34.896zM384 379.128V448H64V128h50.916a11.99 11.99 0 0 0 8.648-3.693c14.953-15.568 32.237-27.89 51.014-37.676C185.708 80.83 181.584 64 169.033 64H48C21.49 64 0 85.49 0 112v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48v-88.806c0-8.288-8.197-14.066-16.011-11.302a71.83 71.83 0 0 1-34.189 3.377c-7.27-1.046-13.8 4.514-13.8 11.859z"]
    };
    exports.faShareSquare = faShareSquare;
    var faShekelSign = {
      prefix: 'fas',
      iconName: 'shekel-sign',
      icon: [448, 512, [], "f20b", "M248 168v168c0 8.84 7.16 16 16 16h48c8.84 0 16-7.16 16-16V168c0-75.11-60.89-136-136-136H24C10.75 32 0 42.74 0 56v408c0 8.84 7.16 16 16 16h48c8.84 0 16-7.16 16-16V112h112c30.93 0 56 25.07 56 56zM432 32h-48c-8.84 0-16 7.16-16 16v296c0 30.93-25.07 56-56 56H200V176c0-8.84-7.16-16-16-16h-48c-8.84 0-16 7.16-16 16v280c0 13.25 10.75 24 24 24h168c75.11 0 136-60.89 136-136V48c0-8.84-7.16-16-16-16z"]
    };
    exports.faShekelSign = faShekelSign;
    var faShieldAlt = {
      prefix: 'fas',
      iconName: 'shield-alt',
      icon: [512, 512, [], "f3ed", "M466.5 83.7l-192-80a48.15 48.15 0 0 0-36.9 0l-192 80C27.7 91.1 16 108.6 16 128c0 198.5 114.5 335.7 221.5 380.3 11.8 4.9 25.1 4.9 36.9 0C360.1 472.6 496 349.3 496 128c0-19.4-11.7-36.9-29.5-44.3zM256.1 446.3l-.1-381 175.9 73.3c-3.3 151.4-82.1 261.1-175.8 307.7z"]
    };
    exports.faShieldAlt = faShieldAlt;
    var faShieldVirus = {
      prefix: 'fas',
      iconName: 'shield-virus',
      icon: [512, 512, [], "e06c", "M224,192a16,16,0,1,0,16,16A16,16,0,0,0,224,192ZM466.5,83.68l-192-80A57.4,57.4,0,0,0,256.05,0a57.4,57.4,0,0,0-18.46,3.67l-192,80A47.93,47.93,0,0,0,16,128C16,326.5,130.5,463.72,237.5,508.32a48.09,48.09,0,0,0,36.91,0C360.09,472.61,496,349.3,496,128A48,48,0,0,0,466.5,83.68ZM384,256H371.88c-28.51,0-42.79,34.47-22.63,54.63l8.58,8.57a16,16,0,1,1-22.63,22.63l-8.57-8.58C306.47,313.09,272,327.37,272,355.88V368a16,16,0,0,1-32,0V355.88c0-28.51-34.47-42.79-54.63-22.63l-8.57,8.58a16,16,0,0,1-22.63-22.63l8.58-8.57c20.16-20.16,5.88-54.63-22.63-54.63H128a16,16,0,0,1,0-32h12.12c28.51,0,42.79-34.47,22.63-54.63l-8.58-8.57a16,16,0,0,1,22.63-22.63l8.57,8.58c20.16,20.16,54.63,5.88,54.63-22.63V112a16,16,0,0,1,32,0v12.12c0,28.51,34.47,42.79,54.63,22.63l8.57-8.58a16,16,0,0,1,22.63,22.63l-8.58,8.57C329.09,189.53,343.37,224,371.88,224H384a16,16,0,0,1,0,32Zm-96,0a16,16,0,1,0,16,16A16,16,0,0,0,288,256Z"]
    };
    exports.faShieldVirus = faShieldVirus;
    var faShip = {
      prefix: 'fas',
      iconName: 'ship',
      icon: [640, 512, [], "f21a", "M496.616 372.639l70.012-70.012c16.899-16.9 9.942-45.771-12.836-53.092L512 236.102V96c0-17.673-14.327-32-32-32h-64V24c0-13.255-10.745-24-24-24H248c-13.255 0-24 10.745-24 24v40h-64c-17.673 0-32 14.327-32 32v140.102l-41.792 13.433c-22.753 7.313-29.754 36.173-12.836 53.092l70.012 70.012C125.828 416.287 85.587 448 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24 61.023 0 107.499-20.61 143.258-59.396C181.677 487.432 216.021 512 256 512h128c39.979 0 74.323-24.568 88.742-59.396C508.495 491.384 554.968 512 616 512c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24-60.817 0-101.542-31.001-119.384-75.361zM192 128h256v87.531l-118.208-37.995a31.995 31.995 0 0 0-19.584 0L192 215.531V128z"]
    };
    exports.faShip = faShip;
    var faShippingFast = {
      prefix: 'fas',
      iconName: 'shipping-fast',
      icon: [640, 512, [], "f48b", "M624 352h-16V243.9c0-12.7-5.1-24.9-14.1-33.9L494 110.1c-9-9-21.2-14.1-33.9-14.1H416V48c0-26.5-21.5-48-48-48H112C85.5 0 64 21.5 64 48v48H8c-4.4 0-8 3.6-8 8v16c0 4.4 3.6 8 8 8h272c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H40c-4.4 0-8 3.6-8 8v16c0 4.4 3.6 8 8 8h208c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H8c-4.4 0-8 3.6-8 8v16c0 4.4 3.6 8 8 8h208c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H64v128c0 53 43 96 96 96s96-43 96-96h128c0 53 43 96 96 96s96-43 96-96h48c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zM160 464c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm320 0c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm80-208H416V144h44.1l99.9 99.9V256z"]
    };
    exports.faShippingFast = faShippingFast;
    var faShoePrints = {
      prefix: 'fas',
      iconName: 'shoe-prints',
      icon: [640, 512, [], "f54b", "M192 160h32V32h-32c-35.35 0-64 28.65-64 64s28.65 64 64 64zM0 416c0 35.35 28.65 64 64 64h32V352H64c-35.35 0-64 28.65-64 64zm337.46-128c-34.91 0-76.16 13.12-104.73 32-24.79 16.38-44.52 32-104.73 32v128l57.53 15.97c26.21 7.28 53.01 13.12 80.31 15.05 32.69 2.31 65.6.67 97.58-6.2C472.9 481.3 512 429.22 512 384c0-64-84.18-96-174.54-96zM491.42 7.19C459.44.32 426.53-1.33 393.84.99c-27.3 1.93-54.1 7.77-80.31 15.04L256 32v128c60.2 0 79.94 15.62 104.73 32 28.57 18.88 69.82 32 104.73 32C555.82 224 640 192 640 128c0-45.22-39.1-97.3-148.58-120.81z"]
    };
    exports.faShoePrints = faShoePrints;
    var faShoppingBag = {
      prefix: 'fas',
      iconName: 'shopping-bag',
      icon: [448, 512, [], "f290", "M352 160v-32C352 57.42 294.579 0 224 0 153.42 0 96 57.42 96 128v32H0v272c0 44.183 35.817 80 80 80h288c44.183 0 80-35.817 80-80V160h-96zm-192-32c0-35.29 28.71-64 64-64s64 28.71 64 64v32H160v-32zm160 120c-13.255 0-24-10.745-24-24s10.745-24 24-24 24 10.745 24 24-10.745 24-24 24zm-192 0c-13.255 0-24-10.745-24-24s10.745-24 24-24 24 10.745 24 24-10.745 24-24 24z"]
    };
    exports.faShoppingBag = faShoppingBag;
    var faShoppingBasket = {
      prefix: 'fas',
      iconName: 'shopping-basket',
      icon: [576, 512, [], "f291", "M576 216v16c0 13.255-10.745 24-24 24h-8l-26.113 182.788C514.509 462.435 494.257 480 470.37 480H105.63c-23.887 0-44.139-17.565-47.518-41.212L32 256h-8c-13.255 0-24-10.745-24-24v-16c0-13.255 10.745-24 24-24h67.341l106.78-146.821c10.395-14.292 30.407-17.453 44.701-7.058 14.293 10.395 17.453 30.408 7.058 44.701L170.477 192h235.046L326.12 82.821c-10.395-14.292-7.234-34.306 7.059-44.701 14.291-10.395 34.306-7.235 44.701 7.058L484.659 192H552c13.255 0 24 10.745 24 24zM312 392V280c0-13.255-10.745-24-24-24s-24 10.745-24 24v112c0 13.255 10.745 24 24 24s24-10.745 24-24zm112 0V280c0-13.255-10.745-24-24-24s-24 10.745-24 24v112c0 13.255 10.745 24 24 24s24-10.745 24-24zm-224 0V280c0-13.255-10.745-24-24-24s-24 10.745-24 24v112c0 13.255 10.745 24 24 24s24-10.745 24-24z"]
    };
    exports.faShoppingBasket = faShoppingBasket;
    var faShoppingCart = {
      prefix: 'fas',
      iconName: 'shopping-cart',
      icon: [576, 512, [], "f07a", "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"]
    };
    exports.faShoppingCart = faShoppingCart;
    var faShower = {
      prefix: 'fas',
      iconName: 'shower',
      icon: [512, 512, [], "f2cc", "M304,320a16,16,0,1,0,16,16A16,16,0,0,0,304,320Zm32-96a16,16,0,1,0,16,16A16,16,0,0,0,336,224Zm32,64a16,16,0,1,0-16-16A16,16,0,0,0,368,288Zm-32,32a16,16,0,1,0-16-16A16,16,0,0,0,336,320Zm-32-64a16,16,0,1,0,16,16A16,16,0,0,0,304,256Zm128-32a16,16,0,1,0-16-16A16,16,0,0,0,432,224Zm-48,16a16,16,0,1,0,16-16A16,16,0,0,0,384,240Zm-16-48a16,16,0,1,0,16,16A16,16,0,0,0,368,192Zm96,32a16,16,0,1,0,16,16A16,16,0,0,0,464,224Zm32-32a16,16,0,1,0,16,16A16,16,0,0,0,496,192Zm-64,64a16,16,0,1,0,16,16A16,16,0,0,0,432,256Zm-32,32a16,16,0,1,0,16,16A16,16,0,0,0,400,288Zm-64,64a16,16,0,1,0,16,16A16,16,0,0,0,336,352Zm-32,32a16,16,0,1,0,16,16A16,16,0,0,0,304,384Zm64-64a16,16,0,1,0,16,16A16,16,0,0,0,368,320Zm21.65-218.35-11.3-11.31a16,16,0,0,0-22.63,0L350.05,96A111.19,111.19,0,0,0,272,64c-19.24,0-37.08,5.3-52.9,13.85l-10-10A121.72,121.72,0,0,0,123.44,32C55.49,31.5,0,92.91,0,160.85V464a16,16,0,0,0,16,16H48a16,16,0,0,0,16-16V158.4c0-30.15,21-58.2,51-61.93a58.38,58.38,0,0,1,48.93,16.67l10,10C165.3,138.92,160,156.76,160,176a111.23,111.23,0,0,0,32,78.05l-5.66,5.67a16,16,0,0,0,0,22.62l11.3,11.31a16,16,0,0,0,22.63,0L389.65,124.28A16,16,0,0,0,389.65,101.65Z"]
    };
    exports.faShower = faShower;
    var faShuttleVan = {
      prefix: 'fas',
      iconName: 'shuttle-van',
      icon: [640, 512, [], "f5b6", "M628.88 210.65L494.39 49.27A48.01 48.01 0 0 0 457.52 32H32C14.33 32 0 46.33 0 64v288c0 17.67 14.33 32 32 32h32c0 53.02 42.98 96 96 96s96-42.98 96-96h128c0 53.02 42.98 96 96 96s96-42.98 96-96h32c17.67 0 32-14.33 32-32V241.38c0-11.23-3.94-22.1-11.12-30.73zM64 192V96h96v96H64zm96 240c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48zm160-240h-96V96h96v96zm160 240c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48zm-96-240V96h66.02l80 96H384z"]
    };
    exports.faShuttleVan = faShuttleVan;
    var faSign = {
      prefix: 'fas',
      iconName: 'sign',
      icon: [512, 512, [], "f4d9", "M496 64H128V16c0-8.8-7.2-16-16-16H80c-8.8 0-16 7.2-16 16v48H16C7.2 64 0 71.2 0 80v32c0 8.8 7.2 16 16 16h48v368c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V128h368c8.8 0 16-7.2 16-16V80c0-8.8-7.2-16-16-16zM160 384h320V160H160v224z"]
    };
    exports.faSign = faSign;
    var faSignInAlt = {
      prefix: 'fas',
      iconName: 'sign-in-alt',
      icon: [512, 512, [], "f2f6", "M416 448h-84c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h84c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32h-84c-6.6 0-12-5.4-12-12V76c0-6.6 5.4-12 12-12h84c53 0 96 43 96 96v192c0 53-43 96-96 96zm-47-201L201 79c-15-15-41-4.5-41 17v96H24c-13.3 0-24 10.7-24 24v96c0 13.3 10.7 24 24 24h136v96c0 21.5 26 32 41 17l168-168c9.3-9.4 9.3-24.6 0-34z"]
    };
    exports.faSignInAlt = faSignInAlt;
    var faSignLanguage = {
      prefix: 'fas',
      iconName: 'sign-language',
      icon: [448, 512, [], "f2a7", "M91.434 483.987c-.307-16.018 13.109-29.129 29.13-29.129h62.293v-5.714H56.993c-16.021 0-29.437-13.111-29.13-29.129C28.16 404.491 40.835 392 56.428 392h126.429v-5.714H29.136c-16.021 0-29.437-13.111-29.13-29.129.297-15.522 12.973-28.013 28.566-28.013h154.286v-5.714H57.707c-16.021 0-29.437-13.111-29.13-29.129.297-15.522 12.973-28.013 28.566-28.013h168.566l-31.085-22.606c-12.762-9.281-15.583-27.149-6.302-39.912 9.281-12.761 27.15-15.582 39.912-6.302l123.361 89.715a34.287 34.287 0 0 1 14.12 27.728v141.136c0 15.91-10.946 29.73-26.433 33.374l-80.471 18.934a137.16 137.16 0 0 1-31.411 3.646H120c-15.593-.001-28.269-12.492-28.566-28.014zm73.249-225.701h36.423l-11.187-8.136c-18.579-13.511-20.313-40.887-3.17-56.536l-13.004-16.7c-9.843-12.641-28.43-15.171-40.88-5.088-12.065 9.771-14.133 27.447-4.553 39.75l36.371 46.71zm283.298-2.103l-5.003-152.452c-.518-15.771-13.722-28.136-29.493-27.619-15.773.518-28.137 13.722-27.619 29.493l1.262 38.415L283.565 11.019c-9.58-12.303-27.223-14.63-39.653-5.328-12.827 9.599-14.929 28.24-5.086 40.881l76.889 98.745-4.509 3.511-94.79-121.734c-9.58-12.303-27.223-14.63-39.653-5.328-12.827 9.599-14.929 28.24-5.086 40.881l94.443 121.288-4.509 3.511-77.675-99.754c-9.58-12.303-27.223-14.63-39.653-5.328-12.827 9.599-14.929 28.24-5.086 40.881l52.053 66.849c12.497-8.257 29.055-8.285 41.69.904l123.36 89.714c10.904 7.93 17.415 20.715 17.415 34.198v16.999l61.064-47.549a34.285 34.285 0 0 0 13.202-28.177z"]
    };
    exports.faSignLanguage = faSignLanguage;
    var faSignOutAlt = {
      prefix: 'fas',
      iconName: 'sign-out-alt',
      icon: [512, 512, [], "f2f5", "M497 273L329 441c-15 15-41 4.5-41-17v-96H152c-13.3 0-24-10.7-24-24v-96c0-13.3 10.7-24 24-24h136V88c0-21.4 25.9-32 41-17l168 168c9.3 9.4 9.3 24.6 0 34zM192 436v-40c0-6.6-5.4-12-12-12H96c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32h84c6.6 0 12-5.4 12-12V76c0-6.6-5.4-12-12-12H96c-53 0-96 43-96 96v192c0 53 43 96 96 96h84c6.6 0 12-5.4 12-12z"]
    };
    exports.faSignOutAlt = faSignOutAlt;
    var faSignal = {
      prefix: 'fas',
      iconName: 'signal',
      icon: [640, 512, [], "f012", "M216 288h-48c-8.84 0-16 7.16-16 16v192c0 8.84 7.16 16 16 16h48c8.84 0 16-7.16 16-16V304c0-8.84-7.16-16-16-16zM88 384H40c-8.84 0-16 7.16-16 16v96c0 8.84 7.16 16 16 16h48c8.84 0 16-7.16 16-16v-96c0-8.84-7.16-16-16-16zm256-192h-48c-8.84 0-16 7.16-16 16v288c0 8.84 7.16 16 16 16h48c8.84 0 16-7.16 16-16V208c0-8.84-7.16-16-16-16zm128-96h-48c-8.84 0-16 7.16-16 16v384c0 8.84 7.16 16 16 16h48c8.84 0 16-7.16 16-16V112c0-8.84-7.16-16-16-16zM600 0h-48c-8.84 0-16 7.16-16 16v480c0 8.84 7.16 16 16 16h48c8.84 0 16-7.16 16-16V16c0-8.84-7.16-16-16-16z"]
    };
    exports.faSignal = faSignal;
    var faSignature = {
      prefix: 'fas',
      iconName: 'signature',
      icon: [640, 512, [], "f5b7", "M623.2 192c-51.8 3.5-125.7 54.7-163.1 71.5-29.1 13.1-54.2 24.4-76.1 24.4-22.6 0-26-16.2-21.3-51.9 1.1-8 11.7-79.2-42.7-76.1-25.1 1.5-64.3 24.8-169.5 126L192 182.2c30.4-75.9-53.2-151.5-129.7-102.8L7.4 116.3C0 121-2.2 130.9 2.5 138.4l17.2 27c4.7 7.5 14.6 9.7 22.1 4.9l58-38.9c18.4-11.7 40.7 7.2 32.7 27.1L34.3 404.1C27.5 421 37 448 64 448c8.3 0 16.5-3.2 22.6-9.4 42.2-42.2 154.7-150.7 211.2-195.8-2.2 28.5-2.1 58.9 20.6 83.8 15.3 16.8 37.3 25.3 65.5 25.3 35.6 0 68-14.6 102.3-30 33-14.8 99-62.6 138.4-65.8 8.5-.7 15.2-7.3 15.2-15.8v-32.1c.2-9.1-7.5-16.8-16.6-16.2z"]
    };
    exports.faSignature = faSignature;
    var faSimCard = {
      prefix: 'fas',
      iconName: 'sim-card',
      icon: [384, 512, [], "f7c4", "M0 64v384c0 35.3 28.7 64 64 64h256c35.3 0 64-28.7 64-64V128L256 0H64C28.7 0 0 28.7 0 64zm224 192h-64v-64h64v64zm96 0h-64v-64h32c17.7 0 32 14.3 32 32v32zm-64 128h64v32c0 17.7-14.3 32-32 32h-32v-64zm-96 0h64v64h-64v-64zm-96 0h64v64H96c-17.7 0-32-14.3-32-32v-32zm0-96h256v64H64v-64zm0-64c0-17.7 14.3-32 32-32h32v64H64v-32z"]
    };
    exports.faSimCard = faSimCard;
    var faSink = {
      prefix: 'fas',
      iconName: 'sink',
      icon: [512, 512, [], "e06d", "M32,416a96,96,0,0,0,96,96H384a96,96,0,0,0,96-96V384H32ZM496,288H400V256h64a16,16,0,0,0,16-16V224a16,16,0,0,0-16-16H384a32,32,0,0,0-32,32v48H288V96a32,32,0,0,1,64,0v16a16,16,0,0,0,16,16h32a16,16,0,0,0,16-16V96A96.16,96.16,0,0,0,300.87,1.86C255.29,10.71,224,53.36,224,99.79V288H160V240a32,32,0,0,0-32-32H48a16,16,0,0,0-16,16v16a16,16,0,0,0,16,16h64v32H16A16,16,0,0,0,0,304v32a16,16,0,0,0,16,16H496a16,16,0,0,0,16-16V304A16,16,0,0,0,496,288Z"]
    };
    exports.faSink = faSink;
    var faSitemap = {
      prefix: 'fas',
      iconName: 'sitemap',
      icon: [640, 512, [], "f0e8", "M128 352H32c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32zm-24-80h192v48h48v-48h192v48h48v-57.59c0-21.17-17.23-38.41-38.41-38.41H344v-64h40c17.67 0 32-14.33 32-32V32c0-17.67-14.33-32-32-32H256c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h40v64H94.41C73.23 224 56 241.23 56 262.41V320h48v-48zm264 80h-96c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32zm240 0h-96c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32z"]
    };
    exports.faSitemap = faSitemap;
    var faSkating = {
      prefix: 'fas',
      iconName: 'skating',
      icon: [448, 512, [], "f7c5", "M400 0c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm0 448c-8.8 0-16 7.2-16 16s-7.2 16-16 16h-96c-8.8 0-16 7.2-16 16s7.2 16 16 16h96c26.5 0 48-21.5 48-48 0-8.8-7.2-16-16-16zm-282.2 8.6c-6.2 6.2-16.4 6.3-22.6 0l-67.9-67.9c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6l67.9 67.9c9.4 9.4 21.7 14 34 14s24.6-4.7 33.9-14c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.3-22.7 0zm56.1-179.8l-93.7 93.7c-12.5 12.5-12.5 32.8 0 45.2 6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4l91.9-91.9-30.2-30.2c-5-5-9.4-10.7-13.2-16.8zM128 160h105.5l-20.1 17.2c-13.5 11.5-21.6 28.4-22.3 46.1-.7 17.8 6.1 35.2 18.7 47.7l78.2 78.2V432c0 17.7 14.3 32 32 32s32-14.3 32-32v-89.4c0-12.6-5.1-25-14.1-33.9l-61-61c.5-.4 1.2-.6 1.7-1.1l82.3-82.3c11.5-11.5 14.9-28.6 8.7-43.6-6.2-15-20.7-24.7-37-24.7H128c-17.7 0-32 14.3-32 32s14.3 32 32 32z"]
    };
    exports.faSkating = faSkating;
    var faSkiing = {
      prefix: 'fas',
      iconName: 'skiing',
      icon: [512, 512, [], "f7c9", "M432 96c26.5 0 48-21.5 48-48S458.5 0 432 0s-48 21.5-48 48 21.5 48 48 48zm73 356.1c-9.4-9.4-24.6-9.4-33.9 0-12.1 12.1-30.5 15.4-45.1 8.7l-135.8-70.2 49.2-73.8c12.7-19 10.2-44.5-6-60.6L293 215.7l-107-53.1c-2.9 19.9 3.4 40 17.7 54.4l75.1 75.2-45.9 68.8L35 258.7c-11.7-6-26.2-1.5-32.3 10.3-6.1 11.8-1.5 26.3 10.3 32.3l391.9 202.5c11.9 5.5 24.5 8.1 37.1 8.1 23.2 0 46-9 63-26 9.3-9.3 9.3-24.5 0-33.8zM120 91.6l-11.5 22.5c14.4 7.3 31.2 4.9 42.8-4.8l47.2 23.4c-.1.1-.1.2-.2.3l114.5 56.8 32.4-13 6.4 19.1c4 12.1 12.6 22 24 27.7l58.1 29c15.9 7.9 35 1.5 42.9-14.3 7.9-15.8 1.5-35-14.3-42.9l-52.1-26.1-17.1-51.2c-8.1-24.2-40.9-56.6-84.5-39.2l-81.2 32.5-62.5-31c.3-14.5-7.2-28.6-20.9-35.6l-11.1 21.7h-.2l-34.4-7c-1.8-.4-3.7.2-5 1.7-1.9 2.2-1.7 5.5.5 7.4l26.2 23z"]
    };
    exports.faSkiing = faSkiing;
    var faSkiingNordic = {
      prefix: 'fas',
      iconName: 'skiing-nordic',
      icon: [576, 512, [], "f7ca", "M336 96c26.5 0 48-21.5 48-48S362.5 0 336 0s-48 21.5-48 48 21.5 48 48 48zm216 320c-13.2 0-24 10.7-24 24 0 13.2-10.8 24-24 24h-69.5L460 285.6c11.7-4.7 20.1-16.2 20.1-29.6 0-17.7-14.3-32-32-32h-44L378 170.8c-12.5-25.5-35.5-44.2-61.8-50.9L245 98.7c-28.3-6.8-57.8-.5-80.8 17.1l-39.7 30.4c-14 10.7-16.7 30.8-5.9 44.9.7.9 1.7 1.3 2.4 2.1L66.9 464H24c-13.2 0-24 10.7-24 24s10.8 24 24 24h480c39.7 0 72-32.3 72-72 0-13.2-10.8-24-24-24zm-260.5 48h-96.9l43.1-91-22-13c-12.1-7.2-21.9-16.9-29.5-27.8L123.7 464H99.5l52.3-261.4c4.1-1 8.1-2.9 11.7-5.6l39.7-30.4c7.7-5.9 17.4-8 25.3-6.1l14.7 4.4-37.5 87.4c-12.6 29.5-1.3 64 26.3 80.3l85 50.2-25.5 81.2zm110.6 0h-43.6l23.6-75.5c5.9-20.8-2.9-43.1-21.6-54.4L299.3 298l31.3-78.3 20.3 41.4c8 16.3 24.9 26.9 43.1 26.9h33.3l-25.2 176z"]
    };
    exports.faSkiingNordic = faSkiingNordic;
    var faSkull = {
      prefix: 'fas',
      iconName: 'skull',
      icon: [512, 512, [], "f54c", "M256 0C114.6 0 0 100.3 0 224c0 70.1 36.9 132.6 94.5 173.7 9.6 6.9 15.2 18.1 13.5 29.9l-9.4 66.2c-1.4 9.6 6 18.2 15.7 18.2H192v-56c0-4.4 3.6-8 8-8h16c4.4 0 8 3.6 8 8v56h64v-56c0-4.4 3.6-8 8-8h16c4.4 0 8 3.6 8 8v56h77.7c9.7 0 17.1-8.6 15.7-18.2l-9.4-66.2c-1.7-11.7 3.8-23 13.5-29.9C475.1 356.6 512 294.1 512 224 512 100.3 397.4 0 256 0zm-96 320c-35.3 0-64-28.7-64-64s28.7-64 64-64 64 28.7 64 64-28.7 64-64 64zm192 0c-35.3 0-64-28.7-64-64s28.7-64 64-64 64 28.7 64 64-28.7 64-64 64z"]
    };
    exports.faSkull = faSkull;
    var faSkullCrossbones = {
      prefix: 'fas',
      iconName: 'skull-crossbones',
      icon: [448, 512, [], "f714", "M439.15 453.06L297.17 384l141.99-69.06c7.9-3.95 11.11-13.56 7.15-21.46L432 264.85c-3.95-7.9-13.56-11.11-21.47-7.16L224 348.41 37.47 257.69c-7.9-3.95-17.51-.75-21.47 7.16L1.69 293.48c-3.95 7.9-.75 17.51 7.15 21.46L150.83 384 8.85 453.06c-7.9 3.95-11.11 13.56-7.15 21.47l14.31 28.63c3.95 7.9 13.56 11.11 21.47 7.15L224 419.59l186.53 90.72c7.9 3.95 17.51.75 21.47-7.15l14.31-28.63c3.95-7.91.74-17.52-7.16-21.47zM150 237.28l-5.48 25.87c-2.67 12.62 5.42 24.85 16.45 24.85h126.08c11.03 0 19.12-12.23 16.45-24.85l-5.5-25.87c41.78-22.41 70-62.75 70-109.28C368 57.31 303.53 0 224 0S80 57.31 80 128c0 46.53 28.22 86.87 70 109.28zM280 112c17.65 0 32 14.35 32 32s-14.35 32-32 32-32-14.35-32-32 14.35-32 32-32zm-112 0c17.65 0 32 14.35 32 32s-14.35 32-32 32-32-14.35-32-32 14.35-32 32-32z"]
    };
    exports.faSkullCrossbones = faSkullCrossbones;
    var faSlash = {
      prefix: 'fas',
      iconName: 'slash',
      icon: [640, 512, [], "f715", "M594.53 508.63L6.18 53.9c-6.97-5.42-8.23-15.47-2.81-22.45L23.01 6.18C28.43-.8 38.49-2.06 45.47 3.37L633.82 458.1c6.97 5.42 8.23 15.47 2.81 22.45l-19.64 25.27c-5.42 6.98-15.48 8.23-22.46 2.81z"]
    };
    exports.faSlash = faSlash;
    var faSleigh = {
      prefix: 'fas',
      iconName: 'sleigh',
      icon: [640, 512, [], "f7cc", "M612.7 350.7l-9.3-7.4c-6.9-5.5-17-4.4-22.5 2.5l-10 12.5c-5.5 6.9-4.4 17 2.5 22.5l9.3 7.4c5.9 4.7 9.2 11.7 9.2 19.2 0 13.6-11 24.6-24.6 24.6H48c-8.8 0-16 7.2-16 16v16c0 8.8 7.2 16 16 16h516c39 0 73.7-29.3 75.9-68.3 1.4-23.8-8.7-46.3-27.2-61zM32 224c0 59.6 40.9 109.2 96 123.5V400h64v-48h192v48h64v-48c53 0 96-43 96-96v-96c17.7 0 32-14.3 32-32s-14.3-32-32-32h-96v64c0 35.3-28.7 64-64 64h-20.7c-65.8 0-125.9-37.2-155.3-96-29.4-58.8-89.6-96-155.3-96H32C14.3 32 0 46.3 0 64s14.3 32 32 32v128z"]
    };
    exports.faSleigh = faSleigh;
    var faSlidersH = {
      prefix: 'fas',
      iconName: 'sliders-h',
      icon: [512, 512, [], "f1de", "M496 384H160v-16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v16H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h80v16c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-16h336c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm0-160h-80v-16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v16H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h336v16c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-16h80c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm0-160H288V48c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v16H16C7.2 64 0 71.2 0 80v32c0 8.8 7.2 16 16 16h208v16c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-16h208c8.8 0 16-7.2 16-16V80c0-8.8-7.2-16-16-16z"]
    };
    exports.faSlidersH = faSlidersH;
    var faSmile = {
      prefix: 'fas',
      iconName: 'smile',
      icon: [496, 512, [], "f118", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm80 168c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm-160 0c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm194.8 170.2C334.3 380.4 292.5 400 248 400s-86.3-19.6-114.8-53.8c-13.6-16.3 11-36.7 24.6-20.5 22.4 26.9 55.2 42.2 90.2 42.2s67.8-15.4 90.2-42.2c13.4-16.2 38.1 4.2 24.6 20.5z"]
    };
    exports.faSmile = faSmile;
    var faSmileBeam = {
      prefix: 'fas',
      iconName: 'smile-beam',
      icon: [496, 512, [], "f5b8", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM112 223.4c3.3-42.1 32.2-71.4 56-71.4s52.7 29.3 56 71.4c.7 8.6-10.8 11.9-14.9 4.5l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.3 7.4-15.8 4-15.1-4.5zm250.8 122.8C334.3 380.4 292.5 400 248 400s-86.3-19.6-114.8-53.8c-13.5-16.3 11-36.7 24.6-20.5 22.4 26.9 55.2 42.2 90.2 42.2s67.8-15.4 90.2-42.2c13.6-16.2 38.1 4.3 24.6 20.5zm6.2-118.3l-9.5-17c-7.7-13.7-19.2-21.6-31.5-21.6s-23.8 7.9-31.5 21.6l-9.5 17c-4.1 7.3-15.6 4-14.9-4.5 3.3-42.1 32.2-71.4 56-71.4s52.7 29.3 56 71.4c.6 8.6-11 11.9-15.1 4.5z"]
    };
    exports.faSmileBeam = faSmileBeam;
    var faSmileWink = {
      prefix: 'fas',
      iconName: 'smile-wink',
      icon: [496, 512, [], "f4da", "M0 256c0 137 111 248 248 248s248-111 248-248S385 8 248 8 0 119 0 256zm200-48c0 17.7-14.3 32-32 32s-32-14.3-32-32 14.3-32 32-32 32 14.3 32 32zm158.5 16.5c-14.8-13.2-46.2-13.2-61 0L288 233c-8.3 7.4-21.6.4-19.8-10.8 4-25.2 34.2-42.1 59.9-42.1S384 197 388 222.2c1.7 11.1-11.4 18.3-19.8 10.8l-9.7-8.5zM157.8 325.8C180.2 352.7 213 368 248 368s67.8-15.4 90.2-42.2c13.6-16.2 38.1 4.2 24.6 20.5C334.3 380.4 292.5 400 248 400s-86.3-19.6-114.8-53.8c-13.5-16.3 11.2-36.7 24.6-20.4z"]
    };
    exports.faSmileWink = faSmileWink;
    var faSmog = {
      prefix: 'fas',
      iconName: 'smog',
      icon: [640, 512, [], "f75f", "M624 368H80c-8.8 0-16 7.2-16 16v16c0 8.8 7.2 16 16 16h544c8.8 0 16-7.2 16-16v-16c0-8.8-7.2-16-16-16zm-480 96H16c-8.8 0-16 7.2-16 16v16c0 8.8 7.2 16 16 16h128c8.8 0 16-7.2 16-16v-16c0-8.8-7.2-16-16-16zm416 0H224c-8.8 0-16 7.2-16 16v16c0 8.8 7.2 16 16 16h336c8.8 0 16-7.2 16-16v-16c0-8.8-7.2-16-16-16zM144 288h156.1c22.5 19.7 51.6 32 83.9 32s61.3-12.3 83.9-32H528c61.9 0 112-50.1 112-112S589.9 64 528 64c-18 0-34.7 4.6-49.7 12.1C454 31 406.8 0 352 0c-41 0-77.8 17.3-104 44.8C221.8 17.3 185 0 144 0 64.5 0 0 64.5 0 144s64.5 144 144 144z"]
    };
    exports.faSmog = faSmog;
    var faSmoking = {
      prefix: 'fas',
      iconName: 'smoking',
      icon: [640, 512, [], "f48d", "M632 352h-48c-4.4 0-8 3.6-8 8v144c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V360c0-4.4-3.6-8-8-8zM553.3 87.1c-5.7-3.8-9.3-10-9.3-16.8V8c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v62.3c0 22 10.2 43.4 28.6 55.4 42.2 27.3 67.4 73.8 67.4 124V280c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-30.3c0-65.5-32.4-126.2-86.7-162.6zM432 352H48c-26.5 0-48 21.5-48 48v64c0 26.5 21.5 48 48 48h384c8.8 0 16-7.2 16-16V368c0-8.8-7.2-16-16-16zm-32 112H224v-64h176v64zm87.7-322.4C463.8 125 448 99.3 448 70.3V8c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v66.4c0 43.7 24.6 81.6 60.3 106.7 22.4 15.7 35.7 41.2 35.7 68.6V280c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-30.3c0-43.3-21-83.4-56.3-108.1zM536 352h-48c-4.4 0-8 3.6-8 8v144c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V360c0-4.4-3.6-8-8-8z"]
    };
    exports.faSmoking = faSmoking;
    var faSmokingBan = {
      prefix: 'fas',
      iconName: 'smoking-ban',
      icon: [512, 512, [], "f54d", "M96 304c0 8.8 7.2 16 16 16h117.5l-96-96H112c-8.8 0-16 7.2-16 16v64zM256 0C114.6 0 0 114.6 0 256s114.6 256 256 256 256-114.6 256-256S397.4 0 256 0zm0 448c-105.9 0-192-86.1-192-192 0-41.4 13.3-79.7 35.7-111.1l267.4 267.4C335.7 434.7 297.4 448 256 448zm45.2-192H384v32h-50.8l-32-32zm111.1 111.1L365.2 320H400c8.8 0 16-7.2 16-16v-64c0-8.8-7.2-16-16-16H269.2L144.9 99.7C176.3 77.3 214.6 64 256 64c105.9 0 192 86.1 192 192 0 41.4-13.3 79.7-35.7 111.1zM320.6 128c-15.6 0-28.6-11.2-31.4-25.9-.7-3.6-4-6.1-7.7-6.1h-16.2c-5 0-8.7 4.5-8 9.4 4.6 30.9 31.2 54.6 63.3 54.6 15.6 0 28.6 11.2 31.4 25.9.7 3.6 4 6.1 7.7 6.1h16.2c5 0 8.7-4.5 8-9.4-4.6-30.9-31.2-54.6-63.3-54.6z"]
    };
    exports.faSmokingBan = faSmokingBan;
    var faSms = {
      prefix: 'fas',
      iconName: 'sms',
      icon: [512, 512, [], "f7cd", "M256 32C114.6 32 0 125.1 0 240c0 49.6 21.4 95 57 130.7C44.5 421.1 2.7 466 2.2 466.5c-2.2 2.3-2.8 5.7-1.5 8.7 1.3 3 4.1 4.8 7.3 4.8 66.3 0 116-31.8 140.6-51.4 32.7 12.3 69 19.4 107.4 19.4 141.4 0 256-93.1 256-208S397.4 32 256 32zM128.2 304H116c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h12.3c6 0 10.4-3.5 10.4-6.6 0-1.3-.8-2.7-2.1-3.8l-21.9-18.8c-8.5-7.2-13.3-17.5-13.3-28.1 0-21.3 19-38.6 42.4-38.6H156c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8h-12.3c-6 0-10.4 3.5-10.4 6.6 0 1.3.8 2.7 2.1 3.8l21.9 18.8c8.5 7.2 13.3 17.5 13.3 28.1.1 21.3-19 38.6-42.4 38.6zm191.8-8c0 4.4-3.6 8-8 8h-16c-4.4 0-8-3.6-8-8v-68.2l-24.8 55.8c-2.9 5.9-11.4 5.9-14.3 0L224 227.8V296c0 4.4-3.6 8-8 8h-16c-4.4 0-8-3.6-8-8V192c0-8.8 7.2-16 16-16h16c6.1 0 11.6 3.4 14.3 8.8l17.7 35.4 17.7-35.4c2.7-5.4 8.3-8.8 14.3-8.8h16c8.8 0 16 7.2 16 16v104zm48.3 8H356c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h12.3c6 0 10.4-3.5 10.4-6.6 0-1.3-.8-2.7-2.1-3.8l-21.9-18.8c-8.5-7.2-13.3-17.5-13.3-28.1 0-21.3 19-38.6 42.4-38.6H396c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8h-12.3c-6 0-10.4 3.5-10.4 6.6 0 1.3.8 2.7 2.1 3.8l21.9 18.8c8.5 7.2 13.3 17.5 13.3 28.1.1 21.3-18.9 38.6-42.3 38.6z"]
    };
    exports.faSms = faSms;
    var faSnowboarding = {
      prefix: 'fas',
      iconName: 'snowboarding',
      icon: [512, 512, [], "f7ce", "M432 96c26.5 0 48-21.5 48-48S458.5 0 432 0s-48 21.5-48 48 21.5 48 48 48zm28.8 153.6c5.8 4.3 12.5 6.4 19.2 6.4 9.7 0 19.3-4.4 25.6-12.8 10.6-14.1 7.8-34.2-6.4-44.8l-111.4-83.5c-13.8-10.3-29.1-18.4-45.4-23.8l-63.7-21.2-26.1-52.1C244.7 2 225.5-4.4 209.7 3.5c-15.8 7.9-22.2 27.1-14.3 42.9l29.1 58.1c5.7 11.4 15.6 19.9 27.7 24l16.4 5.5-41.2 20.6c-21.8 10.9-35.4 32.8-35.4 57.2v53.1l-74.1 24.7c-16.8 5.6-25.8 23.7-20.2 40.5 1.7 5.2 4.9 9.4 8.7 12.9l-38.7-14.1c-9.7-3.5-17.4-10.6-21.8-20-5.6-12-19.9-17.2-31.9-11.6s-17.2 19.9-11.6 31.9c9.8 21 27.1 36.9 48.9 44.8l364.8 132.7c9.7 3.5 19.7 5.3 29.7 5.3 12.5 0 24.9-2.7 36.5-8.2 12-5.6 17.2-19.9 11.6-31.9S474 454.7 462 460.3c-9.3 4.4-19.8 4.8-29.5 1.3l-90.8-33.1c8.7-4.1 15.6-11.8 17.8-21.9l21.9-102c3.9-18.2-3.2-37.2-18.1-48.4l-52-39 66-30.5 83.5 62.9zm-144.4 51.7l-19.7 92c-1.5 7.1-.1 13.9 2.8 20l-169.4-61.6c2.7-.2 5.4-.4 8-1.3l85-28.4c19.6-6.5 32.8-24.8 32.8-45.5V256l60.5 45.3z"]
    };
    exports.faSnowboarding = faSnowboarding;
    var faSnowflake = {
      prefix: 'fas',
      iconName: 'snowflake',
      icon: [448, 512, [], "f2dc", "M440.3 345.2l-33.8-19.5 26-7c8.2-2.2 13.1-10.7 10.9-18.9l-4-14.9c-2.2-8.2-10.7-13.1-18.9-10.9l-70.8 19-63.9-37 63.8-36.9 70.8 19c8.2 2.2 16.7-2.7 18.9-10.9l4-14.9c2.2-8.2-2.7-16.7-10.9-18.9l-26-7 33.8-19.5c7.4-4.3 9.9-13.7 5.7-21.1L430.4 119c-4.3-7.4-13.7-9.9-21.1-5.7l-33.8 19.5 7-26c2.2-8.2-2.7-16.7-10.9-18.9l-14.9-4c-8.2-2.2-16.7 2.7-18.9 10.9l-19 70.8-62.8 36.2v-77.5l53.7-53.7c6.2-6.2 6.2-16.4 0-22.6l-11.3-11.3c-6.2-6.2-16.4-6.2-22.6 0L256 56.4V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v40.4l-19.7-19.7c-6.2-6.2-16.4-6.2-22.6 0L138.3 48c-6.3 6.2-6.3 16.4 0 22.6l53.7 53.7v77.5l-62.8-36.2-19-70.8c-2.2-8.2-10.7-13.1-18.9-10.9l-14.9 4c-8.2 2.2-13.1 10.7-10.9 18.9l7 26-33.8-19.5c-7.4-4.3-16.8-1.7-21.1 5.7L2.1 145.7c-4.3 7.4-1.7 16.8 5.7 21.1l33.8 19.5-26 7c-8.3 2.2-13.2 10.7-11 19l4 14.9c2.2 8.2 10.7 13.1 18.9 10.9l70.8-19 63.8 36.9-63.8 36.9-70.8-19c-8.2-2.2-16.7 2.7-18.9 10.9l-4 14.9c-2.2 8.2 2.7 16.7 10.9 18.9l26 7-33.8 19.6c-7.4 4.3-9.9 13.7-5.7 21.1l15.5 26.8c4.3 7.4 13.7 9.9 21.1 5.7l33.8-19.5-7 26c-2.2 8.2 2.7 16.7 10.9 18.9l14.9 4c8.2 2.2 16.7-2.7 18.9-10.9l19-70.8 62.8-36.2v77.5l-53.7 53.7c-6.3 6.2-6.3 16.4 0 22.6l11.3 11.3c6.2 6.2 16.4 6.2 22.6 0l19.7-19.7V496c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-40.4l19.7 19.7c6.2 6.2 16.4 6.2 22.6 0l11.3-11.3c6.2-6.2 6.2-16.4 0-22.6L256 387.7v-77.5l62.8 36.2 19 70.8c2.2 8.2 10.7 13.1 18.9 10.9l14.9-4c8.2-2.2 13.1-10.7 10.9-18.9l-7-26 33.8 19.5c7.4 4.3 16.8 1.7 21.1-5.7l15.5-26.8c4.3-7.3 1.8-16.8-5.6-21z"]
    };
    exports.faSnowflake = faSnowflake;
    var faSnowman = {
      prefix: 'fas',
      iconName: 'snowman',
      icon: [512, 512, [], "f7d0", "M510.9 152.3l-5.9-14.5c-3.3-8-12.6-11.9-20.8-8.7L456 140.6v-29c0-8.6-7.2-15.6-16-15.6h-16c-8.8 0-16 7-16 15.6v46.9c0 .5.3 1 .3 1.5l-56.4 23c-5.9-10-13.3-18.9-22-26.6 13.6-16.6 22-37.4 22-60.5 0-53-43-96-96-96s-96 43-96 96c0 23.1 8.5 43.9 22 60.5-8.7 7.7-16 16.6-22 26.6l-56.4-23c.1-.5.3-1 .3-1.5v-46.9C104 103 96.8 96 88 96H72c-8.8 0-16 7-16 15.6v29l-28.1-11.5c-8.2-3.2-17.5.7-20.8 8.7l-5.9 14.5c-3.3 8 .7 17.1 8.9 20.3l135.2 55.2c-.4 4-1.2 8-1.2 12.2 0 10.1 1.7 19.6 4.2 28.9C120.9 296.4 104 334.2 104 376c0 54 28.4 100.9 70.8 127.8 9.3 5.9 20.3 8.2 31.3 8.2h99.2c13.3 0 26.3-4.1 37.2-11.7 46.5-32.3 74.4-89.4 62.9-152.6-5.5-30.2-20.5-57.6-41.6-79 2.5-9.2 4.2-18.7 4.2-28.7 0-4.2-.8-8.1-1.2-12.2L502 172.6c8.1-3.1 12.1-12.2 8.9-20.3zM224 96c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm32 272c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm0-64c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm0-64c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm0-88s-16-23.2-16-32 7.2-16 16-16 16 7.2 16 16-16 32-16 32zm32-56c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16z"]
    };
    exports.faSnowman = faSnowman;
    var faSnowplow = {
      prefix: 'fas',
      iconName: 'snowplow',
      icon: [640, 512, [], "f7d2", "M120 376c-13.3 0-24 10.7-24 24s10.7 24 24 24 24-10.7 24-24-10.7-24-24-24zm80 0c-13.3 0-24 10.7-24 24s10.7 24 24 24 24-10.7 24-24-10.7-24-24-24zm80 0c-13.3 0-24 10.7-24 24s10.7 24 24 24 24-10.7 24-24-10.7-24-24-24zm80 0c-13.3 0-24 10.7-24 24s10.7 24 24 24 24-10.7 24-24-10.7-24-24-24zm238.6 49.4c-14.5-14.5-22.6-34.1-22.6-54.6V269.2c0-20.5 8.1-40.1 22.6-54.6l36.7-36.7c6.2-6.2 6.2-16.4 0-22.6l-22.6-22.6c-6.2-6.2-16.4-6.2-22.6 0l-36.7 36.7c-26.5 26.5-41.4 62.4-41.4 99.9V288h-64v-50.9c0-8.7-1.8-17.2-5.2-25.2L364.5 29.1C356.9 11.4 339.6 0 320.3 0H176c-26.5 0-48 21.5-48 48v112h-16c-26.5 0-48 21.5-48 48v91.2C26.3 317.2 0 355.4 0 400c0 61.9 50.1 112 112 112h256c61.9 0 112-50.1 112-112 0-17.3-4.2-33.4-11.2-48H512v18.7c0 37.5 14.9 73.4 41.4 99.9l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0l22.6-22.6c6.2-6.2 6.2-16.4 0-22.6l-36.7-36.7zM192 64h117.8l68.6 160H256l-64-64V64zm176 384H112c-26.5 0-48-21.5-48-48s21.5-48 48-48h256c26.5 0 48 21.5 48 48s-21.5 48-48 48z"]
    };
    exports.faSnowplow = faSnowplow;
    var faSoap = {
      prefix: 'fas',
      iconName: 'soap',
      icon: [512, 512, [], "e06e", "M416,192a95.42,95.42,0,0,1-30.94,70.21A95.8,95.8,0,0,1,352,448H160a96,96,0,0,1,0-192h88.91A95.3,95.3,0,0,1,224,192H96A96,96,0,0,0,0,288V416a96,96,0,0,0,96,96H416a96,96,0,0,0,96-96V288A96,96,0,0,0,416,192Zm-96,64a64,64,0,1,0-64-64A64,64,0,0,0,320,256ZM208,96a48,48,0,1,0-48-48A48,48,0,0,0,208,96ZM384,64a32,32,0,1,0-32-32A32,32,0,0,0,384,64ZM160,288a64,64,0,0,0,0,128H352a64,64,0,0,0,0-128Z"]
    };
    exports.faSoap = faSoap;
    var faSocks = {
      prefix: 'fas',
      iconName: 'socks',
      icon: [512, 512, [], "f696", "M214.66 311.01L288 256V96H128v176l-86.65 64.61c-39.4 29.56-53.86 84.42-29.21 127.06C30.39 495.25 63.27 512 96.08 512c20.03 0 40.25-6.25 57.52-19.2l21.86-16.39c-29.85-55.38-13.54-125.84 39.2-165.4zM288 32c0-11.05 3.07-21.3 8.02-30.38C293.4.92 290.85 0 288 0H160c-17.67 0-32 14.33-32 32v32h160V32zM480 0H352c-17.67 0-32 14.33-32 32v32h192V32c0-17.67-14.33-32-32-32zM320 272l-86.13 64.61c-39.4 29.56-53.86 84.42-29.21 127.06 18.25 31.58 50.61 48.33 83.42 48.33 20.03 0 40.25-6.25 57.52-19.2l115.2-86.4A127.997 127.997 0 0 0 512 304V96H320v176z"]
    };
    exports.faSocks = faSocks;
    var faSolarPanel = {
      prefix: 'fas',
      iconName: 'solar-panel',
      icon: [640, 512, [], "f5ba", "M431.98 448.01l-47.97.05V416h-128v32.21l-47.98.05c-8.82.01-15.97 7.16-15.98 15.99l-.05 31.73c-.01 8.85 7.17 16.03 16.02 16.02l223.96-.26c8.82-.01 15.97-7.16 15.98-15.98l.04-31.73c.01-8.85-7.17-16.03-16.02-16.02zM585.2 26.74C582.58 11.31 568.99 0 553.06 0H86.93C71 0 57.41 11.31 54.79 26.74-3.32 369.16.04 348.08.03 352c-.03 17.32 14.29 32 32.6 32h574.74c18.23 0 32.51-14.56 32.59-31.79.02-4.08 3.35 16.95-54.76-325.47zM259.83 64h120.33l9.77 96H250.06l9.77-96zm-75.17 256H71.09L90.1 208h105.97l-11.41 112zm16.29-160H98.24l16.29-96h96.19l-9.77 96zm32.82 160l11.4-112h149.65l11.4 112H233.77zm195.5-256h96.19l16.29 96H439.04l-9.77-96zm26.06 256l-11.4-112H549.9l19.01 112H455.33z"]
    };
    exports.faSolarPanel = faSolarPanel;
    var faSort = {
      prefix: 'fas',
      iconName: 'sort',
      icon: [320, 512, [], "f0dc", "M41 288h238c21.4 0 32.1 25.9 17 41L177 448c-9.4 9.4-24.6 9.4-33.9 0L24 329c-15.1-15.1-4.4-41 17-41zm255-105L177 64c-9.4-9.4-24.6-9.4-33.9 0L24 183c-15.1 15.1-4.4 41 17 41h238c21.4 0 32.1-25.9 17-41z"]
    };
    exports.faSort = faSort;
    var faSortAlphaDown = {
      prefix: 'fas',
      iconName: 'sort-alpha-down',
      icon: [448, 512, [], "f15d", "M176 352h-48V48a16 16 0 0 0-16-16H80a16 16 0 0 0-16 16v304H16c-14.19 0-21.36 17.24-11.29 27.31l80 96a16 16 0 0 0 22.62 0l80-96C197.35 369.26 190.22 352 176 352zm240-64H288a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h56l-61.26 70.45A32 32 0 0 0 272 446.37V464a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-56l61.26-70.45A32 32 0 0 0 432 321.63V304a16 16 0 0 0-16-16zm31.06-85.38l-59.27-160A16 16 0 0 0 372.72 32h-41.44a16 16 0 0 0-15.07 10.62l-59.27 160A16 16 0 0 0 272 224h24.83a16 16 0 0 0 15.23-11.08l4.42-12.92h71l4.41 12.92A16 16 0 0 0 407.16 224H432a16 16 0 0 0 15.06-21.38zM335.61 144L352 96l16.39 48z"]
    };
    exports.faSortAlphaDown = faSortAlphaDown;
    var faSortAlphaDownAlt = {
      prefix: 'fas',
      iconName: 'sort-alpha-down-alt',
      icon: [448, 512, [], "f881", "M176 352h-48V48a16 16 0 0 0-16-16H80a16 16 0 0 0-16 16v304H16c-14.19 0-21.36 17.24-11.29 27.31l80 96a16 16 0 0 0 22.62 0l80-96C197.35 369.26 190.22 352 176 352zm112-128h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-56l61.26-70.45A32 32 0 0 0 432 65.63V48a16 16 0 0 0-16-16H288a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h56l-61.26 70.45A32 32 0 0 0 272 190.37V208a16 16 0 0 0 16 16zm159.06 234.62l-59.27-160A16 16 0 0 0 372.72 288h-41.44a16 16 0 0 0-15.07 10.62l-59.27 160A16 16 0 0 0 272 480h24.83a16 16 0 0 0 15.23-11.08l4.42-12.92h71l4.41 12.92A16 16 0 0 0 407.16 480H432a16 16 0 0 0 15.06-21.38zM335.61 400L352 352l16.39 48z"]
    };
    exports.faSortAlphaDownAlt = faSortAlphaDownAlt;
    var faSortAlphaUp = {
      prefix: 'fas',
      iconName: 'sort-alpha-up',
      icon: [448, 512, [], "f15e", "M16 160h48v304a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V160h48c14.21 0 21.38-17.24 11.31-27.31l-80-96a16 16 0 0 0-22.62 0l-80 96C-5.35 142.74 1.78 160 16 160zm400 128H288a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h56l-61.26 70.45A32 32 0 0 0 272 446.37V464a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-56l61.26-70.45A32 32 0 0 0 432 321.63V304a16 16 0 0 0-16-16zm31.06-85.38l-59.27-160A16 16 0 0 0 372.72 32h-41.44a16 16 0 0 0-15.07 10.62l-59.27 160A16 16 0 0 0 272 224h24.83a16 16 0 0 0 15.23-11.08l4.42-12.92h71l4.41 12.92A16 16 0 0 0 407.16 224H432a16 16 0 0 0 15.06-21.38zM335.61 144L352 96l16.39 48z"]
    };
    exports.faSortAlphaUp = faSortAlphaUp;
    var faSortAlphaUpAlt = {
      prefix: 'fas',
      iconName: 'sort-alpha-up-alt',
      icon: [448, 512, [], "f882", "M16 160h48v304a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V160h48c14.21 0 21.38-17.24 11.31-27.31l-80-96a16 16 0 0 0-22.62 0l-80 96C-5.35 142.74 1.78 160 16 160zm272 64h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-56l61.26-70.45A32 32 0 0 0 432 65.63V48a16 16 0 0 0-16-16H288a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h56l-61.26 70.45A32 32 0 0 0 272 190.37V208a16 16 0 0 0 16 16zm159.06 234.62l-59.27-160A16 16 0 0 0 372.72 288h-41.44a16 16 0 0 0-15.07 10.62l-59.27 160A16 16 0 0 0 272 480h24.83a16 16 0 0 0 15.23-11.08l4.42-12.92h71l4.41 12.92A16 16 0 0 0 407.16 480H432a16 16 0 0 0 15.06-21.38zM335.61 400L352 352l16.39 48z"]
    };
    exports.faSortAlphaUpAlt = faSortAlphaUpAlt;
    var faSortAmountDown = {
      prefix: 'fas',
      iconName: 'sort-amount-down',
      icon: [512, 512, [], "f160", "M304 416h-64a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h64a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-128-64h-48V48a16 16 0 0 0-16-16H80a16 16 0 0 0-16 16v304H16c-14.19 0-21.37 17.24-11.29 27.31l80 96a16 16 0 0 0 22.62 0l80-96C197.35 369.26 190.22 352 176 352zm256-192H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h192a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-64 128H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM496 32H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h256a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"]
    };
    exports.faSortAmountDown = faSortAmountDown;
    var faSortAmountDownAlt = {
      prefix: 'fas',
      iconName: 'sort-amount-down-alt',
      icon: [512, 512, [], "f884", "M240 96h64a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16h-64a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16zm0 128h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16zm256 192H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h256a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-256-64h192a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16zm-64 0h-48V48a16 16 0 0 0-16-16H80a16 16 0 0 0-16 16v304H16c-14.19 0-21.37 17.24-11.29 27.31l80 96a16 16 0 0 0 22.62 0l80-96C197.35 369.26 190.22 352 176 352z"]
    };
    exports.faSortAmountDownAlt = faSortAmountDownAlt;
    var faSortAmountUp = {
      prefix: 'fas',
      iconName: 'sort-amount-up',
      icon: [512, 512, [], "f161", "M304 416h-64a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h64a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h48v304a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V160h48c14.21 0 21.38-17.24 11.31-27.31l-80-96a16 16 0 0 0-22.62 0l-80 96C-5.35 142.74 1.77 160 16 160zm416 0H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h192a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-64 128H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM496 32H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h256a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"]
    };
    exports.faSortAmountUp = faSortAmountUp;
    var faSortAmountUpAlt = {
      prefix: 'fas',
      iconName: 'sort-amount-up-alt',
      icon: [512, 512, [], "f885", "M240 96h64a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16h-64a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16zm0 128h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16zm256 192H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h256a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-256-64h192a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16H240a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16zM16 160h48v304a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V160h48c14.21 0 21.39-17.24 11.31-27.31l-80-96a16 16 0 0 0-22.62 0l-80 96C-5.35 142.74 1.78 160 16 160z"]
    };
    exports.faSortAmountUpAlt = faSortAmountUpAlt;
    var faSortDown = {
      prefix: 'fas',
      iconName: 'sort-down',
      icon: [320, 512, [], "f0dd", "M41 288h238c21.4 0 32.1 25.9 17 41L177 448c-9.4 9.4-24.6 9.4-33.9 0L24 329c-15.1-15.1-4.4-41 17-41z"]
    };
    exports.faSortDown = faSortDown;
    var faSortNumericDown = {
      prefix: 'fas',
      iconName: 'sort-numeric-down',
      icon: [448, 512, [], "f162", "M304 96h16v64h-16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h96a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-16V48a16 16 0 0 0-16-16h-48a16 16 0 0 0-14.29 8.83l-16 32A16 16 0 0 0 304 96zm26.15 162.91a79 79 0 0 0-55 54.17c-14.25 51.05 21.21 97.77 68.85 102.53a84.07 84.07 0 0 1-20.85 12.91c-7.57 3.4-10.8 12.47-8.18 20.34l9.9 20c2.87 8.63 12.53 13.49 20.9 9.91 58-24.76 86.25-61.61 86.25-132V336c-.02-51.21-48.4-91.34-101.85-77.09zM352 356a20 20 0 1 1 20-20 20 20 0 0 1-20 20zm-176-4h-48V48a16 16 0 0 0-16-16H80a16 16 0 0 0-16 16v304H16c-14.19 0-21.36 17.24-11.29 27.31l80 96a16 16 0 0 0 22.62 0l80-96C197.35 369.26 190.22 352 176 352z"]
    };
    exports.faSortNumericDown = faSortNumericDown;
    var faSortNumericDownAlt = {
      prefix: 'fas',
      iconName: 'sort-numeric-down-alt',
      icon: [448, 512, [], "f886", "M176 352h-48V48a16 16 0 0 0-16-16H80a16 16 0 0 0-16 16v304H16c-14.19 0-21.36 17.24-11.29 27.31l80 96a16 16 0 0 0 22.62 0l80-96C197.35 369.26 190.22 352 176 352zm224 64h-16V304a16 16 0 0 0-16-16h-48a16 16 0 0 0-14.29 8.83l-16 32A16 16 0 0 0 304 352h16v64h-16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h96a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM330.17 34.91a79 79 0 0 0-55 54.17c-14.27 51.05 21.19 97.77 68.83 102.53a84.07 84.07 0 0 1-20.85 12.91c-7.57 3.4-10.8 12.47-8.18 20.34l9.9 20c2.87 8.63 12.53 13.49 20.9 9.91 58-24.77 86.25-61.61 86.25-132V112c-.02-51.21-48.4-91.34-101.85-77.09zM352 132a20 20 0 1 1 20-20 20 20 0 0 1-20 20z"]
    };
    exports.faSortNumericDownAlt = faSortNumericDownAlt;
    var faSortNumericUp = {
      prefix: 'fas',
      iconName: 'sort-numeric-up',
      icon: [448, 512, [], "f163", "M330.17 258.91a79 79 0 0 0-55 54.17c-14.27 51.05 21.19 97.77 68.83 102.53a84.07 84.07 0 0 1-20.85 12.91c-7.57 3.4-10.8 12.47-8.18 20.34l9.9 20c2.87 8.63 12.53 13.49 20.9 9.91 58-24.76 86.25-61.61 86.25-132V336c-.02-51.21-48.4-91.34-101.85-77.09zM352 356a20 20 0 1 1 20-20 20 20 0 0 1-20 20zM304 96h16v64h-16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h96a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-16V48a16 16 0 0 0-16-16h-48a16 16 0 0 0-14.29 8.83l-16 32A16 16 0 0 0 304 96zM107.31 36.69a16 16 0 0 0-22.62 0l-80 96C-5.35 142.74 1.78 160 16 160h48v304a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V160h48c14.21 0 21.38-17.24 11.31-27.31z"]
    };
    exports.faSortNumericUp = faSortNumericUp;
    var faSortNumericUpAlt = {
      prefix: 'fas',
      iconName: 'sort-numeric-up-alt',
      icon: [448, 512, [], "f887", "M107.31 36.69a16 16 0 0 0-22.62 0l-80 96C-5.35 142.74 1.78 160 16 160h48v304a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V160h48c14.21 0 21.38-17.24 11.31-27.31zM400 416h-16V304a16 16 0 0 0-16-16h-48a16 16 0 0 0-14.29 8.83l-16 32A16 16 0 0 0 304 352h16v64h-16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h96a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM330.17 34.91a79 79 0 0 0-55 54.17c-14.27 51.05 21.19 97.77 68.83 102.53a84.07 84.07 0 0 1-20.85 12.91c-7.57 3.4-10.8 12.47-8.18 20.34l9.9 20c2.87 8.63 12.53 13.49 20.9 9.91 58-24.77 86.25-61.61 86.25-132V112c-.02-51.21-48.4-91.34-101.85-77.09zM352 132a20 20 0 1 1 20-20 20 20 0 0 1-20 20z"]
    };
    exports.faSortNumericUpAlt = faSortNumericUpAlt;
    var faSortUp = {
      prefix: 'fas',
      iconName: 'sort-up',
      icon: [320, 512, [], "f0de", "M279 224H41c-21.4 0-32.1-25.9-17-41L143 64c9.4-9.4 24.6-9.4 33.9 0l119 119c15.2 15.1 4.5 41-16.9 41z"]
    };
    exports.faSortUp = faSortUp;
    var faSpa = {
      prefix: 'fas',
      iconName: 'spa',
      icon: [576, 512, [], "f5bb", "M568.25 192c-29.04.13-135.01 6.16-213.84 83-33.12 29.63-53.36 63.3-66.41 94.86-13.05-31.56-33.29-65.23-66.41-94.86-78.83-76.84-184.8-82.87-213.84-83-4.41-.02-7.79 3.4-7.75 7.82.23 27.92 7.14 126.14 88.77 199.3C172.79 480.94 256 480 288 480s115.19.95 199.23-80.88c81.64-73.17 88.54-171.38 88.77-199.3.04-4.42-3.34-7.84-7.75-7.82zM287.98 302.6c12.82-18.85 27.6-35.78 44.09-50.52 19.09-18.61 39.58-33.3 60.26-45.18-16.44-70.5-51.72-133.05-96.73-172.22-4.11-3.58-11.02-3.58-15.14 0-44.99 39.14-80.27 101.63-96.74 172.07 20.37 11.7 40.5 26.14 59.22 44.39a282.768 282.768 0 0 1 45.04 51.46z"]
    };
    exports.faSpa = faSpa;
    var faSpaceShuttle = {
      prefix: 'fas',
      iconName: 'space-shuttle',
      icon: [640, 512, [], "f197", "M592.604 208.244C559.735 192.836 515.777 184 472 184H186.327c-4.952-6.555-10.585-11.978-16.72-16H376C229.157 137.747 219.403 32 96.003 32H96v128H80V32c-26.51 0-48 28.654-48 64v64c-23.197 0-32 10.032-32 24v40c0 13.983 8.819 24 32 24v16c-23.197 0-32 10.032-32 24v40c0 13.983 8.819 24 32 24v64c0 35.346 21.49 64 48 64V352h16v128h.003c123.4 0 133.154-105.747 279.997-136H169.606c6.135-4.022 11.768-9.445 16.72-16H472c43.777 0 87.735-8.836 120.604-24.244C622.282 289.845 640 271.992 640 256s-17.718-33.845-47.396-47.756zM488 296a8 8 0 0 1-8-8v-64a8 8 0 0 1 8-8c31.909 0 31.942 80 0 80z"]
    };
    exports.faSpaceShuttle = faSpaceShuttle;
    var faSpellCheck = {
      prefix: 'fas',
      iconName: 'spell-check',
      icon: [576, 512, [], "f891", "M272 256h91.36c43.2 0 82-32.2 84.51-75.34a79.82 79.82 0 0 0-25.26-63.07 79.81 79.81 0 0 0 9.06-44.91C427.9 30.57 389.3 0 347 0h-75a16 16 0 0 0-16 16v224a16 16 0 0 0 16 16zm40-200h40a24 24 0 0 1 0 48h-40zm0 96h56a24 24 0 0 1 0 48h-56zM155.12 22.25A32 32 0 0 0 124.64 0H99.36a32 32 0 0 0-30.48 22.25L.59 235.73A16 16 0 0 0 16 256h24.93a16 16 0 0 0 15.42-11.73L68.29 208h87.42l11.94 36.27A16 16 0 0 0 183.07 256H208a16 16 0 0 0 15.42-20.27zM89.37 144L112 75.3l22.63 68.7zm482 132.48l-45.21-45.3a15.88 15.88 0 0 0-22.59 0l-151.5 151.5-55.41-55.5a15.88 15.88 0 0 0-22.59 0l-45.3 45.3a16 16 0 0 0 0 22.59l112 112.21a15.89 15.89 0 0 0 22.6 0l208-208.21a16 16 0 0 0-.02-22.59z"]
    };
    exports.faSpellCheck = faSpellCheck;
    var faSpider = {
      prefix: 'fas',
      iconName: 'spider',
      icon: [576, 512, [], "f717", "M151.17 167.35L177.1 176h4.67l5.22-26.12c.72-3.58 1.8-7.58 3.21-11.79l-20.29-40.58 23.8-71.39c2.79-8.38-1.73-17.44-10.12-20.24L168.42.82c-8.38-2.8-17.45 1.73-20.24 10.12l-25.89 77.68a32.04 32.04 0 0 0 1.73 24.43l27.15 54.3zm422.14 182.03l-52.75-79.12a32.002 32.002 0 0 0-26.62-14.25H416l68.99-24.36a32.03 32.03 0 0 0 16.51-12.61l53.6-80.41c4.9-7.35 2.91-17.29-4.44-22.19l-13.31-8.88c-7.35-4.9-17.29-2.91-22.19 4.44l-50.56 75.83L404.1 208H368l-10.37-51.85C355.44 145.18 340.26 96 288 96c-52.26 0-67.44 49.18-69.63 60.15L208 208h-36.1l-60.49-20.17L60.84 112c-4.9-7.35-14.83-9.34-22.19-4.44l-13.31 8.88c-7.35 4.9-9.34 14.83-4.44 22.19l53.6 80.41a32.03 32.03 0 0 0 16.51 12.61L160 256H82.06a32.02 32.02 0 0 0-26.63 14.25L2.69 349.38c-4.9 7.35-2.92 17.29 4.44 22.19l13.31 8.88c7.35 4.9 17.29 2.91 22.19-4.44l48-72h47.06l-60.83 97.33A31.988 31.988 0 0 0 72 418.3V496c0 8.84 7.16 16 16 16h16c8.84 0 16-7.16 16-16v-73.11l74.08-118.53c-1.01 14.05-2.08 28.11-2.08 42.21C192 399.64 232.76 448 288 448s96-48.36 96-101.43c0-14.1-1.08-28.16-2.08-42.21L456 422.89V496c0 8.84 7.16 16 16 16h16c8.84 0 16-7.16 16-16v-77.71c0-6-1.69-11.88-4.86-16.96L438.31 304h47.06l48 72c4.9 7.35 14.84 9.34 22.19 4.44l13.31-8.88c7.36-4.9 9.34-14.83 4.44-22.18zM406.09 97.51l-20.29 40.58c1.41 4.21 2.49 8.21 3.21 11.79l5.22 26.12h4.67l25.93-8.65 27.15-54.3a31.995 31.995 0 0 0 1.73-24.43l-25.89-77.68C425.03 2.56 415.96-1.98 407.58.82l-15.17 5.06c-8.38 2.8-12.91 11.86-10.12 20.24l23.8 71.39z"]
    };
    exports.faSpider = faSpider;
    var faSpinner = {
      prefix: 'fas',
      iconName: 'spinner',
      icon: [512, 512, [], "f110", "M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z"]
    };
    exports.faSpinner = faSpinner;
    var faSplotch = {
      prefix: 'fas',
      iconName: 'splotch',
      icon: [512, 512, [], "f5bc", "M472.29 195.89l-67.06-22.95c-19.28-6.6-33.54-20.92-38.14-38.3L351.1 74.19c-11.58-43.77-76.57-57.13-109.98-22.62l-46.14 47.67c-13.26 13.71-33.54 20.93-54.2 19.31l-71.88-5.62c-52.05-4.07-86.93 44.88-59.03 82.83l38.54 52.42c11.08 15.07 12.82 33.86 4.64 50.24L24.62 355.4c-20.59 41.25 22.84 84.87 73.49 73.81l69.96-15.28c20.11-4.39 41.45 0 57.07 11.73l54.32 40.83c39.32 29.56 101.04 7.57 104.45-37.22l4.7-61.86c1.35-17.79 12.8-33.86 30.63-42.99l62-31.74c44.88-22.96 39.59-80.17-8.95-96.79z"]
    };
    exports.faSplotch = faSplotch;
    var faSprayCan = {
      prefix: 'fas',
      iconName: 'spray-can',
      icon: [512, 512, [], "f5bd", "M224 32c0-17.67-14.33-32-32-32h-64c-17.67 0-32 14.33-32 32v96h128V32zm256 96c-17.67 0-32 14.33-32 32s14.33 32 32 32 32-14.33 32-32-14.33-32-32-32zm-256 32H96c-53.02 0-96 42.98-96 96v224c0 17.67 14.33 32 32 32h256c17.67 0 32-14.33 32-32V256c0-53.02-42.98-96-96-96zm-64 256c-44.18 0-80-35.82-80-80s35.82-80 80-80 80 35.82 80 80-35.82 80-80 80zM480 96c17.67 0 32-14.33 32-32s-14.33-32-32-32-32 14.33-32 32 14.33 32 32 32zm-96 32c-17.67 0-32 14.33-32 32s14.33 32 32 32 32-14.33 32-32-14.33-32-32-32zm-96-96c-17.67 0-32 14.33-32 32s14.33 32 32 32 32-14.33 32-32-14.33-32-32-32zm96 0c-17.67 0-32 14.33-32 32s14.33 32 32 32 32-14.33 32-32-14.33-32-32-32zm96 192c-17.67 0-32 14.33-32 32s14.33 32 32 32 32-14.33 32-32-14.33-32-32-32z"]
    };
    exports.faSprayCan = faSprayCan;
    var faSquare = {
      prefix: 'fas',
      iconName: 'square',
      icon: [448, 512, [], "f0c8", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"]
    };
    exports.faSquare = faSquare;
    var faSquareFull = {
      prefix: 'fas',
      iconName: 'square-full',
      icon: [512, 512, [], "f45c", "M512 512H0V0h512v512z"]
    };
    exports.faSquareFull = faSquareFull;
    var faSquareRootAlt = {
      prefix: 'fas',
      iconName: 'square-root-alt',
      icon: [576, 512, [], "f698", "M571.31 251.31l-22.62-22.62c-6.25-6.25-16.38-6.25-22.63 0L480 274.75l-46.06-46.06c-6.25-6.25-16.38-6.25-22.63 0l-22.62 22.62c-6.25 6.25-6.25 16.38 0 22.63L434.75 320l-46.06 46.06c-6.25 6.25-6.25 16.38 0 22.63l22.62 22.62c6.25 6.25 16.38 6.25 22.63 0L480 365.25l46.06 46.06c6.25 6.25 16.38 6.25 22.63 0l22.62-22.62c6.25-6.25 6.25-16.38 0-22.63L525.25 320l46.06-46.06c6.25-6.25 6.25-16.38 0-22.63zM552 0H307.65c-14.54 0-27.26 9.8-30.95 23.87l-84.79 322.8-58.41-106.1A32.008 32.008 0 0 0 105.47 224H24c-13.25 0-24 10.74-24 24v48c0 13.25 10.75 24 24 24h43.62l88.88 163.73C168.99 503.5 186.3 512 204.94 512c17.27 0 44.44-9 54.28-41.48L357.03 96H552c13.25 0 24-10.75 24-24V24c0-13.26-10.75-24-24-24z"]
    };
    exports.faSquareRootAlt = faSquareRootAlt;
    var faStamp = {
      prefix: 'fas',
      iconName: 'stamp',
      icon: [512, 512, [], "f5bf", "M32 512h448v-64H32v64zm384-256h-66.56c-16.26 0-29.44-13.18-29.44-29.44v-9.46c0-27.37 8.88-53.41 21.46-77.72 9.11-17.61 12.9-38.39 9.05-60.42-6.77-38.78-38.47-70.7-77.26-77.45C212.62-9.04 160 37.33 160 96c0 14.16 3.12 27.54 8.69 39.58C182.02 164.43 192 194.7 192 226.49v.07c0 16.26-13.18 29.44-29.44 29.44H96c-53.02 0-96 42.98-96 96v32c0 17.67 14.33 32 32 32h448c17.67 0 32-14.33 32-32v-32c0-53.02-42.98-96-96-96z"]
    };
    exports.faStamp = faStamp;
    var faStar = {
      prefix: 'fas',
      iconName: 'star',
      icon: [576, 512, [], "f005", "M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z"]
    };
    exports.faStar = faStar;
    var faStarAndCrescent = {
      prefix: 'fas',
      iconName: 'star-and-crescent',
      icon: [512, 512, [], "f699", "M340.47 466.36c-1.45 0-6.89.46-9.18.46-116.25 0-210.82-94.57-210.82-210.82S215.04 45.18 331.29 45.18c2.32 0 7.7.46 9.18.46 7.13 0 13.33-5.03 14.75-12.07 1.46-7.25-2.55-14.49-9.47-17.09C316.58 5.54 286.39 0 256 0 114.84 0 0 114.84 0 256s114.84 256 256 256c30.23 0 60.28-5.49 89.32-16.32 5.96-2.02 10.28-7.64 10.28-14.26 0-8.09-6.39-15.06-15.13-15.06zm162.99-252.5l-76.38-11.1-34.16-69.21c-1.83-3.7-5.38-5.55-8.93-5.55s-7.1 1.85-8.93 5.55l-34.16 69.21-76.38 11.1c-8.17 1.18-11.43 11.22-5.52 16.99l55.27 53.87-13.05 76.07c-1.11 6.44 4.01 11.66 9.81 11.66 1.53 0 3.11-.36 4.64-1.17L384 335.37l68.31 35.91c1.53.8 3.11 1.17 4.64 1.17 5.8 0 10.92-5.23 9.81-11.66l-13.05-76.07 55.27-53.87c5.91-5.77 2.65-15.81-5.52-16.99z"]
    };
    exports.faStarAndCrescent = faStarAndCrescent;
    var faStarHalf = {
      prefix: 'fas',
      iconName: 'star-half',
      icon: [576, 512, [], "f089", "M288 0c-11.4 0-22.8 5.9-28.7 17.8L194 150.2 47.9 171.4c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.1 23 46 46.4 33.7L288 439.6V0z"]
    };
    exports.faStarHalf = faStarHalf;
    var faStarHalfAlt = {
      prefix: 'fas',
      iconName: 'star-half-alt',
      icon: [536, 512, [], "f5c0", "M508.55 171.51L362.18 150.2 296.77 17.81C290.89 5.98 279.42 0 267.95 0c-11.4 0-22.79 5.9-28.69 17.81l-65.43 132.38-146.38 21.29c-26.25 3.8-36.77 36.09-17.74 54.59l105.89 103-25.06 145.48C86.98 495.33 103.57 512 122.15 512c4.93 0 10-1.17 14.87-3.75l130.95-68.68 130.94 68.7c4.86 2.55 9.92 3.71 14.83 3.71 18.6 0 35.22-16.61 31.66-37.4l-25.03-145.49 105.91-102.98c19.04-18.5 8.52-50.8-17.73-54.6zm-121.74 123.2l-18.12 17.62 4.28 24.88 19.52 113.45-102.13-53.59-22.38-11.74.03-317.19 51.03 103.29 11.18 22.63 25.01 3.64 114.23 16.63-82.65 80.38z"]
    };
    exports.faStarHalfAlt = faStarHalfAlt;
    var faStarOfDavid = {
      prefix: 'fas',
      iconName: 'star-of-david',
      icon: [464, 512, [], "f69a", "M405.68 256l53.21-89.39C473.3 142.4 455.48 112 426.88 112H319.96l-55.95-93.98C256.86 6.01 244.43 0 232 0s-24.86 6.01-32.01 18.02L144.04 112H37.11c-28.6 0-46.42 30.4-32.01 54.61L58.32 256 5.1 345.39C-9.31 369.6 8.51 400 37.11 400h106.93l55.95 93.98C207.14 505.99 219.57 512 232 512s24.86-6.01 32.01-18.02L319.96 400h106.93c28.6 0 46.42-30.4 32.01-54.61L405.68 256zm-12.78-88l-19.8 33.26L353.3 168h39.6zm-52.39 88l-52.39 88H175.88l-52.39-88 52.38-88h112.25l52.39 88zM232 73.72L254.79 112h-45.57L232 73.72zM71.1 168h39.6l-19.8 33.26L71.1 168zm0 176l19.8-33.26L110.7 344H71.1zM232 438.28L209.21 400h45.57L232 438.28zM353.29 344l19.8-33.26L392.9 344h-39.61z"]
    };
    exports.faStarOfDavid = faStarOfDavid;
    var faStarOfLife = {
      prefix: 'fas',
      iconName: 'star-of-life',
      icon: [480, 512, [], "f621", "M471.99 334.43L336.06 256l135.93-78.43c7.66-4.42 10.28-14.2 5.86-21.86l-32.02-55.43c-4.42-7.65-14.21-10.28-21.87-5.86l-135.93 78.43V16c0-8.84-7.17-16-16.01-16h-64.04c-8.84 0-16.01 7.16-16.01 16v156.86L56.04 94.43c-7.66-4.42-17.45-1.79-21.87 5.86L2.15 155.71c-4.42 7.65-1.8 17.44 5.86 21.86L143.94 256 8.01 334.43c-7.66 4.42-10.28 14.21-5.86 21.86l32.02 55.43c4.42 7.65 14.21 10.27 21.87 5.86l135.93-78.43V496c0 8.84 7.17 16 16.01 16h64.04c8.84 0 16.01-7.16 16.01-16V339.14l135.93 78.43c7.66 4.42 17.45 1.8 21.87-5.86l32.02-55.43c4.42-7.65 1.8-17.43-5.86-21.85z"]
    };
    exports.faStarOfLife = faStarOfLife;
    var faStepBackward = {
      prefix: 'fas',
      iconName: 'step-backward',
      icon: [448, 512, [], "f048", "M64 468V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12v176.4l195.5-181C352.1 22.3 384 36.6 384 64v384c0 27.4-31.9 41.7-52.5 24.6L136 292.7V468c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12z"]
    };
    exports.faStepBackward = faStepBackward;
    var faStepForward = {
      prefix: 'fas',
      iconName: 'step-forward',
      icon: [448, 512, [], "f051", "M384 44v424c0 6.6-5.4 12-12 12h-48c-6.6 0-12-5.4-12-12V291.6l-195.5 181C95.9 489.7 64 475.4 64 448V64c0-27.4 31.9-41.7 52.5-24.6L312 219.3V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12z"]
    };
    exports.faStepForward = faStepForward;
    var faStethoscope = {
      prefix: 'fas',
      iconName: 'stethoscope',
      icon: [512, 512, [], "f0f1", "M447.1 112c-34.2.5-62.3 28.4-63 62.6-.5 24.3 12.5 45.6 32 56.8V344c0 57.3-50.2 104-112 104-60 0-109.2-44.1-111.9-99.2C265 333.8 320 269.2 320 192V36.6c0-11.4-8.1-21.3-19.3-23.5L237.8.5c-13-2.6-25.6 5.8-28.2 18.8L206.4 35c-2.6 13 5.8 25.6 18.8 28.2l30.7 6.1v121.4c0 52.9-42.2 96.7-95.1 97.2-53.4.5-96.9-42.7-96.9-96V69.4l30.7-6.1c13-2.6 21.4-15.2 18.8-28.2l-3.1-15.7C107.7 6.4 95.1-2 82.1.6L19.3 13C8.1 15.3 0 25.1 0 36.6V192c0 77.3 55.1 142 128.1 156.8C130.7 439.2 208.6 512 304 512c97 0 176-75.4 176-168V231.4c19.1-11.1 32-31.7 32-55.4 0-35.7-29.2-64.5-64.9-64zm.9 80c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16z"]
    };
    exports.faStethoscope = faStethoscope;
    var faStickyNote = {
      prefix: 'fas',
      iconName: 'sticky-note',
      icon: [448, 512, [], "f249", "M312 320h136V56c0-13.3-10.7-24-24-24H24C10.7 32 0 42.7 0 56v400c0 13.3 10.7 24 24 24h264V344c0-13.2 10.8-24 24-24zm129 55l-98 98c-4.5 4.5-10.6 7-17 7h-6V352h128v6.1c0 6.3-2.5 12.4-7 16.9z"]
    };
    exports.faStickyNote = faStickyNote;
    var faStop = {
      prefix: 'fas',
      iconName: 'stop',
      icon: [448, 512, [], "f04d", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"]
    };
    exports.faStop = faStop;
    var faStopCircle = {
      prefix: 'fas',
      iconName: 'stop-circle',
      icon: [512, 512, [], "f28d", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm96 328c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h160c8.8 0 16 7.2 16 16v160z"]
    };
    exports.faStopCircle = faStopCircle;
    var faStopwatch = {
      prefix: 'fas',
      iconName: 'stopwatch',
      icon: [448, 512, [], "f2f2", "M432 304c0 114.9-93.1 208-208 208S16 418.9 16 304c0-104 76.3-190.2 176-205.5V64h-28c-6.6 0-12-5.4-12-12V12c0-6.6 5.4-12 12-12h120c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-28v34.5c37.5 5.8 71.7 21.6 99.7 44.6l27.5-27.5c4.7-4.7 12.3-4.7 17 0l28.3 28.3c4.7 4.7 4.7 12.3 0 17l-29.4 29.4-.6.6C419.7 223.3 432 262.2 432 304zm-176 36V188.5c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12V340c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z"]
    };
    exports.faStopwatch = faStopwatch;
    var faStopwatch20 = {
      prefix: 'fas',
      iconName: 'stopwatch-20',
      icon: [448, 512, [], "e06f", "M398.5,190.91l.59-.61,26.59-26.58a16,16,0,0,0,0-22.63L403,118.41a16,16,0,0,0-22.63,0l-24.68,24.68A206.68,206.68,0,0,0,256,98.5V64h32a16,16,0,0,0,16-16V16A16,16,0,0,0,288,0H160a16.05,16.05,0,0,0-16,16V48a16.05,16.05,0,0,0,16,16h32V98.5A207.92,207.92,0,0,0,16.09,297.57C12.64,411.5,106.76,510.22,220.72,512,337.13,513.77,432,420,432,304A206,206,0,0,0,398.5,190.91ZM204.37,377.55a8.2,8.2,0,0,1,8.32,8.07v22.31a8.2,8.2,0,0,1-8.32,8.07H121.52a16.46,16.46,0,0,1-16.61-17.62c2.78-35.22,14.67-57.41,38.45-91.37,20.42-29.19,27.1-37.32,27.1-62.34,0-16.92-1.79-24.27-12.21-24.27-9.39,0-12.69,7.4-12.69,22.68v5.23a8.2,8.2,0,0,1-8.33,8.07h-24.9a8.2,8.2,0,0,1-8.33-8.07v-4.07c0-27.3,8.48-60.24,56.43-60.24,43,0,55.57,25.85,55.57,61,0,35.58-12.44,51.21-34.35,81.31-11.56,15-24.61,35.57-26.41,51.2ZM344,352.32c0,35.16-12.3,63.68-57.23,63.68C243.19,416,232,386.48,232,352.55V247.22c0-40.73,19.58-63.22,56.2-63.22C325,184,344,206.64,344,245.3ZM287.87,221.73c-9.41,0-13.23,7.5-13.23,20V357.68c0,13.11,3.59,20.59,13.23,20.59s13-8,13-21.27V241.06C300.89,229.79,297.88,221.73,287.87,221.73Z"]
    };
    exports.faStopwatch20 = faStopwatch20;
    var faStore = {
      prefix: 'fas',
      iconName: 'store',
      icon: [616, 512, [], "f54e", "M602 118.6L537.1 15C531.3 5.7 521 0 510 0H106C95 0 84.7 5.7 78.9 15L14 118.6c-33.5 53.5-3.8 127.9 58.8 136.4 4.5.6 9.1.9 13.7.9 29.6 0 55.8-13 73.8-33.1 18 20.1 44.3 33.1 73.8 33.1 29.6 0 55.8-13 73.8-33.1 18 20.1 44.3 33.1 73.8 33.1 29.6 0 55.8-13 73.8-33.1 18.1 20.1 44.3 33.1 73.8 33.1 4.7 0 9.2-.3 13.7-.9 62.8-8.4 92.6-82.8 59-136.4zM529.5 288c-10 0-19.9-1.5-29.5-3.8V384H116v-99.8c-9.6 2.2-19.5 3.8-29.5 3.8-6 0-12.1-.4-18-1.2-5.6-.8-11.1-2.1-16.4-3.6V480c0 17.7 14.3 32 32 32h448c17.7 0 32-14.3 32-32V283.2c-5.4 1.6-10.8 2.9-16.4 3.6-6.1.8-12.1 1.2-18.2 1.2z"]
    };
    exports.faStore = faStore;
    var faStoreAlt = {
      prefix: 'fas',
      iconName: 'store-alt',
      icon: [640, 512, [], "f54f", "M320 384H128V224H64v256c0 17.7 14.3 32 32 32h256c17.7 0 32-14.3 32-32V224h-64v160zm314.6-241.8l-85.3-128c-6-8.9-16-14.2-26.7-14.2H117.4c-10.7 0-20.7 5.3-26.6 14.2l-85.3 128c-14.2 21.3 1 49.8 26.6 49.8H608c25.5 0 40.7-28.5 26.6-49.8zM512 496c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V224h-64v272z"]
    };
    exports.faStoreAlt = faStoreAlt;
    var faStoreAltSlash = {
      prefix: 'fas',
      iconName: 'store-alt-slash',
      icon: [640, 512, [], "e070", "M17.89,123.62,5.51,142.2c-14.2,21.3,1,49.8,26.59,49.8h74.26ZM576,413.42V224H512V364L384,265V224H330.92l-41.4-32H608c25.5,0,40.7-28.5,26.59-49.8l-85.29-128A32.18,32.18,0,0,0,522.6,0H117.42A31.87,31.87,0,0,0,90.81,14.2l-10.66,16L45.46,3.38A16,16,0,0,0,23,6.19L3.37,31.46A16,16,0,0,0,6.18,53.91L594.53,508.63A16,16,0,0,0,617,505.81l19.64-25.26a16,16,0,0,0-2.81-22.45ZM320,384H128V224H64V480a32,32,0,0,0,32,32H352a32,32,0,0,0,32-32V406.59l-64-49.47Z"]
    };
    exports.faStoreAltSlash = faStoreAltSlash;
    var faStoreSlash = {
      prefix: 'fas',
      iconName: 'store-slash',
      icon: [640, 512, [], "e071", "M121.51,384V284.2a119.43,119.43,0,0,1-28,3.8,123.46,123.46,0,0,1-17.1-1.2,114.88,114.88,0,0,1-15.58-3.6V480c0,17.7,13.59,32,30.4,32H505.75L348.42,384Zm-28-128.09c25.1,0,47.29-10.72,64-27.24L24,120.05c-30.52,53.39-2.45,126.53,56.49,135A95.68,95.68,0,0,0,93.48,255.91ZM602.13,458.09,547.2,413.41V283.2a93.5,93.5,0,0,1-15.57,3.6,127.31,127.31,0,0,1-17.29,1.2,114.89,114.89,0,0,1-28-3.8v79.68L348.52,251.77a88.06,88.06,0,0,0,25.41,4.14c28.11,0,53-13,70.11-33.11,17.19,20.11,42.08,33.11,70.11,33.11a94.31,94.31,0,0,0,13-.91c59.66-8.41,88-82.8,56.06-136.4L521.55,15A30.1,30.1,0,0,0,495.81,0H112A30.11,30.11,0,0,0,86.27,15L76.88,30.78,43.19,3.38A14.68,14.68,0,0,0,21.86,6.19L3.2,31.45A16.58,16.58,0,0,0,5.87,53.91L564.81,508.63a14.69,14.69,0,0,0,21.33-2.82l18.66-25.26A16.58,16.58,0,0,0,602.13,458.09Z"]
    };
    exports.faStoreSlash = faStoreSlash;
    var faStream = {
      prefix: 'fas',
      iconName: 'stream',
      icon: [512, 512, [], "f550", "M16 128h416c8.84 0 16-7.16 16-16V48c0-8.84-7.16-16-16-16H16C7.16 32 0 39.16 0 48v64c0 8.84 7.16 16 16 16zm480 80H80c-8.84 0-16 7.16-16 16v64c0 8.84 7.16 16 16 16h416c8.84 0 16-7.16 16-16v-64c0-8.84-7.16-16-16-16zm-64 176H16c-8.84 0-16 7.16-16 16v64c0 8.84 7.16 16 16 16h416c8.84 0 16-7.16 16-16v-64c0-8.84-7.16-16-16-16z"]
    };
    exports.faStream = faStream;
    var faStreetView = {
      prefix: 'fas',
      iconName: 'street-view',
      icon: [512, 512, [], "f21d", "M367.9 329.76c-4.62 5.3-9.78 10.1-15.9 13.65v22.94c66.52 9.34 112 28.05 112 49.65 0 30.93-93.12 56-208 56S48 446.93 48 416c0-21.6 45.48-40.3 112-49.65v-22.94c-6.12-3.55-11.28-8.35-15.9-13.65C58.87 345.34 0 378.05 0 416c0 53.02 114.62 96 256 96s256-42.98 256-96c0-37.95-58.87-70.66-144.1-86.24zM256 128c35.35 0 64-28.65 64-64S291.35 0 256 0s-64 28.65-64 64 28.65 64 64 64zm-64 192v96c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-96c17.67 0 32-14.33 32-32v-96c0-26.51-21.49-48-48-48h-11.8c-11.07 5.03-23.26 8-36.2 8s-25.13-2.97-36.2-8H208c-26.51 0-48 21.49-48 48v96c0 17.67 14.33 32 32 32z"]
    };
    exports.faStreetView = faStreetView;
    var faStrikethrough = {
      prefix: 'fas',
      iconName: 'strikethrough',
      icon: [512, 512, [], "f0cc", "M496 224H293.9l-87.17-26.83A43.55 43.55 0 0 1 219.55 112h66.79A49.89 49.89 0 0 1 331 139.58a16 16 0 0 0 21.46 7.15l42.94-21.47a16 16 0 0 0 7.16-21.46l-.53-1A128 128 0 0 0 287.51 32h-68a123.68 123.68 0 0 0-123 135.64c2 20.89 10.1 39.83 21.78 56.36H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h480a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-180.24 96A43 43 0 0 1 336 356.45 43.59 43.59 0 0 1 292.45 400h-66.79A49.89 49.89 0 0 1 181 372.42a16 16 0 0 0-21.46-7.15l-42.94 21.47a16 16 0 0 0-7.16 21.46l.53 1A128 128 0 0 0 224.49 480h68a123.68 123.68 0 0 0 123-135.64 114.25 114.25 0 0 0-5.34-24.36z"]
    };
    exports.faStrikethrough = faStrikethrough;
    var faStroopwafel = {
      prefix: 'fas',
      iconName: 'stroopwafel',
      icon: [512, 512, [], "f551", "M188.12 210.74L142.86 256l45.25 45.25L233.37 256l-45.25-45.26zm113.13-22.62L256 142.86l-45.25 45.25L256 233.37l45.25-45.25zm-90.5 135.76L256 369.14l45.26-45.26L256 278.63l-45.25 45.25zM256 0C114.62 0 0 114.62 0 256s114.62 256 256 256 256-114.62 256-256S397.38 0 256 0zm186.68 295.6l-11.31 11.31c-3.12 3.12-8.19 3.12-11.31 0l-28.29-28.29-45.25 45.25 33.94 33.94 16.97-16.97c3.12-3.12 8.19-3.12 11.31 0l11.31 11.31c3.12 3.12 3.12 8.19 0 11.31l-16.97 16.97 16.97 16.97c3.12 3.12 3.12 8.19 0 11.31l-11.31 11.31c-3.12 3.12-8.19 3.12-11.31 0l-16.97-16.97-16.97 16.97c-3.12 3.12-8.19 3.12-11.31 0l-11.31-11.31c-3.12-3.12-3.12-8.19 0-11.31l16.97-16.97-33.94-33.94-45.26 45.26 28.29 28.29c3.12 3.12 3.12 8.19 0 11.31l-11.31 11.31c-3.12 3.12-8.19 3.12-11.31 0L256 414.39l-28.29 28.29c-3.12 3.12-8.19 3.12-11.31 0l-11.31-11.31c-3.12-3.12-3.12-8.19 0-11.31l28.29-28.29-45.25-45.26-33.94 33.94 16.97 16.97c3.12 3.12 3.12 8.19 0 11.31l-11.31 11.31c-3.12 3.12-8.19 3.12-11.31 0l-16.97-16.97-16.97 16.97c-3.12 3.12-8.19 3.12-11.31 0l-11.31-11.31c-3.12-3.12-3.12-8.19 0-11.31l16.97-16.97-16.97-16.97c-3.12-3.12-3.12-8.19 0-11.31l11.31-11.31c3.12-3.12 8.19-3.12 11.31 0l16.97 16.97 33.94-33.94-45.25-45.25-28.29 28.29c-3.12 3.12-8.19 3.12-11.31 0L69.32 295.6c-3.12-3.12-3.12-8.19 0-11.31L97.61 256l-28.29-28.29c-3.12-3.12-3.12-8.19 0-11.31l11.31-11.31c3.12-3.12 8.19-3.12 11.31 0l28.29 28.29 45.25-45.26-33.94-33.94-16.97 16.97c-3.12 3.12-8.19 3.12-11.31 0l-11.31-11.31c-3.12-3.12-3.12-8.19 0-11.31l16.97-16.97-16.97-16.97c-3.12-3.12-3.12-8.19 0-11.31l11.31-11.31c3.12-3.12 8.19-3.12 11.31 0l16.97 16.97 16.97-16.97c3.12-3.12 8.19-3.12 11.31 0l11.31 11.31c3.12 3.12 3.12 8.19 0 11.31l-16.97 16.97 33.94 33.94 45.26-45.25-28.29-28.29c-3.12-3.12-3.12-8.19 0-11.31l11.31-11.31c3.12-3.12 8.19-3.12 11.31 0L256 97.61l28.29-28.29c3.12-3.12 8.19-3.12 11.31 0l11.31 11.31c3.12 3.12 3.12 8.19 0 11.31l-28.29 28.29 45.26 45.25 33.94-33.94-16.97-16.97c-3.12-3.12-3.12-8.19 0-11.31l11.31-11.31c3.12-3.12 8.19-3.12 11.31 0l16.97 16.97 16.97-16.97c3.12-3.12 8.19-3.12 11.31 0l11.31 11.31c3.12 3.12 3.12 8.19 0 11.31l-16.97 16.97 16.97 16.97c3.12 3.12 3.12 8.19 0 11.31l-11.31 11.31c-3.12 3.12-8.19 3.12-11.31 0l-16.97-16.97-33.94 33.94 45.25 45.26 28.29-28.29c3.12-3.12 8.19-3.12 11.31 0l11.31 11.31c3.12 3.12 3.12 8.19 0 11.31L414.39 256l28.29 28.28a8.015 8.015 0 0 1 0 11.32zM278.63 256l45.26 45.25L369.14 256l-45.25-45.26L278.63 256z"]
    };
    exports.faStroopwafel = faStroopwafel;
    var faSubscript = {
      prefix: 'fas',
      iconName: 'subscript',
      icon: [512, 512, [], "f12c", "M496 448h-16V304a16 16 0 0 0-16-16h-48a16 16 0 0 0-14.29 8.83l-16 32A16 16 0 0 0 400 352h16v96h-16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h96a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM336 64h-67a16 16 0 0 0-13.14 6.87l-79.9 115-79.9-115A16 16 0 0 0 83 64H16A16 16 0 0 0 0 80v48a16 16 0 0 0 16 16h33.48l77.81 112-77.81 112H16a16 16 0 0 0-16 16v48a16 16 0 0 0 16 16h67a16 16 0 0 0 13.14-6.87l79.9-115 79.9 115A16 16 0 0 0 269 448h67a16 16 0 0 0 16-16v-48a16 16 0 0 0-16-16h-33.48l-77.81-112 77.81-112H336a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16z"]
    };
    exports.faSubscript = faSubscript;
    var faSubway = {
      prefix: 'fas',
      iconName: 'subway',
      icon: [448, 512, [], "f239", "M448 96v256c0 51.815-61.624 96-130.022 96l62.98 49.721C386.905 502.417 383.562 512 376 512H72c-7.578 0-10.892-9.594-4.957-14.279L130.022 448C61.82 448 0 403.954 0 352V96C0 42.981 64 0 128 0h192c65 0 128 42.981 128 96zM200 232V120c0-13.255-10.745-24-24-24H72c-13.255 0-24 10.745-24 24v112c0 13.255 10.745 24 24 24h104c13.255 0 24-10.745 24-24zm200 0V120c0-13.255-10.745-24-24-24H272c-13.255 0-24 10.745-24 24v112c0 13.255 10.745 24 24 24h104c13.255 0 24-10.745 24-24zm-48 56c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm-256 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48z"]
    };
    exports.faSubway = faSubway;
    var faSuitcase = {
      prefix: 'fas',
      iconName: 'suitcase',
      icon: [512, 512, [], "f0f2", "M128 480h256V80c0-26.5-21.5-48-48-48H176c-26.5 0-48 21.5-48 48v400zm64-384h128v32H192V96zm320 80v256c0 26.5-21.5 48-48 48h-48V128h48c26.5 0 48 21.5 48 48zM96 480H48c-26.5 0-48-21.5-48-48V176c0-26.5 21.5-48 48-48h48v352z"]
    };
    exports.faSuitcase = faSuitcase;
    var faSuitcaseRolling = {
      prefix: 'fas',
      iconName: 'suitcase-rolling',
      icon: [384, 512, [], "f5c1", "M336 160H48c-26.51 0-48 21.49-48 48v224c0 26.51 21.49 48 48 48h16v16c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-16h128v16c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-16h16c26.51 0 48-21.49 48-48V208c0-26.51-21.49-48-48-48zm-16 216c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h240c4.42 0 8 3.58 8 8v16zm0-96c0 4.42-3.58 8-8 8H72c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h240c4.42 0 8 3.58 8 8v16zM144 48h96v80h48V48c0-26.51-21.49-48-48-48h-96c-26.51 0-48 21.49-48 48v80h48V48z"]
    };
    exports.faSuitcaseRolling = faSuitcaseRolling;
    var faSun = {
      prefix: 'fas',
      iconName: 'sun',
      icon: [512, 512, [], "f185", "M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z"]
    };
    exports.faSun = faSun;
    var faSuperscript = {
      prefix: 'fas',
      iconName: 'superscript',
      icon: [512, 512, [], "f12b", "M496 160h-16V16a16 16 0 0 0-16-16h-48a16 16 0 0 0-14.29 8.83l-16 32A16 16 0 0 0 400 64h16v96h-16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h96a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM336 64h-67a16 16 0 0 0-13.14 6.87l-79.9 115-79.9-115A16 16 0 0 0 83 64H16A16 16 0 0 0 0 80v48a16 16 0 0 0 16 16h33.48l77.81 112-77.81 112H16a16 16 0 0 0-16 16v48a16 16 0 0 0 16 16h67a16 16 0 0 0 13.14-6.87l79.9-115 79.9 115A16 16 0 0 0 269 448h67a16 16 0 0 0 16-16v-48a16 16 0 0 0-16-16h-33.48l-77.81-112 77.81-112H336a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16z"]
    };
    exports.faSuperscript = faSuperscript;
    var faSurprise = {
      prefix: 'fas',
      iconName: 'surprise',
      icon: [496, 512, [], "f5c2", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM136 208c0-17.7 14.3-32 32-32s32 14.3 32 32-14.3 32-32 32-32-14.3-32-32zm112 208c-35.3 0-64-28.7-64-64s28.7-64 64-64 64 28.7 64 64-28.7 64-64 64zm80-176c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faSurprise = faSurprise;
    var faSwatchbook = {
      prefix: 'fas',
      iconName: 'swatchbook',
      icon: [512, 512, [], "f5c3", "M434.66,167.71h0L344.5,77.36a31.83,31.83,0,0,0-45-.07h0l-.07.07L224,152.88V424L434.66,212.9A32,32,0,0,0,434.66,167.71ZM480,320H373.09L186.68,506.51c-2.06,2.07-4.5,3.58-6.68,5.49H480a32,32,0,0,0,32-32V352A32,32,0,0,0,480,320ZM192,32A32,32,0,0,0,160,0H32A32,32,0,0,0,0,32V416a96,96,0,0,0,192,0ZM96,440a24,24,0,1,1,24-24A24,24,0,0,1,96,440Zm32-184H64V192h64Zm0-128H64V64h64Z"]
    };
    exports.faSwatchbook = faSwatchbook;
    var faSwimmer = {
      prefix: 'fas',
      iconName: 'swimmer',
      icon: [640, 512, [], "f5c4", "M189.61 310.58c3.54 3.26 15.27 9.42 34.39 9.42s30.86-6.16 34.39-9.42c16.02-14.77 34.5-22.58 53.46-22.58h16.3c18.96 0 37.45 7.81 53.46 22.58 3.54 3.26 15.27 9.42 34.39 9.42s30.86-6.16 34.39-9.42c14.86-13.71 31.88-21.12 49.39-22.16l-112.84-80.6 18-12.86c3.64-2.58 8.28-3.52 12.62-2.61l100.35 21.53c25.91 5.53 51.44-10.97 57-36.88 5.55-25.92-10.95-51.44-36.88-57L437.68 98.47c-30.73-6.58-63.02.12-88.56 18.38l-80.02 57.17c-10.38 7.39-19.36 16.44-26.72 26.94L173.75 299c5.47 3.23 10.82 6.93 15.86 11.58zM624 352h-16c-26.04 0-45.8-8.42-56.09-17.9-8.9-8.21-19.66-14.1-31.77-14.1h-16.3c-12.11 0-22.87 5.89-31.77 14.1C461.8 343.58 442.04 352 416 352s-45.8-8.42-56.09-17.9c-8.9-8.21-19.66-14.1-31.77-14.1h-16.3c-12.11 0-22.87 5.89-31.77 14.1C269.8 343.58 250.04 352 224 352s-45.8-8.42-56.09-17.9c-8.9-8.21-19.66-14.1-31.77-14.1h-16.3c-12.11 0-22.87 5.89-31.77 14.1C77.8 343.58 58.04 352 32 352H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h16c38.62 0 72.72-12.19 96-31.84 23.28 19.66 57.38 31.84 96 31.84s72.72-12.19 96-31.84c23.28 19.66 57.38 31.84 96 31.84s72.72-12.19 96-31.84c23.28 19.66 57.38 31.84 96 31.84h16c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zm-512-96c44.18 0 80-35.82 80-80s-35.82-80-80-80-80 35.82-80 80 35.82 80 80 80z"]
    };
    exports.faSwimmer = faSwimmer;
    var faSwimmingPool = {
      prefix: 'fas',
      iconName: 'swimming-pool',
      icon: [640, 512, [], "f5c5", "M624 416h-16c-26.04 0-45.8-8.42-56.09-17.9-8.9-8.21-19.66-14.1-31.77-14.1h-16.3c-12.11 0-22.87 5.89-31.77 14.1C461.8 407.58 442.04 416 416 416s-45.8-8.42-56.09-17.9c-8.9-8.21-19.66-14.1-31.77-14.1h-16.3c-12.11 0-22.87 5.89-31.77 14.1C269.8 407.58 250.04 416 224 416s-45.8-8.42-56.09-17.9c-8.9-8.21-19.66-14.1-31.77-14.1h-16.3c-12.11 0-22.87 5.89-31.77 14.1C77.8 407.58 58.04 416 32 416H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h16c38.62 0 72.72-12.19 96-31.84 23.28 19.66 57.38 31.84 96 31.84s72.72-12.19 96-31.84c23.28 19.66 57.38 31.84 96 31.84s72.72-12.19 96-31.84c23.28 19.66 57.38 31.84 96 31.84h16c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zm-400-32v-96h192v96c19.12 0 30.86-6.16 34.39-9.42 9.17-8.46 19.2-14.34 29.61-18.07V128c0-17.64 14.36-32 32-32s32 14.36 32 32v16c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-16c0-52.94-43.06-96-96-96s-96 43.06-96 96v96H224v-96c0-17.64 14.36-32 32-32s32 14.36 32 32v16c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-16c0-52.94-43.06-96-96-96s-96 43.06-96 96v228.5c10.41 3.73 20.44 9.62 29.61 18.07 3.53 3.27 15.27 9.43 34.39 9.43z"]
    };
    exports.faSwimmingPool = faSwimmingPool;
    var faSynagogue = {
      prefix: 'fas',
      iconName: 'synagogue',
      icon: [640, 512, [], "f69b", "M70 196.51L6.67 268.29A26.643 26.643 0 0 0 0 285.93V512h128V239.58l-38-43.07c-5.31-6.01-14.69-6.01-20 0zm563.33 71.78L570 196.51c-5.31-6.02-14.69-6.02-20 0l-38 43.07V512h128V285.93c0-6.5-2.37-12.77-6.67-17.64zM339.99 7.01c-11.69-9.35-28.29-9.35-39.98 0l-128 102.4A32.005 32.005 0 0 0 160 134.4V512h96v-92.57c0-31.88 21.78-61.43 53.25-66.55C349.34 346.35 384 377.13 384 416v96h96V134.4c0-9.72-4.42-18.92-12.01-24.99l-128-102.4zm52.07 215.55c1.98 3.15-.29 7.24-4 7.24h-38.94L324 269.79c-1.85 2.95-6.15 2.95-8 0l-25.12-39.98h-38.94c-3.72 0-5.98-4.09-4-7.24l19.2-30.56-19.2-30.56c-1.98-3.15.29-7.24 4-7.24h38.94l25.12-40c1.85-2.95 6.15-2.95 8 0l25.12 39.98h38.95c3.71 0 5.98 4.09 4 7.24L372.87 192l19.19 30.56z"]
    };
    exports.faSynagogue = faSynagogue;
    var faSync = {
      prefix: 'fas',
      iconName: 'sync',
      icon: [512, 512, [], "f021", "M440.65 12.57l4 82.77A247.16 247.16 0 0 0 255.83 8C134.73 8 33.91 94.92 12.29 209.82A12 12 0 0 0 24.09 224h49.05a12 12 0 0 0 11.67-9.26 175.91 175.91 0 0 1 317-56.94l-101.46-4.86a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12H500a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12h-47.37a12 12 0 0 0-11.98 12.57zM255.83 432a175.61 175.61 0 0 1-146-77.8l101.8 4.87a12 12 0 0 0 12.57-12v-47.4a12 12 0 0 0-12-12H12a12 12 0 0 0-12 12V500a12 12 0 0 0 12 12h47.35a12 12 0 0 0 12-12.6l-4.15-82.57A247.17 247.17 0 0 0 255.83 504c121.11 0 221.93-86.92 243.55-201.82a12 12 0 0 0-11.8-14.18h-49.05a12 12 0 0 0-11.67 9.26A175.86 175.86 0 0 1 255.83 432z"]
    };
    exports.faSync = faSync;
    var faSyncAlt = {
      prefix: 'fas',
      iconName: 'sync-alt',
      icon: [512, 512, [], "f2f1", "M370.72 133.28C339.458 104.008 298.888 87.962 255.848 88c-77.458.068-144.328 53.178-162.791 126.85-1.344 5.363-6.122 9.15-11.651 9.15H24.103c-7.498 0-13.194-6.807-11.807-14.176C33.933 94.924 134.813 8 256 8c66.448 0 126.791 26.136 171.315 68.685L463.03 40.97C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.749zM32 296h134.059c21.382 0 32.09 25.851 16.971 40.971l-41.75 41.75c31.262 29.273 71.835 45.319 114.876 45.28 77.418-.07 144.315-53.144 162.787-126.849 1.344-5.363 6.122-9.15 11.651-9.15h57.304c7.498 0 13.194 6.807 11.807 14.176C478.067 417.076 377.187 504 256 504c-66.448 0-126.791-26.136-171.315-68.685L48.97 471.03C33.851 486.149 8 475.441 8 454.059V320c0-13.255 10.745-24 24-24z"]
    };
    exports.faSyncAlt = faSyncAlt;
    var faSyringe = {
      prefix: 'fas',
      iconName: 'syringe',
      icon: [512, 512, [], "f48e", "M201.5 174.8l55.7 55.8c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0l-55.7-55.8-45.3 45.3 55.8 55.8c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0L111 265.2l-26.4 26.4c-17.3 17.3-25.6 41.1-23 65.4l7.1 63.6L2.3 487c-3.1 3.1-3.1 8.2 0 11.3l11.3 11.3c3.1 3.1 8.2 3.1 11.3 0l66.3-66.3 63.6 7.1c23.9 2.6 47.9-5.4 65.4-23l181.9-181.9-135.7-135.7-64.9 65zm308.2-93.3L430.5 2.3c-3.1-3.1-8.2-3.1-11.3 0l-11.3 11.3c-3.1 3.1-3.1 8.2 0 11.3l28.3 28.3-45.3 45.3-56.6-56.6-17-17c-3.1-3.1-8.2-3.1-11.3 0l-33.9 33.9c-3.1 3.1-3.1 8.2 0 11.3l17 17L424.8 223l17 17c3.1 3.1 8.2 3.1 11.3 0l33.9-34c3.1-3.1 3.1-8.2 0-11.3l-73.5-73.5 45.3-45.3 28.3 28.3c3.1 3.1 8.2 3.1 11.3 0l11.3-11.3c3.1-3.2 3.1-8.2 0-11.4z"]
    };
    exports.faSyringe = faSyringe;
    var faTable = {
      prefix: 'fas',
      iconName: 'table',
      icon: [512, 512, [], "f0ce", "M464 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM224 416H64v-96h160v96zm0-160H64v-96h160v96zm224 160H288v-96h160v96zm0-160H288v-96h160v96z"]
    };
    exports.faTable = faTable;
    var faTableTennis = {
      prefix: 'fas',
      iconName: 'table-tennis',
      icon: [512, 512, [], "f45d", "M496.2 296.5C527.7 218.7 512 126.2 449 63.1 365.1-21 229-21 145.1 63.1l-56 56.1 211.5 211.5c46.1-62.1 131.5-77.4 195.6-34.2zm-217.9 79.7L57.9 155.9c-27.3 45.3-21.7 105 17.3 144.1l34.5 34.6L6.7 424c-8.6 7.5-9.1 20.7-1 28.8l53.4 53.5c8 8.1 21.2 7.6 28.7-1L177.1 402l35.7 35.7c19.7 19.7 44.6 30.5 70.3 33.3-7.1-17-11-35.6-11-55.1-.1-13.8 2.5-27 6.2-39.7zM416 320c-53 0-96 43-96 96s43 96 96 96 96-43 96-96-43-96-96-96z"]
    };
    exports.faTableTennis = faTableTennis;
    var faTablet = {
      prefix: 'fas',
      iconName: 'tablet',
      icon: [448, 512, [], "f10a", "M400 0H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zM224 480c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"]
    };
    exports.faTablet = faTablet;
    var faTabletAlt = {
      prefix: 'fas',
      iconName: 'tablet-alt',
      icon: [448, 512, [], "f3fa", "M400 0H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zM224 480c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm176-108c0 6.6-5.4 12-12 12H60c-6.6 0-12-5.4-12-12V60c0-6.6 5.4-12 12-12h328c6.6 0 12 5.4 12 12v312z"]
    };
    exports.faTabletAlt = faTabletAlt;
    var faTablets = {
      prefix: 'fas',
      iconName: 'tablets',
      icon: [640, 512, [], "f490", "M160 192C78.9 192 12.5 250.5.1 326.7c-.8 4.8 3.3 9.3 8.3 9.3h303.3c5 0 9.1-4.5 8.3-9.3C307.5 250.5 241.1 192 160 192zm151.6 176H8.4c-5 0-9.1 4.5-8.3 9.3C12.5 453.5 78.9 512 160 512s147.5-58.5 159.9-134.7c.8-4.8-3.3-9.3-8.3-9.3zM593.4 46.6c-56.5-56.5-144.2-61.4-206.9-16-4 2.9-4.3 8.9-.8 12.3L597 254.3c3.5 3.5 9.5 3.2 12.3-.8 45.5-62.7 40.6-150.4-15.9-206.9zM363 65.7c-3.5-3.5-9.5-3.2-12.3.8-45.4 62.7-40.5 150.4 15.9 206.9 56.5 56.5 144.2 61.4 206.9 15.9 4-2.9 4.3-8.9.8-12.3L363 65.7z"]
    };
    exports.faTablets = faTablets;
    var faTachometerAlt = {
      prefix: 'fas',
      iconName: 'tachometer-alt',
      icon: [576, 512, [], "f3fd", "M288 32C128.94 32 0 160.94 0 320c0 52.8 14.25 102.26 39.06 144.8 5.61 9.62 16.3 15.2 27.44 15.2h443c11.14 0 21.83-5.58 27.44-15.2C561.75 422.26 576 372.8 576 320c0-159.06-128.94-288-288-288zm0 64c14.71 0 26.58 10.13 30.32 23.65-1.11 2.26-2.64 4.23-3.45 6.67l-9.22 27.67c-5.13 3.49-10.97 6.01-17.64 6.01-17.67 0-32-14.33-32-32S270.33 96 288 96zM96 384c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm48-160c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm246.77-72.41l-61.33 184C343.13 347.33 352 364.54 352 384c0 11.72-3.38 22.55-8.88 32H232.88c-5.5-9.45-8.88-20.28-8.88-32 0-33.94 26.5-61.43 59.9-63.59l61.34-184.01c4.17-12.56 17.73-19.45 30.36-15.17 12.57 4.19 19.35 17.79 15.17 30.36zm14.66 57.2l15.52-46.55c3.47-1.29 7.13-2.23 11.05-2.23 17.67 0 32 14.33 32 32s-14.33 32-32 32c-11.38-.01-20.89-6.28-26.57-15.22zM480 384c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faTachometerAlt = faTachometerAlt;
    var faTag = {
      prefix: 'fas',
      iconName: 'tag',
      icon: [512, 512, [], "f02b", "M0 252.118V48C0 21.49 21.49 0 48 0h204.118a48 48 0 0 1 33.941 14.059l211.882 211.882c18.745 18.745 18.745 49.137 0 67.882L293.823 497.941c-18.745 18.745-49.137 18.745-67.882 0L14.059 286.059A48 48 0 0 1 0 252.118zM112 64c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48z"]
    };
    exports.faTag = faTag;
    var faTags = {
      prefix: 'fas',
      iconName: 'tags',
      icon: [640, 512, [], "f02c", "M497.941 225.941L286.059 14.059A48 48 0 0 0 252.118 0H48C21.49 0 0 21.49 0 48v204.118a48 48 0 0 0 14.059 33.941l211.882 211.882c18.744 18.745 49.136 18.746 67.882 0l204.118-204.118c18.745-18.745 18.745-49.137 0-67.882zM112 160c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48zm513.941 133.823L421.823 497.941c-18.745 18.745-49.137 18.745-67.882 0l-.36-.36L527.64 323.522c16.999-16.999 26.36-39.6 26.36-63.64s-9.362-46.641-26.36-63.64L331.397 0h48.721a48 48 0 0 1 33.941 14.059l211.882 211.882c18.745 18.745 18.745 49.137 0 67.882z"]
    };
    exports.faTags = faTags;
    var faTape = {
      prefix: 'fas',
      iconName: 'tape',
      icon: [640, 512, [], "f4db", "M224 192c-35.3 0-64 28.7-64 64s28.7 64 64 64 64-28.7 64-64-28.7-64-64-64zm400 224H380.6c41.5-40.7 67.4-97.3 67.4-160 0-123.7-100.3-224-224-224S0 132.3 0 256s100.3 224 224 224h400c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm-400-64c-53 0-96-43-96-96s43-96 96-96 96 43 96 96-43 96-96 96z"]
    };
    exports.faTape = faTape;
    var faTasks = {
      prefix: 'fas',
      iconName: 'tasks',
      icon: [512, 512, [], "f0ae", "M139.61 35.5a12 12 0 0 0-17 0L58.93 98.81l-22.7-22.12a12 12 0 0 0-17 0L3.53 92.41a12 12 0 0 0 0 17l47.59 47.4a12.78 12.78 0 0 0 17.61 0l15.59-15.62L156.52 69a12.09 12.09 0 0 0 .09-17zm0 159.19a12 12 0 0 0-17 0l-63.68 63.72-22.7-22.1a12 12 0 0 0-17 0L3.53 252a12 12 0 0 0 0 17L51 316.5a12.77 12.77 0 0 0 17.6 0l15.7-15.69 72.2-72.22a12 12 0 0 0 .09-16.9zM64 368c-26.49 0-48.59 21.5-48.59 48S37.53 464 64 464a48 48 0 0 0 0-96zm432 16H208a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h288a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-320H208a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h288a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 160H208a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h288a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z"]
    };
    exports.faTasks = faTasks;
    var faTaxi = {
      prefix: 'fas',
      iconName: 'taxi',
      icon: [512, 512, [], "f1ba", "M462 241.64l-22-84.84c-9.6-35.2-41.6-60.8-76.8-60.8H352V64c0-17.67-14.33-32-32-32H192c-17.67 0-32 14.33-32 32v32h-11.2c-35.2 0-67.2 25.6-76.8 60.8l-22 84.84C21.41 248.04 0 273.47 0 304v48c0 23.63 12.95 44.04 32 55.12V448c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32v-32h256v32c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32v-40.88c19.05-11.09 32-31.5 32-55.12v-48c0-30.53-21.41-55.96-50-62.36zM96 352c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm20.55-112l17.2-66.36c2.23-8.16 9.59-13.64 15.06-13.64h214.4c5.47 0 12.83 5.48 14.85 12.86L395.45 240h-278.9zM416 352c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faTaxi = faTaxi;
    var faTeeth = {
      prefix: 'fas',
      iconName: 'teeth',
      icon: [640, 512, [], "f62e", "M544 0H96C42.98 0 0 42.98 0 96v320c0 53.02 42.98 96 96 96h448c53.02 0 96-42.98 96-96V96c0-53.02-42.98-96-96-96zM160 368c0 26.51-21.49 48-48 48s-48-21.49-48-48v-64c0-8.84 7.16-16 16-16h64c8.84 0 16 7.16 16 16v64zm0-128c0 8.84-7.16 16-16 16H80c-8.84 0-16-7.16-16-16v-64c0-26.51 21.49-48 48-48s48 21.49 48 48v64zm144 120c0 30.93-25.07 56-56 56s-56-25.07-56-56v-56c0-8.84 7.16-16 16-16h80c8.84 0 16 7.16 16 16v56zm0-120c0 8.84-7.16 16-16 16h-80c-8.84 0-16-7.16-16-16v-88c0-30.93 25.07-56 56-56s56 25.07 56 56v88zm144 120c0 30.93-25.07 56-56 56s-56-25.07-56-56v-56c0-8.84 7.16-16 16-16h80c8.84 0 16 7.16 16 16v56zm0-120c0 8.84-7.16 16-16 16h-80c-8.84 0-16-7.16-16-16v-88c0-30.93 25.07-56 56-56s56 25.07 56 56v88zm128 128c0 26.51-21.49 48-48 48s-48-21.49-48-48v-64c0-8.84 7.16-16 16-16h64c8.84 0 16 7.16 16 16v64zm0-128c0 8.84-7.16 16-16 16h-64c-8.84 0-16-7.16-16-16v-64c0-26.51 21.49-48 48-48s48 21.49 48 48v64z"]
    };
    exports.faTeeth = faTeeth;
    var faTeethOpen = {
      prefix: 'fas',
      iconName: 'teeth-open',
      icon: [640, 512, [], "f62f", "M544 0H96C42.98 0 0 42.98 0 96v64c0 35.35 28.66 64 64 64h512c35.34 0 64-28.65 64-64V96c0-53.02-42.98-96-96-96zM160 176c0 8.84-7.16 16-16 16H80c-8.84 0-16-7.16-16-16v-32c0-26.51 21.49-48 48-48s48 21.49 48 48v32zm144 0c0 8.84-7.16 16-16 16h-80c-8.84 0-16-7.16-16-16v-56c0-30.93 25.07-56 56-56s56 25.07 56 56v56zm144 0c0 8.84-7.16 16-16 16h-80c-8.84 0-16-7.16-16-16v-56c0-30.93 25.07-56 56-56s56 25.07 56 56v56zm128 0c0 8.84-7.16 16-16 16h-64c-8.84 0-16-7.16-16-16v-32c0-26.51 21.49-48 48-48s48 21.49 48 48v32zm0 144H64c-35.34 0-64 28.65-64 64v32c0 53.02 42.98 96 96 96h448c53.02 0 96-42.98 96-96v-32c0-35.35-28.66-64-64-64zm-416 80c0 26.51-21.49 48-48 48s-48-21.49-48-48v-32c0-8.84 7.16-16 16-16h64c8.84 0 16 7.16 16 16v32zm144-8c0 30.93-25.07 56-56 56s-56-25.07-56-56v-24c0-8.84 7.16-16 16-16h80c8.84 0 16 7.16 16 16v24zm144 0c0 30.93-25.07 56-56 56s-56-25.07-56-56v-24c0-8.84 7.16-16 16-16h80c8.84 0 16 7.16 16 16v24zm128 8c0 26.51-21.49 48-48 48s-48-21.49-48-48v-32c0-8.84 7.16-16 16-16h64c8.84 0 16 7.16 16 16v32z"]
    };
    exports.faTeethOpen = faTeethOpen;
    var faTemperatureHigh = {
      prefix: 'fas',
      iconName: 'temperature-high',
      icon: [512, 512, [], "f769", "M416 0c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm0 128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm-160-16C256 50.1 205.9 0 144 0S32 50.1 32 112v166.5C12.3 303.2 0 334 0 368c0 79.5 64.5 144 144 144s144-64.5 144-144c0-34-12.3-64.9-32-89.5V112zM144 448c-44.1 0-80-35.9-80-80 0-25.5 12.2-48.9 32-63.8V112c0-26.5 21.5-48 48-48s48 21.5 48 48v192.2c19.8 14.8 32 38.3 32 63.8 0 44.1-35.9 80-80 80zm16-125.1V112c0-8.8-7.2-16-16-16s-16 7.2-16 16v210.9c-18.6 6.6-32 24.2-32 45.1 0 26.5 21.5 48 48 48s48-21.5 48-48c0-20.9-13.4-38.5-32-45.1z"]
    };
    exports.faTemperatureHigh = faTemperatureHigh;
    var faTemperatureLow = {
      prefix: 'fas',
      iconName: 'temperature-low',
      icon: [512, 512, [], "f76b", "M416 0c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm0 128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm-160-16C256 50.1 205.9 0 144 0S32 50.1 32 112v166.5C12.3 303.2 0 334 0 368c0 79.5 64.5 144 144 144s144-64.5 144-144c0-34-12.3-64.9-32-89.5V112zM144 448c-44.1 0-80-35.9-80-80 0-25.5 12.2-48.9 32-63.8V112c0-26.5 21.5-48 48-48s48 21.5 48 48v192.2c19.8 14.8 32 38.3 32 63.8 0 44.1-35.9 80-80 80zm16-125.1V304c0-8.8-7.2-16-16-16s-16 7.2-16 16v18.9c-18.6 6.6-32 24.2-32 45.1 0 26.5 21.5 48 48 48s48-21.5 48-48c0-20.9-13.4-38.5-32-45.1z"]
    };
    exports.faTemperatureLow = faTemperatureLow;
    var faTenge = {
      prefix: 'fas',
      iconName: 'tenge',
      icon: [384, 512, [], "f7d7", "M372 160H12c-6.6 0-12 5.4-12 12v56c0 6.6 5.4 12 12 12h140v228c0 6.6 5.4 12 12 12h56c6.6 0 12-5.4 12-12V240h140c6.6 0 12-5.4 12-12v-56c0-6.6-5.4-12-12-12zm0-128H12C5.4 32 0 37.4 0 44v56c0 6.6 5.4 12 12 12h360c6.6 0 12-5.4 12-12V44c0-6.6-5.4-12-12-12z"]
    };
    exports.faTenge = faTenge;
    var faTerminal = {
      prefix: 'fas',
      iconName: 'terminal',
      icon: [640, 512, [], "f120", "M257.981 272.971L63.638 467.314c-9.373 9.373-24.569 9.373-33.941 0L7.029 444.647c-9.357-9.357-9.375-24.522-.04-33.901L161.011 256 6.99 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L257.981 239.03c9.373 9.372 9.373 24.568 0 33.941zM640 456v-32c0-13.255-10.745-24-24-24H312c-13.255 0-24 10.745-24 24v32c0 13.255 10.745 24 24 24h304c13.255 0 24-10.745 24-24z"]
    };
    exports.faTerminal = faTerminal;
    var faTextHeight = {
      prefix: 'fas',
      iconName: 'text-height',
      icon: [576, 512, [], "f034", "M304 32H16A16 16 0 0 0 0 48v96a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32h56v304H80a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h160a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-40V112h56v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zm256 336h-48V144h48c14.31 0 21.33-17.31 11.31-27.31l-80-80a16 16 0 0 0-22.62 0l-80 80C379.36 126 384.36 144 400 144h48v224h-48c-14.31 0-21.32 17.31-11.31 27.31l80 80a16 16 0 0 0 22.62 0l80-80C580.64 386 575.64 368 560 368z"]
    };
    exports.faTextHeight = faTextHeight;
    var faTextWidth = {
      prefix: 'fas',
      iconName: 'text-width',
      icon: [448, 512, [], "f035", "M432 32H16A16 16 0 0 0 0 48v80a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-16h120v112h-24a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-24V112h120v16a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zm-68.69 260.69C354 283.36 336 288.36 336 304v48H112v-48c0-14.31-17.31-21.32-27.31-11.31l-80 80a16 16 0 0 0 0 22.62l80 80C94 484.64 112 479.64 112 464v-48h224v48c0 14.31 17.31 21.33 27.31 11.31l80-80a16 16 0 0 0 0-22.62z"]
    };
    exports.faTextWidth = faTextWidth;
    var faTh = {
      prefix: 'fas',
      iconName: 'th',
      icon: [512, 512, [], "f00a", "M149.333 56v80c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h101.333c13.255 0 24 10.745 24 24zm181.334 240v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm32-240v80c0 13.255 10.745 24 24 24H488c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24zm-32 80V56c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm-205.334 56H24c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24zM0 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm386.667-56H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zm0 160H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zM181.333 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24z"]
    };
    exports.faTh = faTh;
    var faThLarge = {
      prefix: 'fas',
      iconName: 'th-large',
      icon: [512, 512, [], "f009", "M296 32h192c13.255 0 24 10.745 24 24v160c0 13.255-10.745 24-24 24H296c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24zm-80 0H24C10.745 32 0 42.745 0 56v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24zM0 296v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm296 184h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H296c-13.255 0-24 10.745-24 24v160c0 13.255 10.745 24 24 24z"]
    };
    exports.faThLarge = faThLarge;
    var faThList = {
      prefix: 'fas',
      iconName: 'th-list',
      icon: [512, 512, [], "f00b", "M149.333 216v80c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24v-80c0-13.255 10.745-24 24-24h101.333c13.255 0 24 10.745 24 24zM0 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zM125.333 32H24C10.745 32 0 42.745 0 56v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24zm80 448H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zm-24-424v80c0 13.255 10.745 24 24 24H488c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24zm24 264H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24z"]
    };
    exports.faThList = faThList;
    var faTheaterMasks = {
      prefix: 'fas',
      iconName: 'theater-masks',
      icon: [640, 512, [], "f630", "M206.86 245.15c-35.88 10.45-59.95 41.2-57.53 74.1 11.4-12.72 28.81-23.7 49.9-30.92l7.63-43.18zM95.81 295L64.08 115.49c-.29-1.62.28-2.62.24-2.65 57.76-32.06 123.12-49.01 189.01-49.01 1.61 0 3.23.17 4.85.19 13.95-13.47 31.73-22.83 51.59-26 18.89-3.02 38.05-4.55 57.18-5.32-9.99-13.95-24.48-24.23-41.77-27C301.27 1.89 277.24 0 253.32 0 176.66 0 101.02 19.42 33.2 57.06 9.03 70.48-3.92 98.48 1.05 126.58l31.73 179.51c14.23 80.52 136.33 142.08 204.45 142.08 3.59 0 6.75-.46 10.01-.8-13.52-17.08-28.94-40.48-39.5-67.58-47.61-12.98-106.06-51.62-111.93-84.79zm97.55-137.46c-.73-4.12-2.23-7.87-4.07-11.4-8.25 8.91-20.67 15.75-35.32 18.32-14.65 2.58-28.67.4-39.48-5.17-.52 3.94-.64 7.98.09 12.1 3.84 21.7 24.58 36.19 46.34 32.37 21.75-3.82 36.28-24.52 32.44-46.22zM606.8 120.9c-88.98-49.38-191.43-67.41-291.98-51.35-27.31 4.36-49.08 26.26-54.04 54.36l-31.73 179.51c-15.39 87.05 95.28 196.27 158.31 207.35 63.03 11.09 204.47-53.79 219.86-140.84l31.73-179.51c4.97-28.11-7.98-56.11-32.15-69.52zm-273.24 96.8c3.84-21.7 24.58-36.19 46.34-32.36 21.76 3.83 36.28 24.52 32.45 46.22-.73 4.12-2.23 7.87-4.07 11.4-8.25-8.91-20.67-15.75-35.32-18.32-14.65-2.58-28.67-.4-39.48 5.17-.53-3.95-.65-7.99.08-12.11zm70.47 198.76c-55.68-9.79-93.52-59.27-89.04-112.9 20.6 25.54 56.21 46.17 99.49 53.78 43.28 7.61 83.82.37 111.93-16.6-14.18 51.94-66.71 85.51-122.38 75.72zm130.3-151.34c-8.25-8.91-20.68-15.75-35.33-18.32-14.65-2.58-28.67-.4-39.48 5.17-.52-3.94-.64-7.98.09-12.1 3.84-21.7 24.58-36.19 46.34-32.37 21.75 3.83 36.28 24.52 32.45 46.22-.73 4.13-2.23 7.88-4.07 11.4z"]
    };
    exports.faTheaterMasks = faTheaterMasks;
    var faThermometer = {
      prefix: 'fas',
      iconName: 'thermometer',
      icon: [512, 512, [], "f491", "M476.8 20.4c-37.5-30.7-95.5-26.3-131.9 10.2l-45.7 46 50.5 50.5c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0l-50.4-50.5-45.1 45.4 50.3 50.4c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0L209 167.4l-45.1 45.4L214 263c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0l-50.1-50.2L96 281.1V382L7 471c-9.4 9.4-9.4 24.6 0 33.9 9.4 9.4 24.6 9.4 33.9 0l89-89h99.9L484 162.6c34.9-34.9 42.2-101.5-7.2-142.2z"]
    };
    exports.faThermometer = faThermometer;
    var faThermometerEmpty = {
      prefix: 'fas',
      iconName: 'thermometer-empty',
      icon: [256, 512, [], "f2cb", "M192 384c0 35.346-28.654 64-64 64s-64-28.654-64-64c0-35.346 28.654-64 64-64s64 28.654 64 64zm32-84.653c19.912 22.563 32 52.194 32 84.653 0 70.696-57.303 128-128 128-.299 0-.609-.001-.909-.003C56.789 511.509-.357 453.636.002 383.333.166 351.135 12.225 321.755 32 299.347V96c0-53.019 42.981-96 96-96s96 42.981 96 96v203.347zM208 384c0-34.339-19.37-52.19-32-66.502V96c0-26.467-21.533-48-48-48S80 69.533 80 96v221.498c-12.732 14.428-31.825 32.1-31.999 66.08-.224 43.876 35.563 80.116 79.423 80.42L128 464c44.112 0 80-35.888 80-80z"]
    };
    exports.faThermometerEmpty = faThermometerEmpty;
    var faThermometerFull = {
      prefix: 'fas',
      iconName: 'thermometer-full',
      icon: [256, 512, [], "f2c7", "M224 96c0-53.019-42.981-96-96-96S32 42.981 32 96v203.347C12.225 321.756.166 351.136.002 383.333c-.359 70.303 56.787 128.176 127.089 128.664.299.002.61.003.909.003 70.698 0 128-57.304 128-128 0-32.459-12.088-62.09-32-84.653V96zm-96 368l-.576-.002c-43.86-.304-79.647-36.544-79.423-80.42.173-33.98 19.266-51.652 31.999-66.08V96c0-26.467 21.533-48 48-48s48 21.533 48 48v221.498c12.63 14.312 32 32.164 32 66.502 0 44.112-35.888 80-80 80zm64-80c0 35.346-28.654 64-64 64s-64-28.654-64-64c0-23.685 12.876-44.349 32-55.417V96c0-17.673 14.327-32 32-32s32 14.327 32 32v232.583c19.124 11.068 32 31.732 32 55.417z"]
    };
    exports.faThermometerFull = faThermometerFull;
    var faThermometerHalf = {
      prefix: 'fas',
      iconName: 'thermometer-half',
      icon: [256, 512, [], "f2c9", "M192 384c0 35.346-28.654 64-64 64s-64-28.654-64-64c0-23.685 12.876-44.349 32-55.417V224c0-17.673 14.327-32 32-32s32 14.327 32 32v104.583c19.124 11.068 32 31.732 32 55.417zm32-84.653c19.912 22.563 32 52.194 32 84.653 0 70.696-57.303 128-128 128-.299 0-.609-.001-.909-.003C56.789 511.509-.357 453.636.002 383.333.166 351.135 12.225 321.755 32 299.347V96c0-53.019 42.981-96 96-96s96 42.981 96 96v203.347zM208 384c0-34.339-19.37-52.19-32-66.502V96c0-26.467-21.533-48-48-48S80 69.533 80 96v221.498c-12.732 14.428-31.825 32.1-31.999 66.08-.224 43.876 35.563 80.116 79.423 80.42L128 464c44.112 0 80-35.888 80-80z"]
    };
    exports.faThermometerHalf = faThermometerHalf;
    var faThermometerQuarter = {
      prefix: 'fas',
      iconName: 'thermometer-quarter',
      icon: [256, 512, [], "f2ca", "M192 384c0 35.346-28.654 64-64 64s-64-28.654-64-64c0-23.685 12.876-44.349 32-55.417V288c0-17.673 14.327-32 32-32s32 14.327 32 32v40.583c19.124 11.068 32 31.732 32 55.417zm32-84.653c19.912 22.563 32 52.194 32 84.653 0 70.696-57.303 128-128 128-.299 0-.609-.001-.909-.003C56.789 511.509-.357 453.636.002 383.333.166 351.135 12.225 321.755 32 299.347V96c0-53.019 42.981-96 96-96s96 42.981 96 96v203.347zM208 384c0-34.339-19.37-52.19-32-66.502V96c0-26.467-21.533-48-48-48S80 69.533 80 96v221.498c-12.732 14.428-31.825 32.1-31.999 66.08-.224 43.876 35.563 80.116 79.423 80.42L128 464c44.112 0 80-35.888 80-80z"]
    };
    exports.faThermometerQuarter = faThermometerQuarter;
    var faThermometerThreeQuarters = {
      prefix: 'fas',
      iconName: 'thermometer-three-quarters',
      icon: [256, 512, [], "f2c8", "M192 384c0 35.346-28.654 64-64 64-35.346 0-64-28.654-64-64 0-23.685 12.876-44.349 32-55.417V160c0-17.673 14.327-32 32-32s32 14.327 32 32v168.583c19.124 11.068 32 31.732 32 55.417zm32-84.653c19.912 22.563 32 52.194 32 84.653 0 70.696-57.303 128-128 128-.299 0-.609-.001-.909-.003C56.789 511.509-.357 453.636.002 383.333.166 351.135 12.225 321.755 32 299.347V96c0-53.019 42.981-96 96-96s96 42.981 96 96v203.347zM208 384c0-34.339-19.37-52.19-32-66.502V96c0-26.467-21.533-48-48-48S80 69.533 80 96v221.498c-12.732 14.428-31.825 32.1-31.999 66.08-.224 43.876 35.563 80.116 79.423 80.42L128 464c44.112 0 80-35.888 80-80z"]
    };
    exports.faThermometerThreeQuarters = faThermometerThreeQuarters;
    var faThumbsDown = {
      prefix: 'fas',
      iconName: 'thumbs-down',
      icon: [512, 512, [], "f165", "M0 56v240c0 13.255 10.745 24 24 24h80c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H24C10.745 32 0 42.745 0 56zm40 200c0-13.255 10.745-24 24-24s24 10.745 24 24-10.745 24-24 24-24-10.745-24-24zm272 256c-20.183 0-29.485-39.293-33.931-57.795-5.206-21.666-10.589-44.07-25.393-58.902-32.469-32.524-49.503-73.967-89.117-113.111a11.98 11.98 0 0 1-3.558-8.521V59.901c0-6.541 5.243-11.878 11.783-11.998 15.831-.29 36.694-9.079 52.651-16.178C256.189 17.598 295.709.017 343.995 0h2.844c42.777 0 93.363.413 113.774 29.737 8.392 12.057 10.446 27.034 6.148 44.632 16.312 17.053 25.063 48.863 16.382 74.757 17.544 23.432 19.143 56.132 9.308 79.469l.11.11c11.893 11.949 19.523 31.259 19.439 49.197-.156 30.352-26.157 58.098-59.553 58.098H350.723C358.03 364.34 384 388.132 384 430.548 384 504 336 512 312 512z"]
    };
    exports.faThumbsDown = faThumbsDown;
    var faThumbsUp = {
      prefix: 'fas',
      iconName: 'thumbs-up',
      icon: [512, 512, [], "f164", "M104 224H24c-13.255 0-24 10.745-24 24v240c0 13.255 10.745 24 24 24h80c13.255 0 24-10.745 24-24V248c0-13.255-10.745-24-24-24zM64 472c-13.255 0-24-10.745-24-24s10.745-24 24-24 24 10.745 24 24-10.745 24-24 24zM384 81.452c0 42.416-25.97 66.208-33.277 94.548h101.723c33.397 0 59.397 27.746 59.553 58.098.084 17.938-7.546 37.249-19.439 49.197l-.11.11c9.836 23.337 8.237 56.037-9.308 79.469 8.681 25.895-.069 57.704-16.382 74.757 4.298 17.598 2.244 32.575-6.148 44.632C440.202 511.587 389.616 512 346.839 512l-2.845-.001c-48.287-.017-87.806-17.598-119.56-31.725-15.957-7.099-36.821-15.887-52.651-16.178-6.54-.12-11.783-5.457-11.783-11.998v-213.77c0-3.2 1.282-6.271 3.558-8.521 39.614-39.144 56.648-80.587 89.117-113.111 14.804-14.832 20.188-37.236 25.393-58.902C282.515 39.293 291.817 0 312 0c24 0 72 8 72 81.452z"]
    };
    exports.faThumbsUp = faThumbsUp;
    var faThumbtack = {
      prefix: 'fas',
      iconName: 'thumbtack',
      icon: [384, 512, [], "f08d", "M298.028 214.267L285.793 96H328c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24H56C42.745 0 32 10.745 32 24v48c0 13.255 10.745 24 24 24h42.207L85.972 214.267C37.465 236.82 0 277.261 0 328c0 13.255 10.745 24 24 24h136v104.007c0 1.242.289 2.467.845 3.578l24 48c2.941 5.882 11.364 5.893 14.311 0l24-48a8.008 8.008 0 0 0 .845-3.578V352h136c13.255 0 24-10.745 24-24-.001-51.183-37.983-91.42-85.973-113.733z"]
    };
    exports.faThumbtack = faThumbtack;
    var faTicketAlt = {
      prefix: 'fas',
      iconName: 'ticket-alt',
      icon: [576, 512, [], "f3ff", "M128 160h320v192H128V160zm400 96c0 26.51 21.49 48 48 48v96c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48v-96c26.51 0 48-21.49 48-48s-21.49-48-48-48v-96c0-26.51 21.49-48 48-48h480c26.51 0 48 21.49 48 48v96c-26.51 0-48 21.49-48 48zm-48-104c0-13.255-10.745-24-24-24H120c-13.255 0-24 10.745-24 24v208c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V152z"]
    };
    exports.faTicketAlt = faTicketAlt;
    var faTimes = {
      prefix: 'fas',
      iconName: 'times',
      icon: [352, 512, [], "f00d", "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"]
    };
    exports.faTimes = faTimes;
    var faTimesCircle = {
      prefix: 'fas',
      iconName: 'times-circle',
      icon: [512, 512, [], "f057", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"]
    };
    exports.faTimesCircle = faTimesCircle;
    var faTint = {
      prefix: 'fas',
      iconName: 'tint',
      icon: [352, 512, [], "f043", "M205.22 22.09c-7.94-28.78-49.44-30.12-58.44 0C100.01 179.85 0 222.72 0 333.91 0 432.35 78.72 512 176 512s176-79.65 176-178.09c0-111.75-99.79-153.34-146.78-311.82zM176 448c-61.75 0-112-50.25-112-112 0-8.84 7.16-16 16-16s16 7.16 16 16c0 44.11 35.89 80 80 80 8.84 0 16 7.16 16 16s-7.16 16-16 16z"]
    };
    exports.faTint = faTint;
    var faTintSlash = {
      prefix: 'fas',
      iconName: 'tint-slash',
      icon: [640, 512, [], "f5c7", "M633.82 458.1L494.97 350.78c.52-5.57 1.03-11.16 1.03-16.87 0-111.76-99.79-153.34-146.78-311.82-7.94-28.78-49.44-30.12-58.44 0-15.52 52.34-36.87 91.96-58.49 125.68L45.47 3.37C38.49-2.05 28.43-.8 23.01 6.18L3.37 31.45C-2.05 38.42-.8 48.47 6.18 53.9l588.36 454.73c6.98 5.43 17.03 4.17 22.46-2.81l19.64-25.27c5.41-6.97 4.16-17.02-2.82-22.45zM144 333.91C144 432.35 222.72 512 320 512c44.71 0 85.37-16.96 116.4-44.7L162.72 255.78c-11.41 23.5-18.72 48.35-18.72 78.13z"]
    };
    exports.faTintSlash = faTintSlash;
    var faTired = {
      prefix: 'fas',
      iconName: 'tired',
      icon: [496, 512, [], "f5c8", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm33.8 189.7l80-48c11.6-6.9 24 7.7 15.4 18L343.6 208l33.6 40.3c8.7 10.4-3.9 24.8-15.4 18l-80-48c-7.7-4.7-7.7-15.9 0-20.6zm-163-30c-8.6-10.3 3.8-24.9 15.4-18l80 48c7.8 4.7 7.8 15.9 0 20.6l-80 48c-11.5 6.8-24-7.6-15.4-18l33.6-40.3-33.6-40.3zM248 288c51.9 0 115.3 43.8 123.2 106.7 1.7 13.6-8 24.6-17.7 20.4-25.9-11.1-64.4-17.4-105.5-17.4s-79.6 6.3-105.5 17.4c-9.8 4.2-19.4-7-17.7-20.4C132.7 331.8 196.1 288 248 288z"]
    };
    exports.faTired = faTired;
    var faToggleOff = {
      prefix: 'fas',
      iconName: 'toggle-off',
      icon: [576, 512, [], "f204", "M384 64H192C85.961 64 0 149.961 0 256s85.961 192 192 192h192c106.039 0 192-85.961 192-192S490.039 64 384 64zM64 256c0-70.741 57.249-128 128-128 70.741 0 128 57.249 128 128 0 70.741-57.249 128-128 128-70.741 0-128-57.249-128-128zm320 128h-48.905c65.217-72.858 65.236-183.12 0-256H384c70.741 0 128 57.249 128 128 0 70.74-57.249 128-128 128z"]
    };
    exports.faToggleOff = faToggleOff;
    var faToggleOn = {
      prefix: 'fas',
      iconName: 'toggle-on',
      icon: [576, 512, [], "f205", "M384 64H192C86 64 0 150 0 256s86 192 192 192h192c106 0 192-86 192-192S490 64 384 64zm0 320c-70.8 0-128-57.3-128-128 0-70.8 57.3-128 128-128 70.8 0 128 57.3 128 128 0 70.8-57.3 128-128 128z"]
    };
    exports.faToggleOn = faToggleOn;
    var faToilet = {
      prefix: 'fas',
      iconName: 'toilet',
      icon: [384, 512, [], "f7d8", "M368 48c8.8 0 16-7.2 16-16V16c0-8.8-7.2-16-16-16H16C7.2 0 0 7.2 0 16v16c0 8.8 7.2 16 16 16h16v156.7C11.8 214.8 0 226.9 0 240c0 67.2 34.6 126.2 86.8 160.5l-21.4 70.2C59.1 491.2 74.5 512 96 512h192c21.5 0 36.9-20.8 30.6-41.3l-21.4-70.2C349.4 366.2 384 307.2 384 240c0-13.1-11.8-25.2-32-35.3V48h16zM80 72c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H88c-4.4 0-8-3.6-8-8V72zm112 200c-77.1 0-139.6-14.3-139.6-32s62.5-32 139.6-32 139.6 14.3 139.6 32-62.5 32-139.6 32z"]
    };
    exports.faToilet = faToilet;
    var faToiletPaper = {
      prefix: 'fas',
      iconName: 'toilet-paper',
      icon: [576, 512, [], "f71e", "M128 0C74.98 0 32 85.96 32 192v172.07c0 41.12-9.8 62.77-31.17 126.87C-2.62 501.3 5.09 512 16.01 512h280.92c13.77 0 26-8.81 30.36-21.88 12.83-38.48 24.71-72.4 24.71-126.05V192c0-83.6 23.67-153.52 60.44-192H128zM96 224c-8.84 0-16-7.16-16-16s7.16-16 16-16 16 7.16 16 16-7.16 16-16 16zm64 0c-8.84 0-16-7.16-16-16s7.16-16 16-16 16 7.16 16 16-7.16 16-16 16zm64 0c-8.84 0-16-7.16-16-16s7.16-16 16-16 16 7.16 16 16-7.16 16-16 16zm64 0c-8.84 0-16-7.16-16-16s7.16-16 16-16 16 7.16 16 16-7.16 16-16 16zM480 0c-53.02 0-96 85.96-96 192s42.98 192 96 192 96-85.96 96-192S533.02 0 480 0zm0 256c-17.67 0-32-28.65-32-64s14.33-64 32-64 32 28.65 32 64-14.33 64-32 64z"]
    };
    exports.faToiletPaper = faToiletPaper;
    var faToiletPaperSlash = {
      prefix: 'fas',
      iconName: 'toilet-paper-slash',
      icon: [640, 512, [], "e072", "M64,192V364.13c0,41.12-9.75,62.75-31.12,126.87A16,16,0,0,0,48,512H328.86a31.87,31.87,0,0,0,30.38-21.87c9.31-27.83,18-53.35,22.18-85.55l-316-244.25C64.53,170.66,64,181.19,64,192ZM633.82,458.09l-102-78.81C575.28,360.91,608,284.32,608,192,608,86,565,0,512,0s-96,86-96,192c0,42,7,80.4,18.43,112L384,265V192c0-83.62,23.63-153.5,60.5-192H160c-23.33,0-44.63,16.83-61.26,44.53L45.46,3.38A16,16,0,0,0,23,6.19L3.37,31.45A16,16,0,0,0,6.18,53.91L594.54,508.63A16,16,0,0,0,617,505.81l19.64-25.26A16,16,0,0,0,633.82,458.09ZM512,256c-17.63,0-32-28.62-32-64s14.37-64,32-64,32,28.63,32,64S529.62,256,512,256Z"]
    };
    exports.faToiletPaperSlash = faToiletPaperSlash;
    var faToolbox = {
      prefix: 'fas',
      iconName: 'toolbox',
      icon: [512, 512, [], "f552", "M502.63 214.63l-45.25-45.25c-6-6-14.14-9.37-22.63-9.37H384V80c0-26.51-21.49-48-48-48H176c-26.51 0-48 21.49-48 48v80H77.25c-8.49 0-16.62 3.37-22.63 9.37L9.37 214.63c-6 6-9.37 14.14-9.37 22.63V320h128v-16c0-8.84 7.16-16 16-16h32c8.84 0 16 7.16 16 16v16h128v-16c0-8.84 7.16-16 16-16h32c8.84 0 16 7.16 16 16v16h128v-82.75c0-8.48-3.37-16.62-9.37-22.62zM320 160H192V96h128v64zm64 208c0 8.84-7.16 16-16 16h-32c-8.84 0-16-7.16-16-16v-16H192v16c0 8.84-7.16 16-16 16h-32c-8.84 0-16-7.16-16-16v-16H0v96c0 17.67 14.33 32 32 32h448c17.67 0 32-14.33 32-32v-96H384v16z"]
    };
    exports.faToolbox = faToolbox;
    var faTools = {
      prefix: 'fas',
      iconName: 'tools',
      icon: [512, 512, [], "f7d9", "M501.1 395.7L384 278.6c-23.1-23.1-57.6-27.6-85.4-13.9L192 158.1V96L64 0 0 64l96 128h62.1l106.6 106.6c-13.6 27.8-9.2 62.3 13.9 85.4l117.1 117.1c14.6 14.6 38.2 14.6 52.7 0l52.7-52.7c14.5-14.6 14.5-38.2 0-52.7zM331.7 225c28.3 0 54.9 11 74.9 31l19.4 19.4c15.8-6.9 30.8-16.5 43.8-29.5 37.1-37.1 49.7-89.3 37.9-136.7-2.2-9-13.5-12.1-20.1-5.5l-74.4 74.4-67.9-11.3L334 98.9l74.4-74.4c6.6-6.6 3.4-17.9-5.7-20.2-47.4-11.7-99.6.9-136.6 37.9-28.5 28.5-41.9 66.1-41.2 103.6l82.1 82.1c8.1-1.9 16.5-2.9 24.7-2.9zm-103.9 82l-56.7-56.7L18.7 402.8c-25 25-25 65.5 0 90.5s65.5 25 90.5 0l123.6-123.6c-7.6-19.9-9.9-41.6-5-62.7zM64 472c-13.2 0-24-10.8-24-24 0-13.3 10.7-24 24-24s24 10.7 24 24c0 13.2-10.7 24-24 24z"]
    };
    exports.faTools = faTools;
    var faTooth = {
      prefix: 'fas',
      iconName: 'tooth',
      icon: [448, 512, [], "f5c9", "M443.98 96.25c-11.01-45.22-47.11-82.06-92.01-93.72-32.19-8.36-63 5.1-89.14 24.33-3.25 2.39-6.96 3.73-10.5 5.48l28.32 18.21c7.42 4.77 9.58 14.67 4.8 22.11-4.46 6.95-14.27 9.86-22.11 4.8L162.83 12.84c-20.7-10.85-43.38-16.4-66.81-10.31-44.9 11.67-81 48.5-92.01 93.72-10.13 41.62-.42 80.81 21.5 110.43 23.36 31.57 32.68 68.66 36.29 107.35 4.4 47.16 10.33 94.16 20.94 140.32l7.8 33.95c3.19 13.87 15.49 23.7 29.67 23.7 13.97 0 26.15-9.55 29.54-23.16l34.47-138.42c4.56-18.32 20.96-31.16 39.76-31.16s35.2 12.85 39.76 31.16l34.47 138.42c3.39 13.61 15.57 23.16 29.54 23.16 14.18 0 26.48-9.83 29.67-23.7l7.8-33.95c10.61-46.15 16.53-93.16 20.94-140.32 3.61-38.7 12.93-75.78 36.29-107.35 21.95-29.61 31.66-68.8 21.53-110.43z"]
    };
    exports.faTooth = faTooth;
    var faTorah = {
      prefix: 'fas',
      iconName: 'torah',
      icon: [640, 512, [], "f6a0", "M320.05 366.48l17.72-29.64h-35.46zm99.21-166H382.4l18.46 30.82zM48 0C21.49 0 0 14.33 0 32v448c0 17.67 21.49 32 48 32s48-14.33 48-32V32C96 14.33 74.51 0 48 0zm172.74 311.5h36.85l-18.46-30.82zm161.71 0h36.86l-18.45-30.8zM128 464h384V48H128zm66.77-278.13a21.22 21.22 0 0 1 18.48-10.71h59.45l29.13-48.71a21.13 21.13 0 0 1 18.22-10.37A20.76 20.76 0 0 1 338 126.29l29.25 48.86h59.52a21.12 21.12 0 0 1 18.1 32L415.63 256 445 305a20.69 20.69 0 0 1 .24 21.12 21.25 21.25 0 0 1-18.48 10.72h-59.47l-29.13 48.7a21.13 21.13 0 0 1-18.16 10.4 20.79 20.79 0 0 1-18-10.22l-29.25-48.88h-59.5a21.11 21.11 0 0 1-18.1-32L224.36 256 195 207a20.7 20.7 0 0 1-.23-21.13zM592 0c-26.51 0-48 14.33-48 32v448c0 17.67 21.49 32 48 32s48-14.33 48-32V32c0-17.67-21.49-32-48-32zM320 145.53l-17.78 29.62h35.46zm-62.45 55h-36.81l18.44 30.8zm29.58 111h65.79L386.09 256l-33.23-55.52h-65.79L253.9 256z"]
    };
    exports.faTorah = faTorah;
    var faToriiGate = {
      prefix: 'fas',
      iconName: 'torii-gate',
      icon: [512, 512, [], "f6a1", "M376.45 32h-240.9A303.17 303.17 0 0 1 0 0v96c0 17.67 14.33 32 32 32h32v64H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h48v240c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16V256h256v240c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16V256h48c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16h-48v-64h32c17.67 0 32-14.33 32-32V0a303.17 303.17 0 0 1-135.55 32zM128 128h96v64h-96v-64zm256 64h-96v-64h96v64z"]
    };
    exports.faToriiGate = faToriiGate;
    var faTractor = {
      prefix: 'fas',
      iconName: 'tractor',
      icon: [640, 512, [], "f722", "M528 336c-48.6 0-88 39.4-88 88s39.4 88 88 88 88-39.4 88-88-39.4-88-88-88zm0 112c-13.23 0-24-10.77-24-24s10.77-24 24-24 24 10.77 24 24-10.77 24-24 24zm80-288h-64v-40.2c0-14.12 4.7-27.76 13.15-38.84 4.42-5.8 3.55-14.06-1.32-19.49L534.2 37.3c-6.66-7.45-18.32-6.92-24.7.78C490.58 60.9 480 89.81 480 119.8V160H377.67L321.58 29.14A47.914 47.914 0 0 0 277.45 0H144c-26.47 0-48 21.53-48 48v146.52c-8.63-6.73-20.96-6.46-28.89 1.47L36 227.1c-8.59 8.59-8.59 22.52 0 31.11l5.06 5.06c-4.99 9.26-8.96 18.82-11.91 28.72H22c-12.15 0-22 9.85-22 22v44c0 12.15 9.85 22 22 22h7.14c2.96 9.91 6.92 19.46 11.91 28.73l-5.06 5.06c-8.59 8.59-8.59 22.52 0 31.11L67.1 476c8.59 8.59 22.52 8.59 31.11 0l5.06-5.06c9.26 4.99 18.82 8.96 28.72 11.91V490c0 12.15 9.85 22 22 22h44c12.15 0 22-9.85 22-22v-7.14c9.9-2.95 19.46-6.92 28.72-11.91l5.06 5.06c8.59 8.59 22.52 8.59 31.11 0l31.11-31.11c8.59-8.59 8.59-22.52 0-31.11l-5.06-5.06c4.99-9.26 8.96-18.82 11.91-28.72H330c12.15 0 22-9.85 22-22v-6h80.54c21.91-28.99 56.32-48 95.46-48 18.64 0 36.07 4.61 51.8 12.2l50.82-50.82c6-6 9.37-14.14 9.37-22.63V192c.01-17.67-14.32-32-31.99-32zM176 416c-44.18 0-80-35.82-80-80s35.82-80 80-80 80 35.82 80 80-35.82 80-80 80zm22-256h-38V64h106.89l41.15 96H198z"]
    };
    exports.faTractor = faTractor;
    var faTrademark = {
      prefix: 'fas',
      iconName: 'trademark',
      icon: [640, 512, [], "f25c", "M260.6 96H12c-6.6 0-12 5.4-12 12v43.1c0 6.6 5.4 12 12 12h85.1V404c0 6.6 5.4 12 12 12h54.3c6.6 0 12-5.4 12-12V163.1h85.1c6.6 0 12-5.4 12-12V108c.1-6.6-5.3-12-11.9-12zM640 403l-24-296c-.5-6.2-5.7-11-12-11h-65.4c-5.1 0-9.7 3.3-11.3 8.1l-43.8 127.1c-7.2 20.6-16.1 52.8-16.1 52.8h-.9s-8.9-32.2-16.1-52.8l-43.8-127.1c-1.7-4.8-6.2-8.1-11.3-8.1h-65.4c-6.2 0-11.4 4.8-12 11l-24.4 296c-.6 7 4.9 13 12 13H360c6.3 0 11.5-4.9 12-11.2l9.1-132.9c1.8-24.2 0-53.7 0-53.7h.9s10.7 33.6 17.9 53.7l30.7 84.7c1.7 4.7 6.2 7.9 11.3 7.9h50.3c5.1 0 9.6-3.2 11.3-7.9l30.7-84.7c7.2-20.1 17.9-53.7 17.9-53.7h.9s-1.8 29.5 0 53.7l9.1 132.9c.4 6.3 5.7 11.2 12 11.2H628c7 0 12.5-6 12-13z"]
    };
    exports.faTrademark = faTrademark;
    var faTrafficLight = {
      prefix: 'fas',
      iconName: 'traffic-light',
      icon: [384, 512, [], "f637", "M384 192h-64v-37.88c37.2-13.22 64-48.38 64-90.12h-64V32c0-17.67-14.33-32-32-32H96C78.33 0 64 14.33 64 32v32H0c0 41.74 26.8 76.9 64 90.12V192H0c0 41.74 26.8 76.9 64 90.12V320H0c0 42.84 28.25 78.69 66.99 91.05C79.42 468.72 130.6 512 192 512s112.58-43.28 125.01-100.95C355.75 398.69 384 362.84 384 320h-64v-37.88c37.2-13.22 64-48.38 64-90.12zM192 416c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48zm0-128c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48zm0-128c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48z"]
    };
    exports.faTrafficLight = faTrafficLight;
    var faTrailer = {
      prefix: 'fas',
      iconName: 'trailer',
      icon: [640, 512, [], "e041", "M624,320H544V80a16,16,0,0,0-16-16H16A16,16,0,0,0,0,80V368a16,16,0,0,0,16,16H65.61c7.83-54.21,54-96,110.39-96s102.56,41.79,110.39,96H624a16,16,0,0,0,16-16V336A16,16,0,0,0,624,320ZM96,243.68a176.29,176.29,0,0,0-32,20.71V136a8,8,0,0,1,8-8H88a8,8,0,0,1,8,8Zm96-18.54c-5.31-.49-10.57-1.14-16-1.14s-10.69.65-16,1.14V136a8,8,0,0,1,8-8h16a8,8,0,0,1,8,8Zm96,39.25a176.29,176.29,0,0,0-32-20.71V136a8,8,0,0,1,8-8h16a8,8,0,0,1,8,8ZM384,320H352V136a8,8,0,0,1,8-8h16a8,8,0,0,1,8,8Zm96,0H448V136a8,8,0,0,1,8-8h16a8,8,0,0,1,8,8Zm-304,0a80,80,0,1,0,80,80A80,80,0,0,0,176,320Zm0,112a32,32,0,1,1,32-32A32,32,0,0,1,176,432Z"]
    };
    exports.faTrailer = faTrailer;
    var faTrain = {
      prefix: 'fas',
      iconName: 'train',
      icon: [448, 512, [], "f238", "M448 96v256c0 51.815-61.624 96-130.022 96l62.98 49.721C386.905 502.417 383.562 512 376 512H72c-7.578 0-10.892-9.594-4.957-14.279L130.022 448C61.82 448 0 403.954 0 352V96C0 42.981 64 0 128 0h192c65 0 128 42.981 128 96zm-48 136V120c0-13.255-10.745-24-24-24H72c-13.255 0-24 10.745-24 24v112c0 13.255 10.745 24 24 24h304c13.255 0 24-10.745 24-24zm-176 64c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56z"]
    };
    exports.faTrain = faTrain;
    var faTram = {
      prefix: 'fas',
      iconName: 'tram',
      icon: [512, 512, [], "f7da", "M288 64c17.7 0 32-14.3 32-32S305.7 0 288 0s-32 14.3-32 32 14.3 32 32 32zm223.5-12.1c-2.3-8.6-11-13.6-19.6-11.3l-480 128c-8.5 2.3-13.6 11-11.3 19.6C2.5 195.3 8.9 200 16 200c1.4 0 2.8-.2 4.1-.5L240 140.8V224H64c-17.7 0-32 14.3-32 32v224c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V256c0-17.7-14.3-32-32-32H272v-91.7l228.1-60.8c8.6-2.3 13.6-11.1 11.4-19.6zM176 384H80v-96h96v96zm160-96h96v96h-96v-96zm-32 0v96h-96v-96h96zM192 96c17.7 0 32-14.3 32-32s-14.3-32-32-32-32 14.3-32 32 14.3 32 32 32z"]
    };
    exports.faTram = faTram;
    var faTransgender = {
      prefix: 'fas',
      iconName: 'transgender',
      icon: [384, 512, [], "f224", "M372 0h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-80.7 80.7C198.5 104.1 172.2 96 144 96 64.5 96 0 160.5 0 240c0 68.5 47.9 125.9 112 140.4V408H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v28c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-28h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-27.6c64.1-14.6 112-71.9 112-140.4 0-28.2-8.1-54.5-22.1-76.7l80.7-80.7 16.9 16.9c7.6 7.6 20.5 2.2 20.5-8.5V12c0-6.6-5.4-12-12-12zM144 320c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"]
    };
    exports.faTransgender = faTransgender;
    var faTransgenderAlt = {
      prefix: 'fas',
      iconName: 'transgender-alt',
      icon: [480, 512, [], "f225", "M468 0h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-80.7 80.7C294.5 104.1 268.2 96 240 96c-28.2 0-54.5 8.1-76.7 22.1l-16.5-16.5 19.8-19.8c4.7-4.7 4.7-12.3 0-17l-28.3-28.3c-4.7-4.7-12.3-4.7-17 0l-19.8 19.8-19-19 16.9-16.9C107.1 12.9 101.7 0 91 0H12C5.4 0 0 5.4 0 12v79c0 10.7 12.9 16 20.5 8.5l16.9-16.9 19 19-19.8 19.8c-4.7 4.7-4.7 12.3 0 17l28.3 28.3c4.7 4.7 12.3 4.7 17 0l19.8-19.8 16.5 16.5C104.1 185.5 96 211.8 96 240c0 68.5 47.9 125.9 112 140.4V408h-36c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v28c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-28h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-27.6c64.1-14.6 112-71.9 112-140.4 0-28.2-8.1-54.5-22.1-76.7l80.7-80.7 16.9 16.9c7.6 7.6 20.5 2.2 20.5-8.5V12c0-6.6-5.4-12-12-12zM240 320c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"]
    };
    exports.faTransgenderAlt = faTransgenderAlt;
    var faTrash = {
      prefix: 'fas',
      iconName: 'trash',
      icon: [448, 512, [], "f1f8", "M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z"]
    };
    exports.faTrash = faTrash;
    var faTrashAlt = {
      prefix: 'fas',
      iconName: 'trash-alt',
      icon: [448, 512, [], "f2ed", "M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm272-256a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"]
    };
    exports.faTrashAlt = faTrashAlt;
    var faTrashRestore = {
      prefix: 'fas',
      iconName: 'trash-restore',
      icon: [448, 512, [], "f829", "M53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32zm70.11-175.8l89.38-94.26a15.41 15.41 0 0 1 22.62 0l89.38 94.26c10.08 10.62 2.94 28.8-11.32 28.8H256v112a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16V320h-57.37c-14.26 0-21.4-18.18-11.32-28.8zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"]
    };
    exports.faTrashRestore = faTrashRestore;
    var faTrashRestoreAlt = {
      prefix: 'fas',
      iconName: 'trash-restore-alt',
      icon: [448, 512, [], "f82a", "M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm91.31-172.8l89.38-94.26a15.41 15.41 0 0 1 22.62 0l89.38 94.26c10.08 10.62 2.94 28.8-11.32 28.8H256v112a16 16 0 0 1-16 16h-32a16 16 0 0 1-16-16V320h-57.37c-14.26 0-21.4-18.18-11.32-28.8zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"]
    };
    exports.faTrashRestoreAlt = faTrashRestoreAlt;
    var faTree = {
      prefix: 'fas',
      iconName: 'tree',
      icon: [384, 512, [], "f1bb", "M378.31 378.49L298.42 288h30.63c9.01 0 16.98-5 20.78-13.06 3.8-8.04 2.55-17.26-3.28-24.05L268.42 160h28.89c9.1 0 17.3-5.35 20.86-13.61 3.52-8.13 1.86-17.59-4.24-24.08L203.66 4.83c-6.03-6.45-17.28-6.45-23.32 0L70.06 122.31c-6.1 6.49-7.75 15.95-4.24 24.08C69.38 154.65 77.59 160 86.69 160h28.89l-78.14 90.91c-5.81 6.78-7.06 15.99-3.27 24.04C37.97 283 45.93 288 54.95 288h30.63L5.69 378.49c-6 6.79-7.36 16.09-3.56 24.26 3.75 8.05 12 13.25 21.01 13.25H160v24.45l-30.29 48.4c-5.32 10.64 2.42 23.16 14.31 23.16h95.96c11.89 0 19.63-12.52 14.31-23.16L224 440.45V416h136.86c9.01 0 17.26-5.2 21.01-13.25 3.8-8.17 2.44-17.47-3.56-24.26z"]
    };
    exports.faTree = faTree;
    var faTrophy = {
      prefix: 'fas',
      iconName: 'trophy',
      icon: [576, 512, [], "f091", "M552 64H448V24c0-13.3-10.7-24-24-24H152c-13.3 0-24 10.7-24 24v40H24C10.7 64 0 74.7 0 88v56c0 35.7 22.5 72.4 61.9 100.7 31.5 22.7 69.8 37.1 110 41.7C203.3 338.5 240 360 240 360v72h-48c-35.3 0-64 20.7-64 56v12c0 6.6 5.4 12 12 12h296c6.6 0 12-5.4 12-12v-12c0-35.3-28.7-56-64-56h-48v-72s36.7-21.5 68.1-73.6c40.3-4.6 78.6-19 110-41.7 39.3-28.3 61.9-65 61.9-100.7V88c0-13.3-10.7-24-24-24zM99.3 192.8C74.9 175.2 64 155.6 64 144v-16h64.2c1 32.6 5.8 61.2 12.8 86.2-15.1-5.2-29.2-12.4-41.7-21.4zM512 144c0 16.1-17.7 36.1-35.3 48.8-12.5 9-26.7 16.2-41.8 21.4 7-25 11.8-53.6 12.8-86.2H512v16z"]
    };
    exports.faTrophy = faTrophy;
    var faTruck = {
      prefix: 'fas',
      iconName: 'truck',
      icon: [640, 512, [], "f0d1", "M624 352h-16V243.9c0-12.7-5.1-24.9-14.1-33.9L494 110.1c-9-9-21.2-14.1-33.9-14.1H416V48c0-26.5-21.5-48-48-48H48C21.5 0 0 21.5 0 48v320c0 26.5 21.5 48 48 48h16c0 53 43 96 96 96s96-43 96-96h128c0 53 43 96 96 96s96-43 96-96h48c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zM160 464c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm320 0c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm80-208H416V144h44.1l99.9 99.9V256z"]
    };
    exports.faTruck = faTruck;
    var faTruckLoading = {
      prefix: 'fas',
      iconName: 'truck-loading',
      icon: [640, 512, [], "f4de", "M50.2 375.6c2.3 8.5 11.1 13.6 19.6 11.3l216.4-58c8.5-2.3 13.6-11.1 11.3-19.6l-49.7-185.5c-2.3-8.5-11.1-13.6-19.6-11.3L151 133.3l24.8 92.7-61.8 16.5-24.8-92.7-77.3 20.7C3.4 172.8-1.7 181.6.6 190.1l49.6 185.5zM384 0c-17.7 0-32 14.3-32 32v323.6L5.9 450c-4.3 1.2-6.8 5.6-5.6 9.8l12.6 46.3c1.2 4.3 5.6 6.8 9.8 5.6l393.7-107.4C418.8 464.1 467.6 512 528 512c61.9 0 112-50.1 112-112V0H384zm144 448c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z"]
    };
    exports.faTruckLoading = faTruckLoading;
    var faTruckMonster = {
      prefix: 'fas',
      iconName: 'truck-monster',
      icon: [640, 512, [], "f63b", "M624 224h-16v-64c0-17.67-14.33-32-32-32h-73.6L419.22 24.02A64.025 64.025 0 0 0 369.24 0H256c-17.67 0-32 14.33-32 32v96H48c-8.84 0-16 7.16-16 16v80H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h16.72c29.21-38.65 75.1-64 127.28-64s98.07 25.35 127.28 64h65.45c29.21-38.65 75.1-64 127.28-64s98.07 25.35 127.28 64H624c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zm-336-96V64h81.24l51.2 64H288zm304 224h-5.2c-2.2-7.33-5.07-14.28-8.65-20.89l3.67-3.67c6.25-6.25 6.25-16.38 0-22.63l-22.63-22.63c-6.25-6.25-16.38-6.25-22.63 0l-3.67 3.67A110.85 110.85 0 0 0 512 277.2V272c0-8.84-7.16-16-16-16h-32c-8.84 0-16 7.16-16 16v5.2c-7.33 2.2-14.28 5.07-20.89 8.65l-3.67-3.67c-6.25-6.25-16.38-6.25-22.63 0l-22.63 22.63c-6.25 6.25-6.25 16.38 0 22.63l3.67 3.67A110.85 110.85 0 0 0 373.2 352H368c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h5.2c2.2 7.33 5.07 14.28 8.65 20.89l-3.67 3.67c-6.25 6.25-6.25 16.38 0 22.63l22.63 22.63c6.25 6.25 16.38 6.25 22.63 0l3.67-3.67c6.61 3.57 13.57 6.45 20.9 8.65v5.2c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-5.2c7.33-2.2 14.28-5.07 20.9-8.65l3.67 3.67c6.25 6.25 16.38 6.25 22.63 0l22.63-22.63c6.25-6.25 6.25-16.38 0-22.63l-3.67-3.67a110.85 110.85 0 0 0 8.65-20.89h5.2c8.84 0 16-7.16 16-16v-32c-.02-8.84-7.18-16-16.02-16zm-112 80c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48zm-208-80h-5.2c-2.2-7.33-5.07-14.28-8.65-20.89l3.67-3.67c6.25-6.25 6.25-16.38 0-22.63l-22.63-22.63c-6.25-6.25-16.38-6.25-22.63 0l-3.67 3.67A110.85 110.85 0 0 0 192 277.2V272c0-8.84-7.16-16-16-16h-32c-8.84 0-16 7.16-16 16v5.2c-7.33 2.2-14.28 5.07-20.89 8.65l-3.67-3.67c-6.25-6.25-16.38-6.25-22.63 0L58.18 304.8c-6.25 6.25-6.25 16.38 0 22.63l3.67 3.67a110.85 110.85 0 0 0-8.65 20.89H48c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h5.2c2.2 7.33 5.07 14.28 8.65 20.89l-3.67 3.67c-6.25 6.25-6.25 16.38 0 22.63l22.63 22.63c6.25 6.25 16.38 6.25 22.63 0l3.67-3.67c6.61 3.57 13.57 6.45 20.9 8.65v5.2c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-5.2c7.33-2.2 14.28-5.07 20.9-8.65l3.67 3.67c6.25 6.25 16.38 6.25 22.63 0l22.63-22.63c6.25-6.25 6.25-16.38 0-22.63l-3.67-3.67a110.85 110.85 0 0 0 8.65-20.89h5.2c8.84 0 16-7.16 16-16v-32C288 359.16 280.84 352 272 352zm-112 80c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48z"]
    };
    exports.faTruckMonster = faTruckMonster;
    var faTruckMoving = {
      prefix: 'fas',
      iconName: 'truck-moving',
      icon: [640, 512, [], "f4df", "M621.3 237.3l-58.5-58.5c-12-12-28.3-18.7-45.3-18.7H480V64c0-17.7-14.3-32-32-32H32C14.3 32 0 46.3 0 64v336c0 44.2 35.8 80 80 80 26.3 0 49.4-12.9 64-32.4 14.6 19.6 37.7 32.4 64 32.4 44.2 0 80-35.8 80-80 0-5.5-.6-10.8-1.6-16h163.2c-1.1 5.2-1.6 10.5-1.6 16 0 44.2 35.8 80 80 80s80-35.8 80-80c0-5.5-.6-10.8-1.6-16H624c8.8 0 16-7.2 16-16v-85.5c0-17-6.7-33.2-18.7-45.2zM80 432c-17.6 0-32-14.4-32-32s14.4-32 32-32 32 14.4 32 32-14.4 32-32 32zm128 0c-17.6 0-32-14.4-32-32s14.4-32 32-32 32 14.4 32 32-14.4 32-32 32zm272-224h37.5c4.3 0 8.3 1.7 11.3 4.7l43.3 43.3H480v-48zm48 224c-17.6 0-32-14.4-32-32s14.4-32 32-32 32 14.4 32 32-14.4 32-32 32z"]
    };
    exports.faTruckMoving = faTruckMoving;
    var faTruckPickup = {
      prefix: 'fas',
      iconName: 'truck-pickup',
      icon: [640, 512, [], "f63c", "M624 288h-16v-64c0-17.67-14.33-32-32-32h-48L419.22 56.02A64.025 64.025 0 0 0 369.24 32H256c-17.67 0-32 14.33-32 32v128H64c-17.67 0-32 14.33-32 32v64H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h49.61c-.76 5.27-1.61 10.52-1.61 16 0 61.86 50.14 112 112 112s112-50.14 112-112c0-5.48-.85-10.73-1.61-16h67.23c-.76 5.27-1.61 10.52-1.61 16 0 61.86 50.14 112 112 112s112-50.14 112-112c0-5.48-.85-10.73-1.61-16H624c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM288 96h81.24l76.8 96H288V96zM176 416c-26.47 0-48-21.53-48-48s21.53-48 48-48 48 21.53 48 48-21.53 48-48 48zm288 0c-26.47 0-48-21.53-48-48s21.53-48 48-48 48 21.53 48 48-21.53 48-48 48z"]
    };
    exports.faTruckPickup = faTruckPickup;
    var faTshirt = {
      prefix: 'fas',
      iconName: 'tshirt',
      icon: [640, 512, [], "f553", "M631.2 96.5L436.5 0C416.4 27.8 371.9 47.2 320 47.2S223.6 27.8 203.5 0L8.8 96.5c-7.9 4-11.1 13.6-7.2 21.5l57.2 114.5c4 7.9 13.6 11.1 21.5 7.2l56.6-27.7c10.6-5.2 23 2.5 23 14.4V480c0 17.7 14.3 32 32 32h256c17.7 0 32-14.3 32-32V226.3c0-11.8 12.4-19.6 23-14.4l56.6 27.7c7.9 4 17.5.8 21.5-7.2L638.3 118c4-7.9.8-17.6-7.1-21.5z"]
    };
    exports.faTshirt = faTshirt;
    var faTty = {
      prefix: 'fas',
      iconName: 'tty',
      icon: [512, 512, [], "f1e4", "M5.37 103.822c138.532-138.532 362.936-138.326 501.262 0 6.078 6.078 7.074 15.496 2.583 22.681l-43.214 69.138a18.332 18.332 0 0 1-22.356 7.305l-86.422-34.569a18.335 18.335 0 0 1-11.434-18.846L351.741 90c-62.145-22.454-130.636-21.986-191.483 0l5.953 59.532a18.331 18.331 0 0 1-11.434 18.846l-86.423 34.568a18.334 18.334 0 0 1-22.356-7.305L2.787 126.502a18.333 18.333 0 0 1 2.583-22.68zM96 308v-40c0-6.627-5.373-12-12-12H44c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm-336 96v-40c0-6.627-5.373-12-12-12H92c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zM96 500v-40c0-6.627-5.373-12-12-12H44c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm288 0v-40c0-6.627-5.373-12-12-12H140c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h232c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12z"]
    };
    exports.faTty = faTty;
    var faTv = {
      prefix: 'fas',
      iconName: 'tv',
      icon: [640, 512, [], "f26c", "M592 0H48A48 48 0 0 0 0 48v320a48 48 0 0 0 48 48h240v32H112a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16H352v-32h240a48 48 0 0 0 48-48V48a48 48 0 0 0-48-48zm-16 352H64V64h512z"]
    };
    exports.faTv = faTv;
    var faUmbrella = {
      prefix: 'fas',
      iconName: 'umbrella',
      icon: [576, 512, [], "f0e9", "M575.7 280.8C547.1 144.5 437.3 62.6 320 49.9V32c0-17.7-14.3-32-32-32s-32 14.3-32 32v17.9C138.3 62.6 29.5 144.5.3 280.8c-2.2 10.1 8.5 21.3 18.7 11.4 52-55 107.7-52.4 158.6 37 5.3 9.5 14.9 8.6 19.7 0 20.2-35.4 44.9-73.2 90.7-73.2 58.5 0 88.2 68.8 90.7 73.2 4.8 8.6 14.4 9.5 19.7 0 51-89.5 107.1-91.4 158.6-37 10.3 10 20.9-1.3 18.7-11.4zM256 301.7V432c0 8.8-7.2 16-16 16-7.8 0-13.2-5.3-15.1-10.7-5.9-16.7-24.1-25.4-40.8-19.5-16.7 5.9-25.4 24.2-19.5 40.8 11.2 31.9 41.6 53.3 75.4 53.3 44.1 0 80-35.9 80-80V301.6c-9.1-7.9-19.8-13.6-32-13.6-12.3.1-22.4 4.8-32 13.7z"]
    };
    exports.faUmbrella = faUmbrella;
    var faUmbrellaBeach = {
      prefix: 'fas',
      iconName: 'umbrella-beach',
      icon: [640, 512, [], "f5ca", "M115.38 136.9l102.11 37.18c35.19-81.54 86.21-144.29 139-173.7-95.88-4.89-188.78 36.96-248.53 111.8-6.69 8.4-2.66 21.05 7.42 24.72zm132.25 48.16l238.48 86.83c35.76-121.38 18.7-231.66-42.63-253.98-7.4-2.7-15.13-4-23.09-4-58.02.01-128.27 69.17-172.76 171.15zM521.48 60.5c6.22 16.3 10.83 34.6 13.2 55.19 5.74 49.89-1.42 108.23-18.95 166.98l102.62 37.36c10.09 3.67 21.31-3.43 21.57-14.17 2.32-95.69-41.91-187.44-118.44-245.36zM560 447.98H321.06L386 269.5l-60.14-21.9-72.9 200.37H16c-8.84 0-16 7.16-16 16.01v32.01C0 504.83 7.16 512 16 512h544c8.84 0 16-7.17 16-16.01v-32.01c0-8.84-7.16-16-16-16z"]
    };
    exports.faUmbrellaBeach = faUmbrellaBeach;
    var faUnderline = {
      prefix: 'fas',
      iconName: 'underline',
      icon: [448, 512, [], "f0cd", "M32 64h32v160c0 88.22 71.78 160 160 160s160-71.78 160-160V64h32a16 16 0 0 0 16-16V16a16 16 0 0 0-16-16H272a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32v160a80 80 0 0 1-160 0V64h32a16 16 0 0 0 16-16V16a16 16 0 0 0-16-16H32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16zm400 384H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z"]
    };
    exports.faUnderline = faUnderline;
    var faUndo = {
      prefix: 'fas',
      iconName: 'undo',
      icon: [512, 512, [], "f0e2", "M212.333 224.333H12c-6.627 0-12-5.373-12-12V12C0 5.373 5.373 0 12 0h48c6.627 0 12 5.373 12 12v78.112C117.773 39.279 184.26 7.47 258.175 8.007c136.906.994 246.448 111.623 246.157 248.532C504.041 393.258 393.12 504 256.333 504c-64.089 0-122.496-24.313-166.51-64.215-5.099-4.622-5.334-12.554-.467-17.42l33.967-33.967c4.474-4.474 11.662-4.717 16.401-.525C170.76 415.336 211.58 432 256.333 432c97.268 0 176-78.716 176-176 0-97.267-78.716-176-176-176-58.496 0-110.28 28.476-142.274 72.333h98.274c6.627 0 12 5.373 12 12v48c0 6.627-5.373 12-12 12z"]
    };
    exports.faUndo = faUndo;
    var faUndoAlt = {
      prefix: 'fas',
      iconName: 'undo-alt',
      icon: [512, 512, [], "f2ea", "M255.545 8c-66.269.119-126.438 26.233-170.86 68.685L48.971 40.971C33.851 25.851 8 36.559 8 57.941V192c0 13.255 10.745 24 24 24h134.059c21.382 0 32.09-25.851 16.971-40.971l-41.75-41.75c30.864-28.899 70.801-44.907 113.23-45.273 92.398-.798 170.283 73.977 169.484 169.442C423.236 348.009 349.816 424 256 424c-41.127 0-79.997-14.678-110.63-41.556-4.743-4.161-11.906-3.908-16.368.553L89.34 422.659c-4.872 4.872-4.631 12.815.482 17.433C133.798 479.813 192.074 504 256 504c136.966 0 247.999-111.033 248-247.998C504.001 119.193 392.354 7.755 255.545 8z"]
    };
    exports.faUndoAlt = faUndoAlt;
    var faUniversalAccess = {
      prefix: 'fas',
      iconName: 'universal-access',
      icon: [512, 512, [], "f29a", "M256 48c114.953 0 208 93.029 208 208 0 114.953-93.029 208-208 208-114.953 0-208-93.029-208-208 0-114.953 93.029-208 208-208m0-40C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm0 56C149.961 64 64 149.961 64 256s85.961 192 192 192 192-85.961 192-192S362.039 64 256 64zm0 44c19.882 0 36 16.118 36 36s-16.118 36-36 36-36-16.118-36-36 16.118-36 36-36zm117.741 98.023c-28.712 6.779-55.511 12.748-82.14 15.807.851 101.023 12.306 123.052 25.037 155.621 3.617 9.26-.957 19.698-10.217 23.315-9.261 3.617-19.699-.957-23.316-10.217-8.705-22.308-17.086-40.636-22.261-78.549h-9.686c-5.167 37.851-13.534 56.208-22.262 78.549-3.615 9.255-14.05 13.836-23.315 10.217-9.26-3.617-13.834-14.056-10.217-23.315 12.713-32.541 24.185-54.541 25.037-155.621-26.629-3.058-53.428-9.027-82.141-15.807-8.6-2.031-13.926-10.648-11.895-19.249s10.647-13.926 19.249-11.895c96.686 22.829 124.283 22.783 220.775 0 8.599-2.03 17.218 3.294 19.249 11.895 2.029 8.601-3.297 17.219-11.897 19.249z"]
    };
    exports.faUniversalAccess = faUniversalAccess;
    var faUniversity = {
      prefix: 'fas',
      iconName: 'university',
      icon: [512, 512, [], "f19c", "M496 128v16a8 8 0 0 1-8 8h-24v12c0 6.627-5.373 12-12 12H60c-6.627 0-12-5.373-12-12v-12H24a8 8 0 0 1-8-8v-16a8 8 0 0 1 4.941-7.392l232-88a7.996 7.996 0 0 1 6.118 0l232 88A8 8 0 0 1 496 128zm-24 304H40c-13.255 0-24 10.745-24 24v16a8 8 0 0 0 8 8h464a8 8 0 0 0 8-8v-16c0-13.255-10.745-24-24-24zM96 192v192H60c-6.627 0-12 5.373-12 12v20h416v-20c0-6.627-5.373-12-12-12h-36V192h-64v192h-64V192h-64v192h-64V192H96z"]
    };
    exports.faUniversity = faUniversity;
    var faUnlink = {
      prefix: 'fas',
      iconName: 'unlink',
      icon: [512, 512, [], "f127", "M304.083 405.907c4.686 4.686 4.686 12.284 0 16.971l-44.674 44.674c-59.263 59.262-155.693 59.266-214.961 0-59.264-59.265-59.264-155.696 0-214.96l44.675-44.675c4.686-4.686 12.284-4.686 16.971 0l39.598 39.598c4.686 4.686 4.686 12.284 0 16.971l-44.675 44.674c-28.072 28.073-28.072 73.75 0 101.823 28.072 28.072 73.75 28.073 101.824 0l44.674-44.674c4.686-4.686 12.284-4.686 16.971 0l39.597 39.598zm-56.568-260.216c4.686 4.686 12.284 4.686 16.971 0l44.674-44.674c28.072-28.075 73.75-28.073 101.824 0 28.072 28.073 28.072 73.75 0 101.823l-44.675 44.674c-4.686 4.686-4.686 12.284 0 16.971l39.598 39.598c4.686 4.686 12.284 4.686 16.971 0l44.675-44.675c59.265-59.265 59.265-155.695 0-214.96-59.266-59.264-155.695-59.264-214.961 0l-44.674 44.674c-4.686 4.686-4.686 12.284 0 16.971l39.597 39.598zm234.828 359.28l22.627-22.627c9.373-9.373 9.373-24.569 0-33.941L63.598 7.029c-9.373-9.373-24.569-9.373-33.941 0L7.029 29.657c-9.373 9.373-9.373 24.569 0 33.941l441.373 441.373c9.373 9.372 24.569 9.372 33.941 0z"]
    };
    exports.faUnlink = faUnlink;
    var faUnlock = {
      prefix: 'fas',
      iconName: 'unlock',
      icon: [448, 512, [], "f09c", "M400 256H152V152.9c0-39.6 31.7-72.5 71.3-72.9 40-.4 72.7 32.1 72.7 72v16c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24v-16C376 68 307.5-.3 223.5 0 139.5.3 72 69.5 72 153.5V256H48c-26.5 0-48 21.5-48 48v160c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48z"]
    };
    exports.faUnlock = faUnlock;
    var faUnlockAlt = {
      prefix: 'fas',
      iconName: 'unlock-alt',
      icon: [448, 512, [], "f13e", "M400 256H152V152.9c0-39.6 31.7-72.5 71.3-72.9 40-.4 72.7 32.1 72.7 72v16c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24v-16C376 68 307.5-.3 223.5 0 139.5.3 72 69.5 72 153.5V256H48c-26.5 0-48 21.5-48 48v160c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48zM264 408c0 22.1-17.9 40-40 40s-40-17.9-40-40v-48c0-22.1 17.9-40 40-40s40 17.9 40 40v48z"]
    };
    exports.faUnlockAlt = faUnlockAlt;
    var faUpload = {
      prefix: 'fas',
      iconName: 'upload',
      icon: [512, 512, [], "f093", "M296 384h-80c-13.3 0-24-10.7-24-24V192h-87.7c-17.8 0-26.7-21.5-14.1-34.1L242.3 5.7c7.5-7.5 19.8-7.5 27.3 0l152.2 152.2c12.6 12.6 3.7 34.1-14.1 34.1H320v168c0 13.3-10.7 24-24 24zm216-8v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h136v8c0 30.9 25.1 56 56 56h80c30.9 0 56-25.1 56-56v-8h136c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z"]
    };
    exports.faUpload = faUpload;
    var faUser = {
      prefix: 'fas',
      iconName: 'user',
      icon: [448, 512, [], "f007", "M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z"]
    };
    exports.faUser = faUser;
    var faUserAlt = {
      prefix: 'fas',
      iconName: 'user-alt',
      icon: [512, 512, [], "f406", "M256 288c79.5 0 144-64.5 144-144S335.5 0 256 0 112 64.5 112 144s64.5 144 144 144zm128 32h-55.1c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16H128C57.3 320 0 377.3 0 448v16c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48v-16c0-70.7-57.3-128-128-128z"]
    };
    exports.faUserAlt = faUserAlt;
    var faUserAltSlash = {
      prefix: 'fas',
      iconName: 'user-alt-slash',
      icon: [640, 512, [], "f4fa", "M633.8 458.1L389.6 269.3C433.8 244.7 464 198.1 464 144 464 64.5 399.5 0 320 0c-67.1 0-123 46.1-139 108.2L45.5 3.4C38.5-2 28.5-.8 23 6.2L3.4 31.4c-5.4 7-4.2 17 2.8 22.4l588.4 454.7c7 5.4 17 4.2 22.5-2.8l19.6-25.3c5.4-6.8 4.1-16.9-2.9-22.3zM198.4 320C124.2 320 64 380.2 64 454.4v9.6c0 26.5 21.5 48 48 48h382.2L245.8 320h-47.4z"]
    };
    exports.faUserAltSlash = faUserAltSlash;
    var faUserAstronaut = {
      prefix: 'fas',
      iconName: 'user-astronaut',
      icon: [448, 512, [], "f4fb", "M64 224h13.5c24.7 56.5 80.9 96 146.5 96s121.8-39.5 146.5-96H384c8.8 0 16-7.2 16-16v-96c0-8.8-7.2-16-16-16h-13.5C345.8 39.5 289.6 0 224 0S102.2 39.5 77.5 96H64c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16zm40-88c0-22.1 21.5-40 48-40h144c26.5 0 48 17.9 48 40v24c0 53-43 96-96 96h-48c-53 0-96-43-96-96v-24zm72 72l12-36 36-12-36-12-12-36-12 36-36 12 36 12 12 36zm151.6 113.4C297.7 340.7 262.2 352 224 352s-73.7-11.3-103.6-30.6C52.9 328.5 0 385 0 454.4v9.6c0 26.5 21.5 48 48 48h80v-64c0-17.7 14.3-32 32-32h128c17.7 0 32 14.3 32 32v64h80c26.5 0 48-21.5 48-48v-9.6c0-69.4-52.9-125.9-120.4-133zM272 448c-8.8 0-16 7.2-16 16s7.2 16 16 16 16-7.2 16-16-7.2-16-16-16zm-96 0c-8.8 0-16 7.2-16 16v48h32v-48c0-8.8-7.2-16-16-16z"]
    };
    exports.faUserAstronaut = faUserAstronaut;
    var faUserCheck = {
      prefix: 'fas',
      iconName: 'user-check',
      icon: [640, 512, [], "f4fc", "M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4zm323-128.4l-27.8-28.1c-4.6-4.7-12.1-4.7-16.8-.1l-104.8 104-45.5-45.8c-4.6-4.7-12.1-4.7-16.8-.1l-28.1 27.9c-4.7 4.6-4.7 12.1-.1 16.8l81.7 82.3c4.6 4.7 12.1 4.7 16.8.1l141.3-140.2c4.6-4.7 4.7-12.2.1-16.8z"]
    };
    exports.faUserCheck = faUserCheck;
    var faUserCircle = {
      prefix: 'fas',
      iconName: 'user-circle',
      icon: [496, 512, [], "f2bd", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm0 96c48.6 0 88 39.4 88 88s-39.4 88-88 88-88-39.4-88-88 39.4-88 88-88zm0 344c-58.7 0-111.3-26.6-146.5-68.2 18.8-35.4 55.6-59.8 98.5-59.8 2.4 0 4.8.4 7.1 1.1 13 4.2 26.6 6.9 40.9 6.9 14.3 0 28-2.7 40.9-6.9 2.3-.7 4.7-1.1 7.1-1.1 42.9 0 79.7 24.4 98.5 59.8C359.3 421.4 306.7 448 248 448z"]
    };
    exports.faUserCircle = faUserCircle;
    var faUserClock = {
      prefix: 'fas',
      iconName: 'user-clock',
      icon: [640, 512, [], "f4fd", "M496 224c-79.6 0-144 64.4-144 144s64.4 144 144 144 144-64.4 144-144-64.4-144-144-144zm64 150.3c0 5.3-4.4 9.7-9.7 9.7h-60.6c-5.3 0-9.7-4.4-9.7-9.7v-76.6c0-5.3 4.4-9.7 9.7-9.7h12.6c5.3 0 9.7 4.4 9.7 9.7V352h38.3c5.3 0 9.7 4.4 9.7 9.7v12.6zM320 368c0-27.8 6.7-54.1 18.2-77.5-8-1.5-16.2-2.5-24.6-2.5h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h347.1c-45.3-31.9-75.1-84.5-75.1-144zm-96-112c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128z"]
    };
    exports.faUserClock = faUserClock;
    var faUserCog = {
      prefix: 'fas',
      iconName: 'user-cog',
      icon: [640, 512, [], "f4fe", "M610.5 373.3c2.6-14.1 2.6-28.5 0-42.6l25.8-14.9c3-1.7 4.3-5.2 3.3-8.5-6.7-21.6-18.2-41.2-33.2-57.4-2.3-2.5-6-3.1-9-1.4l-25.8 14.9c-10.9-9.3-23.4-16.5-36.9-21.3v-29.8c0-3.4-2.4-6.4-5.7-7.1-22.3-5-45-4.8-66.2 0-3.3.7-5.7 3.7-5.7 7.1v29.8c-13.5 4.8-26 12-36.9 21.3l-25.8-14.9c-2.9-1.7-6.7-1.1-9 1.4-15 16.2-26.5 35.8-33.2 57.4-1 3.3.4 6.8 3.3 8.5l25.8 14.9c-2.6 14.1-2.6 28.5 0 42.6l-25.8 14.9c-3 1.7-4.3 5.2-3.3 8.5 6.7 21.6 18.2 41.1 33.2 57.4 2.3 2.5 6 3.1 9 1.4l25.8-14.9c10.9 9.3 23.4 16.5 36.9 21.3v29.8c0 3.4 2.4 6.4 5.7 7.1 22.3 5 45 4.8 66.2 0 3.3-.7 5.7-3.7 5.7-7.1v-29.8c13.5-4.8 26-12 36.9-21.3l25.8 14.9c2.9 1.7 6.7 1.1 9-1.4 15-16.2 26.5-35.8 33.2-57.4 1-3.3-.4-6.8-3.3-8.5l-25.8-14.9zM496 400.5c-26.8 0-48.5-21.8-48.5-48.5s21.8-48.5 48.5-48.5 48.5 21.8 48.5 48.5-21.7 48.5-48.5 48.5zM224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm201.2 226.5c-2.3-1.2-4.6-2.6-6.8-3.9l-7.9 4.6c-6 3.4-12.8 5.3-19.6 5.3-10.9 0-21.4-4.6-28.9-12.6-18.3-19.8-32.3-43.9-40.2-69.6-5.5-17.7 1.9-36.4 17.9-45.7l7.9-4.6c-.1-2.6-.1-5.2 0-7.8l-7.9-4.6c-16-9.2-23.4-28-17.9-45.7.9-2.9 2.2-5.8 3.2-8.7-3.8-.3-7.5-1.2-11.4-1.2h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c10.1 0 19.5-3.2 27.2-8.5-1.2-3.8-2-7.7-2-11.8v-9.2z"]
    };
    exports.faUserCog = faUserCog;
    var faUserEdit = {
      prefix: 'fas',
      iconName: 'user-edit',
      icon: [640, 512, [], "f4ff", "M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h274.9c-2.4-6.8-3.4-14-2.6-21.3l6.8-60.9 1.2-11.1 7.9-7.9 77.3-77.3c-24.5-27.7-60-45.5-99.9-45.5zm45.3 145.3l-6.8 61c-1.1 10.2 7.5 18.8 17.6 17.6l60.9-6.8 137.9-137.9-71.7-71.7-137.9 137.8zM633 268.9L595.1 231c-9.3-9.3-24.5-9.3-33.8 0l-37.8 37.8-4.1 4.1 71.8 71.7 41.8-41.8c9.3-9.4 9.3-24.5 0-33.9z"]
    };
    exports.faUserEdit = faUserEdit;
    var faUserFriends = {
      prefix: 'fas',
      iconName: 'user-friends',
      icon: [640, 512, [], "f500", "M192 256c61.9 0 112-50.1 112-112S253.9 32 192 32 80 82.1 80 144s50.1 112 112 112zm76.8 32h-8.3c-20.8 10-43.9 16-68.5 16s-47.6-6-68.5-16h-8.3C51.6 288 0 339.6 0 403.2V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-28.8c0-63.6-51.6-115.2-115.2-115.2zM480 256c53 0 96-43 96-96s-43-96-96-96-96 43-96 96 43 96 96 96zm48 32h-3.8c-13.9 4.8-28.6 8-44.2 8s-30.3-3.2-44.2-8H432c-20.4 0-39.2 5.9-55.7 15.4 24.4 26.3 39.7 61.2 39.7 99.8v38.4c0 2.2-.5 4.3-.6 6.4H592c26.5 0 48-21.5 48-48 0-61.9-50.1-112-112-112z"]
    };
    exports.faUserFriends = faUserFriends;
    var faUserGraduate = {
      prefix: 'fas',
      iconName: 'user-graduate',
      icon: [448, 512, [], "f501", "M319.4 320.6L224 416l-95.4-95.4C57.1 323.7 0 382.2 0 454.4v9.6c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-9.6c0-72.2-57.1-130.7-128.6-133.8zM13.6 79.8l6.4 1.5v58.4c-7 4.2-12 11.5-12 20.3 0 8.4 4.6 15.4 11.1 19.7L3.5 242c-1.7 6.9 2.1 14 7.6 14h41.8c5.5 0 9.3-7.1 7.6-14l-15.6-62.3C51.4 175.4 56 168.4 56 160c0-8.8-5-16.1-12-20.3V87.1l66 15.9c-8.6 17.2-14 36.4-14 57 0 70.7 57.3 128 128 128s128-57.3 128-128c0-20.6-5.3-39.8-14-57l96.3-23.2c18.2-4.4 18.2-27.1 0-31.5l-190.4-46c-13-3.1-26.7-3.1-39.7 0L13.6 48.2c-18.1 4.4-18.1 27.2 0 31.6z"]
    };
    exports.faUserGraduate = faUserGraduate;
    var faUserInjured = {
      prefix: 'fas',
      iconName: 'user-injured',
      icon: [448, 512, [], "f728", "M277.37 11.98C261.08 4.47 243.11 0 224 0c-53.69 0-99.5 33.13-118.51 80h81.19l90.69-68.02zM342.51 80c-7.9-19.47-20.67-36.2-36.49-49.52L239.99 80h102.52zM224 256c70.69 0 128-57.31 128-128 0-5.48-.95-10.7-1.61-16H97.61c-.67 5.3-1.61 10.52-1.61 16 0 70.69 57.31 128 128 128zM80 299.7V512h128.26l-98.45-221.52A132.835 132.835 0 0 0 80 299.7zM0 464c0 26.51 21.49 48 48 48V320.24C18.88 344.89 0 381.26 0 422.4V464zm256-48h-55.38l42.67 96H256c26.47 0 48-21.53 48-48s-21.53-48-48-48zm57.6-128h-16.71c-22.24 10.18-46.88 16-72.89 16s-50.65-5.82-72.89-16h-7.37l42.67 96H256c44.11 0 80 35.89 80 80 0 18.08-6.26 34.59-16.41 48H400c26.51 0 48-21.49 48-48v-41.6c0-74.23-60.17-134.4-134.4-134.4z"]
    };
    exports.faUserInjured = faUserInjured;
    var faUserLock = {
      prefix: 'fas',
      iconName: 'user-lock',
      icon: [640, 512, [], "f502", "M224 256A128 128 0 1 0 96 128a128 128 0 0 0 128 128zm96 64a63.08 63.08 0 0 1 8.1-30.5c-4.8-.5-9.5-1.5-14.5-1.5h-16.7a174.08 174.08 0 0 1-145.8 0h-16.7A134.43 134.43 0 0 0 0 422.4V464a48 48 0 0 0 48 48h280.9a63.54 63.54 0 0 1-8.9-32zm288-32h-32v-80a80 80 0 0 0-160 0v80h-32a32 32 0 0 0-32 32v160a32 32 0 0 0 32 32h224a32 32 0 0 0 32-32V320a32 32 0 0 0-32-32zM496 432a32 32 0 1 1 32-32 32 32 0 0 1-32 32zm32-144h-64v-80a32 32 0 0 1 64 0z"]
    };
    exports.faUserLock = faUserLock;
    var faUserMd = {
      prefix: 'fas',
      iconName: 'user-md',
      icon: [448, 512, [], "f0f0", "M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zM104 424c0 13.3 10.7 24 24 24s24-10.7 24-24-10.7-24-24-24-24 10.7-24 24zm216-135.4v49c36.5 7.4 64 39.8 64 78.4v41.7c0 7.6-5.4 14.2-12.9 15.7l-32.2 6.4c-4.3.9-8.5-1.9-9.4-6.3l-3.1-15.7c-.9-4.3 1.9-8.6 6.3-9.4l19.3-3.9V416c0-62.8-96-65.1-96 1.9v26.7l19.3 3.9c4.3.9 7.1 5.1 6.3 9.4l-3.1 15.7c-.9 4.3-5.1 7.1-9.4 6.3l-31.2-4.2c-7.9-1.1-13.8-7.8-13.8-15.9V416c0-38.6 27.5-70.9 64-78.4v-45.2c-2.2.7-4.4 1.1-6.6 1.9-18 6.3-37.3 9.8-57.4 9.8s-39.4-3.5-57.4-9.8c-7.4-2.6-14.9-4.2-22.6-5.2v81.6c23.1 6.9 40 28.1 40 53.4 0 30.9-25.1 56-56 56s-56-25.1-56-56c0-25.3 16.9-46.5 40-53.4v-80.4C48.5 301 0 355.8 0 422.4v44.8C0 491.9 20.1 512 44.8 512h358.4c24.7 0 44.8-20.1 44.8-44.8v-44.8c0-72-56.8-130.3-128-133.8z"]
    };
    exports.faUserMd = faUserMd;
    var faUserMinus = {
      prefix: 'fas',
      iconName: 'user-minus',
      icon: [640, 512, [], "f503", "M624 208H432c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h192c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm-400 48c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z"]
    };
    exports.faUserMinus = faUserMinus;
    var faUserNinja = {
      prefix: 'fas',
      iconName: 'user-ninja',
      icon: [448, 512, [], "f504", "M325.4 289.2L224 390.6 122.6 289.2C54 295.3 0 352.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-70.2-54-127.1-122.6-133.2zM32 192c27.3 0 51.8-11.5 69.2-29.7 15.1 53.9 64 93.7 122.8 93.7 70.7 0 128-57.3 128-128S294.7 0 224 0c-50.4 0-93.6 29.4-114.5 71.8C92.1 47.8 64 32 32 32c0 33.4 17.1 62.8 43.1 80-26 17.2-43.1 46.6-43.1 80zm144-96h96c17.7 0 32 14.3 32 32H144c0-17.7 14.3-32 32-32z"]
    };
    exports.faUserNinja = faUserNinja;
    var faUserNurse = {
      prefix: 'fas',
      iconName: 'user-nurse',
      icon: [448, 512, [], "f82f", "M319.41,320,224,415.39,128.59,320C57.1,323.1,0,381.6,0,453.79A58.21,58.21,0,0,0,58.21,512H389.79A58.21,58.21,0,0,0,448,453.79C448,381.6,390.9,323.1,319.41,320ZM224,304A128,128,0,0,0,352,176V65.82a32,32,0,0,0-20.76-30L246.47,4.07a64,64,0,0,0-44.94,0L116.76,35.86A32,32,0,0,0,96,65.82V176A128,128,0,0,0,224,304ZM184,71.67a5,5,0,0,1,5-5h21.67V45a5,5,0,0,1,5-5h16.66a5,5,0,0,1,5,5V66.67H259a5,5,0,0,1,5,5V88.33a5,5,0,0,1-5,5H237.33V115a5,5,0,0,1-5,5H215.67a5,5,0,0,1-5-5V93.33H189a5,5,0,0,1-5-5ZM144,160H304v16a80,80,0,0,1-160,0Z"]
    };
    exports.faUserNurse = faUserNurse;
    var faUserPlus = {
      prefix: 'fas',
      iconName: 'user-plus',
      icon: [640, 512, [], "f234", "M624 208h-64v-64c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v64h-64c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h64v64c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-64h64c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm-400 48c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z"]
    };
    exports.faUserPlus = faUserPlus;
    var faUserSecret = {
      prefix: 'fas',
      iconName: 'user-secret',
      icon: [448, 512, [], "f21b", "M383.9 308.3l23.9-62.6c4-10.5-3.7-21.7-15-21.7h-58.5c11-18.9 17.8-40.6 17.8-64v-.3c39.2-7.8 64-19.1 64-31.7 0-13.3-27.3-25.1-70.1-33-9.2-32.8-27-65.8-40.6-82.8-9.5-11.9-25.9-15.6-39.5-8.8l-27.6 13.8c-9 4.5-19.6 4.5-28.6 0L182.1 3.4c-13.6-6.8-30-3.1-39.5 8.8-13.5 17-31.4 50-40.6 82.8-42.7 7.9-70 19.7-70 33 0 12.6 24.8 23.9 64 31.7v.3c0 23.4 6.8 45.1 17.8 64H56.3c-11.5 0-19.2 11.7-14.7 22.3l25.8 60.2C27.3 329.8 0 372.7 0 422.4v44.8C0 491.9 20.1 512 44.8 512h358.4c24.7 0 44.8-20.1 44.8-44.8v-44.8c0-48.4-25.8-90.4-64.1-114.1zM176 480l-41.6-192 49.6 32 24 40-32 120zm96 0l-32-120 24-40 49.6-32L272 480zm41.7-298.5c-3.9 11.9-7 24.6-16.5 33.4-10.1 9.3-48 22.4-64-25-2.8-8.4-15.4-8.4-18.3 0-17 50.2-56 32.4-64 25-9.5-8.8-12.7-21.5-16.5-33.4-.8-2.5-6.3-5.7-6.3-5.8v-10.8c28.3 3.6 61 5.8 96 5.8s67.7-2.1 96-5.8v10.8c-.1.1-5.6 3.2-6.4 5.8z"]
    };
    exports.faUserSecret = faUserSecret;
    var faUserShield = {
      prefix: 'fas',
      iconName: 'user-shield',
      icon: [640, 512, [], "f505", "M622.3 271.1l-115.2-45c-4.1-1.6-12.6-3.7-22.2 0l-115.2 45c-10.7 4.2-17.7 14-17.7 24.9 0 111.6 68.7 188.8 132.9 213.9 9.6 3.7 18 1.6 22.2 0C558.4 489.9 640 420.5 640 296c0-10.9-7-20.7-17.7-24.9zM496 462.4V273.3l95.5 37.3c-5.6 87.1-60.9 135.4-95.5 151.8zM224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm96 40c0-2.5.8-4.8 1.1-7.2-2.5-.1-4.9-.8-7.5-.8h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c6.8 0 13.3-1.5 19.2-4-54-42.9-99.2-116.7-99.2-212z"]
    };
    exports.faUserShield = faUserShield;
    var faUserSlash = {
      prefix: 'fas',
      iconName: 'user-slash',
      icon: [640, 512, [], "f506", "M633.8 458.1L362.3 248.3C412.1 230.7 448 183.8 448 128 448 57.3 390.7 0 320 0c-67.1 0-121.5 51.8-126.9 117.4L45.5 3.4C38.5-2 28.5-.8 23 6.2L3.4 31.4c-5.4 7-4.2 17 2.8 22.4l588.4 454.7c7 5.4 17 4.2 22.5-2.8l19.6-25.3c5.4-6.8 4.1-16.9-2.9-22.3zM96 422.4V464c0 26.5 21.5 48 48 48h350.2L207.4 290.3C144.2 301.3 96 356 96 422.4z"]
    };
    exports.faUserSlash = faUserSlash;
    var faUserTag = {
      prefix: 'fas',
      iconName: 'user-tag',
      icon: [640, 512, [], "f507", "M630.6 364.9l-90.3-90.2c-12-12-28.3-18.7-45.3-18.7h-79.3c-17.7 0-32 14.3-32 32v79.2c0 17 6.7 33.2 18.7 45.2l90.3 90.2c12.5 12.5 32.8 12.5 45.3 0l92.5-92.5c12.6-12.5 12.6-32.7.1-45.2zm-182.8-21c-13.3 0-24-10.7-24-24s10.7-24 24-24 24 10.7 24 24c0 13.2-10.7 24-24 24zm-223.8-88c70.7 0 128-57.3 128-128C352 57.3 294.7 0 224 0S96 57.3 96 128c0 70.6 57.3 127.9 128 127.9zm127.8 111.2V294c-12.2-3.6-24.9-6.2-38.2-6.2h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 287.9 0 348.1 0 422.3v41.6c0 26.5 21.5 48 48 48h352c15.5 0 29.1-7.5 37.9-18.9l-58-58c-18.1-18.1-28.1-42.2-28.1-67.9z"]
    };
    exports.faUserTag = faUserTag;
    var faUserTie = {
      prefix: 'fas',
      iconName: 'user-tie',
      icon: [448, 512, [], "f508", "M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm95.8 32.6L272 480l-32-136 32-56h-96l32 56-32 136-47.8-191.4C56.9 292 0 350.3 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-72.1-56.9-130.4-128.2-133.8z"]
    };
    exports.faUserTie = faUserTie;
    var faUserTimes = {
      prefix: 'fas',
      iconName: 'user-times',
      icon: [640, 512, [], "f235", "M589.6 240l45.6-45.6c6.3-6.3 6.3-16.5 0-22.8l-22.8-22.8c-6.3-6.3-16.5-6.3-22.8 0L544 194.4l-45.6-45.6c-6.3-6.3-16.5-6.3-22.8 0l-22.8 22.8c-6.3 6.3-6.3 16.5 0 22.8l45.6 45.6-45.6 45.6c-6.3 6.3-6.3 16.5 0 22.8l22.8 22.8c6.3 6.3 16.5 6.3 22.8 0l45.6-45.6 45.6 45.6c6.3 6.3 16.5 6.3 22.8 0l22.8-22.8c6.3-6.3 6.3-16.5 0-22.8L589.6 240zM224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z"]
    };
    exports.faUserTimes = faUserTimes;
    var faUsers = {
      prefix: 'fas',
      iconName: 'users',
      icon: [640, 512, [], "f0c0", "M96 224c35.3 0 64-28.7 64-64s-28.7-64-64-64-64 28.7-64 64 28.7 64 64 64zm448 0c35.3 0 64-28.7 64-64s-28.7-64-64-64-64 28.7-64 64 28.7 64 64 64zm32 32h-64c-17.6 0-33.5 7.1-45.1 18.6 40.3 22.1 68.9 62 75.1 109.4h66c17.7 0 32-14.3 32-32v-32c0-35.3-28.7-64-64-64zm-256 0c61.9 0 112-50.1 112-112S381.9 32 320 32 208 82.1 208 144s50.1 112 112 112zm76.8 32h-8.3c-20.8 10-43.9 16-68.5 16s-47.6-6-68.5-16h-8.3C179.6 288 128 339.6 128 403.2V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-28.8c0-63.6-51.6-115.2-115.2-115.2zm-223.7-13.4C161.5 263.1 145.6 256 128 256H64c-35.3 0-64 28.7-64 64v32c0 17.7 14.3 32 32 32h65.9c6.3-47.4 34.9-87.3 75.2-109.4z"]
    };
    exports.faUsers = faUsers;
    var faUsersCog = {
      prefix: 'fas',
      iconName: 'users-cog',
      icon: [640, 512, [], "f509", "M610.5 341.3c2.6-14.1 2.6-28.5 0-42.6l25.8-14.9c3-1.7 4.3-5.2 3.3-8.5-6.7-21.6-18.2-41.2-33.2-57.4-2.3-2.5-6-3.1-9-1.4l-25.8 14.9c-10.9-9.3-23.4-16.5-36.9-21.3v-29.8c0-3.4-2.4-6.4-5.7-7.1-22.3-5-45-4.8-66.2 0-3.3.7-5.7 3.7-5.7 7.1v29.8c-13.5 4.8-26 12-36.9 21.3l-25.8-14.9c-2.9-1.7-6.7-1.1-9 1.4-15 16.2-26.5 35.8-33.2 57.4-1 3.3.4 6.8 3.3 8.5l25.8 14.9c-2.6 14.1-2.6 28.5 0 42.6l-25.8 14.9c-3 1.7-4.3 5.2-3.3 8.5 6.7 21.6 18.2 41.1 33.2 57.4 2.3 2.5 6 3.1 9 1.4l25.8-14.9c10.9 9.3 23.4 16.5 36.9 21.3v29.8c0 3.4 2.4 6.4 5.7 7.1 22.3 5 45 4.8 66.2 0 3.3-.7 5.7-3.7 5.7-7.1v-29.8c13.5-4.8 26-12 36.9-21.3l25.8 14.9c2.9 1.7 6.7 1.1 9-1.4 15-16.2 26.5-35.8 33.2-57.4 1-3.3-.4-6.8-3.3-8.5l-25.8-14.9zM496 368.5c-26.8 0-48.5-21.8-48.5-48.5s21.8-48.5 48.5-48.5 48.5 21.8 48.5 48.5-21.7 48.5-48.5 48.5zM96 224c35.3 0 64-28.7 64-64s-28.7-64-64-64-64 28.7-64 64 28.7 64 64 64zm224 32c1.9 0 3.7-.5 5.6-.6 8.3-21.7 20.5-42.1 36.3-59.2 7.4-8 17.9-12.6 28.9-12.6 6.9 0 13.7 1.8 19.6 5.3l7.9 4.6c.8-.5 1.6-.9 2.4-1.4 7-14.6 11.2-30.8 11.2-48 0-61.9-50.1-112-112-112S208 82.1 208 144c0 61.9 50.1 112 112 112zm105.2 194.5c-2.3-1.2-4.6-2.6-6.8-3.9-8.2 4.8-15.3 9.8-27.5 9.8-10.9 0-21.4-4.6-28.9-12.6-18.3-19.8-32.3-43.9-40.2-69.6-10.7-34.5 24.9-49.7 25.8-50.3-.1-2.6-.1-5.2 0-7.8l-7.9-4.6c-3.8-2.2-7-5-9.8-8.1-3.3.2-6.5.6-9.8.6-24.6 0-47.6-6-68.5-16h-8.3C179.6 288 128 339.6 128 403.2V432c0 26.5 21.5 48 48 48h255.4c-3.7-6-6.2-12.8-6.2-20.3v-9.2zM173.1 274.6C161.5 263.1 145.6 256 128 256H64c-35.3 0-64 28.7-64 64v32c0 17.7 14.3 32 32 32h65.9c6.3-47.4 34.9-87.3 75.2-109.4z"]
    };
    exports.faUsersCog = faUsersCog;
    var faUsersSlash = {
      prefix: 'fas',
      iconName: 'users-slash',
      icon: [640, 512, [], "e073", "M132.65,212.32,36.21,137.78A63.4,63.4,0,0,0,32,160a63.84,63.84,0,0,0,100.65,52.32Zm40.44,62.28A63.79,63.79,0,0,0,128,256H64A64.06,64.06,0,0,0,0,320v32a32,32,0,0,0,32,32H97.91A146.62,146.62,0,0,1,173.09,274.6ZM544,224a64,64,0,1,0-64-64A64.06,64.06,0,0,0,544,224ZM500.56,355.11a114.24,114.24,0,0,0-84.47-65.28L361,247.23c41.46-16.3,71-55.92,71-103.23A111.93,111.93,0,0,0,320,32c-57.14,0-103.69,42.83-110.6,98.08L45.46,3.38A16,16,0,0,0,23,6.19L3.37,31.46A16,16,0,0,0,6.18,53.91L594.53,508.63A16,16,0,0,0,617,505.82l19.64-25.27a16,16,0,0,0-2.81-22.45ZM128,403.21V432a48,48,0,0,0,48,48H464a47.45,47.45,0,0,0,12.57-1.87L232,289.13C173.74,294.83,128,343.42,128,403.21ZM576,256H512a63.79,63.79,0,0,0-45.09,18.6A146.29,146.29,0,0,1,542,384h66a32,32,0,0,0,32-32V320A64.06,64.06,0,0,0,576,256Z"]
    };
    exports.faUsersSlash = faUsersSlash;
    var faUtensilSpoon = {
      prefix: 'fas',
      iconName: 'utensil-spoon',
      icon: [512, 512, [], "f2e5", "M480.1 31.9c-55-55.1-164.9-34.5-227.8 28.5-49.3 49.3-55.1 110-28.8 160.4L9 413.2c-11.6 10.5-12.1 28.5-1 39.5L59.3 504c11 11 29.1 10.5 39.5-1.1l192.4-214.4c50.4 26.3 111.1 20.5 160.4-28.8 63-62.9 83.6-172.8 28.5-227.8z"]
    };
    exports.faUtensilSpoon = faUtensilSpoon;
    var faUtensils = {
      prefix: 'fas',
      iconName: 'utensils',
      icon: [416, 512, [], "f2e7", "M207.9 15.2c.8 4.7 16.1 94.5 16.1 128.8 0 52.3-27.8 89.6-68.9 104.6L168 486.7c.7 13.7-10.2 25.3-24 25.3H80c-13.7 0-24.7-11.5-24-25.3l12.9-238.1C27.7 233.6 0 196.2 0 144 0 109.6 15.3 19.9 16.1 15.2 19.3-5.1 61.4-5.4 64 16.3v141.2c1.3 3.4 15.1 3.2 16 0 1.4-25.3 7.9-139.2 8-141.8 3.3-20.8 44.7-20.8 47.9 0 .2 2.7 6.6 116.5 8 141.8.9 3.2 14.8 3.4 16 0V16.3c2.6-21.6 44.8-21.4 48-1.1zm119.2 285.7l-15 185.1c-1.2 14 9.9 26 23.9 26h56c13.3 0 24-10.7 24-24V24c0-13.2-10.7-24-24-24-82.5 0-221.4 178.5-64.9 300.9z"]
    };
    exports.faUtensils = faUtensils;
    var faVectorSquare = {
      prefix: 'fas',
      iconName: 'vector-square',
      icon: [512, 512, [], "f5cb", "M512 128V32c0-17.67-14.33-32-32-32h-96c-17.67 0-32 14.33-32 32H160c0-17.67-14.33-32-32-32H32C14.33 0 0 14.33 0 32v96c0 17.67 14.33 32 32 32v192c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32h192c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32V160c17.67 0 32-14.33 32-32zm-96-64h32v32h-32V64zM64 64h32v32H64V64zm32 384H64v-32h32v32zm352 0h-32v-32h32v32zm-32-96h-32c-17.67 0-32 14.33-32 32v32H160v-32c0-17.67-14.33-32-32-32H96V160h32c17.67 0 32-14.33 32-32V96h192v32c0 17.67 14.33 32 32 32h32v192z"]
    };
    exports.faVectorSquare = faVectorSquare;
    var faVenus = {
      prefix: 'fas',
      iconName: 'venus',
      icon: [288, 512, [], "f221", "M288 176c0-79.5-64.5-144-144-144S0 96.5 0 176c0 68.5 47.9 125.9 112 140.4V368H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v36c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-36h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-51.6c64.1-14.5 112-71.9 112-140.4zm-224 0c0-44.1 35.9-80 80-80s80 35.9 80 80-35.9 80-80 80-80-35.9-80-80z"]
    };
    exports.faVenus = faVenus;
    var faVenusDouble = {
      prefix: 'fas',
      iconName: 'venus-double',
      icon: [512, 512, [], "f226", "M288 176c0-79.5-64.5-144-144-144S0 96.5 0 176c0 68.5 47.9 125.9 112 140.4V368H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v36c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-36h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-51.6c64.1-14.5 112-71.9 112-140.4zm-224 0c0-44.1 35.9-80 80-80s80 35.9 80 80-35.9 80-80 80-80-35.9-80-80zm336 140.4V368h36c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-36v36c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-36h-36c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h36v-51.6c-21.2-4.8-40.6-14.3-57.2-27.3 14-16.7 25-36 32.1-57.1 14.5 14.8 34.7 24 57.1 24 44.1 0 80-35.9 80-80s-35.9-80-80-80c-22.3 0-42.6 9.2-57.1 24-7.1-21.1-18-40.4-32.1-57.1C303.4 43.6 334.3 32 368 32c79.5 0 144 64.5 144 144 0 68.5-47.9 125.9-112 140.4z"]
    };
    exports.faVenusDouble = faVenusDouble;
    var faVenusMars = {
      prefix: 'fas',
      iconName: 'venus-mars',
      icon: [576, 512, [], "f228", "M564 0h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-48.7 48.7C422.5 72.1 396.2 64 368 64c-33.7 0-64.6 11.6-89.2 30.9 14 16.7 25 36 32.1 57.1 14.5-14.8 34.7-24 57.1-24 44.1 0 80 35.9 80 80s-35.9 80-80 80c-22.3 0-42.6-9.2-57.1-24-7.1 21.1-18 40.4-32.1 57.1 24.5 19.4 55.5 30.9 89.2 30.9 79.5 0 144-64.5 144-144 0-28.2-8.1-54.5-22.1-76.7l48.7-48.7 16.9 16.9c2.4 2.4 5.4 3.5 8.4 3.5 6.2 0 12.1-4.8 12.1-12V12c0-6.6-5.4-12-12-12zM144 64C64.5 64 0 128.5 0 208c0 68.5 47.9 125.9 112 140.4V400H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v36c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-36h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-51.6c64.1-14.6 112-71.9 112-140.4 0-79.5-64.5-144-144-144zm0 224c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"]
    };
    exports.faVenusMars = faVenusMars;
    var faVest = {
      prefix: 'fas',
      iconName: 'vest',
      icon: [448, 512, [], "e085", "M437.252,239.877,384,160V32A32,32,0,0,0,352,0H320a24.021,24.021,0,0,0-13.312,4.031l-25,16.672a103.794,103.794,0,0,1-115.376,0l-25-16.672A24.021,24.021,0,0,0,128,0H96A32,32,0,0,0,64,32V160L10.748,239.877A64,64,0,0,0,0,275.377V480a32,32,0,0,0,32,32H192V288a31.987,31.987,0,0,1,1.643-10.119L207.135,237.4,150.188,66.564A151.518,151.518,0,0,0,224,86.234a151.55,151.55,0,0,0,73.812-19.672L224,288V512H416a32,32,0,0,0,32-32V275.377A64,64,0,0,0,437.252,239.877ZM131.312,371.312l-48,48a16,16,0,0,1-22.624-22.624l48-48a16,16,0,0,1,22.624,22.624Zm256,48a15.992,15.992,0,0,1-22.624,0l-48-48a16,16,0,0,1,22.624-22.624l48,48A15.993,15.993,0,0,1,387.312,419.312Z"]
    };
    exports.faVest = faVest;
    var faVestPatches = {
      prefix: 'fas',
      iconName: 'vest-patches',
      icon: [448, 512, [], "e086", "M437.252,239.877,384,160V32A32,32,0,0,0,352,0H320a23.982,23.982,0,0,0-13.312,4.031l-25,16.672a103.794,103.794,0,0,1-115.376,0l-25-16.672A23.982,23.982,0,0,0,128,0H96A32,32,0,0,0,64,32V160L10.748,239.877A64,64,0,0,0,0,275.377V480a32,32,0,0,0,32,32H192V288a31.987,31.987,0,0,1,1.643-10.119L207.135,237.4,150.188,66.561A151.579,151.579,0,0,0,224,86.234a151.565,151.565,0,0,0,73.811-19.668L224,288V512H416a32,32,0,0,0,32-32V275.377A64,64,0,0,0,437.252,239.877ZM63.5,272.484a12.01,12.01,0,0,1,17-16.968l15.5,15.5,15.5-15.5a12.01,12.01,0,0,1,17,16.968L112.984,288,128.5,303.516a12.01,12.01,0,0,1-17,16.968L96,304.984l-15.5,15.5a12.01,12.01,0,0,1-17-16.968L79.016,288ZM96,456a40,40,0,1,1,40-40A40,40,0,0,1,96,456ZM359.227,335.785,310.7,336a6.671,6.671,0,0,1-6.7-6.7l.215-48.574A24.987,24.987,0,0,1,331.43,256.1c12.789,1.162,22.129,12.619,22.056,25.419l-.037,5.057,5.051-.037c12.826-.035,24.236,9.275,25.4,22.076A24.948,24.948,0,0,1,359.227,335.785Z"]
    };
    exports.faVestPatches = faVestPatches;
    var faVial = {
      prefix: 'fas',
      iconName: 'vial',
      icon: [480, 512, [], "f492", "M477.7 186.1L309.5 18.3c-3.1-3.1-8.2-3.1-11.3 0l-34 33.9c-3.1 3.1-3.1 8.2 0 11.3l11.2 11.1L33 316.5c-38.8 38.7-45.1 102-9.4 143.5 20.6 24 49.5 36 78.4 35.9 26.4 0 52.8-10 72.9-30.1l246.3-245.7 11.2 11.1c3.1 3.1 8.2 3.1 11.3 0l34-33.9c3.1-3 3.1-8.1 0-11.2zM318 256H161l148-147.7 78.5 78.3L318 256z"]
    };
    exports.faVial = faVial;
    var faVials = {
      prefix: 'fas',
      iconName: 'vials',
      icon: [640, 512, [], "f493", "M72 64h24v240c0 44.1 35.9 80 80 80s80-35.9 80-80V64h24c4.4 0 8-3.6 8-8V8c0-4.4-3.6-8-8-8H72c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zm72 0h64v96h-64V64zm480 384H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h608c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zM360 64h24v240c0 44.1 35.9 80 80 80s80-35.9 80-80V64h24c4.4 0 8-3.6 8-8V8c0-4.4-3.6-8-8-8H360c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zm72 0h64v96h-64V64z"]
    };
    exports.faVials = faVials;
    var faVideo = {
      prefix: 'fas',
      iconName: 'video',
      icon: [576, 512, [], "f03d", "M336.2 64H47.8C21.4 64 0 85.4 0 111.8v288.4C0 426.6 21.4 448 47.8 448h288.4c26.4 0 47.8-21.4 47.8-47.8V111.8c0-26.4-21.4-47.8-47.8-47.8zm189.4 37.7L416 177.3v157.4l109.6 75.5c21.2 14.6 50.4-.3 50.4-25.8V127.5c0-25.4-29.1-40.4-50.4-25.8z"]
    };
    exports.faVideo = faVideo;
    var faVideoSlash = {
      prefix: 'fas',
      iconName: 'video-slash',
      icon: [640, 512, [], "f4e2", "M633.8 458.1l-55-42.5c15.4-1.4 29.2-13.7 29.2-31.1v-257c0-25.5-29.1-40.4-50.4-25.8L448 177.3v137.2l-32-24.7v-178c0-26.4-21.4-47.8-47.8-47.8H123.9L45.5 3.4C38.5-2 28.5-.8 23 6.2L3.4 31.4c-5.4 7-4.2 17 2.8 22.4L42.7 82 416 370.6l178.5 138c7 5.4 17 4.2 22.5-2.8l19.6-25.3c5.5-6.9 4.2-17-2.8-22.4zM32 400.2c0 26.4 21.4 47.8 47.8 47.8h288.4c11.2 0 21.4-4 29.6-10.5L32 154.7v245.5z"]
    };
    exports.faVideoSlash = faVideoSlash;
    var faVihara = {
      prefix: 'fas',
      iconName: 'vihara',
      icon: [640, 512, [], "f6a7", "M632.88 400.71L544 352v-64l55.16-17.69c11.79-5.9 11.79-22.72 0-28.62L480 192v-64l27.31-16.3c7.72-7.72 5.61-20.74-4.16-25.62L320 0 136.85 86.07c-9.77 4.88-11.88 17.9-4.16 25.62L160 128v64L40.84 241.69c-11.79 5.9-11.79 22.72 0 28.62L96 288v64L7.12 400.71c-5.42 3.62-7.7 9.63-7 15.29.62 5.01 3.57 9.75 8.72 12.33L64 448v48c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-48h160v48c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-48h160v48c0 8.84 7.16 16 16 16h32c8.84 0 16-7.16 16-16v-48l55.15-19.67c5.16-2.58 8.1-7.32 8.72-12.33.71-5.67-1.57-11.68-6.99-15.29zM224 128h192v64H224v-64zm-64 224v-64h320v64H160z"]
    };
    exports.faVihara = faVihara;
    var faVirus = {
      prefix: 'fas',
      iconName: 'virus',
      icon: [512, 512, [], "e074", "M483.55,227.55H462c-50.68,0-76.07-61.27-40.23-97.11L437,115.19A28.44,28.44,0,0,0,396.8,75L381.56,90.22c-35.84,35.83-97.11,10.45-97.11-40.23V28.44a28.45,28.45,0,0,0-56.9,0V50c0,50.68-61.27,76.06-97.11,40.23L115.2,75A28.44,28.44,0,0,0,75,115.19l15.25,15.25c35.84,35.84,10.45,97.11-40.23,97.11H28.45a28.45,28.45,0,1,0,0,56.89H50c50.68,0,76.07,61.28,40.23,97.12L75,396.8A28.45,28.45,0,0,0,115.2,437l15.24-15.25c35.84-35.84,97.11-10.45,97.11,40.23v21.54a28.45,28.45,0,0,0,56.9,0V462c0-50.68,61.27-76.07,97.11-40.23L396.8,437A28.45,28.45,0,0,0,437,396.8l-15.25-15.24c-35.84-35.84-10.45-97.12,40.23-97.12h21.54a28.45,28.45,0,1,0,0-56.89ZM224,272a48,48,0,1,1,48-48A48,48,0,0,1,224,272Zm80,56a24,24,0,1,1,24-24A24,24,0,0,1,304,328Z"]
    };
    exports.faVirus = faVirus;
    var faVirusSlash = {
      prefix: 'fas',
      iconName: 'virus-slash',
      icon: [640, 512, [], "e075", "M114,227.6H92.4C76.7,227.6,64,240.3,64,256s12.7,28.4,28.4,28.4H114c50.7,0,76.1,61.3,40.2,97.1L139,396.8 c-11.5,10.7-12.2,28.7-1.6,40.2s28.7,12.2,40.2,1.6c0.5-0.5,1.1-1,1.6-1.6l15.2-15.2c35.8-35.8,97.1-10.5,97.1,40.2v21.5 c0,15.7,12.8,28.4,28.5,28.4c15.7,0,28.4-12.7,28.4-28.4V462c0-26.6,17-45.9,38.2-53.4l-244.5-189 C133.7,224.7,123.9,227.5,114,227.6z M617,505.8l19.6-25.3c5.4-7,4.2-17-2.8-22.5L470.6,332c4.2-25.4,24.9-47.5,55.4-47.5h21.5 c15.7,0,28.4-12.7,28.4-28.4s-12.7-28.4-28.4-28.4H526c-50.7,0-76.1-61.3-40.2-97.1l15.2-15.3c10.7-11.5,10-29.5-1.6-40.2 c-10.9-10.1-27.7-10.1-38.6,0l-15.2,15.2c-35.8,35.8-97.1,10.5-97.1-40.2V28.5C348.4,12.7,335.7,0,320,0 c-15.7,0-28.4,12.7-28.4,28.4V50c0,50.7-61.3,76.1-97.1,40.2L179.2,75c-11.1-11.1-29.4-10.6-40.5,0.5L45.5,3.4 c-7-5.4-17-4.2-22.5,2.8L3.4,31.5c-5.4,7-4.2,17,2.8,22.5l588.4,454.7C601.5,514.1,611.6,512.8,617,505.8z M335.4,227.5l-62.9-48.6 c4.9-1.8,10.2-2.8,15.4-2.9c26.5,0,48,21.5,48,48C336,225.2,335.5,226.3,335.4,227.5z"]
    };
    exports.faVirusSlash = faVirusSlash;
    var faViruses = {
      prefix: 'fas',
      iconName: 'viruses',
      icon: [640, 512, [], "e076", "M624,352H611.88c-28.51,0-42.79-34.47-22.63-54.63l8.58-8.57a16,16,0,1,0-22.63-22.63l-8.57,8.58C546.47,294.91,512,280.63,512,252.12V240a16,16,0,0,0-32,0v12.12c0,28.51-34.47,42.79-54.63,22.63l-8.57-8.58a16,16,0,0,0-22.63,22.63l8.58,8.57c20.16,20.16,5.88,54.63-22.63,54.63H368a16,16,0,0,0,0,32h12.12c28.51,0,42.79,34.47,22.63,54.63l-8.58,8.57a16,16,0,1,0,22.63,22.63l8.57-8.58c20.16-20.16,54.63-5.88,54.63,22.63V496a16,16,0,0,0,32,0V483.88c0-28.51,34.47-42.79,54.63-22.63l8.57,8.58a16,16,0,1,0,22.63-22.63l-8.58-8.57C569.09,418.47,583.37,384,611.88,384H624a16,16,0,0,0,0-32ZM480,384a32,32,0,1,1,32-32A32,32,0,0,1,480,384ZM346.51,213.33h16.16a21.33,21.33,0,0,0,0-42.66H346.51c-38,0-57.05-46-30.17-72.84l11.43-11.44A21.33,21.33,0,0,0,297.6,56.23L286.17,67.66c-26.88,26.88-72.84,7.85-72.84-30.17V21.33a21.33,21.33,0,0,0-42.66,0V37.49c0,38-46,57.05-72.84,30.17L86.4,56.23A21.33,21.33,0,0,0,56.23,86.39L67.66,97.83c26.88,26.88,7.85,72.84-30.17,72.84H21.33a21.33,21.33,0,0,0,0,42.66H37.49c38,0,57.05,46,30.17,72.84L56.23,297.6A21.33,21.33,0,1,0,86.4,327.77l11.43-11.43c26.88-26.88,72.84-7.85,72.84,30.17v16.16a21.33,21.33,0,0,0,42.66,0V346.51c0-38,46-57.05,72.84-30.17l11.43,11.43a21.33,21.33,0,0,0,30.17-30.17l-11.43-11.43C289.46,259.29,308.49,213.33,346.51,213.33ZM160,192a32,32,0,1,1,32-32A32,32,0,0,1,160,192Zm80,32a16,16,0,1,1,16-16A16,16,0,0,1,240,224Z"]
    };
    exports.faViruses = faViruses;
    var faVoicemail = {
      prefix: 'fas',
      iconName: 'voicemail',
      icon: [640, 512, [], "f897", "M496 128a144 144 0 0 0-119.74 224H263.74A144 144 0 1 0 144 416h352a144 144 0 0 0 0-288zM64 272a80 80 0 1 1 80 80 80 80 0 0 1-80-80zm432 80a80 80 0 1 1 80-80 80 80 0 0 1-80 80z"]
    };
    exports.faVoicemail = faVoicemail;
    var faVolleyballBall = {
      prefix: 'fas',
      iconName: 'volleyball-ball',
      icon: [512, 512, [], "f45f", "M231.39 243.48a285.56 285.56 0 0 0-22.7-105.7c-90.8 42.4-157.5 122.4-180.3 216.8a249 249 0 0 0 56.9 81.1 333.87 333.87 0 0 1 146.1-192.2zm-36.9-134.4a284.23 284.23 0 0 0-57.4-70.7c-91 49.8-144.8 152.9-125 262.2 33.4-83.1 98.4-152 182.4-191.5zm187.6 165.1c8.6-99.8-27.3-197.5-97.5-264.4-14.7-1.7-51.6-5.5-98.9 8.5A333.87 333.87 0 0 1 279.19 241a285 285 0 0 0 102.9 33.18zm-124.7 9.5a286.33 286.33 0 0 0-80.2 72.6c82 57.3 184.5 75.1 277.5 47.8a247.15 247.15 0 0 0 42.2-89.9 336.1 336.1 0 0 1-80.9 10.4c-54.6-.1-108.9-14.1-158.6-40.9zm-98.3 99.7c-15.2 26-25.7 54.4-32.1 84.2a247.07 247.07 0 0 0 289-22.1c-112.9 16.1-203.3-24.8-256.9-62.1zm180.3-360.6c55.3 70.4 82.5 161.2 74.6 253.6a286.59 286.59 0 0 0 89.7-14.2c0-2 .3-4 .3-6 0-107.8-68.7-199.1-164.6-233.4z"]
    };
    exports.faVolleyballBall = faVolleyballBall;
    var faVolumeDown = {
      prefix: 'fas',
      iconName: 'volume-down',
      icon: [384, 512, [], "f027", "M215.03 72.04L126.06 161H24c-13.26 0-24 10.74-24 24v144c0 13.25 10.74 24 24 24h102.06l88.97 88.95c15.03 15.03 40.97 4.47 40.97-16.97V89.02c0-21.47-25.96-31.98-40.97-16.98zm123.2 108.08c-11.58-6.33-26.19-2.16-32.61 9.45-6.39 11.61-2.16 26.2 9.45 32.61C327.98 229.28 336 242.62 336 257c0 14.38-8.02 27.72-20.92 34.81-11.61 6.41-15.84 21-9.45 32.61 6.43 11.66 21.05 15.8 32.61 9.45 28.23-15.55 45.77-45 45.77-76.88s-17.54-61.32-45.78-76.87z"]
    };
    exports.faVolumeDown = faVolumeDown;
    var faVolumeMute = {
      prefix: 'fas',
      iconName: 'volume-mute',
      icon: [512, 512, [], "f6a9", "M215.03 71.05L126.06 160H24c-13.26 0-24 10.74-24 24v144c0 13.25 10.74 24 24 24h102.06l88.97 88.95c15.03 15.03 40.97 4.47 40.97-16.97V88.02c0-21.46-25.96-31.98-40.97-16.97zM461.64 256l45.64-45.64c6.3-6.3 6.3-16.52 0-22.82l-22.82-22.82c-6.3-6.3-16.52-6.3-22.82 0L416 210.36l-45.64-45.64c-6.3-6.3-16.52-6.3-22.82 0l-22.82 22.82c-6.3 6.3-6.3 16.52 0 22.82L370.36 256l-45.63 45.63c-6.3 6.3-6.3 16.52 0 22.82l22.82 22.82c6.3 6.3 16.52 6.3 22.82 0L416 301.64l45.64 45.64c6.3 6.3 16.52 6.3 22.82 0l22.82-22.82c6.3-6.3 6.3-16.52 0-22.82L461.64 256z"]
    };
    exports.faVolumeMute = faVolumeMute;
    var faVolumeOff = {
      prefix: 'fas',
      iconName: 'volume-off',
      icon: [256, 512, [], "f026", "M215 71l-89 89H24a24 24 0 0 0-24 24v144a24 24 0 0 0 24 24h102.06L215 441c15 15 41 4.47 41-17V88c0-21.47-26-32-41-17z"]
    };
    exports.faVolumeOff = faVolumeOff;
    var faVolumeUp = {
      prefix: 'fas',
      iconName: 'volume-up',
      icon: [576, 512, [], "f028", "M215.03 71.05L126.06 160H24c-13.26 0-24 10.74-24 24v144c0 13.25 10.74 24 24 24h102.06l88.97 88.95c15.03 15.03 40.97 4.47 40.97-16.97V88.02c0-21.46-25.96-31.98-40.97-16.97zm233.32-51.08c-11.17-7.33-26.18-4.24-33.51 6.95-7.34 11.17-4.22 26.18 6.95 33.51 66.27 43.49 105.82 116.6 105.82 195.58 0 78.98-39.55 152.09-105.82 195.58-11.17 7.32-14.29 22.34-6.95 33.5 7.04 10.71 21.93 14.56 33.51 6.95C528.27 439.58 576 351.33 576 256S528.27 72.43 448.35 19.97zM480 256c0-63.53-32.06-121.94-85.77-156.24-11.19-7.14-26.03-3.82-33.12 7.46s-3.78 26.21 7.41 33.36C408.27 165.97 432 209.11 432 256s-23.73 90.03-63.48 115.42c-11.19 7.14-14.5 22.07-7.41 33.36 6.51 10.36 21.12 15.14 33.12 7.46C447.94 377.94 480 319.54 480 256zm-141.77-76.87c-11.58-6.33-26.19-2.16-32.61 9.45-6.39 11.61-2.16 26.2 9.45 32.61C327.98 228.28 336 241.63 336 256c0 14.38-8.02 27.72-20.92 34.81-11.61 6.41-15.84 21-9.45 32.61 6.43 11.66 21.05 15.8 32.61 9.45 28.23-15.55 45.77-45 45.77-76.88s-17.54-61.32-45.78-76.86z"]
    };
    exports.faVolumeUp = faVolumeUp;
    var faVoteYea = {
      prefix: 'fas',
      iconName: 'vote-yea',
      icon: [640, 512, [], "f772", "M608 320h-64v64h22.4c5.3 0 9.6 3.6 9.6 8v16c0 4.4-4.3 8-9.6 8H73.6c-5.3 0-9.6-3.6-9.6-8v-16c0-4.4 4.3-8 9.6-8H96v-64H32c-17.7 0-32 14.3-32 32v96c0 17.7 14.3 32 32 32h576c17.7 0 32-14.3 32-32v-96c0-17.7-14.3-32-32-32zm-96 64V64.3c0-17.9-14.5-32.3-32.3-32.3H160.4C142.5 32 128 46.5 128 64.3V384h384zM211.2 202l25.5-25.3c4.2-4.2 11-4.2 15.2.1l41.3 41.6 95.2-94.4c4.2-4.2 11-4.2 15.2.1l25.3 25.5c4.2 4.2 4.2 11-.1 15.2L300.5 292c-4.2 4.2-11 4.2-15.2-.1l-74.1-74.7c-4.3-4.2-4.2-11 0-15.2z"]
    };
    exports.faVoteYea = faVoteYea;
    var faVrCardboard = {
      prefix: 'fas',
      iconName: 'vr-cardboard',
      icon: [640, 512, [], "f729", "M608 64H32C14.33 64 0 78.33 0 96v320c0 17.67 14.33 32 32 32h160.22c25.19 0 48.03-14.77 58.36-37.74l27.74-61.64C286.21 331.08 302.35 320 320 320s33.79 11.08 41.68 28.62l27.74 61.64C399.75 433.23 422.6 448 447.78 448H608c17.67 0 32-14.33 32-32V96c0-17.67-14.33-32-32-32zM160 304c-35.35 0-64-28.65-64-64s28.65-64 64-64 64 28.65 64 64-28.65 64-64 64zm320 0c-35.35 0-64-28.65-64-64s28.65-64 64-64 64 28.65 64 64-28.65 64-64 64z"]
    };
    exports.faVrCardboard = faVrCardboard;
    var faWalking = {
      prefix: 'fas',
      iconName: 'walking',
      icon: [320, 512, [], "f554", "M208 96c26.5 0 48-21.5 48-48S234.5 0 208 0s-48 21.5-48 48 21.5 48 48 48zm94.5 149.1l-23.3-11.8-9.7-29.4c-14.7-44.6-55.7-75.8-102.2-75.9-36-.1-55.9 10.1-93.3 25.2-21.6 8.7-39.3 25.2-49.7 46.2L17.6 213c-7.8 15.8-1.5 35 14.2 42.9 15.6 7.9 34.6 1.5 42.5-14.3L81 228c3.5-7 9.3-12.5 16.5-15.4l26.8-10.8-15.2 60.7c-5.2 20.8.4 42.9 14.9 58.8l59.9 65.4c7.2 7.9 12.3 17.4 14.9 27.7l18.3 73.3c4.3 17.1 21.7 27.6 38.8 23.3 17.1-4.3 27.6-21.7 23.3-38.8l-22.2-89c-2.6-10.3-7.7-19.9-14.9-27.7l-45.5-49.7 17.2-68.7 5.5 16.5c5.3 16.1 16.7 29.4 31.7 37l23.3 11.8c15.6 7.9 34.6 1.5 42.5-14.3 7.7-15.7 1.4-35.1-14.3-43zM73.6 385.8c-3.2 8.1-8 15.4-14.2 21.5l-50 50.1c-12.5 12.5-12.5 32.8 0 45.3s32.7 12.5 45.2 0l59.4-59.4c6.1-6.1 10.9-13.4 14.2-21.5l13.5-33.8c-55.3-60.3-38.7-41.8-47.4-53.7l-20.7 51.5z"]
    };
    exports.faWalking = faWalking;
    var faWallet = {
      prefix: 'fas',
      iconName: 'wallet',
      icon: [512, 512, [], "f555", "M461.2 128H80c-8.84 0-16-7.16-16-16s7.16-16 16-16h384c8.84 0 16-7.16 16-16 0-26.51-21.49-48-48-48H64C28.65 32 0 60.65 0 96v320c0 35.35 28.65 64 64 64h397.2c28.02 0 50.8-21.53 50.8-48V176c0-26.47-22.78-48-50.8-48zM416 336c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"]
    };
    exports.faWallet = faWallet;
    var faWarehouse = {
      prefix: 'fas',
      iconName: 'warehouse',
      icon: [640, 512, [], "f494", "M504 352H136.4c-4.4 0-8 3.6-8 8l-.1 48c0 4.4 3.6 8 8 8H504c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm0 96H136.1c-4.4 0-8 3.6-8 8l-.1 48c0 4.4 3.6 8 8 8h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm0-192H136.6c-4.4 0-8 3.6-8 8l-.1 48c0 4.4 3.6 8 8 8H504c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm106.5-139L338.4 3.7a48.15 48.15 0 0 0-36.9 0L29.5 117C11.7 124.5 0 141.9 0 161.3V504c0 4.4 3.6 8 8 8h80c4.4 0 8-3.6 8-8V256c0-17.6 14.6-32 32.6-32h382.8c18 0 32.6 14.4 32.6 32v248c0 4.4 3.6 8 8 8h80c4.4 0 8-3.6 8-8V161.3c0-19.4-11.7-36.8-29.5-44.3z"]
    };
    exports.faWarehouse = faWarehouse;
    var faWater = {
      prefix: 'fas',
      iconName: 'water',
      icon: [576, 512, [], "f773", "M562.1 383.9c-21.5-2.4-42.1-10.5-57.9-22.9-14.1-11.1-34.2-11.3-48.2 0-37.9 30.4-107.2 30.4-145.7-1.5-13.5-11.2-33-9.1-46.7 1.8-38 30.1-106.9 30-145.2-1.7-13.5-11.2-33.3-8.9-47.1 2-15.5 12.2-36 20.1-57.7 22.4-7.9.8-13.6 7.8-13.6 15.7v32.2c0 9.1 7.6 16.8 16.7 16 28.8-2.5 56.1-11.4 79.4-25.9 56.5 34.6 137 34.1 192 0 56.5 34.6 137 34.1 192 0 23.3 14.2 50.9 23.3 79.1 25.8 9.1.8 16.7-6.9 16.7-16v-31.6c.1-8-5.7-15.4-13.8-16.3zm0-144c-21.5-2.4-42.1-10.5-57.9-22.9-14.1-11.1-34.2-11.3-48.2 0-37.9 30.4-107.2 30.4-145.7-1.5-13.5-11.2-33-9.1-46.7 1.8-38 30.1-106.9 30-145.2-1.7-13.5-11.2-33.3-8.9-47.1 2-15.5 12.2-36 20.1-57.7 22.4-7.9.8-13.6 7.8-13.6 15.7v32.2c0 9.1 7.6 16.8 16.7 16 28.8-2.5 56.1-11.4 79.4-25.9 56.5 34.6 137 34.1 192 0 56.5 34.6 137 34.1 192 0 23.3 14.2 50.9 23.3 79.1 25.8 9.1.8 16.7-6.9 16.7-16v-31.6c.1-8-5.7-15.4-13.8-16.3zm0-144C540.6 93.4 520 85.4 504.2 73 490.1 61.9 470 61.7 456 73c-37.9 30.4-107.2 30.4-145.7-1.5-13.5-11.2-33-9.1-46.7 1.8-38 30.1-106.9 30-145.2-1.7-13.5-11.2-33.3-8.9-47.1 2-15.5 12.2-36 20.1-57.7 22.4-7.9.8-13.6 7.8-13.6 15.7v32.2c0 9.1 7.6 16.8 16.7 16 28.8-2.5 56.1-11.4 79.4-25.9 56.5 34.6 137 34.1 192 0 56.5 34.6 137 34.1 192 0 23.3 14.2 50.9 23.3 79.1 25.8 9.1.8 16.7-6.9 16.7-16v-31.6c.1-8-5.7-15.4-13.8-16.3z"]
    };
    exports.faWater = faWater;
    var faWaveSquare = {
      prefix: 'fas',
      iconName: 'wave-square',
      icon: [640, 512, [], "f83e", "M476 480H324a36 36 0 0 1-36-36V96h-96v156a36 36 0 0 1-36 36H16a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h112V68a36 36 0 0 1 36-36h152a36 36 0 0 1 36 36v348h96V260a36 36 0 0 1 36-36h140a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H512v156a36 36 0 0 1-36 36z"]
    };
    exports.faWaveSquare = faWaveSquare;
    var faWeight = {
      prefix: 'fas',
      iconName: 'weight',
      icon: [512, 512, [], "f496", "M448 64h-25.98C438.44 92.28 448 125.01 448 160c0 105.87-86.13 192-192 192S64 265.87 64 160c0-34.99 9.56-67.72 25.98-96H64C28.71 64 0 92.71 0 128v320c0 35.29 28.71 64 64 64h384c35.29 0 64-28.71 64-64V128c0-35.29-28.71-64-64-64zM256 320c88.37 0 160-71.63 160-160S344.37 0 256 0 96 71.63 96 160s71.63 160 160 160zm-.3-151.94l33.58-78.36c3.5-8.17 12.94-11.92 21.03-8.41 8.12 3.48 11.88 12.89 8.41 21l-33.67 78.55C291.73 188 296 197.45 296 208c0 22.09-17.91 40-40 40s-40-17.91-40-40c0-21.98 17.76-39.77 39.7-39.94z"]
    };
    exports.faWeight = faWeight;
    var faWeightHanging = {
      prefix: 'fas',
      iconName: 'weight-hanging',
      icon: [512, 512, [], "f5cd", "M510.28 445.86l-73.03-292.13c-3.8-15.19-16.44-25.72-30.87-25.72h-60.25c3.57-10.05 5.88-20.72 5.88-32 0-53.02-42.98-96-96-96s-96 42.98-96 96c0 11.28 2.3 21.95 5.88 32h-60.25c-14.43 0-27.08 10.54-30.87 25.72L1.72 445.86C-6.61 479.17 16.38 512 48.03 512h415.95c31.64 0 54.63-32.83 46.3-66.14zM256 128c-17.64 0-32-14.36-32-32s14.36-32 32-32 32 14.36 32 32-14.36 32-32 32z"]
    };
    exports.faWeightHanging = faWeightHanging;
    var faWheelchair = {
      prefix: 'fas',
      iconName: 'wheelchair',
      icon: [512, 512, [], "f193", "M496.101 385.669l14.227 28.663c3.929 7.915.697 17.516-7.218 21.445l-65.465 32.886c-16.049 7.967-35.556 1.194-43.189-15.055L331.679 320H192c-15.925 0-29.426-11.71-31.679-27.475C126.433 55.308 128.38 70.044 128 64c0-36.358 30.318-65.635 67.052-63.929 33.271 1.545 60.048 28.905 60.925 62.201.868 32.933-23.152 60.423-54.608 65.039l4.67 32.69H336c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16H215.182l4.572 32H352a32 32 0 0 1 28.962 18.392L438.477 396.8l36.178-18.349c7.915-3.929 17.517-.697 21.446 7.218zM311.358 352h-24.506c-7.788 54.204-54.528 96-110.852 96-61.757 0-112-50.243-112-112 0-41.505 22.694-77.809 56.324-97.156-3.712-25.965-6.844-47.86-9.488-66.333C45.956 198.464 0 261.963 0 336c0 97.047 78.953 176 176 176 71.87 0 133.806-43.308 161.11-105.192L311.358 352z"]
    };
    exports.faWheelchair = faWheelchair;
    var faWifi = {
      prefix: 'fas',
      iconName: 'wifi',
      icon: [640, 512, [], "f1eb", "M634.91 154.88C457.74-8.99 182.19-8.93 5.09 154.88c-6.66 6.16-6.79 16.59-.35 22.98l34.24 33.97c6.14 6.1 16.02 6.23 22.4.38 145.92-133.68 371.3-133.71 517.25 0 6.38 5.85 16.26 5.71 22.4-.38l34.24-33.97c6.43-6.39 6.3-16.82-.36-22.98zM320 352c-35.35 0-64 28.65-64 64s28.65 64 64 64 64-28.65 64-64-28.65-64-64-64zm202.67-83.59c-115.26-101.93-290.21-101.82-405.34 0-6.9 6.1-7.12 16.69-.57 23.15l34.44 33.99c6 5.92 15.66 6.32 22.05.8 83.95-72.57 209.74-72.41 293.49 0 6.39 5.52 16.05 5.13 22.05-.8l34.44-33.99c6.56-6.46 6.33-17.06-.56-23.15z"]
    };
    exports.faWifi = faWifi;
    var faWind = {
      prefix: 'fas',
      iconName: 'wind',
      icon: [512, 512, [], "f72e", "M156.7 256H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h142.2c15.9 0 30.8 10.9 33.4 26.6 3.3 20-12.1 37.4-31.6 37.4-14.1 0-26.1-9.2-30.4-21.9-2.1-6.3-8.6-10.1-15.2-10.1H81.6c-9.8 0-17.7 8.8-15.9 18.4 8.6 44.1 47.6 77.6 94.2 77.6 57.1 0 102.7-50.1 95.2-108.6C249 291 205.4 256 156.7 256zM16 224h336c59.7 0 106.8-54.8 93.8-116.7-7.6-36.2-36.9-65.5-73.1-73.1-55.4-11.6-105.1 24.9-114.9 75.5-1.9 9.6 6.1 18.3 15.8 18.3h32.8c6.7 0 13.1-3.8 15.2-10.1C325.9 105.2 337.9 96 352 96c19.4 0 34.9 17.4 31.6 37.4-2.6 15.7-17.4 26.6-33.4 26.6H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16zm384 32H243.7c19.3 16.6 33.2 38.8 39.8 64H400c26.5 0 48 21.5 48 48s-21.5 48-48 48c-17.9 0-33.3-9.9-41.6-24.4-2.9-5-8.7-7.6-14.5-7.6h-33.8c-10.9 0-19 10.8-15.3 21.1 17.8 50.6 70.5 84.8 129.4 72.3 41.2-8.7 75.1-41.6 84.7-82.7C526 321.5 470.5 256 400 256z"]
    };
    exports.faWind = faWind;
    var faWindowClose = {
      prefix: 'fas',
      iconName: 'window-close',
      icon: [512, 512, [], "f410", "M464 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-83.6 290.5c4.8 4.8 4.8 12.6 0 17.4l-40.5 40.5c-4.8 4.8-12.6 4.8-17.4 0L256 313.3l-66.5 67.1c-4.8 4.8-12.6 4.8-17.4 0l-40.5-40.5c-4.8-4.8-4.8-12.6 0-17.4l67.1-66.5-67.1-66.5c-4.8-4.8-4.8-12.6 0-17.4l40.5-40.5c4.8-4.8 12.6-4.8 17.4 0l66.5 67.1 66.5-67.1c4.8-4.8 12.6-4.8 17.4 0l40.5 40.5c4.8 4.8 4.8 12.6 0 17.4L313.3 256l67.1 66.5z"]
    };
    exports.faWindowClose = faWindowClose;
    var faWindowMaximize = {
      prefix: 'fas',
      iconName: 'window-maximize',
      icon: [512, 512, [], "f2d0", "M464 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-16 160H64v-84c0-6.6 5.4-12 12-12h360c6.6 0 12 5.4 12 12v84z"]
    };
    exports.faWindowMaximize = faWindowMaximize;
    var faWindowMinimize = {
      prefix: 'fas',
      iconName: 'window-minimize',
      icon: [512, 512, [], "f2d1", "M464 352H48c-26.5 0-48 21.5-48 48v32c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48v-32c0-26.5-21.5-48-48-48z"]
    };
    exports.faWindowMinimize = faWindowMinimize;
    var faWindowRestore = {
      prefix: 'fas',
      iconName: 'window-restore',
      icon: [512, 512, [], "f2d2", "M512 48v288c0 26.5-21.5 48-48 48h-48V176c0-44.1-35.9-80-80-80H128V48c0-26.5 21.5-48 48-48h288c26.5 0 48 21.5 48 48zM384 176v288c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V176c0-26.5 21.5-48 48-48h288c26.5 0 48 21.5 48 48zm-68 28c0-6.6-5.4-12-12-12H76c-6.6 0-12 5.4-12 12v52h252v-52z"]
    };
    exports.faWindowRestore = faWindowRestore;
    var faWineBottle = {
      prefix: 'fas',
      iconName: 'wine-bottle',
      icon: [512, 512, [], "f72f", "M507.31 72.57L439.43 4.69c-6.25-6.25-16.38-6.25-22.63 0l-22.63 22.63c-6.25 6.25-6.25 16.38 0 22.63l-76.67 76.67c-46.58-19.7-102.4-10.73-140.37 27.23L18.75 312.23c-24.99 24.99-24.99 65.52 0 90.51l90.51 90.51c24.99 24.99 65.52 24.99 90.51 0l158.39-158.39c37.96-37.96 46.93-93.79 27.23-140.37l76.67-76.67c6.25 6.25 16.38 6.25 22.63 0l22.63-22.63c6.24-6.24 6.24-16.37-.01-22.62zM179.22 423.29l-90.51-90.51 122.04-122.04 90.51 90.51-122.04 122.04z"]
    };
    exports.faWineBottle = faWineBottle;
    var faWineGlass = {
      prefix: 'fas',
      iconName: 'wine-glass',
      icon: [288, 512, [], "f4e3", "M216 464h-40V346.81c68.47-15.89 118.05-79.91 111.4-154.16l-15.95-178.1C270.71 6.31 263.9 0 255.74 0H32.26c-8.15 0-14.97 6.31-15.7 14.55L.6 192.66C-6.05 266.91 43.53 330.93 112 346.82V464H72c-22.09 0-40 17.91-40 40 0 4.42 3.58 8 8 8h208c4.42 0 8-3.58 8-8 0-22.09-17.91-40-40-40z"]
    };
    exports.faWineGlass = faWineGlass;
    var faWineGlassAlt = {
      prefix: 'fas',
      iconName: 'wine-glass-alt',
      icon: [288, 512, [], "f5ce", "M216 464h-40V346.81c68.47-15.89 118.05-79.91 111.4-154.16l-15.95-178.1C270.71 6.31 263.9 0 255.74 0H32.26c-8.15 0-14.97 6.31-15.7 14.55L.6 192.66C-6.05 266.91 43.53 330.93 112 346.82V464H72c-22.09 0-40 17.91-40 40 0 4.42 3.58 8 8 8h208c4.42 0 8-3.58 8-8 0-22.09-17.91-40-40-40zM61.75 48h164.5l7.17 80H54.58l7.17-80z"]
    };
    exports.faWineGlassAlt = faWineGlassAlt;
    var faWonSign = {
      prefix: 'fas',
      iconName: 'won-sign',
      icon: [576, 512, [], "f159", "M564 192c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-48l18.6-80.6c1.7-7.5-4-14.7-11.7-14.7h-46.1c-5.7 0-10.6 4-11.7 9.5L450.7 128H340.8l-19.7-86c-1.3-5.5-6.1-9.3-11.7-9.3h-44c-5.6 0-10.4 3.8-11.7 9.3l-20 86H125l-17.5-85.7c-1.1-5.6-6.1-9.6-11.8-9.6H53.6c-7.7 0-13.4 7.1-11.7 14.6L60 128H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h62.3l7.2 32H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h83.9l40.9 182.6c1.2 5.5 6.1 9.4 11.7 9.4h56.8c5.6 0 10.4-3.9 11.7-9.3L259.3 288h55.1l42.4 182.7c1.3 5.4 6.1 9.3 11.7 9.3h56.8c5.6 0 10.4-3.9 11.7-9.3L479.1 288H564c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-70.1l7.4-32zM183.8 342c-6.2 25.8-6.8 47.2-7.3 47.2h-1.1s-1.7-22-6.8-47.2l-11-54h38.8zm27.5-118h-66.8l-6.5-32h80.8zm62.9 0l2-8.6c1.9-8 3.5-16 4.8-23.4h11.8c1.3 7.4 2.9 15.4 4.8 23.4l2 8.6zm130.9 118c-5.1 25.2-6.8 47.2-6.8 47.2h-1.1c-.6 0-1.1-21.4-7.3-47.2l-12.4-54h39.1zm25.2-118h-67.4l-7.3-32h81.6z"]
    };
    exports.faWonSign = faWonSign;
    var faWrench = {
      prefix: 'fas',
      iconName: 'wrench',
      icon: [512, 512, [], "f0ad", "M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z"]
    };
    exports.faWrench = faWrench;
    var faXRay = {
      prefix: 'fas',
      iconName: 'x-ray',
      icon: [640, 512, [], "f497", "M240 384c-8.8 0-16 7.2-16 16s7.2 16 16 16 16-7.2 16-16-7.2-16-16-16zm160 32c8.8 0 16-7.2 16-16s-7.2-16-16-16-16 7.2-16 16 7.2 16 16 16zM624 0H16C7.2 0 0 7.2 0 16v32c0 8.8 7.2 16 16 16h608c8.8 0 16-7.2 16-16V16c0-8.8-7.2-16-16-16zm0 448h-48V96H64v352H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h608c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zM480 248c0 4.4-3.6 8-8 8H336v32h104c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H336v32h64c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48v-16h-64v16c0 26.5-21.5 48-48 48s-48-21.5-48-48 21.5-48 48-48h64v-32H200c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h104v-32H168c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h136v-32H200c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h104v-24c0-4.4 3.6-8 8-8h16c4.4 0 8 3.6 8 8v24h104c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H336v32h136c4.4 0 8 3.6 8 8v16z"]
    };
    exports.faXRay = faXRay;
    var faYenSign = {
      prefix: 'fas',
      iconName: 'yen-sign',
      icon: [384, 512, [], "f157", "M351.2 32h-65.3c-4.6 0-8.8 2.6-10.8 6.7l-55.4 113.2c-14.5 34.7-27.1 71.9-27.1 71.9h-1.3s-12.6-37.2-27.1-71.9L108.8 38.7c-2-4.1-6.2-6.7-10.8-6.7H32.8c-9.1 0-14.8 9.7-10.6 17.6L102.3 200H44c-6.6 0-12 5.4-12 12v32c0 6.6 5.4 12 12 12h88.2l19.8 37.2V320H44c-6.6 0-12 5.4-12 12v32c0 6.6 5.4 12 12 12h108v92c0 6.6 5.4 12 12 12h56c6.6 0 12-5.4 12-12v-92h108c6.6 0 12-5.4 12-12v-32c0-6.6-5.4-12-12-12H232v-26.8l19.8-37.2H340c6.6 0 12-5.4 12-12v-32c0-6.6-5.4-12-12-12h-58.3l80.1-150.4c4.3-7.9-1.5-17.6-10.6-17.6z"]
    };
    exports.faYenSign = faYenSign;
    var faYinYang = {
      prefix: 'fas',
      iconName: 'yin-yang',
      icon: [496, 512, [], "f6ad", "M248 8C111.03 8 0 119.03 0 256s111.03 248 248 248 248-111.03 248-248S384.97 8 248 8zm0 376c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm0-128c-53.02 0-96 42.98-96 96s42.98 96 96 96c-106.04 0-192-85.96-192-192S141.96 64 248 64c53.02 0 96 42.98 96 96s-42.98 96-96 96zm0-128c-17.67 0-32 14.33-32 32s14.33 32 32 32 32-14.33 32-32-14.33-32-32-32z"]
    };
    exports.faYinYang = faYinYang;
    var _iconsCache = {
      faAd: faAd,
      faAddressBook: faAddressBook,
      faAddressCard: faAddressCard,
      faAdjust: faAdjust,
      faAirFreshener: faAirFreshener,
      faAlignCenter: faAlignCenter,
      faAlignJustify: faAlignJustify,
      faAlignLeft: faAlignLeft,
      faAlignRight: faAlignRight,
      faAllergies: faAllergies,
      faAmbulance: faAmbulance,
      faAmericanSignLanguageInterpreting: faAmericanSignLanguageInterpreting,
      faAnchor: faAnchor,
      faAngleDoubleDown: faAngleDoubleDown,
      faAngleDoubleLeft: faAngleDoubleLeft,
      faAngleDoubleRight: faAngleDoubleRight,
      faAngleDoubleUp: faAngleDoubleUp,
      faAngleDown: faAngleDown,
      faAngleLeft: faAngleLeft,
      faAngleRight: faAngleRight,
      faAngleUp: faAngleUp,
      faAngry: faAngry,
      faAnkh: faAnkh,
      faAppleAlt: faAppleAlt,
      faArchive: faArchive,
      faArchway: faArchway,
      faArrowAltCircleDown: faArrowAltCircleDown,
      faArrowAltCircleLeft: faArrowAltCircleLeft,
      faArrowAltCircleRight: faArrowAltCircleRight,
      faArrowAltCircleUp: faArrowAltCircleUp,
      faArrowCircleDown: faArrowCircleDown,
      faArrowCircleLeft: faArrowCircleLeft,
      faArrowCircleRight: faArrowCircleRight,
      faArrowCircleUp: faArrowCircleUp,
      faArrowDown: faArrowDown,
      faArrowLeft: faArrowLeft,
      faArrowRight: faArrowRight,
      faArrowUp: faArrowUp,
      faArrowsAlt: faArrowsAlt,
      faArrowsAltH: faArrowsAltH,
      faArrowsAltV: faArrowsAltV,
      faAssistiveListeningSystems: faAssistiveListeningSystems,
      faAsterisk: faAsterisk,
      faAt: faAt,
      faAtlas: faAtlas,
      faAtom: faAtom,
      faAudioDescription: faAudioDescription,
      faAward: faAward,
      faBaby: faBaby,
      faBabyCarriage: faBabyCarriage,
      faBackspace: faBackspace,
      faBackward: faBackward,
      faBacon: faBacon,
      faBacteria: faBacteria,
      faBacterium: faBacterium,
      faBahai: faBahai,
      faBalanceScale: faBalanceScale,
      faBalanceScaleLeft: faBalanceScaleLeft,
      faBalanceScaleRight: faBalanceScaleRight,
      faBan: faBan,
      faBandAid: faBandAid,
      faBarcode: faBarcode,
      faBars: faBars,
      faBaseballBall: faBaseballBall,
      faBasketballBall: faBasketballBall,
      faBath: faBath,
      faBatteryEmpty: faBatteryEmpty,
      faBatteryFull: faBatteryFull,
      faBatteryHalf: faBatteryHalf,
      faBatteryQuarter: faBatteryQuarter,
      faBatteryThreeQuarters: faBatteryThreeQuarters,
      faBed: faBed,
      faBeer: faBeer,
      faBell: faBell,
      faBellSlash: faBellSlash,
      faBezierCurve: faBezierCurve,
      faBible: faBible,
      faBicycle: faBicycle,
      faBiking: faBiking,
      faBinoculars: faBinoculars,
      faBiohazard: faBiohazard,
      faBirthdayCake: faBirthdayCake,
      faBlender: faBlender,
      faBlenderPhone: faBlenderPhone,
      faBlind: faBlind,
      faBlog: faBlog,
      faBold: faBold,
      faBolt: faBolt,
      faBomb: faBomb,
      faBone: faBone,
      faBong: faBong,
      faBook: faBook,
      faBookDead: faBookDead,
      faBookMedical: faBookMedical,
      faBookOpen: faBookOpen,
      faBookReader: faBookReader,
      faBookmark: faBookmark,
      faBorderAll: faBorderAll,
      faBorderNone: faBorderNone,
      faBorderStyle: faBorderStyle,
      faBowlingBall: faBowlingBall,
      faBox: faBox,
      faBoxOpen: faBoxOpen,
      faBoxTissue: faBoxTissue,
      faBoxes: faBoxes,
      faBraille: faBraille,
      faBrain: faBrain,
      faBreadSlice: faBreadSlice,
      faBriefcase: faBriefcase,
      faBriefcaseMedical: faBriefcaseMedical,
      faBroadcastTower: faBroadcastTower,
      faBroom: faBroom,
      faBrush: faBrush,
      faBug: faBug,
      faBuilding: faBuilding,
      faBullhorn: faBullhorn,
      faBullseye: faBullseye,
      faBurn: faBurn,
      faBus: faBus,
      faBusAlt: faBusAlt,
      faBusinessTime: faBusinessTime,
      faCalculator: faCalculator,
      faCalendar: faCalendar,
      faCalendarAlt: faCalendarAlt,
      faCalendarCheck: faCalendarCheck,
      faCalendarDay: faCalendarDay,
      faCalendarMinus: faCalendarMinus,
      faCalendarPlus: faCalendarPlus,
      faCalendarTimes: faCalendarTimes,
      faCalendarWeek: faCalendarWeek,
      faCamera: faCamera,
      faCameraRetro: faCameraRetro,
      faCampground: faCampground,
      faCandyCane: faCandyCane,
      faCannabis: faCannabis,
      faCapsules: faCapsules,
      faCar: faCar,
      faCarAlt: faCarAlt,
      faCarBattery: faCarBattery,
      faCarCrash: faCarCrash,
      faCarSide: faCarSide,
      faCaravan: faCaravan,
      faCaretDown: faCaretDown,
      faCaretLeft: faCaretLeft,
      faCaretRight: faCaretRight,
      faCaretSquareDown: faCaretSquareDown,
      faCaretSquareLeft: faCaretSquareLeft,
      faCaretSquareRight: faCaretSquareRight,
      faCaretSquareUp: faCaretSquareUp,
      faCaretUp: faCaretUp,
      faCarrot: faCarrot,
      faCartArrowDown: faCartArrowDown,
      faCartPlus: faCartPlus,
      faCashRegister: faCashRegister,
      faCat: faCat,
      faCertificate: faCertificate,
      faChair: faChair,
      faChalkboard: faChalkboard,
      faChalkboardTeacher: faChalkboardTeacher,
      faChargingStation: faChargingStation,
      faChartArea: faChartArea,
      faChartBar: faChartBar,
      faChartLine: faChartLine,
      faChartPie: faChartPie,
      faCheck: faCheck,
      faCheckCircle: faCheckCircle,
      faCheckDouble: faCheckDouble,
      faCheckSquare: faCheckSquare,
      faCheese: faCheese,
      faChess: faChess,
      faChessBishop: faChessBishop,
      faChessBoard: faChessBoard,
      faChessKing: faChessKing,
      faChessKnight: faChessKnight,
      faChessPawn: faChessPawn,
      faChessQueen: faChessQueen,
      faChessRook: faChessRook,
      faChevronCircleDown: faChevronCircleDown,
      faChevronCircleLeft: faChevronCircleLeft,
      faChevronCircleRight: faChevronCircleRight,
      faChevronCircleUp: faChevronCircleUp,
      faChevronDown: faChevronDown,
      faChevronLeft: faChevronLeft,
      faChevronRight: faChevronRight,
      faChevronUp: faChevronUp,
      faChild: faChild,
      faChurch: faChurch,
      faCircle: faCircle,
      faCircleNotch: faCircleNotch,
      faCity: faCity,
      faClinicMedical: faClinicMedical,
      faClipboard: faClipboard,
      faClipboardCheck: faClipboardCheck,
      faClipboardList: faClipboardList,
      faClock: faClock,
      faClone: faClone,
      faClosedCaptioning: faClosedCaptioning,
      faCloud: faCloud,
      faCloudDownloadAlt: faCloudDownloadAlt,
      faCloudMeatball: faCloudMeatball,
      faCloudMoon: faCloudMoon,
      faCloudMoonRain: faCloudMoonRain,
      faCloudRain: faCloudRain,
      faCloudShowersHeavy: faCloudShowersHeavy,
      faCloudSun: faCloudSun,
      faCloudSunRain: faCloudSunRain,
      faCloudUploadAlt: faCloudUploadAlt,
      faCocktail: faCocktail,
      faCode: faCode,
      faCodeBranch: faCodeBranch,
      faCoffee: faCoffee,
      faCog: faCog,
      faCogs: faCogs,
      faCoins: faCoins,
      faColumns: faColumns,
      faComment: faComment,
      faCommentAlt: faCommentAlt,
      faCommentDollar: faCommentDollar,
      faCommentDots: faCommentDots,
      faCommentMedical: faCommentMedical,
      faCommentSlash: faCommentSlash,
      faComments: faComments,
      faCommentsDollar: faCommentsDollar,
      faCompactDisc: faCompactDisc,
      faCompass: faCompass,
      faCompress: faCompress,
      faCompressAlt: faCompressAlt,
      faCompressArrowsAlt: faCompressArrowsAlt,
      faConciergeBell: faConciergeBell,
      faCookie: faCookie,
      faCookieBite: faCookieBite,
      faCopy: faCopy,
      faCopyright: faCopyright,
      faCouch: faCouch,
      faCreditCard: faCreditCard,
      faCrop: faCrop,
      faCropAlt: faCropAlt,
      faCross: faCross,
      faCrosshairs: faCrosshairs,
      faCrow: faCrow,
      faCrown: faCrown,
      faCrutch: faCrutch,
      faCube: faCube,
      faCubes: faCubes,
      faCut: faCut,
      faDatabase: faDatabase,
      faDeaf: faDeaf,
      faDemocrat: faDemocrat,
      faDesktop: faDesktop,
      faDharmachakra: faDharmachakra,
      faDiagnoses: faDiagnoses,
      faDice: faDice,
      faDiceD20: faDiceD20,
      faDiceD6: faDiceD6,
      faDiceFive: faDiceFive,
      faDiceFour: faDiceFour,
      faDiceOne: faDiceOne,
      faDiceSix: faDiceSix,
      faDiceThree: faDiceThree,
      faDiceTwo: faDiceTwo,
      faDigitalTachograph: faDigitalTachograph,
      faDirections: faDirections,
      faDisease: faDisease,
      faDivide: faDivide,
      faDizzy: faDizzy,
      faDna: faDna,
      faDog: faDog,
      faDollarSign: faDollarSign,
      faDolly: faDolly,
      faDollyFlatbed: faDollyFlatbed,
      faDonate: faDonate,
      faDoorClosed: faDoorClosed,
      faDoorOpen: faDoorOpen,
      faDotCircle: faDotCircle,
      faDove: faDove,
      faDownload: faDownload,
      faDraftingCompass: faDraftingCompass,
      faDragon: faDragon,
      faDrawPolygon: faDrawPolygon,
      faDrum: faDrum,
      faDrumSteelpan: faDrumSteelpan,
      faDrumstickBite: faDrumstickBite,
      faDumbbell: faDumbbell,
      faDumpster: faDumpster,
      faDumpsterFire: faDumpsterFire,
      faDungeon: faDungeon,
      faEdit: faEdit,
      faEgg: faEgg,
      faEject: faEject,
      faEllipsisH: faEllipsisH,
      faEllipsisV: faEllipsisV,
      faEnvelope: faEnvelope,
      faEnvelopeOpen: faEnvelopeOpen,
      faEnvelopeOpenText: faEnvelopeOpenText,
      faEnvelopeSquare: faEnvelopeSquare,
      faEquals: faEquals,
      faEraser: faEraser,
      faEthernet: faEthernet,
      faEuroSign: faEuroSign,
      faExchangeAlt: faExchangeAlt,
      faExclamation: faExclamation,
      faExclamationCircle: faExclamationCircle,
      faExclamationTriangle: faExclamationTriangle,
      faExpand: faExpand,
      faExpandAlt: faExpandAlt,
      faExpandArrowsAlt: faExpandArrowsAlt,
      faExternalLinkAlt: faExternalLinkAlt,
      faExternalLinkSquareAlt: faExternalLinkSquareAlt,
      faEye: faEye,
      faEyeDropper: faEyeDropper,
      faEyeSlash: faEyeSlash,
      faFan: faFan,
      faFastBackward: faFastBackward,
      faFastForward: faFastForward,
      faFaucet: faFaucet,
      faFax: faFax,
      faFeather: faFeather,
      faFeatherAlt: faFeatherAlt,
      faFemale: faFemale,
      faFighterJet: faFighterJet,
      faFile: faFile,
      faFileAlt: faFileAlt,
      faFileArchive: faFileArchive,
      faFileAudio: faFileAudio,
      faFileCode: faFileCode,
      faFileContract: faFileContract,
      faFileCsv: faFileCsv,
      faFileDownload: faFileDownload,
      faFileExcel: faFileExcel,
      faFileExport: faFileExport,
      faFileImage: faFileImage,
      faFileImport: faFileImport,
      faFileInvoice: faFileInvoice,
      faFileInvoiceDollar: faFileInvoiceDollar,
      faFileMedical: faFileMedical,
      faFileMedicalAlt: faFileMedicalAlt,
      faFilePdf: faFilePdf,
      faFilePowerpoint: faFilePowerpoint,
      faFilePrescription: faFilePrescription,
      faFileSignature: faFileSignature,
      faFileUpload: faFileUpload,
      faFileVideo: faFileVideo,
      faFileWord: faFileWord,
      faFill: faFill,
      faFillDrip: faFillDrip,
      faFilm: faFilm,
      faFilter: faFilter,
      faFingerprint: faFingerprint,
      faFire: faFire,
      faFireAlt: faFireAlt,
      faFireExtinguisher: faFireExtinguisher,
      faFirstAid: faFirstAid,
      faFish: faFish,
      faFistRaised: faFistRaised,
      faFlag: faFlag,
      faFlagCheckered: faFlagCheckered,
      faFlagUsa: faFlagUsa,
      faFlask: faFlask,
      faFlushed: faFlushed,
      faFolder: faFolder,
      faFolderMinus: faFolderMinus,
      faFolderOpen: faFolderOpen,
      faFolderPlus: faFolderPlus,
      faFont: faFont,
      faFontAwesomeLogoFull: faFontAwesomeLogoFull,
      faFootballBall: faFootballBall,
      faForward: faForward,
      faFrog: faFrog,
      faFrown: faFrown,
      faFrownOpen: faFrownOpen,
      faFunnelDollar: faFunnelDollar,
      faFutbol: faFutbol,
      faGamepad: faGamepad,
      faGasPump: faGasPump,
      faGavel: faGavel,
      faGem: faGem,
      faGenderless: faGenderless,
      faGhost: faGhost,
      faGift: faGift,
      faGifts: faGifts,
      faGlassCheers: faGlassCheers,
      faGlassMartini: faGlassMartini,
      faGlassMartiniAlt: faGlassMartiniAlt,
      faGlassWhiskey: faGlassWhiskey,
      faGlasses: faGlasses,
      faGlobe: faGlobe,
      faGlobeAfrica: faGlobeAfrica,
      faGlobeAmericas: faGlobeAmericas,
      faGlobeAsia: faGlobeAsia,
      faGlobeEurope: faGlobeEurope,
      faGolfBall: faGolfBall,
      faGopuram: faGopuram,
      faGraduationCap: faGraduationCap,
      faGreaterThan: faGreaterThan,
      faGreaterThanEqual: faGreaterThanEqual,
      faGrimace: faGrimace,
      faGrin: faGrin,
      faGrinAlt: faGrinAlt,
      faGrinBeam: faGrinBeam,
      faGrinBeamSweat: faGrinBeamSweat,
      faGrinHearts: faGrinHearts,
      faGrinSquint: faGrinSquint,
      faGrinSquintTears: faGrinSquintTears,
      faGrinStars: faGrinStars,
      faGrinTears: faGrinTears,
      faGrinTongue: faGrinTongue,
      faGrinTongueSquint: faGrinTongueSquint,
      faGrinTongueWink: faGrinTongueWink,
      faGrinWink: faGrinWink,
      faGripHorizontal: faGripHorizontal,
      faGripLines: faGripLines,
      faGripLinesVertical: faGripLinesVertical,
      faGripVertical: faGripVertical,
      faGuitar: faGuitar,
      faHSquare: faHSquare,
      faHamburger: faHamburger,
      faHammer: faHammer,
      faHamsa: faHamsa,
      faHandHolding: faHandHolding,
      faHandHoldingHeart: faHandHoldingHeart,
      faHandHoldingMedical: faHandHoldingMedical,
      faHandHoldingUsd: faHandHoldingUsd,
      faHandHoldingWater: faHandHoldingWater,
      faHandLizard: faHandLizard,
      faHandMiddleFinger: faHandMiddleFinger,
      faHandPaper: faHandPaper,
      faHandPeace: faHandPeace,
      faHandPointDown: faHandPointDown,
      faHandPointLeft: faHandPointLeft,
      faHandPointRight: faHandPointRight,
      faHandPointUp: faHandPointUp,
      faHandPointer: faHandPointer,
      faHandRock: faHandRock,
      faHandScissors: faHandScissors,
      faHandSparkles: faHandSparkles,
      faHandSpock: faHandSpock,
      faHands: faHands,
      faHandsHelping: faHandsHelping,
      faHandsWash: faHandsWash,
      faHandshake: faHandshake,
      faHandshakeAltSlash: faHandshakeAltSlash,
      faHandshakeSlash: faHandshakeSlash,
      faHanukiah: faHanukiah,
      faHardHat: faHardHat,
      faHashtag: faHashtag,
      faHatCowboy: faHatCowboy,
      faHatCowboySide: faHatCowboySide,
      faHatWizard: faHatWizard,
      faHdd: faHdd,
      faHeadSideCough: faHeadSideCough,
      faHeadSideCoughSlash: faHeadSideCoughSlash,
      faHeadSideMask: faHeadSideMask,
      faHeadSideVirus: faHeadSideVirus,
      faHeading: faHeading,
      faHeadphones: faHeadphones,
      faHeadphonesAlt: faHeadphonesAlt,
      faHeadset: faHeadset,
      faHeart: faHeart,
      faHeartBroken: faHeartBroken,
      faHeartbeat: faHeartbeat,
      faHelicopter: faHelicopter,
      faHighlighter: faHighlighter,
      faHiking: faHiking,
      faHippo: faHippo,
      faHistory: faHistory,
      faHockeyPuck: faHockeyPuck,
      faHollyBerry: faHollyBerry,
      faHome: faHome,
      faHorse: faHorse,
      faHorseHead: faHorseHead,
      faHospital: faHospital,
      faHospitalAlt: faHospitalAlt,
      faHospitalSymbol: faHospitalSymbol,
      faHospitalUser: faHospitalUser,
      faHotTub: faHotTub,
      faHotdog: faHotdog,
      faHotel: faHotel,
      faHourglass: faHourglass,
      faHourglassEnd: faHourglassEnd,
      faHourglassHalf: faHourglassHalf,
      faHourglassStart: faHourglassStart,
      faHouseDamage: faHouseDamage,
      faHouseUser: faHouseUser,
      faHryvnia: faHryvnia,
      faICursor: faICursor,
      faIceCream: faIceCream,
      faIcicles: faIcicles,
      faIcons: faIcons,
      faIdBadge: faIdBadge,
      faIdCard: faIdCard,
      faIdCardAlt: faIdCardAlt,
      faIgloo: faIgloo,
      faImage: faImage,
      faImages: faImages,
      faInbox: faInbox,
      faIndent: faIndent,
      faIndustry: faIndustry,
      faInfinity: faInfinity,
      faInfo: faInfo,
      faInfoCircle: faInfoCircle,
      faItalic: faItalic,
      faJedi: faJedi,
      faJoint: faJoint,
      faJournalWhills: faJournalWhills,
      faKaaba: faKaaba,
      faKey: faKey,
      faKeyboard: faKeyboard,
      faKhanda: faKhanda,
      faKiss: faKiss,
      faKissBeam: faKissBeam,
      faKissWinkHeart: faKissWinkHeart,
      faKiwiBird: faKiwiBird,
      faLandmark: faLandmark,
      faLanguage: faLanguage,
      faLaptop: faLaptop,
      faLaptopCode: faLaptopCode,
      faLaptopHouse: faLaptopHouse,
      faLaptopMedical: faLaptopMedical,
      faLaugh: faLaugh,
      faLaughBeam: faLaughBeam,
      faLaughSquint: faLaughSquint,
      faLaughWink: faLaughWink,
      faLayerGroup: faLayerGroup,
      faLeaf: faLeaf,
      faLemon: faLemon,
      faLessThan: faLessThan,
      faLessThanEqual: faLessThanEqual,
      faLevelDownAlt: faLevelDownAlt,
      faLevelUpAlt: faLevelUpAlt,
      faLifeRing: faLifeRing,
      faLightbulb: faLightbulb,
      faLink: faLink,
      faLiraSign: faLiraSign,
      faList: faList,
      faListAlt: faListAlt,
      faListOl: faListOl,
      faListUl: faListUl,
      faLocationArrow: faLocationArrow,
      faLock: faLock,
      faLockOpen: faLockOpen,
      faLongArrowAltDown: faLongArrowAltDown,
      faLongArrowAltLeft: faLongArrowAltLeft,
      faLongArrowAltRight: faLongArrowAltRight,
      faLongArrowAltUp: faLongArrowAltUp,
      faLowVision: faLowVision,
      faLuggageCart: faLuggageCart,
      faLungs: faLungs,
      faLungsVirus: faLungsVirus,
      faMagic: faMagic,
      faMagnet: faMagnet,
      faMailBulk: faMailBulk,
      faMale: faMale,
      faMap: faMap,
      faMapMarked: faMapMarked,
      faMapMarkedAlt: faMapMarkedAlt,
      faMapMarker: faMapMarker,
      faMapMarkerAlt: faMapMarkerAlt,
      faMapPin: faMapPin,
      faMapSigns: faMapSigns,
      faMarker: faMarker,
      faMars: faMars,
      faMarsDouble: faMarsDouble,
      faMarsStroke: faMarsStroke,
      faMarsStrokeH: faMarsStrokeH,
      faMarsStrokeV: faMarsStrokeV,
      faMask: faMask,
      faMedal: faMedal,
      faMedkit: faMedkit,
      faMeh: faMeh,
      faMehBlank: faMehBlank,
      faMehRollingEyes: faMehRollingEyes,
      faMemory: faMemory,
      faMenorah: faMenorah,
      faMercury: faMercury,
      faMeteor: faMeteor,
      faMicrochip: faMicrochip,
      faMicrophone: faMicrophone,
      faMicrophoneAlt: faMicrophoneAlt,
      faMicrophoneAltSlash: faMicrophoneAltSlash,
      faMicrophoneSlash: faMicrophoneSlash,
      faMicroscope: faMicroscope,
      faMinus: faMinus,
      faMinusCircle: faMinusCircle,
      faMinusSquare: faMinusSquare,
      faMitten: faMitten,
      faMobile: faMobile,
      faMobileAlt: faMobileAlt,
      faMoneyBill: faMoneyBill,
      faMoneyBillAlt: faMoneyBillAlt,
      faMoneyBillWave: faMoneyBillWave,
      faMoneyBillWaveAlt: faMoneyBillWaveAlt,
      faMoneyCheck: faMoneyCheck,
      faMoneyCheckAlt: faMoneyCheckAlt,
      faMonument: faMonument,
      faMoon: faMoon,
      faMortarPestle: faMortarPestle,
      faMosque: faMosque,
      faMotorcycle: faMotorcycle,
      faMountain: faMountain,
      faMouse: faMouse,
      faMousePointer: faMousePointer,
      faMugHot: faMugHot,
      faMusic: faMusic,
      faNetworkWired: faNetworkWired,
      faNeuter: faNeuter,
      faNewspaper: faNewspaper,
      faNotEqual: faNotEqual,
      faNotesMedical: faNotesMedical,
      faObjectGroup: faObjectGroup,
      faObjectUngroup: faObjectUngroup,
      faOilCan: faOilCan,
      faOm: faOm,
      faOtter: faOtter,
      faOutdent: faOutdent,
      faPager: faPager,
      faPaintBrush: faPaintBrush,
      faPaintRoller: faPaintRoller,
      faPalette: faPalette,
      faPallet: faPallet,
      faPaperPlane: faPaperPlane,
      faPaperclip: faPaperclip,
      faParachuteBox: faParachuteBox,
      faParagraph: faParagraph,
      faParking: faParking,
      faPassport: faPassport,
      faPastafarianism: faPastafarianism,
      faPaste: faPaste,
      faPause: faPause,
      faPauseCircle: faPauseCircle,
      faPaw: faPaw,
      faPeace: faPeace,
      faPen: faPen,
      faPenAlt: faPenAlt,
      faPenFancy: faPenFancy,
      faPenNib: faPenNib,
      faPenSquare: faPenSquare,
      faPencilAlt: faPencilAlt,
      faPencilRuler: faPencilRuler,
      faPeopleArrows: faPeopleArrows,
      faPeopleCarry: faPeopleCarry,
      faPepperHot: faPepperHot,
      faPercent: faPercent,
      faPercentage: faPercentage,
      faPersonBooth: faPersonBooth,
      faPhone: faPhone,
      faPhoneAlt: faPhoneAlt,
      faPhoneSlash: faPhoneSlash,
      faPhoneSquare: faPhoneSquare,
      faPhoneSquareAlt: faPhoneSquareAlt,
      faPhoneVolume: faPhoneVolume,
      faPhotoVideo: faPhotoVideo,
      faPiggyBank: faPiggyBank,
      faPills: faPills,
      faPizzaSlice: faPizzaSlice,
      faPlaceOfWorship: faPlaceOfWorship,
      faPlane: faPlane,
      faPlaneArrival: faPlaneArrival,
      faPlaneDeparture: faPlaneDeparture,
      faPlaneSlash: faPlaneSlash,
      faPlay: faPlay,
      faPlayCircle: faPlayCircle,
      faPlug: faPlug,
      faPlus: faPlus,
      faPlusCircle: faPlusCircle,
      faPlusSquare: faPlusSquare,
      faPodcast: faPodcast,
      faPoll: faPoll,
      faPollH: faPollH,
      faPoo: faPoo,
      faPooStorm: faPooStorm,
      faPoop: faPoop,
      faPortrait: faPortrait,
      faPoundSign: faPoundSign,
      faPowerOff: faPowerOff,
      faPray: faPray,
      faPrayingHands: faPrayingHands,
      faPrescription: faPrescription,
      faPrescriptionBottle: faPrescriptionBottle,
      faPrescriptionBottleAlt: faPrescriptionBottleAlt,
      faPrint: faPrint,
      faProcedures: faProcedures,
      faProjectDiagram: faProjectDiagram,
      faPumpMedical: faPumpMedical,
      faPumpSoap: faPumpSoap,
      faPuzzlePiece: faPuzzlePiece,
      faQrcode: faQrcode,
      faQuestion: faQuestion,
      faQuestionCircle: faQuestionCircle,
      faQuidditch: faQuidditch,
      faQuoteLeft: faQuoteLeft,
      faQuoteRight: faQuoteRight,
      faQuran: faQuran,
      faRadiation: faRadiation,
      faRadiationAlt: faRadiationAlt,
      faRainbow: faRainbow,
      faRandom: faRandom,
      faReceipt: faReceipt,
      faRecordVinyl: faRecordVinyl,
      faRecycle: faRecycle,
      faRedo: faRedo,
      faRedoAlt: faRedoAlt,
      faRegistered: faRegistered,
      faRemoveFormat: faRemoveFormat,
      faReply: faReply,
      faReplyAll: faReplyAll,
      faRepublican: faRepublican,
      faRestroom: faRestroom,
      faRetweet: faRetweet,
      faRibbon: faRibbon,
      faRing: faRing,
      faRoad: faRoad,
      faRobot: faRobot,
      faRocket: faRocket,
      faRoute: faRoute,
      faRss: faRss,
      faRssSquare: faRssSquare,
      faRubleSign: faRubleSign,
      faRuler: faRuler,
      faRulerCombined: faRulerCombined,
      faRulerHorizontal: faRulerHorizontal,
      faRulerVertical: faRulerVertical,
      faRunning: faRunning,
      faRupeeSign: faRupeeSign,
      faSadCry: faSadCry,
      faSadTear: faSadTear,
      faSatellite: faSatellite,
      faSatelliteDish: faSatelliteDish,
      faSave: faSave,
      faSchool: faSchool,
      faScrewdriver: faScrewdriver,
      faScroll: faScroll,
      faSdCard: faSdCard,
      faSearch: faSearch,
      faSearchDollar: faSearchDollar,
      faSearchLocation: faSearchLocation,
      faSearchMinus: faSearchMinus,
      faSearchPlus: faSearchPlus,
      faSeedling: faSeedling,
      faServer: faServer,
      faShapes: faShapes,
      faShare: faShare,
      faShareAlt: faShareAlt,
      faShareAltSquare: faShareAltSquare,
      faShareSquare: faShareSquare,
      faShekelSign: faShekelSign,
      faShieldAlt: faShieldAlt,
      faShieldVirus: faShieldVirus,
      faShip: faShip,
      faShippingFast: faShippingFast,
      faShoePrints: faShoePrints,
      faShoppingBag: faShoppingBag,
      faShoppingBasket: faShoppingBasket,
      faShoppingCart: faShoppingCart,
      faShower: faShower,
      faShuttleVan: faShuttleVan,
      faSign: faSign,
      faSignInAlt: faSignInAlt,
      faSignLanguage: faSignLanguage,
      faSignOutAlt: faSignOutAlt,
      faSignal: faSignal,
      faSignature: faSignature,
      faSimCard: faSimCard,
      faSink: faSink,
      faSitemap: faSitemap,
      faSkating: faSkating,
      faSkiing: faSkiing,
      faSkiingNordic: faSkiingNordic,
      faSkull: faSkull,
      faSkullCrossbones: faSkullCrossbones,
      faSlash: faSlash,
      faSleigh: faSleigh,
      faSlidersH: faSlidersH,
      faSmile: faSmile,
      faSmileBeam: faSmileBeam,
      faSmileWink: faSmileWink,
      faSmog: faSmog,
      faSmoking: faSmoking,
      faSmokingBan: faSmokingBan,
      faSms: faSms,
      faSnowboarding: faSnowboarding,
      faSnowflake: faSnowflake,
      faSnowman: faSnowman,
      faSnowplow: faSnowplow,
      faSoap: faSoap,
      faSocks: faSocks,
      faSolarPanel: faSolarPanel,
      faSort: faSort,
      faSortAlphaDown: faSortAlphaDown,
      faSortAlphaDownAlt: faSortAlphaDownAlt,
      faSortAlphaUp: faSortAlphaUp,
      faSortAlphaUpAlt: faSortAlphaUpAlt,
      faSortAmountDown: faSortAmountDown,
      faSortAmountDownAlt: faSortAmountDownAlt,
      faSortAmountUp: faSortAmountUp,
      faSortAmountUpAlt: faSortAmountUpAlt,
      faSortDown: faSortDown,
      faSortNumericDown: faSortNumericDown,
      faSortNumericDownAlt: faSortNumericDownAlt,
      faSortNumericUp: faSortNumericUp,
      faSortNumericUpAlt: faSortNumericUpAlt,
      faSortUp: faSortUp,
      faSpa: faSpa,
      faSpaceShuttle: faSpaceShuttle,
      faSpellCheck: faSpellCheck,
      faSpider: faSpider,
      faSpinner: faSpinner,
      faSplotch: faSplotch,
      faSprayCan: faSprayCan,
      faSquare: faSquare,
      faSquareFull: faSquareFull,
      faSquareRootAlt: faSquareRootAlt,
      faStamp: faStamp,
      faStar: faStar,
      faStarAndCrescent: faStarAndCrescent,
      faStarHalf: faStarHalf,
      faStarHalfAlt: faStarHalfAlt,
      faStarOfDavid: faStarOfDavid,
      faStarOfLife: faStarOfLife,
      faStepBackward: faStepBackward,
      faStepForward: faStepForward,
      faStethoscope: faStethoscope,
      faStickyNote: faStickyNote,
      faStop: faStop,
      faStopCircle: faStopCircle,
      faStopwatch: faStopwatch,
      faStopwatch20: faStopwatch20,
      faStore: faStore,
      faStoreAlt: faStoreAlt,
      faStoreAltSlash: faStoreAltSlash,
      faStoreSlash: faStoreSlash,
      faStream: faStream,
      faStreetView: faStreetView,
      faStrikethrough: faStrikethrough,
      faStroopwafel: faStroopwafel,
      faSubscript: faSubscript,
      faSubway: faSubway,
      faSuitcase: faSuitcase,
      faSuitcaseRolling: faSuitcaseRolling,
      faSun: faSun,
      faSuperscript: faSuperscript,
      faSurprise: faSurprise,
      faSwatchbook: faSwatchbook,
      faSwimmer: faSwimmer,
      faSwimmingPool: faSwimmingPool,
      faSynagogue: faSynagogue,
      faSync: faSync,
      faSyncAlt: faSyncAlt,
      faSyringe: faSyringe,
      faTable: faTable,
      faTableTennis: faTableTennis,
      faTablet: faTablet,
      faTabletAlt: faTabletAlt,
      faTablets: faTablets,
      faTachometerAlt: faTachometerAlt,
      faTag: faTag,
      faTags: faTags,
      faTape: faTape,
      faTasks: faTasks,
      faTaxi: faTaxi,
      faTeeth: faTeeth,
      faTeethOpen: faTeethOpen,
      faTemperatureHigh: faTemperatureHigh,
      faTemperatureLow: faTemperatureLow,
      faTenge: faTenge,
      faTerminal: faTerminal,
      faTextHeight: faTextHeight,
      faTextWidth: faTextWidth,
      faTh: faTh,
      faThLarge: faThLarge,
      faThList: faThList,
      faTheaterMasks: faTheaterMasks,
      faThermometer: faThermometer,
      faThermometerEmpty: faThermometerEmpty,
      faThermometerFull: faThermometerFull,
      faThermometerHalf: faThermometerHalf,
      faThermometerQuarter: faThermometerQuarter,
      faThermometerThreeQuarters: faThermometerThreeQuarters,
      faThumbsDown: faThumbsDown,
      faThumbsUp: faThumbsUp,
      faThumbtack: faThumbtack,
      faTicketAlt: faTicketAlt,
      faTimes: faTimes,
      faTimesCircle: faTimesCircle,
      faTint: faTint,
      faTintSlash: faTintSlash,
      faTired: faTired,
      faToggleOff: faToggleOff,
      faToggleOn: faToggleOn,
      faToilet: faToilet,
      faToiletPaper: faToiletPaper,
      faToiletPaperSlash: faToiletPaperSlash,
      faToolbox: faToolbox,
      faTools: faTools,
      faTooth: faTooth,
      faTorah: faTorah,
      faToriiGate: faToriiGate,
      faTractor: faTractor,
      faTrademark: faTrademark,
      faTrafficLight: faTrafficLight,
      faTrailer: faTrailer,
      faTrain: faTrain,
      faTram: faTram,
      faTransgender: faTransgender,
      faTransgenderAlt: faTransgenderAlt,
      faTrash: faTrash,
      faTrashAlt: faTrashAlt,
      faTrashRestore: faTrashRestore,
      faTrashRestoreAlt: faTrashRestoreAlt,
      faTree: faTree,
      faTrophy: faTrophy,
      faTruck: faTruck,
      faTruckLoading: faTruckLoading,
      faTruckMonster: faTruckMonster,
      faTruckMoving: faTruckMoving,
      faTruckPickup: faTruckPickup,
      faTshirt: faTshirt,
      faTty: faTty,
      faTv: faTv,
      faUmbrella: faUmbrella,
      faUmbrellaBeach: faUmbrellaBeach,
      faUnderline: faUnderline,
      faUndo: faUndo,
      faUndoAlt: faUndoAlt,
      faUniversalAccess: faUniversalAccess,
      faUniversity: faUniversity,
      faUnlink: faUnlink,
      faUnlock: faUnlock,
      faUnlockAlt: faUnlockAlt,
      faUpload: faUpload,
      faUser: faUser,
      faUserAlt: faUserAlt,
      faUserAltSlash: faUserAltSlash,
      faUserAstronaut: faUserAstronaut,
      faUserCheck: faUserCheck,
      faUserCircle: faUserCircle,
      faUserClock: faUserClock,
      faUserCog: faUserCog,
      faUserEdit: faUserEdit,
      faUserFriends: faUserFriends,
      faUserGraduate: faUserGraduate,
      faUserInjured: faUserInjured,
      faUserLock: faUserLock,
      faUserMd: faUserMd,
      faUserMinus: faUserMinus,
      faUserNinja: faUserNinja,
      faUserNurse: faUserNurse,
      faUserPlus: faUserPlus,
      faUserSecret: faUserSecret,
      faUserShield: faUserShield,
      faUserSlash: faUserSlash,
      faUserTag: faUserTag,
      faUserTie: faUserTie,
      faUserTimes: faUserTimes,
      faUsers: faUsers,
      faUsersCog: faUsersCog,
      faUsersSlash: faUsersSlash,
      faUtensilSpoon: faUtensilSpoon,
      faUtensils: faUtensils,
      faVectorSquare: faVectorSquare,
      faVenus: faVenus,
      faVenusDouble: faVenusDouble,
      faVenusMars: faVenusMars,
      faVest: faVest,
      faVestPatches: faVestPatches,
      faVial: faVial,
      faVials: faVials,
      faVideo: faVideo,
      faVideoSlash: faVideoSlash,
      faVihara: faVihara,
      faVirus: faVirus,
      faVirusSlash: faVirusSlash,
      faViruses: faViruses,
      faVoicemail: faVoicemail,
      faVolleyballBall: faVolleyballBall,
      faVolumeDown: faVolumeDown,
      faVolumeMute: faVolumeMute,
      faVolumeOff: faVolumeOff,
      faVolumeUp: faVolumeUp,
      faVoteYea: faVoteYea,
      faVrCardboard: faVrCardboard,
      faWalking: faWalking,
      faWallet: faWallet,
      faWarehouse: faWarehouse,
      faWater: faWater,
      faWaveSquare: faWaveSquare,
      faWeight: faWeight,
      faWeightHanging: faWeightHanging,
      faWheelchair: faWheelchair,
      faWifi: faWifi,
      faWind: faWind,
      faWindowClose: faWindowClose,
      faWindowMaximize: faWindowMaximize,
      faWindowMinimize: faWindowMinimize,
      faWindowRestore: faWindowRestore,
      faWineBottle: faWineBottle,
      faWineGlass: faWineGlass,
      faWineGlassAlt: faWineGlassAlt,
      faWonSign: faWonSign,
      faWrench: faWrench,
      faXRay: faXRay,
      faYenSign: faYenSign,
      faYinYang: faYinYang
    };
    exports.fas = _iconsCache;
  }, {}],
  "../node_modules/@fortawesome/fontawesome-svg-core/index.es.js": [function (require, module, exports) {
    var global = arguments[3];
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.toHtml = toHtml;
    exports.findIconDefinition = findIconDefinition;
    exports.parse = exports.dom = exports.library = exports.counter = exports.text = exports.layer = exports.config = exports.noAuto = exports.icon = void 0;

    function _typeof2(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof2(obj) {
          return typeof obj;
        };
      } else {
        _typeof2 = function _typeof2(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof2(obj);
    }
    /*!
     * Font Awesome Free 5.15.1 by @fontawesome - https://fontawesome.com
     * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
     */


    function _typeof(obj) {
      if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
        _typeof = function _typeof(obj) {
          return _typeof2(obj);
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };
      }

      return _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);

        if (typeof Object.getOwnPropertySymbols === 'function') {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }

        ownKeys.forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      }

      return target;
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    }

    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }

    var noop = function noop() {};

    var _WINDOW = {};
    var _DOCUMENT = {};
    var _MUTATION_OBSERVER = null;
    var _PERFORMANCE = {
      mark: noop,
      measure: noop
    };

    try {
      if (typeof window !== 'undefined') _WINDOW = window;
      if (typeof document !== 'undefined') _DOCUMENT = document;
      if (typeof MutationObserver !== 'undefined') _MUTATION_OBSERVER = MutationObserver;
      if (typeof performance !== 'undefined') _PERFORMANCE = performance;
    } catch (e) {}

    var _ref = _WINDOW.navigator || {},
        _ref$userAgent = _ref.userAgent,
        userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;

    var WINDOW = _WINDOW;
    var DOCUMENT = _DOCUMENT;
    var MUTATION_OBSERVER = _MUTATION_OBSERVER;
    var PERFORMANCE = _PERFORMANCE;
    var IS_BROWSER = !!WINDOW.document;
    var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === 'function' && typeof DOCUMENT.createElement === 'function';
    var IS_IE = ~userAgent.indexOf('MSIE') || ~userAgent.indexOf('Trident/');
    var NAMESPACE_IDENTIFIER = '___FONT_AWESOME___';
    var UNITS_IN_GRID = 16;
    var DEFAULT_FAMILY_PREFIX = 'fa';
    var DEFAULT_REPLACEMENT_CLASS = 'svg-inline--fa';
    var DATA_FA_I2SVG = 'data-fa-i2svg';
    var DATA_FA_PSEUDO_ELEMENT = 'data-fa-pseudo-element';
    var DATA_FA_PSEUDO_ELEMENT_PENDING = 'data-fa-pseudo-element-pending';
    var DATA_PREFIX = 'data-prefix';
    var DATA_ICON = 'data-icon';
    var HTML_CLASS_I2SVG_BASE_CLASS = 'fontawesome-i2svg';
    var MUTATION_APPROACH_ASYNC = 'async';
    var TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = ['HTML', 'HEAD', 'STYLE', 'SCRIPT'];

    var PRODUCTION = function () {
      try {
        return "development" === 'production';
      } catch (e) {
        return false;
      }
    }();

    var PREFIX_TO_STYLE = {
      'fas': 'solid',
      'far': 'regular',
      'fal': 'light',
      'fad': 'duotone',
      'fab': 'brands',
      'fak': 'kit',
      'fa': 'solid'
    };
    var STYLE_TO_PREFIX = {
      'solid': 'fas',
      'regular': 'far',
      'light': 'fal',
      'duotone': 'fad',
      'brands': 'fab',
      'kit': 'fak'
    };
    var LAYERS_TEXT_CLASSNAME = 'fa-layers-text';
    var FONT_FAMILY_PATTERN = /Font Awesome ([5 ]*)(Solid|Regular|Light|Duotone|Brands|Free|Pro|Kit).*/; // TODO: do we need to handle font-weight for kit SVG pseudo-elements?

    var FONT_WEIGHT_TO_PREFIX = {
      '900': 'fas',
      '400': 'far',
      'normal': 'far',
      '300': 'fal'
    };
    var oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    var oneToTwenty = oneToTen.concat([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
    var ATTRIBUTES_WATCHED_FOR_MUTATION = ['class', 'data-prefix', 'data-icon', 'data-fa-transform', 'data-fa-mask'];
    var DUOTONE_CLASSES = {
      GROUP: 'group',
      SWAP_OPACITY: 'swap-opacity',
      PRIMARY: 'primary',
      SECONDARY: 'secondary'
    };
    var RESERVED_CLASSES = ['xs', 'sm', 'lg', 'fw', 'ul', 'li', 'border', 'pull-left', 'pull-right', 'spin', 'pulse', 'rotate-90', 'rotate-180', 'rotate-270', 'flip-horizontal', 'flip-vertical', 'flip-both', 'stack', 'stack-1x', 'stack-2x', 'inverse', 'layers', 'layers-text', 'layers-counter', DUOTONE_CLASSES.GROUP, DUOTONE_CLASSES.SWAP_OPACITY, DUOTONE_CLASSES.PRIMARY, DUOTONE_CLASSES.SECONDARY].concat(oneToTen.map(function (n) {
      return "".concat(n, "x");
    })).concat(oneToTwenty.map(function (n) {
      return "w-".concat(n);
    }));
    var initial = WINDOW.FontAwesomeConfig || {};

    function getAttrConfig(attr) {
      var element = DOCUMENT.querySelector('script[' + attr + ']');

      if (element) {
        return element.getAttribute(attr);
      }
    }

    function coerce(val) {
      // Getting an empty string will occur if the attribute is set on the HTML tag but without a value
      // We'll assume that this is an indication that it should be toggled to true
      // For example <script data-search-pseudo-elements src="..."></script>
      if (val === '') return true;
      if (val === 'false') return false;
      if (val === 'true') return true;
      return val;
    }

    if (DOCUMENT && typeof DOCUMENT.querySelector === 'function') {
      var attrs = [['data-family-prefix', 'familyPrefix'], ['data-replacement-class', 'replacementClass'], ['data-auto-replace-svg', 'autoReplaceSvg'], ['data-auto-add-css', 'autoAddCss'], ['data-auto-a11y', 'autoA11y'], ['data-search-pseudo-elements', 'searchPseudoElements'], ['data-observe-mutations', 'observeMutations'], ['data-mutate-approach', 'mutateApproach'], ['data-keep-original-source', 'keepOriginalSource'], ['data-measure-performance', 'measurePerformance'], ['data-show-missing-icons', 'showMissingIcons']];
      attrs.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            attr = _ref2[0],
            key = _ref2[1];

        var val = coerce(getAttrConfig(attr));

        if (val !== undefined && val !== null) {
          initial[key] = val;
        }
      });
    }

    var _default = {
      familyPrefix: DEFAULT_FAMILY_PREFIX,
      replacementClass: DEFAULT_REPLACEMENT_CLASS,
      autoReplaceSvg: true,
      autoAddCss: true,
      autoA11y: true,
      searchPseudoElements: false,
      observeMutations: true,
      mutateApproach: 'async',
      keepOriginalSource: true,
      measurePerformance: false,
      showMissingIcons: true
    };

    var _config = _objectSpread({}, _default, initial);

    if (!_config.autoReplaceSvg) _config.observeMutations = false;

    var config = _objectSpread({}, _config);

    exports.config = config;
    WINDOW.FontAwesomeConfig = config;
    var w = WINDOW || {};
    if (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};
    if (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};
    if (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};
    if (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];
    var namespace = w[NAMESPACE_IDENTIFIER];
    var functions = [];

    var listener = function listener() {
      DOCUMENT.removeEventListener('DOMContentLoaded', listener);
      loaded = 1;
      functions.map(function (fn) {
        return fn();
      });
    };

    var loaded = false;

    if (IS_DOM) {
      loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);
      if (!loaded) DOCUMENT.addEventListener('DOMContentLoaded', listener);
    }

    function domready(fn) {
      if (!IS_DOM) return;
      loaded ? setTimeout(fn, 0) : functions.push(fn);
    }

    var PENDING = 'pending';
    var SETTLED = 'settled';
    var FULFILLED = 'fulfilled';
    var REJECTED = 'rejected';

    var NOOP = function NOOP() {};

    var isNode = typeof global !== 'undefined' && typeof global.process !== 'undefined' && typeof global.process.emit === 'function';
    var asyncSetTimer = typeof setImmediate === 'undefined' ? setTimeout : setImmediate;
    var asyncQueue = [];
    var asyncTimer;

    function asyncFlush() {
      // run promise callbacks
      for (var i = 0; i < asyncQueue.length; i++) {
        asyncQueue[i][0](asyncQueue[i][1]);
      } // reset async asyncQueue


      asyncQueue = [];
      asyncTimer = false;
    }

    function asyncCall(callback, arg) {
      asyncQueue.push([callback, arg]);

      if (!asyncTimer) {
        asyncTimer = true;
        asyncSetTimer(asyncFlush, 0);
      }
    }

    function invokeResolver(resolver, promise) {
      function resolvePromise(value) {
        resolve(promise, value);
      }

      function rejectPromise(reason) {
        reject(promise, reason);
      }

      try {
        resolver(resolvePromise, rejectPromise);
      } catch (e) {
        rejectPromise(e);
      }
    }

    function invokeCallback(subscriber) {
      var owner = subscriber.owner;
      var settled = owner._state;
      var value = owner._data;
      var callback = subscriber[settled];
      var promise = subscriber.then;

      if (typeof callback === 'function') {
        settled = FULFILLED;

        try {
          value = callback(value);
        } catch (e) {
          reject(promise, e);
        }
      }

      if (!handleThenable(promise, value)) {
        if (settled === FULFILLED) {
          resolve(promise, value);
        }

        if (settled === REJECTED) {
          reject(promise, value);
        }
      }
    }

    function handleThenable(promise, value) {
      var resolved;

      try {
        if (promise === value) {
          throw new TypeError('A promises callback cannot return that same promise.');
        }

        if (value && (typeof value === 'function' || _typeof(value) === 'object')) {
          // then should be retrieved only once
          var then = value.then;

          if (typeof then === 'function') {
            then.call(value, function (val) {
              if (!resolved) {
                resolved = true;

                if (value === val) {
                  fulfill(promise, val);
                } else {
                  resolve(promise, val);
                }
              }
            }, function (reason) {
              if (!resolved) {
                resolved = true;
                reject(promise, reason);
              }
            });
            return true;
          }
        }
      } catch (e) {
        if (!resolved) {
          reject(promise, e);
        }

        return true;
      }

      return false;
    }

    function resolve(promise, value) {
      if (promise === value || !handleThenable(promise, value)) {
        fulfill(promise, value);
      }
    }

    function fulfill(promise, value) {
      if (promise._state === PENDING) {
        promise._state = SETTLED;
        promise._data = value;
        asyncCall(publishFulfillment, promise);
      }
    }

    function reject(promise, reason) {
      if (promise._state === PENDING) {
        promise._state = SETTLED;
        promise._data = reason;
        asyncCall(publishRejection, promise);
      }
    }

    function publish(promise) {
      promise._then = promise._then.forEach(invokeCallback);
    }

    function publishFulfillment(promise) {
      promise._state = FULFILLED;
      publish(promise);
    }

    function publishRejection(promise) {
      promise._state = REJECTED;
      publish(promise);

      if (!promise._handled && isNode) {
        global.process.emit('unhandledRejection', promise._data, promise);
      }
    }

    function notifyRejectionHandled(promise) {
      global.process.emit('rejectionHandled', promise);
    }
    /**
     * @class
     */


    function P(resolver) {
      if (typeof resolver !== 'function') {
        throw new TypeError('Promise resolver ' + resolver + ' is not a function');
      }

      if (this instanceof P === false) {
        throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
      }

      this._then = [];
      invokeResolver(resolver, this);
    }

    P.prototype = {
      constructor: P,
      _state: PENDING,
      _then: null,
      _data: undefined,
      _handled: false,
      then: function then(onFulfillment, onRejection) {
        var subscriber = {
          owner: this,
          then: new this.constructor(NOOP),
          fulfilled: onFulfillment,
          rejected: onRejection
        };

        if ((onRejection || onFulfillment) && !this._handled) {
          this._handled = true;

          if (this._state === REJECTED && isNode) {
            asyncCall(notifyRejectionHandled, this);
          }
        }

        if (this._state === FULFILLED || this._state === REJECTED) {
          // already resolved, call callback async
          asyncCall(invokeCallback, subscriber);
        } else {
          // subscribe
          this._then.push(subscriber);
        }

        return subscriber.then;
      },
      catch: function _catch(onRejection) {
        return this.then(null, onRejection);
      }
    };

    P.all = function (promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError('You must pass an array to Promise.all().');
      }

      return new P(function (resolve, reject) {
        var results = [];
        var remaining = 0;

        function resolver(index) {
          remaining++;
          return function (value) {
            results[index] = value;

            if (! --remaining) {
              resolve(results);
            }
          };
        }

        for (var i = 0, promise; i < promises.length; i++) {
          promise = promises[i];

          if (promise && typeof promise.then === 'function') {
            promise.then(resolver(i), reject);
          } else {
            results[i] = promise;
          }
        }

        if (!remaining) {
          resolve(results);
        }
      });
    };

    P.race = function (promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError('You must pass an array to Promise.race().');
      }

      return new P(function (resolve, reject) {
        for (var i = 0, promise; i < promises.length; i++) {
          promise = promises[i];

          if (promise && typeof promise.then === 'function') {
            promise.then(resolve, reject);
          } else {
            resolve(promise);
          }
        }
      });
    };

    P.resolve = function (value) {
      if (value && _typeof(value) === 'object' && value.constructor === P) {
        return value;
      }

      return new P(function (resolve) {
        resolve(value);
      });
    };

    P.reject = function (reason) {
      return new P(function (resolve, reject) {
        reject(reason);
      });
    };

    var picked = typeof Promise === 'function' ? Promise : P;
    var d = UNITS_IN_GRID;
    var meaninglessTransform = {
      size: 16,
      x: 0,
      y: 0,
      rotate: 0,
      flipX: false,
      flipY: false
    };

    function isReserved(name) {
      return ~RESERVED_CLASSES.indexOf(name);
    }

    function insertCss(css) {
      if (!css || !IS_DOM) {
        return;
      }

      var style = DOCUMENT.createElement('style');
      style.setAttribute('type', 'text/css');
      style.innerHTML = css;
      var headChildren = DOCUMENT.head.childNodes;
      var beforeChild = null;

      for (var i = headChildren.length - 1; i > -1; i--) {
        var child = headChildren[i];
        var tagName = (child.tagName || '').toUpperCase();

        if (['STYLE', 'LINK'].indexOf(tagName) > -1) {
          beforeChild = child;
        }
      }

      DOCUMENT.head.insertBefore(style, beforeChild);
      return css;
    }

    var idPool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

    function nextUniqueId() {
      var size = 12;
      var id = '';

      while (size-- > 0) {
        id += idPool[Math.random() * 62 | 0];
      }

      return id;
    }

    function toArray(obj) {
      var array = [];

      for (var i = (obj || []).length >>> 0; i--;) {
        array[i] = obj[i];
      }

      return array;
    }

    function classArray(node) {
      if (node.classList) {
        return toArray(node.classList);
      } else {
        return (node.getAttribute('class') || '').split(' ').filter(function (i) {
          return i;
        });
      }
    }

    function getIconName(familyPrefix, cls) {
      var parts = cls.split('-');
      var prefix = parts[0];
      var iconName = parts.slice(1).join('-');

      if (prefix === familyPrefix && iconName !== '' && !isReserved(iconName)) {
        return iconName;
      } else {
        return null;
      }
    }

    function htmlEscape(str) {
      return "".concat(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    function joinAttributes(attributes) {
      return Object.keys(attributes || {}).reduce(function (acc, attributeName) {
        return acc + "".concat(attributeName, "=\"").concat(htmlEscape(attributes[attributeName]), "\" ");
      }, '').trim();
    }

    function joinStyles(styles) {
      return Object.keys(styles || {}).reduce(function (acc, styleName) {
        return acc + "".concat(styleName, ": ").concat(styles[styleName], ";");
      }, '');
    }

    function transformIsMeaningful(transform) {
      return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;
    }

    function transformForSvg(_ref) {
      var transform = _ref.transform,
          containerWidth = _ref.containerWidth,
          iconWidth = _ref.iconWidth;
      var outer = {
        transform: "translate(".concat(containerWidth / 2, " 256)")
      };
      var innerTranslate = "translate(".concat(transform.x * 32, ", ").concat(transform.y * 32, ") ");
      var innerScale = "scale(".concat(transform.size / 16 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / 16 * (transform.flipY ? -1 : 1), ") ");
      var innerRotate = "rotate(".concat(transform.rotate, " 0 0)");
      var inner = {
        transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
      };
      var path = {
        transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
      };
      return {
        outer: outer,
        inner: inner,
        path: path
      };
    }

    function transformForCss(_ref2) {
      var transform = _ref2.transform,
          _ref2$width = _ref2.width,
          width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width,
          _ref2$height = _ref2.height,
          height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height,
          _ref2$startCentered = _ref2.startCentered,
          startCentered = _ref2$startCentered === void 0 ? false : _ref2$startCentered;
      var val = '';

      if (startCentered && IS_IE) {
        val += "translate(".concat(transform.x / d - width / 2, "em, ").concat(transform.y / d - height / 2, "em) ");
      } else if (startCentered) {
        val += "translate(calc(-50% + ".concat(transform.x / d, "em), calc(-50% + ").concat(transform.y / d, "em)) ");
      } else {
        val += "translate(".concat(transform.x / d, "em, ").concat(transform.y / d, "em) ");
      }

      val += "scale(".concat(transform.size / d * (transform.flipX ? -1 : 1), ", ").concat(transform.size / d * (transform.flipY ? -1 : 1), ") ");
      val += "rotate(".concat(transform.rotate, "deg) ");
      return val;
    }

    var ALL_SPACE = {
      x: 0,
      y: 0,
      width: '100%',
      height: '100%'
    };

    function fillBlack(abstract) {
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (abstract.attributes && (abstract.attributes.fill || force)) {
        abstract.attributes.fill = 'black';
      }

      return abstract;
    }

    function deGroup(abstract) {
      if (abstract.tag === 'g') {
        return abstract.children;
      } else {
        return [abstract];
      }
    }

    function makeIconMasking(_ref) {
      var children = _ref.children,
          attributes = _ref.attributes,
          main = _ref.main,
          mask = _ref.mask,
          explicitMaskId = _ref.maskId,
          transform = _ref.transform;
      var mainWidth = main.width,
          mainPath = main.icon;
      var maskWidth = mask.width,
          maskPath = mask.icon;
      var trans = transformForSvg({
        transform: transform,
        containerWidth: maskWidth,
        iconWidth: mainWidth
      });
      var maskRect = {
        tag: 'rect',
        attributes: _objectSpread({}, ALL_SPACE, {
          fill: 'white'
        })
      };
      var maskInnerGroupChildrenMixin = mainPath.children ? {
        children: mainPath.children.map(fillBlack)
      } : {};
      var maskInnerGroup = {
        tag: 'g',
        attributes: _objectSpread({}, trans.inner),
        children: [fillBlack(_objectSpread({
          tag: mainPath.tag,
          attributes: _objectSpread({}, mainPath.attributes, trans.path)
        }, maskInnerGroupChildrenMixin))]
      };
      var maskOuterGroup = {
        tag: 'g',
        attributes: _objectSpread({}, trans.outer),
        children: [maskInnerGroup]
      };
      var maskId = "mask-".concat(explicitMaskId || nextUniqueId());
      var clipId = "clip-".concat(explicitMaskId || nextUniqueId());
      var maskTag = {
        tag: 'mask',
        attributes: _objectSpread({}, ALL_SPACE, {
          id: maskId,
          maskUnits: 'userSpaceOnUse',
          maskContentUnits: 'userSpaceOnUse'
        }),
        children: [maskRect, maskOuterGroup]
      };
      var defs = {
        tag: 'defs',
        children: [{
          tag: 'clipPath',
          attributes: {
            id: clipId
          },
          children: deGroup(maskPath)
        }, maskTag]
      };
      children.push(defs, {
        tag: 'rect',
        attributes: _objectSpread({
          fill: 'currentColor',
          'clip-path': "url(#".concat(clipId, ")"),
          mask: "url(#".concat(maskId, ")")
        }, ALL_SPACE)
      });
      return {
        children: children,
        attributes: attributes
      };
    }

    function makeIconStandard(_ref) {
      var children = _ref.children,
          attributes = _ref.attributes,
          main = _ref.main,
          transform = _ref.transform,
          styles = _ref.styles;
      var styleString = joinStyles(styles);

      if (styleString.length > 0) {
        attributes['style'] = styleString;
      }

      if (transformIsMeaningful(transform)) {
        var trans = transformForSvg({
          transform: transform,
          containerWidth: main.width,
          iconWidth: main.width
        });
        children.push({
          tag: 'g',
          attributes: _objectSpread({}, trans.outer),
          children: [{
            tag: 'g',
            attributes: _objectSpread({}, trans.inner),
            children: [{
              tag: main.icon.tag,
              children: main.icon.children,
              attributes: _objectSpread({}, main.icon.attributes, trans.path)
            }]
          }]
        });
      } else {
        children.push(main.icon);
      }

      return {
        children: children,
        attributes: attributes
      };
    }

    function asIcon(_ref) {
      var children = _ref.children,
          main = _ref.main,
          mask = _ref.mask,
          attributes = _ref.attributes,
          styles = _ref.styles,
          transform = _ref.transform;

      if (transformIsMeaningful(transform) && main.found && !mask.found) {
        var width = main.width,
            height = main.height;
        var offset = {
          x: width / height / 2,
          y: 0.5
        };
        attributes['style'] = joinStyles(_objectSpread({}, styles, {
          'transform-origin': "".concat(offset.x + transform.x / 16, "em ").concat(offset.y + transform.y / 16, "em")
        }));
      }

      return [{
        tag: 'svg',
        attributes: attributes,
        children: children
      }];
    }

    function asSymbol(_ref) {
      var prefix = _ref.prefix,
          iconName = _ref.iconName,
          children = _ref.children,
          attributes = _ref.attributes,
          symbol = _ref.symbol;
      var id = symbol === true ? "".concat(prefix, "-").concat(config.familyPrefix, "-").concat(iconName) : symbol;
      return [{
        tag: 'svg',
        attributes: {
          style: 'display: none;'
        },
        children: [{
          tag: 'symbol',
          attributes: _objectSpread({}, attributes, {
            id: id
          }),
          children: children
        }]
      }];
    }

    function makeInlineSvgAbstract(params) {
      var _params$icons = params.icons,
          main = _params$icons.main,
          mask = _params$icons.mask,
          prefix = params.prefix,
          iconName = params.iconName,
          transform = params.transform,
          symbol = params.symbol,
          title = params.title,
          maskId = params.maskId,
          titleId = params.titleId,
          extra = params.extra,
          _params$watchable = params.watchable,
          watchable = _params$watchable === void 0 ? false : _params$watchable;

      var _ref = mask.found ? mask : main,
          width = _ref.width,
          height = _ref.height;

      var isUploadedIcon = prefix === 'fak';
      var widthClass = isUploadedIcon ? '' : "fa-w-".concat(Math.ceil(width / height * 16));
      var attrClass = [config.replacementClass, iconName ? "".concat(config.familyPrefix, "-").concat(iconName) : '', widthClass].filter(function (c) {
        return extra.classes.indexOf(c) === -1;
      }).filter(function (c) {
        return c !== '' || !!c;
      }).concat(extra.classes).join(' ');
      var content = {
        children: [],
        attributes: _objectSpread({}, extra.attributes, {
          'data-prefix': prefix,
          'data-icon': iconName,
          'class': attrClass,
          'role': extra.attributes.role || 'img',
          'xmlns': 'http://www.w3.org/2000/svg',
          'viewBox': "0 0 ".concat(width, " ").concat(height)
        })
      };
      var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf('fa-fw') ? {
        width: "".concat(width / height * 16 * 0.0625, "em")
      } : {};

      if (watchable) {
        content.attributes[DATA_FA_I2SVG] = '';
      }

      if (title) content.children.push({
        tag: 'title',
        attributes: {
          id: content.attributes['aria-labelledby'] || "title-".concat(titleId || nextUniqueId())
        },
        children: [title]
      });

      var args = _objectSpread({}, content, {
        prefix: prefix,
        iconName: iconName,
        main: main,
        mask: mask,
        maskId: maskId,
        transform: transform,
        symbol: symbol,
        styles: _objectSpread({}, uploadedIconWidthStyle, extra.styles)
      });

      var _ref2 = mask.found && main.found ? makeIconMasking(args) : makeIconStandard(args),
          children = _ref2.children,
          attributes = _ref2.attributes;

      args.children = children;
      args.attributes = attributes;

      if (symbol) {
        return asSymbol(args);
      } else {
        return asIcon(args);
      }
    }

    function makeLayersTextAbstract(params) {
      var content = params.content,
          width = params.width,
          height = params.height,
          transform = params.transform,
          title = params.title,
          extra = params.extra,
          _params$watchable2 = params.watchable,
          watchable = _params$watchable2 === void 0 ? false : _params$watchable2;

      var attributes = _objectSpread({}, extra.attributes, title ? {
        'title': title
      } : {}, {
        'class': extra.classes.join(' ')
      });

      if (watchable) {
        attributes[DATA_FA_I2SVG] = '';
      }

      var styles = _objectSpread({}, extra.styles);

      if (transformIsMeaningful(transform)) {
        styles['transform'] = transformForCss({
          transform: transform,
          startCentered: true,
          width: width,
          height: height
        });
        styles['-webkit-transform'] = styles['transform'];
      }

      var styleString = joinStyles(styles);

      if (styleString.length > 0) {
        attributes['style'] = styleString;
      }

      var val = [];
      val.push({
        tag: 'span',
        attributes: attributes,
        children: [content]
      });

      if (title) {
        val.push({
          tag: 'span',
          attributes: {
            class: 'sr-only'
          },
          children: [title]
        });
      }

      return val;
    }

    function makeLayersCounterAbstract(params) {
      var content = params.content,
          title = params.title,
          extra = params.extra;

      var attributes = _objectSpread({}, extra.attributes, title ? {
        'title': title
      } : {}, {
        'class': extra.classes.join(' ')
      });

      var styleString = joinStyles(extra.styles);

      if (styleString.length > 0) {
        attributes['style'] = styleString;
      }

      var val = [];
      val.push({
        tag: 'span',
        attributes: attributes,
        children: [content]
      });

      if (title) {
        val.push({
          tag: 'span',
          attributes: {
            class: 'sr-only'
          },
          children: [title]
        });
      }

      return val;
    }

    var noop$1 = function noop() {};

    var p = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {
      mark: noop$1,
      measure: noop$1
    };
    var preamble = "FA \"5.15.1\"";

    var begin = function begin(name) {
      p.mark("".concat(preamble, " ").concat(name, " begins"));
      return function () {
        return end(name);
      };
    };

    var end = function end(name) {
      p.mark("".concat(preamble, " ").concat(name, " ends"));
      p.measure("".concat(preamble, " ").concat(name), "".concat(preamble, " ").concat(name, " begins"), "".concat(preamble, " ").concat(name, " ends"));
    };

    var perf = {
      begin: begin,
      end: end
    };
    /**
     * Internal helper to bind a function known to have 4 arguments
     * to a given context.
     */

    var bindInternal4 = function bindInternal4(func, thisContext) {
      return function (a, b, c, d) {
        return func.call(thisContext, a, b, c, d);
      };
    };
    /**
     * # Reduce
     *
     * A fast object `.reduce()` implementation.
     *
     * @param  {Object}   subject      The object to reduce over.
     * @param  {Function} fn           The reducer function.
     * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].
     * @param  {Object}   thisContext  The context for the reducer.
     * @return {mixed}                 The final result.
     */


    var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {
      var keys = Object.keys(subject),
          length = keys.length,
          iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn,
          i,
          key,
          result;

      if (initialValue === undefined) {
        i = 1;
        result = subject[keys[0]];
      } else {
        i = 0;
        result = initialValue;
      }

      for (; i < length; i++) {
        key = keys[i];
        result = iterator(result, subject[key], key, subject);
      }

      return result;
    };

    function toHex(unicode) {
      var result = '';

      for (var i = 0; i < unicode.length; i++) {
        var hex = unicode.charCodeAt(i).toString(16);
        result += ('000' + hex).slice(-4);
      }

      return result;
    }

    function codePointAt(string, index) {
      /*! https://mths.be/codepointat v0.2.0 by @mathias */
      var size = string.length;
      var first = string.charCodeAt(index);
      var second;

      if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {
        second = string.charCodeAt(index + 1);

        if (second >= 0xDC00 && second <= 0xDFFF) {
          return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
        }
      }

      return first;
    }
    /**
     * Used to check that the character is between the E000..F8FF private unicode
     * range
     */


    function isPrivateUnicode(iconName) {
      if (iconName.length !== 1) {
        return false;
      } else {
        var cp = codePointAt(iconName, 0);
        return cp >= 57344 && cp <= 63743;
      }
    }

    function defineIcons(prefix, icons) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var _params$skipHooks = params.skipHooks,
          skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
      var normalized = Object.keys(icons).reduce(function (acc, iconName) {
        var icon = icons[iconName];
        var expanded = !!icon.icon;

        if (expanded) {
          acc[icon.iconName] = icon.icon;
        } else {
          acc[iconName] = icon;
        }

        return acc;
      }, {});

      if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
        namespace.hooks.addPack(prefix, normalized);
      } else {
        namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, normalized);
      }
      /**
       * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
       * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
       * for `fas` so we'll easy the upgrade process for our users by automatically defining
       * this as well.
       */


      if (prefix === 'fas') {
        defineIcons('fa', icons);
      }
    }

    var styles = namespace.styles,
        shims = namespace.shims;
    var _byUnicode = {};
    var _byLigature = {};
    var _byOldName = {};

    var build = function build() {
      var lookup = function lookup(reducer) {
        return reduce(styles, function (o, style, prefix) {
          o[prefix] = reduce(style, reducer, {});
          return o;
        }, {});
      };

      _byUnicode = lookup(function (acc, icon, iconName) {
        if (icon[3]) {
          acc[icon[3]] = iconName;
        }

        return acc;
      });
      _byLigature = lookup(function (acc, icon, iconName) {
        var ligatures = icon[2];
        acc[iconName] = iconName;
        ligatures.forEach(function (ligature) {
          acc[ligature] = iconName;
        });
        return acc;
      });
      var hasRegular = ('far' in styles);
      _byOldName = reduce(shims, function (acc, shim) {
        var oldName = shim[0];
        var prefix = shim[1];
        var iconName = shim[2];

        if (prefix === 'far' && !hasRegular) {
          prefix = 'fas';
        }

        acc[oldName] = {
          prefix: prefix,
          iconName: iconName
        };
        return acc;
      }, {});
    };

    build();

    function byUnicode(prefix, unicode) {
      return (_byUnicode[prefix] || {})[unicode];
    }

    function byLigature(prefix, ligature) {
      return (_byLigature[prefix] || {})[ligature];
    }

    function byOldName(name) {
      return _byOldName[name] || {
        prefix: null,
        iconName: null
      };
    }

    var styles$1 = namespace.styles;

    var emptyCanonicalIcon = function emptyCanonicalIcon() {
      return {
        prefix: null,
        iconName: null,
        rest: []
      };
    };

    function getCanonicalIcon(values) {
      return values.reduce(function (acc, cls) {
        var iconName = getIconName(config.familyPrefix, cls);

        if (styles$1[cls]) {
          acc.prefix = cls;
        } else if (config.autoFetchSvg && Object.keys(PREFIX_TO_STYLE).indexOf(cls) > -1) {
          acc.prefix = cls;
        } else if (iconName) {
          var shim = acc.prefix === 'fa' ? byOldName(iconName) : {};
          acc.iconName = shim.iconName || iconName;
          acc.prefix = shim.prefix || acc.prefix;
        } else if (cls !== config.replacementClass && cls.indexOf('fa-w-') !== 0) {
          acc.rest.push(cls);
        }

        return acc;
      }, emptyCanonicalIcon());
    }

    function iconFromMapping(mapping, prefix, iconName) {
      if (mapping && mapping[prefix] && mapping[prefix][iconName]) {
        return {
          prefix: prefix,
          iconName: iconName,
          icon: mapping[prefix][iconName]
        };
      }
    }

    function toHtml(abstractNodes) {
      var tag = abstractNodes.tag,
          _abstractNodes$attrib = abstractNodes.attributes,
          attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib,
          _abstractNodes$childr = abstractNodes.children,
          children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;

      if (typeof abstractNodes === 'string') {
        return htmlEscape(abstractNodes);
      } else {
        return "<".concat(tag, " ").concat(joinAttributes(attributes), ">").concat(children.map(toHtml).join(''), "</").concat(tag, ">");
      }
    }

    var noop$2 = function noop() {};

    function isWatched(node) {
      var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;
      return typeof i2svg === 'string';
    }

    function getMutator() {
      if (config.autoReplaceSvg === true) {
        return mutators.replace;
      }

      var mutator = mutators[config.autoReplaceSvg];
      return mutator || mutators.replace;
    }

    var mutators = {
      replace: function replace(mutation) {
        var node = mutation[0];
        var abstract = mutation[1];
        var newOuterHTML = abstract.map(function (a) {
          return toHtml(a);
        }).join('\n');

        if (node.parentNode && node.outerHTML) {
          node.outerHTML = newOuterHTML + (config.keepOriginalSource && node.tagName.toLowerCase() !== 'svg' ? "<!-- ".concat(node.outerHTML, " Font Awesome fontawesome.com -->") : '');
        } else if (node.parentNode) {
          var newNode = document.createElement('span');
          node.parentNode.replaceChild(newNode, node);
          newNode.outerHTML = newOuterHTML;
        }
      },
      nest: function nest(mutation) {
        var node = mutation[0];
        var abstract = mutation[1]; // If we already have a replaced node we do not want to continue nesting within it.
        // Short-circuit to the standard replacement

        if (~classArray(node).indexOf(config.replacementClass)) {
          return mutators.replace(mutation);
        }

        var forSvg = new RegExp("".concat(config.familyPrefix, "-.*"));
        delete abstract[0].attributes.style;
        delete abstract[0].attributes.id;
        var splitClasses = abstract[0].attributes.class.split(' ').reduce(function (acc, cls) {
          if (cls === config.replacementClass || cls.match(forSvg)) {
            acc.toSvg.push(cls);
          } else {
            acc.toNode.push(cls);
          }

          return acc;
        }, {
          toNode: [],
          toSvg: []
        });
        abstract[0].attributes.class = splitClasses.toSvg.join(' ');
        var newInnerHTML = abstract.map(function (a) {
          return toHtml(a);
        }).join('\n');
        node.setAttribute('class', splitClasses.toNode.join(' '));
        node.setAttribute(DATA_FA_I2SVG, '');
        node.innerHTML = newInnerHTML;
      }
    };

    function performOperationSync(op) {
      op();
    }

    function perform(mutations, callback) {
      var callbackFunction = typeof callback === 'function' ? callback : noop$2;

      if (mutations.length === 0) {
        callbackFunction();
      } else {
        var frame = performOperationSync;

        if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {
          frame = WINDOW.requestAnimationFrame || performOperationSync;
        }

        frame(function () {
          var mutator = getMutator();
          var mark = perf.begin('mutate');
          mutations.map(mutator);
          mark();
          callbackFunction();
        });
      }
    }

    var disabled = false;

    function disableObservation() {
      disabled = true;
    }

    function enableObservation() {
      disabled = false;
    }

    var mo = null;

    function observe(options) {
      if (!MUTATION_OBSERVER) {
        return;
      }

      if (!config.observeMutations) {
        return;
      }

      var treeCallback = options.treeCallback,
          nodeCallback = options.nodeCallback,
          pseudoElementsCallback = options.pseudoElementsCallback,
          _options$observeMutat = options.observeMutationsRoot,
          observeMutationsRoot = _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;
      mo = new MUTATION_OBSERVER(function (objects) {
        if (disabled) return;
        toArray(objects).forEach(function (mutationRecord) {
          if (mutationRecord.type === 'childList' && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {
            if (config.searchPseudoElements) {
              pseudoElementsCallback(mutationRecord.target);
            }

            treeCallback(mutationRecord.target);
          }

          if (mutationRecord.type === 'attributes' && mutationRecord.target.parentNode && config.searchPseudoElements) {
            pseudoElementsCallback(mutationRecord.target.parentNode);
          }

          if (mutationRecord.type === 'attributes' && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {
            if (mutationRecord.attributeName === 'class') {
              var _getCanonicalIcon = getCanonicalIcon(classArray(mutationRecord.target)),
                  prefix = _getCanonicalIcon.prefix,
                  iconName = _getCanonicalIcon.iconName;

              if (prefix) mutationRecord.target.setAttribute('data-prefix', prefix);
              if (iconName) mutationRecord.target.setAttribute('data-icon', iconName);
            } else {
              nodeCallback(mutationRecord.target);
            }
          }
        });
      });
      if (!IS_DOM) return;
      mo.observe(observeMutationsRoot, {
        childList: true,
        attributes: true,
        characterData: true,
        subtree: true
      });
    }

    function disconnect() {
      if (!mo) return;
      mo.disconnect();
    }

    function styleParser(node) {
      var style = node.getAttribute('style');
      var val = [];

      if (style) {
        val = style.split(';').reduce(function (acc, style) {
          var styles = style.split(':');
          var prop = styles[0];
          var value = styles.slice(1);

          if (prop && value.length > 0) {
            acc[prop] = value.join(':').trim();
          }

          return acc;
        }, {});
      }

      return val;
    }

    function classParser(node) {
      var existingPrefix = node.getAttribute('data-prefix');
      var existingIconName = node.getAttribute('data-icon');
      var innerText = node.innerText !== undefined ? node.innerText.trim() : '';
      var val = getCanonicalIcon(classArray(node));

      if (existingPrefix && existingIconName) {
        val.prefix = existingPrefix;
        val.iconName = existingIconName;
      }

      if (val.prefix && innerText.length > 1) {
        val.iconName = byLigature(val.prefix, node.innerText);
      } else if (val.prefix && innerText.length === 1) {
        val.iconName = byUnicode(val.prefix, toHex(node.innerText));
      }

      return val;
    }

    var parseTransformString = function parseTransformString(transformString) {
      var transform = {
        size: 16,
        x: 0,
        y: 0,
        flipX: false,
        flipY: false,
        rotate: 0
      };

      if (!transformString) {
        return transform;
      } else {
        return transformString.toLowerCase().split(' ').reduce(function (acc, n) {
          var parts = n.toLowerCase().split('-');
          var first = parts[0];
          var rest = parts.slice(1).join('-');

          if (first && rest === 'h') {
            acc.flipX = true;
            return acc;
          }

          if (first && rest === 'v') {
            acc.flipY = true;
            return acc;
          }

          rest = parseFloat(rest);

          if (isNaN(rest)) {
            return acc;
          }

          switch (first) {
            case 'grow':
              acc.size = acc.size + rest;
              break;

            case 'shrink':
              acc.size = acc.size - rest;
              break;

            case 'left':
              acc.x = acc.x - rest;
              break;

            case 'right':
              acc.x = acc.x + rest;
              break;

            case 'up':
              acc.y = acc.y - rest;
              break;

            case 'down':
              acc.y = acc.y + rest;
              break;

            case 'rotate':
              acc.rotate = acc.rotate + rest;
              break;
          }

          return acc;
        }, transform);
      }
    };

    function transformParser(node) {
      return parseTransformString(node.getAttribute('data-fa-transform'));
    }

    function symbolParser(node) {
      var symbol = node.getAttribute('data-fa-symbol');
      return symbol === null ? false : symbol === '' ? true : symbol;
    }

    function attributesParser(node) {
      var extraAttributes = toArray(node.attributes).reduce(function (acc, attr) {
        if (acc.name !== 'class' && acc.name !== 'style') {
          acc[attr.name] = attr.value;
        }

        return acc;
      }, {});
      var title = node.getAttribute('title');
      var titleId = node.getAttribute('data-fa-title-id');

      if (config.autoA11y) {
        if (title) {
          extraAttributes['aria-labelledby'] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
        } else {
          extraAttributes['aria-hidden'] = 'true';
          extraAttributes['focusable'] = 'false';
        }
      }

      return extraAttributes;
    }

    function maskParser(node) {
      var mask = node.getAttribute('data-fa-mask');

      if (!mask) {
        return emptyCanonicalIcon();
      } else {
        return getCanonicalIcon(mask.split(' ').map(function (i) {
          return i.trim();
        }));
      }
    }

    function blankMeta() {
      return {
        iconName: null,
        title: null,
        titleId: null,
        prefix: null,
        transform: meaninglessTransform,
        symbol: false,
        mask: null,
        maskId: null,
        extra: {
          classes: [],
          styles: {},
          attributes: {}
        }
      };
    }

    function parseMeta(node) {
      var _classParser = classParser(node),
          iconName = _classParser.iconName,
          prefix = _classParser.prefix,
          extraClasses = _classParser.rest;

      var extraStyles = styleParser(node);
      var transform = transformParser(node);
      var symbol = symbolParser(node);
      var extraAttributes = attributesParser(node);
      var mask = maskParser(node);
      return {
        iconName: iconName,
        title: node.getAttribute('title'),
        titleId: node.getAttribute('data-fa-title-id'),
        prefix: prefix,
        transform: transform,
        symbol: symbol,
        mask: mask,
        maskId: node.getAttribute('data-fa-mask-id'),
        extra: {
          classes: extraClasses,
          styles: extraStyles,
          attributes: extraAttributes
        }
      };
    }

    function MissingIcon(error) {
      this.name = 'MissingIcon';
      this.message = error || 'Icon unavailable';
      this.stack = new Error().stack;
    }

    MissingIcon.prototype = Object.create(Error.prototype);
    MissingIcon.prototype.constructor = MissingIcon;
    var FILL = {
      fill: 'currentColor'
    };
    var ANIMATION_BASE = {
      attributeType: 'XML',
      repeatCount: 'indefinite',
      dur: '2s'
    };
    var RING = {
      tag: 'path',
      attributes: _objectSpread({}, FILL, {
        d: 'M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z'
      })
    };

    var OPACITY_ANIMATE = _objectSpread({}, ANIMATION_BASE, {
      attributeName: 'opacity'
    });

    var DOT = {
      tag: 'circle',
      attributes: _objectSpread({}, FILL, {
        cx: '256',
        cy: '364',
        r: '28'
      }),
      children: [{
        tag: 'animate',
        attributes: _objectSpread({}, ANIMATION_BASE, {
          attributeName: 'r',
          values: '28;14;28;28;14;28;'
        })
      }, {
        tag: 'animate',
        attributes: _objectSpread({}, OPACITY_ANIMATE, {
          values: '1;0;1;1;0;1;'
        })
      }]
    };
    var QUESTION = {
      tag: 'path',
      attributes: _objectSpread({}, FILL, {
        opacity: '1',
        d: 'M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z'
      }),
      children: [{
        tag: 'animate',
        attributes: _objectSpread({}, OPACITY_ANIMATE, {
          values: '1;0;0;0;0;1;'
        })
      }]
    };
    var EXCLAMATION = {
      tag: 'path',
      attributes: _objectSpread({}, FILL, {
        opacity: '0',
        d: 'M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z'
      }),
      children: [{
        tag: 'animate',
        attributes: _objectSpread({}, OPACITY_ANIMATE, {
          values: '0;0;1;1;0;0;'
        })
      }]
    };
    var missing = {
      tag: 'g',
      children: [RING, DOT, QUESTION, EXCLAMATION]
    };
    var styles$2 = namespace.styles;

    function resolveCustomIconVersion() {
      var kitConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var iconName = arguments.length > 1 ? arguments[1] : undefined;

      if (iconName && isPrivateUnicode(iconName)) {
        if (kitConfig && kitConfig.iconUploads) {
          var iconUploads = kitConfig.iconUploads;
          var descriptiveIconName = Object.keys(iconUploads).find(function (key) {
            return iconUploads[key] && iconUploads[key].u && iconUploads[key].u === toHex(iconName);
          });

          if (descriptiveIconName) {
            return iconUploads[descriptiveIconName].v;
          }
        }
      } else {
        if (kitConfig && kitConfig.iconUploads && kitConfig.iconUploads[iconName] && kitConfig.iconUploads[iconName].v) {
          return kitConfig.iconUploads[iconName].v;
        }
      }
    }

    function asFoundIcon(icon) {
      var width = icon[0];
      var height = icon[1];

      var _icon$slice = icon.slice(4),
          _icon$slice2 = _slicedToArray(_icon$slice, 1),
          vectorData = _icon$slice2[0];

      var element = null;

      if (Array.isArray(vectorData)) {
        element = {
          tag: 'g',
          attributes: {
            class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.GROUP)
          },
          children: [{
            tag: 'path',
            attributes: {
              class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.SECONDARY),
              fill: 'currentColor',
              d: vectorData[0]
            }
          }, {
            tag: 'path',
            attributes: {
              class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.PRIMARY),
              fill: 'currentColor',
              d: vectorData[1]
            }
          }]
        };
      } else {
        element = {
          tag: 'path',
          attributes: {
            fill: 'currentColor',
            d: vectorData
          }
        };
      }

      return {
        found: true,
        width: width,
        height: height,
        icon: element
      };
    }

    function findIcon(iconName, prefix) {
      return new picked(function (resolve, reject) {
        var val = {
          found: false,
          width: 512,
          height: 512,
          icon: missing
        };

        if (iconName && prefix && styles$2[prefix] && styles$2[prefix][iconName]) {
          var icon = styles$2[prefix][iconName];
          return resolve(asFoundIcon(icon));
        }

        var kitToken = null;
        var iconVersion = resolveCustomIconVersion(WINDOW.FontAwesomeKitConfig, iconName);

        if (WINDOW.FontAwesomeKitConfig && WINDOW.FontAwesomeKitConfig.token) {
          kitToken = WINDOW.FontAwesomeKitConfig.token;
        }

        if (iconName && prefix && !config.showMissingIcons) {
          reject(new MissingIcon("Icon is missing for prefix ".concat(prefix, " with icon name ").concat(iconName)));
        } else {
          resolve(val);
        }
      });
    }

    var styles$3 = namespace.styles;

    function generateSvgReplacementMutation(node, nodeMeta) {
      var iconName = nodeMeta.iconName,
          title = nodeMeta.title,
          titleId = nodeMeta.titleId,
          prefix = nodeMeta.prefix,
          transform = nodeMeta.transform,
          symbol = nodeMeta.symbol,
          mask = nodeMeta.mask,
          maskId = nodeMeta.maskId,
          extra = nodeMeta.extra;
      return new picked(function (resolve, reject) {
        picked.all([findIcon(iconName, prefix), findIcon(mask.iconName, mask.prefix)]).then(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              main = _ref2[0],
              mask = _ref2[1];

          resolve([node, makeInlineSvgAbstract({
            icons: {
              main: main,
              mask: mask
            },
            prefix: prefix,
            iconName: iconName,
            transform: transform,
            symbol: symbol,
            mask: mask,
            maskId: maskId,
            title: title,
            titleId: titleId,
            extra: extra,
            watchable: true
          })]);
        });
      });
    }

    function generateLayersText(node, nodeMeta) {
      var title = nodeMeta.title,
          transform = nodeMeta.transform,
          extra = nodeMeta.extra;
      var width = null;
      var height = null;

      if (IS_IE) {
        var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);
        var boundingClientRect = node.getBoundingClientRect();
        width = boundingClientRect.width / computedFontSize;
        height = boundingClientRect.height / computedFontSize;
      }

      if (config.autoA11y && !title) {
        extra.attributes['aria-hidden'] = 'true';
      }

      return picked.resolve([node, makeLayersTextAbstract({
        content: node.innerHTML,
        width: width,
        height: height,
        transform: transform,
        title: title,
        extra: extra,
        watchable: true
      })]);
    }

    function generateMutation(node) {
      var nodeMeta = parseMeta(node);

      if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {
        return generateLayersText(node, nodeMeta);
      } else {
        return generateSvgReplacementMutation(node, nodeMeta);
      }
    }

    function onTree(root) {
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (!IS_DOM) return;
      var htmlClassList = DOCUMENT.documentElement.classList;

      var hclAdd = function hclAdd(suffix) {
        return htmlClassList.add("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
      };

      var hclRemove = function hclRemove(suffix) {
        return htmlClassList.remove("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
      };

      var prefixes = config.autoFetchSvg ? Object.keys(PREFIX_TO_STYLE) : Object.keys(styles$3);
      var prefixesDomQuery = [".".concat(LAYERS_TEXT_CLASSNAME, ":not([").concat(DATA_FA_I2SVG, "])")].concat(prefixes.map(function (p) {
        return ".".concat(p, ":not([").concat(DATA_FA_I2SVG, "])");
      })).join(', ');

      if (prefixesDomQuery.length === 0) {
        return;
      }

      var candidates = [];

      try {
        candidates = toArray(root.querySelectorAll(prefixesDomQuery));
      } catch (e) {// noop
      }

      if (candidates.length > 0) {
        hclAdd('pending');
        hclRemove('complete');
      } else {
        return;
      }

      var mark = perf.begin('onTree');
      var mutations = candidates.reduce(function (acc, node) {
        try {
          var mutation = generateMutation(node);

          if (mutation) {
            acc.push(mutation);
          }
        } catch (e) {
          if (!PRODUCTION) {
            if (e instanceof MissingIcon) {
              console.error(e);
            }
          }
        }

        return acc;
      }, []);
      return new picked(function (resolve, reject) {
        picked.all(mutations).then(function (resolvedMutations) {
          perform(resolvedMutations, function () {
            hclAdd('active');
            hclAdd('complete');
            hclRemove('pending');
            if (typeof callback === 'function') callback();
            mark();
            resolve();
          });
        }).catch(function () {
          mark();
          reject();
        });
      });
    }

    function onNode(node) {
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      generateMutation(node).then(function (mutation) {
        if (mutation) {
          perform([mutation], callback);
        }
      });
    }

    function replaceForPosition(node, position) {
      var pendingAttribute = "".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(':', '-'));
      return new picked(function (resolve, reject) {
        if (node.getAttribute(pendingAttribute) !== null) {
          // This node is already being processed
          return resolve();
        }

        var children = toArray(node.children);
        var alreadyProcessedPseudoElement = children.filter(function (c) {
          return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;
        })[0];
        var styles = WINDOW.getComputedStyle(node, position);
        var fontFamily = styles.getPropertyValue('font-family').match(FONT_FAMILY_PATTERN);
        var fontWeight = styles.getPropertyValue('font-weight');
        var content = styles.getPropertyValue('content');

        if (alreadyProcessedPseudoElement && !fontFamily) {
          // If we've already processed it but the current computed style does not result in a font-family,
          // that probably means that a class name that was previously present to make the icon has been
          // removed. So we now should delete the icon.
          node.removeChild(alreadyProcessedPseudoElement);
          return resolve();
        } else if (fontFamily && content !== 'none' && content !== '') {
          var _content = styles.getPropertyValue('content');

          var prefix = ~['Solid', 'Regular', 'Light', 'Duotone', 'Brands', 'Kit'].indexOf(fontFamily[2]) ? STYLE_TO_PREFIX[fontFamily[2].toLowerCase()] : FONT_WEIGHT_TO_PREFIX[fontWeight];
          var hexValue = toHex(_content.length === 3 ? _content.substr(1, 1) : _content);
          var iconName = byUnicode(prefix, hexValue);
          var iconIdentifier = iconName; // Only convert the pseudo element in this :before/:after position into an icon if we haven't
          // already done so with the same prefix and iconName

          if (iconName && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {
            node.setAttribute(pendingAttribute, iconIdentifier);

            if (alreadyProcessedPseudoElement) {
              // Delete the old one, since we're replacing it with a new one
              node.removeChild(alreadyProcessedPseudoElement);
            }

            var meta = blankMeta();
            var extra = meta.extra;
            extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;
            findIcon(iconName, prefix).then(function (main) {
              var abstract = makeInlineSvgAbstract(_objectSpread({}, meta, {
                icons: {
                  main: main,
                  mask: emptyCanonicalIcon()
                },
                prefix: prefix,
                iconName: iconIdentifier,
                extra: extra,
                watchable: true
              }));
              var element = DOCUMENT.createElement('svg');

              if (position === ':before') {
                node.insertBefore(element, node.firstChild);
              } else {
                node.appendChild(element);
              }

              element.outerHTML = abstract.map(function (a) {
                return toHtml(a);
              }).join('\n');
              node.removeAttribute(pendingAttribute);
              resolve();
            }).catch(reject);
          } else {
            resolve();
          }
        } else {
          resolve();
        }
      });
    }

    function replace(node) {
      return picked.all([replaceForPosition(node, ':before'), replaceForPosition(node, ':after')]);
    }

    function processable(node) {
      return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== 'svg');
    }

    function searchPseudoElements(root) {
      if (!IS_DOM) return;
      return new picked(function (resolve, reject) {
        var operations = toArray(root.querySelectorAll('*')).filter(processable).map(replace);
        var end = perf.begin('searchPseudoElements');
        disableObservation();
        picked.all(operations).then(function () {
          end();
          enableObservation();
          resolve();
        }).catch(function () {
          end();
          enableObservation();
          reject();
        });
      });
    }

    var baseStyles = "svg:not(:root).svg-inline--fa {\n  overflow: visible;\n}\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.225em;\n}\n.svg-inline--fa.fa-w-1 {\n  width: 0.0625em;\n}\n.svg-inline--fa.fa-w-2 {\n  width: 0.125em;\n}\n.svg-inline--fa.fa-w-3 {\n  width: 0.1875em;\n}\n.svg-inline--fa.fa-w-4 {\n  width: 0.25em;\n}\n.svg-inline--fa.fa-w-5 {\n  width: 0.3125em;\n}\n.svg-inline--fa.fa-w-6 {\n  width: 0.375em;\n}\n.svg-inline--fa.fa-w-7 {\n  width: 0.4375em;\n}\n.svg-inline--fa.fa-w-8 {\n  width: 0.5em;\n}\n.svg-inline--fa.fa-w-9 {\n  width: 0.5625em;\n}\n.svg-inline--fa.fa-w-10 {\n  width: 0.625em;\n}\n.svg-inline--fa.fa-w-11 {\n  width: 0.6875em;\n}\n.svg-inline--fa.fa-w-12 {\n  width: 0.75em;\n}\n.svg-inline--fa.fa-w-13 {\n  width: 0.8125em;\n}\n.svg-inline--fa.fa-w-14 {\n  width: 0.875em;\n}\n.svg-inline--fa.fa-w-15 {\n  width: 0.9375em;\n}\n.svg-inline--fa.fa-w-16 {\n  width: 1em;\n}\n.svg-inline--fa.fa-w-17 {\n  width: 1.0625em;\n}\n.svg-inline--fa.fa-w-18 {\n  width: 1.125em;\n}\n.svg-inline--fa.fa-w-19 {\n  width: 1.1875em;\n}\n.svg-inline--fa.fa-w-20 {\n  width: 1.25em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-border {\n  height: 1.5em;\n}\n.svg-inline--fa.fa-li {\n  width: 2em;\n}\n.svg-inline--fa.fa-fw {\n  width: 1.25em;\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: 0.25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-lg {\n  font-size: 1.3333333333em;\n  line-height: 0.75em;\n  vertical-align: -0.0667em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit;\n}\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: 0.1em;\n  padding: 0.2em 0.25em 0.15em;\n}\n\n.fa-pull-left {\n  float: left;\n}\n\n.fa-pull-right {\n  float: right;\n}\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: 0.3em;\n}\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: 0.3em;\n}\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear;\n}\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8);\n}\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both, .fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical,\n:root .fa-flip-both {\n  -webkit-filter: none;\n          filter: none;\n}\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: #fff;\n}\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse {\n  color: #fff;\n}";

    function css() {
      var dfp = DEFAULT_FAMILY_PREFIX;
      var drc = DEFAULT_REPLACEMENT_CLASS;
      var fp = config.familyPrefix;
      var rc = config.replacementClass;
      var s = baseStyles;

      if (fp !== dfp || rc !== drc) {
        var dPatt = new RegExp("\\.".concat(dfp, "\\-"), 'g');
        var customPropPatt = new RegExp("\\--".concat(dfp, "\\-"), 'g');
        var rPatt = new RegExp("\\.".concat(drc), 'g');
        s = s.replace(dPatt, ".".concat(fp, "-")).replace(customPropPatt, "--".concat(fp, "-")).replace(rPatt, ".".concat(rc));
      }

      return s;
    }

    var Library = /*#__PURE__*/function () {
      function Library() {
        _classCallCheck(this, Library);

        this.definitions = {};
      }

      _createClass(Library, [{
        key: "add",
        value: function add() {
          var _this = this;

          for (var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++) {
            definitions[_key] = arguments[_key];
          }

          var additions = definitions.reduce(this._pullDefinitions, {});
          Object.keys(additions).forEach(function (key) {
            _this.definitions[key] = _objectSpread({}, _this.definitions[key] || {}, additions[key]);
            defineIcons(key, additions[key]);
            build();
          });
        }
      }, {
        key: "reset",
        value: function reset() {
          this.definitions = {};
        }
      }, {
        key: "_pullDefinitions",
        value: function _pullDefinitions(additions, definition) {
          var normalized = definition.prefix && definition.iconName && definition.icon ? {
            0: definition
          } : definition;
          Object.keys(normalized).map(function (key) {
            var _normalized$key = normalized[key],
                prefix = _normalized$key.prefix,
                iconName = _normalized$key.iconName,
                icon = _normalized$key.icon;
            if (!additions[prefix]) additions[prefix] = {};
            additions[prefix][iconName] = icon;
          });
          return additions;
        }
      }]);

      return Library;
    }();

    function ensureCss() {
      if (config.autoAddCss && !_cssInserted) {
        insertCss(css());
        _cssInserted = true;
      }
    }

    function apiObject(val, abstractCreator) {
      Object.defineProperty(val, 'abstract', {
        get: abstractCreator
      });
      Object.defineProperty(val, 'html', {
        get: function get() {
          return val.abstract.map(function (a) {
            return toHtml(a);
          });
        }
      });
      Object.defineProperty(val, 'node', {
        get: function get() {
          if (!IS_DOM) return;
          var container = DOCUMENT.createElement('div');
          container.innerHTML = val.html;
          return container.children;
        }
      });
      return val;
    }

    function findIconDefinition(iconLookup) {
      var _iconLookup$prefix = iconLookup.prefix,
          prefix = _iconLookup$prefix === void 0 ? 'fa' : _iconLookup$prefix,
          iconName = iconLookup.iconName;
      if (!iconName) return;
      return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);
    }

    function resolveIcons(next) {
      return function (maybeIconDefinition) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});
        var mask = params.mask;

        if (mask) {
          mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});
        }

        return next(iconDefinition, _objectSpread({}, params, {
          mask: mask
        }));
      };
    }

    var library = new Library();
    exports.library = library;

    var noAuto = function noAuto() {
      config.autoReplaceSvg = false;
      config.observeMutations = false;
      disconnect();
    };

    exports.noAuto = noAuto;
    var _cssInserted = false;
    var dom = {
      i2svg: function i2svg() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (IS_DOM) {
          ensureCss();
          var _params$node = params.node,
              node = _params$node === void 0 ? DOCUMENT : _params$node,
              _params$callback = params.callback,
              callback = _params$callback === void 0 ? function () {} : _params$callback;

          if (config.searchPseudoElements) {
            searchPseudoElements(node);
          }

          return onTree(node, callback);
        } else {
          return picked.reject('Operation requires a DOM of some kind.');
        }
      },
      css: css,
      insertCss: function insertCss$$1() {
        if (!_cssInserted) {
          insertCss(css());
          _cssInserted = true;
        }
      },
      watch: function watch() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var autoReplaceSvgRoot = params.autoReplaceSvgRoot,
            observeMutationsRoot = params.observeMutationsRoot;

        if (config.autoReplaceSvg === false) {
          config.autoReplaceSvg = true;
        }

        config.observeMutations = true;
        domready(function () {
          autoReplace({
            autoReplaceSvgRoot: autoReplaceSvgRoot
          });
          observe({
            treeCallback: onTree,
            nodeCallback: onNode,
            pseudoElementsCallback: searchPseudoElements,
            observeMutationsRoot: observeMutationsRoot
          });
        });
      }
    };
    exports.dom = dom;
    var parse = {
      transform: function transform(transformString) {
        return parseTransformString(transformString);
      }
    };
    exports.parse = parse;
    var icon = resolveIcons(function (iconDefinition) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _params$transform = params.transform,
          transform = _params$transform === void 0 ? meaninglessTransform : _params$transform,
          _params$symbol = params.symbol,
          symbol = _params$symbol === void 0 ? false : _params$symbol,
          _params$mask = params.mask,
          mask = _params$mask === void 0 ? null : _params$mask,
          _params$maskId = params.maskId,
          maskId = _params$maskId === void 0 ? null : _params$maskId,
          _params$title = params.title,
          title = _params$title === void 0 ? null : _params$title,
          _params$titleId = params.titleId,
          titleId = _params$titleId === void 0 ? null : _params$titleId,
          _params$classes = params.classes,
          classes = _params$classes === void 0 ? [] : _params$classes,
          _params$attributes = params.attributes,
          attributes = _params$attributes === void 0 ? {} : _params$attributes,
          _params$styles = params.styles,
          styles = _params$styles === void 0 ? {} : _params$styles;
      if (!iconDefinition) return;
      var prefix = iconDefinition.prefix,
          iconName = iconDefinition.iconName,
          icon = iconDefinition.icon;
      return apiObject(_objectSpread({
        type: 'icon'
      }, iconDefinition), function () {
        ensureCss();

        if (config.autoA11y) {
          if (title) {
            attributes['aria-labelledby'] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
          } else {
            attributes['aria-hidden'] = 'true';
            attributes['focusable'] = 'false';
          }
        }

        return makeInlineSvgAbstract({
          icons: {
            main: asFoundIcon(icon),
            mask: mask ? asFoundIcon(mask.icon) : {
              found: false,
              width: null,
              height: null,
              icon: {}
            }
          },
          prefix: prefix,
          iconName: iconName,
          transform: _objectSpread({}, meaninglessTransform, transform),
          symbol: symbol,
          title: title,
          maskId: maskId,
          titleId: titleId,
          extra: {
            attributes: attributes,
            styles: styles,
            classes: classes
          }
        });
      });
    });
    exports.icon = icon;

    var text = function text(content) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _params$transform2 = params.transform,
          transform = _params$transform2 === void 0 ? meaninglessTransform : _params$transform2,
          _params$title2 = params.title,
          title = _params$title2 === void 0 ? null : _params$title2,
          _params$classes2 = params.classes,
          classes = _params$classes2 === void 0 ? [] : _params$classes2,
          _params$attributes2 = params.attributes,
          attributes = _params$attributes2 === void 0 ? {} : _params$attributes2,
          _params$styles2 = params.styles,
          styles = _params$styles2 === void 0 ? {} : _params$styles2;
      return apiObject({
        type: 'text',
        content: content
      }, function () {
        ensureCss();
        return makeLayersTextAbstract({
          content: content,
          transform: _objectSpread({}, meaninglessTransform, transform),
          title: title,
          extra: {
            attributes: attributes,
            styles: styles,
            classes: ["".concat(config.familyPrefix, "-layers-text")].concat(_toConsumableArray(classes))
          }
        });
      });
    };

    exports.text = text;

    var counter = function counter(content) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _params$title3 = params.title,
          title = _params$title3 === void 0 ? null : _params$title3,
          _params$classes3 = params.classes,
          classes = _params$classes3 === void 0 ? [] : _params$classes3,
          _params$attributes3 = params.attributes,
          attributes = _params$attributes3 === void 0 ? {} : _params$attributes3,
          _params$styles3 = params.styles,
          styles = _params$styles3 === void 0 ? {} : _params$styles3;
      return apiObject({
        type: 'counter',
        content: content
      }, function () {
        ensureCss();
        return makeLayersCounterAbstract({
          content: content.toString(),
          title: title,
          extra: {
            attributes: attributes,
            styles: styles,
            classes: ["".concat(config.familyPrefix, "-layers-counter")].concat(_toConsumableArray(classes))
          }
        });
      });
    };

    exports.counter = counter;

    var layer = function layer(assembler) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _params$classes4 = params.classes,
          classes = _params$classes4 === void 0 ? [] : _params$classes4;
      return apiObject({
        type: 'layer'
      }, function () {
        ensureCss();
        var children = [];
        assembler(function (args) {
          Array.isArray(args) ? args.map(function (a) {
            children = children.concat(a.abstract);
          }) : children = children.concat(args.abstract);
        });
        return [{
          tag: 'span',
          attributes: {
            class: ["".concat(config.familyPrefix, "-layers")].concat(_toConsumableArray(classes)).join(' ')
          },
          children: children
        }];
      });
    };

    exports.layer = layer;
    var api = {
      noAuto: noAuto,
      config: config,
      dom: dom,
      library: library,
      parse: parse,
      findIconDefinition: findIconDefinition,
      icon: icon,
      text: text,
      counter: counter,
      layer: layer,
      toHtml: toHtml
    };

    var autoReplace = function autoReplace() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _params$autoReplaceSv = params.autoReplaceSvgRoot,
          autoReplaceSvgRoot = _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;
      if ((Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) && IS_DOM && config.autoReplaceSvg) api.dom.i2svg({
        node: autoReplaceSvgRoot
      });
    };
  }, {}],
  "../node_modules/@fortawesome/react-fontawesome/index.es.js": [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FontAwesomeIcon = FontAwesomeIcon;

    var _fontawesomeSvgCore = require("@fortawesome/fontawesome-svg-core");

    var _propTypes = _interopRequireDefault(require("prop-types"));

    var _react = _interopRequireDefault(require("react"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _typeof(obj) {
      if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
        _typeof = function _typeof(obj) {
          return _typeof3(obj);
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
        };
      }

      return _typeof(obj);
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};

      var target = _objectWithoutPropertiesLoose(source, excluded);

      var key, i;

      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }

      return target;
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }
    }

    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    } // Get CSS class list from a props object


    function classList(props) {
      var _classes;

      var spin = props.spin,
          pulse = props.pulse,
          fixedWidth = props.fixedWidth,
          inverse = props.inverse,
          border = props.border,
          listItem = props.listItem,
          flip = props.flip,
          size = props.size,
          rotation = props.rotation,
          pull = props.pull; // map of CSS class names to properties

      var classes = (_classes = {
        'fa-spin': spin,
        'fa-pulse': pulse,
        'fa-fw': fixedWidth,
        'fa-inverse': inverse,
        'fa-border': border,
        'fa-li': listItem,
        'fa-flip-horizontal': flip === 'horizontal' || flip === 'both',
        'fa-flip-vertical': flip === 'vertical' || flip === 'both'
      }, _defineProperty(_classes, "fa-".concat(size), typeof size !== 'undefined' && size !== null), _defineProperty(_classes, "fa-rotate-".concat(rotation), typeof rotation !== 'undefined' && rotation !== null && rotation !== 0), _defineProperty(_classes, "fa-pull-".concat(pull), typeof pull !== 'undefined' && pull !== null), _defineProperty(_classes, 'fa-swap-opacity', props.swapOpacity), _classes); // map over all the keys in the classes object
      // return an array of the keys where the value for the key is not null

      return Object.keys(classes).map(function (key) {
        return classes[key] ? key : null;
      }).filter(function (key) {
        return key;
      });
    } // Camelize taken from humps
    // humps is copyright © 2012+ Dom Christie
    // Released under the MIT license.
    // Performant way to determine if object coerces to a number


    function _isNumerical(obj) {
      obj = obj - 0; // eslint-disable-next-line no-self-compare

      return obj === obj;
    }

    function camelize(string) {
      if (_isNumerical(string)) {
        return string;
      } // eslint-disable-next-line no-useless-escape


      string = string.replace(/[\-_\s]+(.)?/g, function (match, chr) {
        return chr ? chr.toUpperCase() : '';
      }); // Ensure 1st char is always lowercase

      return string.substr(0, 1).toLowerCase() + string.substr(1);
    }

    function capitalize(val) {
      return val.charAt(0).toUpperCase() + val.slice(1);
    }

    function styleToObject(style) {
      return style.split(';').map(function (s) {
        return s.trim();
      }).filter(function (s) {
        return s;
      }).reduce(function (acc, pair) {
        var i = pair.indexOf(':');
        var prop = camelize(pair.slice(0, i));
        var value = pair.slice(i + 1).trim();
        prop.startsWith('webkit') ? acc[capitalize(prop)] = value : acc[prop] = value;
        return acc;
      }, {});
    }

    function convert(createElement, element) {
      var extraProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (typeof element === 'string') {
        return element;
      }

      var children = (element.children || []).map(function (child) {
        return convert(createElement, child);
      });
      /* eslint-disable dot-notation */

      var mixins = Object.keys(element.attributes || {}).reduce(function (acc, key) {
        var val = element.attributes[key];

        switch (key) {
          case 'class':
            acc.attrs['className'] = val;
            delete element.attributes['class'];
            break;

          case 'style':
            acc.attrs['style'] = styleToObject(val);
            break;

          default:
            if (key.indexOf('aria-') === 0 || key.indexOf('data-') === 0) {
              acc.attrs[key.toLowerCase()] = val;
            } else {
              acc.attrs[camelize(key)] = val;
            }

        }

        return acc;
      }, {
        attrs: {}
      });

      var _extraProps$style = extraProps.style,
          existingStyle = _extraProps$style === void 0 ? {} : _extraProps$style,
          remaining = _objectWithoutProperties(extraProps, ["style"]);

      mixins.attrs['style'] = _objectSpread2({}, mixins.attrs['style'], {}, existingStyle);
      /* eslint-enable */

      return createElement.apply(void 0, [element.tag, _objectSpread2({}, mixins.attrs, {}, remaining)].concat(_toConsumableArray(children)));
    }

    var PRODUCTION = false;

    try {
      PRODUCTION = "development" === 'production';
    } catch (e) {}

    function log() {
      if (!PRODUCTION && console && typeof console.error === 'function') {
        var _console;

        (_console = console).error.apply(_console, arguments);
      }
    }

    function normalizeIconArgs(icon) {
      if (_fontawesomeSvgCore.parse.icon) {
        return _fontawesomeSvgCore.parse.icon(icon);
      } // if the icon is null, there's nothing to do


      if (icon === null) {
        return null;
      } // if the icon is an object and has a prefix and an icon name, return it


      if (_typeof(icon) === 'object' && icon.prefix && icon.iconName) {
        return icon;
      } // if it's an array with length of two


      if (Array.isArray(icon) && icon.length === 2) {
        // use the first item as prefix, second as icon name
        return {
          prefix: icon[0],
          iconName: icon[1]
        };
      } // if it's a string, use it as the icon name


      if (typeof icon === 'string') {
        return {
          prefix: 'fas',
          iconName: icon
        };
      }
    } // creates an object with a key of key
    // and a value of value
    // if certain conditions are met


    function objectWithKey(key, value) {
      // if the value is a non-empty array
      // or it's not an array but it is truthy
      // then create the object with the key and the value
      // if not, return an empty array
      return Array.isArray(value) && value.length > 0 || !Array.isArray(value) && value ? _defineProperty({}, key, value) : {};
    }

    function FontAwesomeIcon(_ref) {
      var forwardedRef = _ref.forwardedRef,
          props = _objectWithoutProperties(_ref, ["forwardedRef"]);

      var iconArgs = props.icon,
          maskArgs = props.mask,
          symbol = props.symbol,
          className = props.className,
          title = props.title,
          titleId = props.titleId;
      var iconLookup = normalizeIconArgs(iconArgs);
      var classes = objectWithKey('classes', [].concat(_toConsumableArray(classList(props)), _toConsumableArray(className.split(' '))));
      var transform = objectWithKey('transform', typeof props.transform === 'string' ? _fontawesomeSvgCore.parse.transform(props.transform) : props.transform);
      var mask = objectWithKey('mask', normalizeIconArgs(maskArgs));
      var renderedIcon = (0, _fontawesomeSvgCore.icon)(iconLookup, _objectSpread2({}, classes, {}, transform, {}, mask, {
        symbol: symbol,
        title: title,
        titleId: titleId
      }));

      if (!renderedIcon) {
        log('Could not find icon', iconLookup);
        return null;
      }

      var abstract = renderedIcon.abstract;
      var extraProps = {
        ref: forwardedRef
      };
      Object.keys(props).forEach(function (key) {
        // eslint-disable-next-line no-prototype-builtins
        if (!FontAwesomeIcon.defaultProps.hasOwnProperty(key)) {
          extraProps[key] = props[key];
        }
      });
      return convertCurry(abstract[0], extraProps);
    }

    FontAwesomeIcon.displayName = 'FontAwesomeIcon';
    FontAwesomeIcon.propTypes = {
      border: _propTypes.default.bool,
      className: _propTypes.default.string,
      mask: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array, _propTypes.default.string]),
      fixedWidth: _propTypes.default.bool,
      inverse: _propTypes.default.bool,
      flip: _propTypes.default.oneOf(['horizontal', 'vertical', 'both']),
      icon: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array, _propTypes.default.string]),
      listItem: _propTypes.default.bool,
      pull: _propTypes.default.oneOf(['right', 'left']),
      pulse: _propTypes.default.bool,
      rotation: _propTypes.default.oneOf([0, 90, 180, 270]),
      size: _propTypes.default.oneOf(['lg', 'xs', 'sm', '1x', '2x', '3x', '4x', '5x', '6x', '7x', '8x', '9x', '10x']),
      spin: _propTypes.default.bool,
      symbol: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      title: _propTypes.default.string,
      transform: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
      swapOpacity: _propTypes.default.bool
    };
    FontAwesomeIcon.defaultProps = {
      border: false,
      className: '',
      mask: null,
      fixedWidth: false,
      inverse: false,
      flip: null,
      icon: null,
      listItem: false,
      pull: null,
      pulse: false,
      rotation: null,
      size: null,
      spin: false,
      symbol: false,
      title: '',
      transform: null,
      swapOpacity: false
    };
    var convertCurry = convert.bind(null, _react.default.createElement);
  }, {
    "@fortawesome/fontawesome-svg-core": "../node_modules/@fortawesome/fontawesome-svg-core/index.es.js",
    "prop-types": "../node_modules/prop-types/index.js",
    "react": "../node_modules/react/index.js"
  }],
  "components/HomeCard/HomeCard.tsx": [function (require, module, exports) {
    "use strict";

    var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, {
        enumerable: true,
        get: function get() {
          return m[k];
        }
      });
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });

    var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    });

    var __importStar = this && this.__importStar || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) {
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }

      __setModuleDefault(result, mod);

      return result;
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.HomeCard = void 0;

    var react_1 = __importStar(require("react"));

    var react_router_dom_1 = require("react-router-dom");

    var free_solid_svg_icons_1 = require("@fortawesome/free-solid-svg-icons");

    var react_fontawesome_1 = require("@fortawesome/react-fontawesome");

    exports.HomeCard = function (_a) {
      var title = _a.title;
      var history = react_router_dom_1.useHistory();

      var handleSelect = function handleSelect() {
        history.push("/" + title);
      };

      var Icon = react_1.useMemo(function () {
        switch (title) {
          case "workouts":
            return react_1.default.createElement(react_fontawesome_1.FontAwesomeIcon, {
              icon: free_solid_svg_icons_1.faDumbbell
            });

          case "food":
            return react_1.default.createElement(react_fontawesome_1.FontAwesomeIcon, {
              icon: free_solid_svg_icons_1.faUtensils
            });

          case "calendar":
            return react_1.default.createElement(react_fontawesome_1.FontAwesomeIcon, {
              icon: free_solid_svg_icons_1.faCalendar
            });

          default:
            throw new Error("Invalid title was provided: " + title);
        }
      }, [title]);
      return react_1.default.createElement("div", {
        className: "HomeCard",
        onClick: handleSelect
      }, title.toUpperCase(), Icon);
    };
  }, {
    "react": "../node_modules/react/index.js",
    "react-router-dom": "../node_modules/react-router-dom/esm/react-router-dom.js",
    "@fortawesome/free-solid-svg-icons": "../node_modules/@fortawesome/free-solid-svg-icons/index.es.js",
    "@fortawesome/react-fontawesome": "../node_modules/@fortawesome/react-fontawesome/index.es.js"
  }],
  "views/HomeView.tsx": [function (require, module, exports) {
    "use strict";

    var __importDefault = this && this.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.HomeView = void 0;

    var react_1 = __importDefault(require("react"));

    var Header_1 = require("../components/Header/Header");

    var HomeCard_1 = require("../components/HomeCard/HomeCard");

    exports.HomeView = function () {
      var renderCard = function renderCard() {};

      return react_1.default.createElement("div", {
        className: "HomeView"
      }, react_1.default.createElement(Header_1.Header, null), react_1.default.createElement("div", {
        className: "HomeView-Content"
      }, react_1.default.createElement(HomeCard_1.HomeCard, {
        title: "workouts"
      }), react_1.default.createElement(HomeCard_1.HomeCard, {
        title: "food"
      }), react_1.default.createElement(HomeCard_1.HomeCard, {
        title: "calendar"
      })));
    };
  }, {
    "react": "../node_modules/react/index.js",
    "../components/Header/Header": "components/Header/Header.tsx",
    "../components/HomeCard/HomeCard": "components/HomeCard/HomeCard.tsx"
  }],
  "views/Main.tsx": [function (require, module, exports) {
    "use strict";

    var __importDefault = this && this.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Main = void 0;

    var client_1 = require("@apollo/client");

    var react_1 = __importDefault(require("react"));

    var react_router_dom_1 = require("react-router-dom");

    var client_2 = require("../api/client");

    var Login_1 = require("../components/Login/Login");

    var HomeView_1 = require("./HomeView");

    exports.Main = function () {
      console.log("TEST Again, once more. Here we go.");
      return react_1.default.createElement(client_1.ApolloProvider, {
        client: client_2.client
      }, react_1.default.createElement(react_router_dom_1.BrowserRouter, null, react_1.default.createElement(react_router_dom_1.Switch, null, react_1.default.createElement(react_router_dom_1.Route, {
        path: "/",
        exact: true,
        component: Login_1.Login
      }), react_1.default.createElement(react_router_dom_1.Route, {
        path: "/home",
        component: HomeView_1.HomeView
      }))));
    };
  }, {
    "@apollo/client": "../node_modules/@apollo/client/index.js",
    "react": "../node_modules/react/index.js",
    "react-router-dom": "../node_modules/react-router-dom/esm/react-router-dom.js",
    "../api/client": "api/client.ts",
    "../components/Login/Login": "components/Login/Login.tsx",
    "./HomeView": "views/HomeView.tsx"
  }],
  "../node_modules/parcel-bundler/src/builtins/bundle-url.js": [function (require, module, exports) {
    var bundleURL = null;

    function getBundleURLCached() {
      if (!bundleURL) {
        bundleURL = getBundleURL();
      }

      return bundleURL;
    }

    function getBundleURL() {
      // Attempt to find the URL of the current script and use that as the base URL
      try {
        throw new Error();
      } catch (err) {
        var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

        if (matches) {
          return getBaseURL(matches[0]);
        }
      }

      return '/';
    }

    function getBaseURL(url) {
      return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
    }

    exports.getBundleURL = getBundleURLCached;
    exports.getBaseURL = getBaseURL;
  }, {}],
  "../node_modules/parcel-bundler/src/builtins/css-loader.js": [function (require, module, exports) {
    var bundle = require('./bundle-url');

    function updateLink(link) {
      var newLink = link.cloneNode();

      newLink.onload = function () {
        link.remove();
      };

      newLink.href = link.href.split('?')[0] + '?' + Date.now();
      link.parentNode.insertBefore(newLink, link.nextSibling);
    }

    var cssTimeout = null;

    function reloadCSS() {
      if (cssTimeout) {
        return;
      }

      cssTimeout = setTimeout(function () {
        var links = document.querySelectorAll('link[rel="stylesheet"]');

        for (var i = 0; i < links.length; i++) {
          if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
            updateLink(links[i]);
          }
        }

        cssTimeout = null;
      }, 50);
    }

    module.exports = reloadCSS;
  }, {
    "./bundle-url": "../node_modules/parcel-bundler/src/builtins/bundle-url.js"
  }],
  "index.scss": [function (require, module, exports) {
    var reloadCSS = require('_css_loader');

    module.hot.dispose(reloadCSS);
    module.hot.accept(reloadCSS);
  }, {
    "_css_loader": "../node_modules/parcel-bundler/src/builtins/css-loader.js"
  }],
  "index.tsx": [function (require, module, exports) {
    "use strict";

    var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, {
        enumerable: true,
        get: function get() {
          return m[k];
        }
      });
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });

    var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    });

    var __importStar = this && this.__importStar || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) {
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }

      __setModuleDefault(result, mod);

      return result;
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var React = __importStar(require("react"));

    var react_dom_1 = require("react-dom");

    var Main_1 = require("./views/Main");

    require("./index.scss");

    react_dom_1.render(React.createElement(Main_1.Main, null), document.getElementById("root"));
  }, {
    "react": "../node_modules/react/index.js",
    "react-dom": "../node_modules/react-dom/index.js",
    "./views/Main": "views/Main.tsx",
    "./index.scss": "index.scss"
  }],
  "../node_modules/parcel-bundler/src/builtins/hmr-runtime.js": [function (require, module, exports) {
    var global = arguments[3];
    var OVERLAY_ID = '__parcel__error__overlay__';
    var OldModule = module.bundle.Module;

    function Module(moduleName) {
      OldModule.call(this, moduleName);
      this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
          this._acceptCallbacks.push(fn || function () {});
        },
        dispose: function dispose(fn) {
          this._disposeCallbacks.push(fn);
        }
      };
      module.bundle.hotData = null;
    }

    module.bundle.Module = Module;
    var checkedAssets, assetsToAccept;
    var parent = module.bundle.parent;

    if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
      var hostname = "" || location.hostname;
      var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
      var ws = new WebSocket(protocol + '://' + hostname + ':' + "52647" + '/');

      ws.onmessage = function (event) {
        checkedAssets = {};
        assetsToAccept = [];
        var data = JSON.parse(event.data);

        if (data.type === 'update') {
          var handled = false;
          data.assets.forEach(function (asset) {
            if (!asset.isNew) {
              var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

              if (didAccept) {
                handled = true;
              }
            }
          }); // Enable HMR for CSS by default.

          handled = handled || data.assets.every(function (asset) {
            return asset.type === 'css' && asset.generated.js;
          });

          if (handled) {
            console.clear();
            data.assets.forEach(function (asset) {
              hmrApply(global.parcelRequire, asset);
            });
            assetsToAccept.forEach(function (v) {
              hmrAcceptRun(v[0], v[1]);
            });
          } else if (location.reload) {
            // `location` global exists in a web worker context but lacks `.reload()` function.
            location.reload();
          }
        }

        if (data.type === 'reload') {
          ws.close();

          ws.onclose = function () {
            location.reload();
          };
        }

        if (data.type === 'error-resolved') {
          console.log('[parcel] ✨ Error resolved');
          removeErrorOverlay();
        }

        if (data.type === 'error') {
          console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
          removeErrorOverlay();
          var overlay = createErrorOverlay(data);
          document.body.appendChild(overlay);
        }
      };
    }

    function removeErrorOverlay() {
      var overlay = document.getElementById(OVERLAY_ID);

      if (overlay) {
        overlay.remove();
      }
    }

    function createErrorOverlay(data) {
      var overlay = document.createElement('div');
      overlay.id = OVERLAY_ID; // html encode message and stack trace

      var message = document.createElement('div');
      var stackTrace = document.createElement('pre');
      message.innerText = data.error.message;
      stackTrace.innerText = data.error.stack;
      overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
      return overlay;
    }

    function getParents(bundle, id) {
      var modules = bundle.modules;

      if (!modules) {
        return [];
      }

      var parents = [];
      var k, d, dep;

      for (k in modules) {
        for (d in modules[k][1]) {
          dep = modules[k][1][d];

          if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
            parents.push(k);
          }
        }
      }

      if (bundle.parent) {
        parents = parents.concat(getParents(bundle.parent, id));
      }

      return parents;
    }

    function hmrApply(bundle, asset) {
      var modules = bundle.modules;

      if (!modules) {
        return;
      }

      if (modules[asset.id] || !bundle.parent) {
        var fn = new Function('require', 'module', 'exports', asset.generated.js);
        asset.isNew = !modules[asset.id];
        modules[asset.id] = [fn, asset.deps];
      } else if (bundle.parent) {
        hmrApply(bundle.parent, asset);
      }
    }

    function hmrAcceptCheck(bundle, id) {
      var modules = bundle.modules;

      if (!modules) {
        return;
      }

      if (!modules[id] && bundle.parent) {
        return hmrAcceptCheck(bundle.parent, id);
      }

      if (checkedAssets[id]) {
        return;
      }

      checkedAssets[id] = true;
      var cached = bundle.cache[id];
      assetsToAccept.push([bundle, id]);

      if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        return true;
      }

      return getParents(global.parcelRequire, id).some(function (id) {
        return hmrAcceptCheck(global.parcelRequire, id);
      });
    }

    function hmrAcceptRun(bundle, id) {
      var cached = bundle.cache[id];
      bundle.hotData = {};

      if (cached) {
        cached.hot.data = bundle.hotData;
      }

      if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
        cached.hot._disposeCallbacks.forEach(function (cb) {
          cb(bundle.hotData);
        });
      }

      delete bundle.cache[id];
      bundle(id);
      cached = bundle.cache[id];

      if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        cached.hot._acceptCallbacks.forEach(function (cb) {
          cb();
        });

        return true;
      }
    }
  }, {}]
}, {}, ["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js", "index.tsx"], null);
},{"process":"../node_modules/process/browser.js"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "52648" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","app.js"], null)
//# sourceMappingURL=/app.c328ef1a.js.map